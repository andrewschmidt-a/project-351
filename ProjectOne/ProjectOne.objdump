
ProjectOne.elf:     file format elf32-littlenios2
ProjectOne.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001d0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000da6c memsz 0x0000da6c flags r-x
    LOAD off    0x0000ea8c vaddr 0x0000da8c paddr 0x0000f4ec align 2**12
         filesz 0x00001a60 memsz 0x00001a60 flags rw-
    LOAD off    0x00010f4c vaddr 0x00010f4c paddr 0x00010f4c align 2**12
         filesz 0x00000000 memsz 0x00000460 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001b0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d49c  000001d0  000001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000420  0000d66c  0000d66c  0000e66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a60  0000da8c  0000f4ec  0000ea8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000460  00010f4c  00010f4c  00010f4c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000104ec  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d78  00000000  00000000  00010518  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001512  00000000  00000000  00011290  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025916  00000000  00000000  000127a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008251  00000000  00000000  000380b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001495b  00000000  00000000  00040309  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a94  00000000  00000000  00054c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002353  00000000  00000000  000566f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c315  00000000  00000000  00058a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00064d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00064d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00068906  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00068909  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006890c  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006890d  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00068911  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00068915  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00068919  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00068922  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0006892b  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00068934  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000028  00000000  00000000  0006893f  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006a1c7  00000000  00000000  00068967  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001d0 l    d  .text	00000000 .text
0000d66c l    d  .rodata	00000000 .rodata
0000da8c l    d  .rwdata	00000000 .rwdata
00010f4c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000208 l       .text	00000000 alt_after_alt_main
000000b4 l       .exceptions	00000000 GOTO
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alarm_handler.c
00000000 l    df *ABS*	00000000 project1.c
00000000 l    df *ABS*	00000000 tcb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000bc8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000016c4 l     F .text	00000058 __sprint_r
0000d7c2 l     O .rodata	00000010 blanks.3452
0000d7b2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003740 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005168 l     F .text	00000058 std
00005274 l     F .text	00000008 __fp_lock
0000527c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000de94 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000f4c0 l     O .rwdata	00000004 charset
0000d7f8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000d940 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00008e78 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a8b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000a910 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000aa14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ab38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ac18 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ad78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b240 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000f4dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b69c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e448 l     O .rwdata	00001060 JTAG_UART
0000b78c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b9cc l     F .text	00000228 altera_avalon_jtag_uart_irq
0000bbf4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c270 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c440 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c850 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c9a0 l     F .text	000000f8 alt_file_locked
0000cc24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000d454 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000d608 l     F .text	00000040 alt_sim_halt
00006818 g     F .text	00000094 _mprec_log10
00006904 g     F .text	00000088 __any_on
0000804c g     F .text	00000070 _isatty_r
0000d918 g     O .rodata	00000028 __mprec_tinytens
0000add8 g     F .text	0000006c alt_main
0000152c g     F .text	000000a0 _puts_r
0001111c g     O .bss	00000100 alt_irq
000080bc g     F .text	00000078 _lseek_r
0000f4ec g       *ABS*	00000000 __flash_rwdata_start
00009998 g     F .text	00000088 __eqdf2
000113ac g       *ABS*	00000000 __alt_heap_start
000014b4 g     F .text	00000044 printf
00007b04 g     F .text	00000068 __sseek
000051d0 g     F .text	000000a4 __sinit
0000d1d4 g     F .text	00000130 __swbuf_r
00005edc g     F .text	00000084 _setlocale_r
000052d0 g     F .text	0000009c __sfmoreglue
0000ae64 g     F .text	00000020 __malloc_unlock
00000254 g     F .text	00000060 initialize_alarm
00006294 g     F .text	000000e0 memmove
000052c0 g     F .text	00000010 _cleanup
0000698c g     F .text	000000bc _Balloc
00009aa8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007fd8 g     F .text	00000074 _fstat_r
00010f64 g     O .bss	00000004 errno
00010f78 g     O .bss	00000004 alt_argv
000174a8 g       *ABS*	00000000 _gp
0000e2c8 g     O .rwdata	00000180 alt_fd_list
0000cca4 g     F .text	00000094 alt_find_dev
000061f4 g     F .text	000000a0 memcpy
000052b4 g     F .text	0000000c _cleanup_r
00009c40 g     F .text	000000f8 __floatsidf
0000043c g     F .text	00000054 check_interrupt
0000c928 g     F .text	00000078 alt_io_redirect
00009bb8 g     F .text	00000088 __ltdf2
0000d66c g       *ABS*	00000000 __DTOR_END__
000015cc g     F .text	00000014 puts
0000cc84 g     F .text	00000020 altera_nios2_irq_init
00006768 g     F .text	000000b0 __ratio
0000be0c g     F .text	00000224 altera_avalon_jtag_uart_read
00000d60 g     F .text	00000014 malloc
000014f8 g     F .text	00000034 _printf_r
00000d04 g     F .text	00000008 __udivsi3
0000aa74 g     F .text	000000c4 isatty
0000d828 g     O .rodata	000000c8 __mprec_tens
00005eb8 g     F .text	00000008 __locale_charset
00010f58 g     O .bss	00000004 __malloc_top_pad
000002b4 g     F .text	00000064 reset_alarm
0000f4bc g     O .rwdata	00000004 __mb_cur_max
00005ec0 g     F .text	0000000c _localeconv_r
000070f0 g     F .text	0000003c __i2b
0000589c g     F .text	0000049c __sfvwrite_r
000015e0 g     F .text	00000070 _sbrk_r
00008134 g     F .text	00000078 _read_r
0000e294 g     O .rwdata	0000000c __lc_ctype
0000f4d4 g     O .rwdata	00000004 alt_max_fd
0000a45c g     F .text	00000138 __unpack_d
00007eb4 g     F .text	00000110 _fclose_r
00005134 g     F .text	00000034 fflush
00010fcc g     O .bss	00000150 threads
00010f5c g     O .bss	00000004 __malloc_max_sbrked_mem
00000548 g     F .text	00000084 destroy_thread
00009308 g     F .text	00000074 __adddf3
00006648 g     F .text	00000120 __b2d
00010f50 g     O .bss	00000004 current_thread
00008818 g     F .text	00000660 __umoddi3
0000ac84 g     F .text	000000f4 lseek
0000f4b8 g     O .rwdata	00000004 _global_impure_ptr
00007498 g     F .text	000005f4 _realloc_r
000113ac g       *ABS*	00000000 __bss_end
0000c758 g     F .text	000000f8 alt_iic_isr_register
0000b46c g     F .text	0000010c alt_tick
000081ac g     F .text	0000066c __udivdi3
0000d8f0 g     O .rodata	00000028 __mprec_bigtens
00007378 g     F .text	00000120 __s2b
00009e10 g     F .text	00000194 __floatunsidf
00006568 g     F .text	00000060 __mcmp
0000529c g     F .text	00000018 __fp_lock_all
0000c710 g     F .text	00000048 alt_ic_irq_enabled
00010fb4 g     O .bss	00000018 alarm
0000b3d4 g     F .text	00000098 alt_alarm_stop
00010f88 g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000c8 alt_irq_handler
0000e2a0 g     O .rwdata	00000028 alt_dev_null
0000c370 g     F .text	0000001c alt_dcache_flush_all
00006434 g     F .text	00000070 __hi0bits
00009d38 g     F .text	000000d8 __fixdfsi
0000020c g     F .text	00000048 my_interrupt_handler
0000f4ec g       *ABS*	00000000 __ram_rwdata_end
0000f4cc g     O .rwdata	00000008 alt_dev_list
0000b578 g     F .text	00000124 write
0000d0ec g     F .text	000000e8 _putc_r
0000da8c g       *ABS*	00000000 __ram_rodata_end
0000a93c g     F .text	000000d8 fstat
00000490 g     F .text	00000060 my_thread
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00007258 g     F .text	00000120 __pow5mult
00010f68 g     O .bss	00000004 __nlocale_changed
00000d0c g     F .text	00000008 __umodsi3
000113ac g       *ABS*	00000000 end
0000b90c g     F .text	000000c0 altera_avalon_jtag_uart_init
0000d668 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000c2e0 g     F .text	00000090 alt_avalon_timer_sc_init
0000a0c8 g     F .text	00000080 __clzsi2
000004f0 g     F .text	00000058 join_thread
0000c030 g     F .text	00000240 altera_avalon_jtag_uart_write
000051c0 g     F .text	00000004 __sfp_lock_acquire
00006110 g     F .text	000000e4 memchr
0000171c g     F .text	00001ec4 ___vfprintf_internal_r
00005588 g     F .text	00000314 _free_r
0000ae84 g     F .text	00000258 alt_printf
0000d458 g     F .text	000001b0 __call_exitprocs
00010f6c g     O .bss	00000004 __mlocale_changed
0000f4b0 g     O .rwdata	00000004 __malloc_sbrk_base
000001d0 g     F .text	0000003c _start
00010f80 g     O .bss	00000004 _alt_tick_rate
00006d50 g     F .text	0000014c __lshift
00010f84 g     O .bss	00000004 _alt_nticks
0000b11c g     F .text	00000124 read
0000b730 g     F .text	0000005c alt_sys_init
0000d320 g     F .text	00000134 __register_exitproc
00006e9c g     F .text	00000254 __multiply
0000bca4 g     F .text	00000074 altera_avalon_jtag_uart_close
00000d14 g     F .text	00000038 __mulsi3
0000da8c g       *ABS*	00000000 __ram_rwdata_start
0000d66c g       *ABS*	00000000 __ram_rodata_start
00010f8c g     O .bss	00000028 __malloc_current_mallinfo
00006a48 g     F .text	0000017c __d2b
000005cc g     F .text	00000294 initialize_thread
0000b7c4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000ce58 g     F .text	000000d0 alt_get_fd
0000a594 g     F .text	000000c8 __fpcmp_parts_d
00007e44 g     F .text	00000070 _close_r
0000cf74 g     F .text	00000074 memcmp
0000b874 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000113ac g       *ABS*	00000000 __alt_stack_base
0000b8bc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003604 g     F .text	0000013c __swsetup_r
00009740 g     F .text	00000258 __divdf3
0000536c g     F .text	000000f0 __sfp
000068ac g     F .text	00000058 __copybits
0000da8c g     O .rwdata	00000408 __malloc_av_
000051cc g     F .text	00000004 __sinit_lock_release
0000937c g     F .text	000003c4 __muldf3
00007be8 g     F .text	00000060 __sread
0000f4a8 g     O .rwdata	00000004 first_run
0000cd38 g     F .text	00000120 alt_find_file
0000c38c g     F .text	000000b4 alt_dev_llist_insert
0000ae44 g     F .text	00000020 __malloc_lock
0000b318 g     F .text	000000bc sbrk
00004f38 g     F .text	000001fc _fflush_r
00007d7c g     F .text	000000c8 _calloc_r
00010f4c g       *ABS*	00000000 __bss_start
00006374 g     F .text	00000098 memset
00000318 g     F .text	000000e4 main
00010f7c g     O .bss	00000004 alt_envp
00010f60 g     O .bss	00000004 __malloc_max_total_mem
0000b81c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000d304 g     F .text	0000001c __swbuf
00007afc g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00007fc4 g     F .text	00000014 fclose
0001121c g     O .bss	00000190 _atexit0
00003984 g     F .text	000015b4 _dtoa_r
00000d74 g     F .text	00000740 _malloc_r
0000f4d8 g     O .rwdata	00000004 alt_errno
00005e00 g     F .text	000000b8 _fwalk
0000cfe8 g     F .text	00000104 putc
00000c44 g     F .text	00000060 __divsi3
0000d94c g     O .rodata	00000014 __thenan_df
0000545c g     F .text	0000012c _malloc_trim_r
0000d66c g       *ABS*	00000000 __CTOR_END__
00007c48 g     F .text	000000bc strcmp
0000d66c g       *ABS*	00000000 __flash_rodata_start
0000d66c g       *ABS*	00000000 __DTOR_LIST__
00000860 g     F .text	00000368 my_scheduler
00009a20 g     F .text	00000088 __nedf2
0000b6fc g     F .text	00000034 alt_irq_init
0000b2a0 g     F .text	00000078 alt_release_fd
0000d960 g     O .rodata	00000100 __clz_tab
00010f70 g     O .bss	00000004 _PathLocale
0000cf28 g     F .text	00000014 atexit
00007d04 g     F .text	00000078 _write_r
00005f60 g     F .text	0000001c setlocale
0000f4b4 g     O .rwdata	00000004 _impure_ptr
00010f74 g     O .bss	00000004 alt_argc
00010f4c g     O .bss	00000004 from_handler
0000c504 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000065c8 g     F .text	00000080 __ulp
00007a8c g     F .text	00000040 __isinfd
00005284 g     F .text	00000018 __fp_unlock_all
0000f4c4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005ecc g     F .text	00000010 localeconv
0000c584 g     F .text	00000050 alt_ic_isr_register
0000f4ec g       *ABS*	00000000 _edata
000113ac g       *ABS*	00000000 _end
000001d0 g       *ABS*	00000000 __ram_exceptions_end
0000bd18 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00010f54 g     O .bss	00000004 main_context
000003fc g     F .text	00000040 prototype_os
0000c670 g     F .text	000000a0 alt_ic_irq_disable
00007b6c g     F .text	0000007c __swrite
0000f4ac g     O .rwdata	00000004 __malloc_trim_threshold
0000cf3c g     F .text	00000038 exit
00005d38 g     F .text	000000c8 _fwalk_reent
00006bc4 g     F .text	0000018c __mdiff
00000ca4 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000051c4 g     F .text	00000004 __sfp_lock_release
0000d648 g     F .text	00000020 _exit
00007acc g     F .text	00000030 __isnand
0000a65c g     F .text	00000154 alt_alarm_start
00009fa4 g     F .text	00000124 __muldi3
00005f7c g     F .text	00000194 __smakebuf_r
00001650 g     F .text	00000074 strlen
0000ca98 g     F .text	0000018c open
00009b30 g     F .text	00000088 __gedf2
0000b0dc g     F .text	00000040 alt_putchar
08000000 g       *ABS*	00000000 __alt_mem_SRAM
0000c568 g     F .text	0000001c alt_icache_flush_all
0000f4e8 g     O .rwdata	00000004 alt_priority_mask
0000c5d4 g     F .text	0000009c alt_ic_irq_enable
000035e0 g     F .text	00000024 __vfprintf_internal
00009288 g     F .text	00000080 __subdf3
000064a4 g     F .text	000000c4 __lo0bits
0000f4e0 g     O .rwdata	00000008 alt_alarm_list
0000c4a0 g     F .text	00000064 _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
0000a7b0 g     F .text	00000100 close
0000ab98 g     F .text	00000080 alt_load
0000a148 g     F .text	00000314 __pack_d
00000d4c g     F .text	00000014 free
000051c8 g     F .text	00000004 __sinit_lock_acquire
0000712c g     F .text	0000012c __multadd
0000640c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407414 	ori	at,at,464
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
.section .exceptions.exit.user, "xa"
call check_interrupt
  98:	000043c0 	call	43c <check_interrupt>
beq r0, r2, GOTO
  9c:	00800526 	beq	zero,r2,b4 <GOTO>
stw  fp, -4(sp)
  a0:	df3fff15 	stw	fp,-4(sp)
addi r4, sp, 0
  a4:	d9000004 	addi	r4,sp,0
call my_scheduler
  a8:	00008600 	call	860 <my_scheduler>
addi sp, r2,0
  ac:	16c00004 	addi	sp,r2,0
ldw  fp, -4(sp)
  b0:	df3fff17 	ldw	fp,-4(sp)

000000b4 <GOTO>:
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 100:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 118:	0005313a 	rdctl	r2,ipending
 11c:	e0bffc15 	stw	r2,-16(fp)

  return active;
 120:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 124:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 128:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 12c:	00800044 	movi	r2,1
 130:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 134:	e0ffff17 	ldw	r3,-4(fp)
 138:	e0bffe17 	ldw	r2,-8(fp)
 13c:	1884703a 	and	r2,r3,r2
 140:	1005003a 	cmpeq	r2,r2,zero
 144:	1000161e 	bne	r2,zero,1a0 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	e0bffd17 	ldw	r2,-12(fp)
 14c:	00c00074 	movhi	r3,1
 150:	18c44704 	addi	r3,r3,4380
 154:	100490fa 	slli	r2,r2,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	11400017 	ldw	r5,0(r2)
 160:	e0bffd17 	ldw	r2,-12(fp)
 164:	00c00074 	movhi	r3,1
 168:	18c44704 	addi	r3,r3,4380
 16c:	100490fa 	slli	r2,r2,3
 170:	10c5883a 	add	r2,r2,r3
 174:	10800104 	addi	r2,r2,4
 178:	11000017 	ldw	r4,0(r2)
 17c:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bffb15 	stw	r2,-20(fp)

  return active;
 188:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 18c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	1004c03a 	cmpne	r2,r2,zero
 198:	103fe31e 	bne	r2,zero,128 <alt_irq_handler+0x20>
 19c:	00000706 	br	1bc <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1a0:	e0bffe17 	ldw	r2,-8(fp)
 1a4:	1085883a 	add	r2,r2,r2
 1a8:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1ac:	e0bffd17 	ldw	r2,-12(fp)
 1b0:	10800044 	addi	r2,r2,1
 1b4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b8:	003fde06 	br	134 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

Disassembly of section .text:

000001d0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d0:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1d4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1d8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1dc:	d69d2a14 	ori	gp,gp,29864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e4:	1083d314 	ori	r2,r2,3916

    movhi r3, %hi(__bss_end)
     1e8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1ec:	18c4eb14 	ori	r3,r3,5036

    beq r2, r3, 1f
     1f0:	10c00326 	beq	r2,r3,200 <_start+0x30>

0:
    stw zero, (r2)
     1f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1fc:	10fffd36 	bltu	r2,r3,1f4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     200:	000ab980 	call	ab98 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     204:	000add80 	call	add8 <alt_main>

00000208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     208:	003fff06 	br	208 <alt_after_alt_main>

0000020c <my_interrupt_handler>:
// enable an interrupt
#define ENABLE_INTERRUPTS() { \
asm("movi et, 1"); \
asm("wrctl status, et"); \
}
alt_u32 my_interrupt_handler(){
     20c:	defffe04 	addi	sp,sp,-8
     210:	dfc00115 	stw	ra,4(sp)
     214:	df000015 	stw	fp,0(sp)
     218:	d839883a 	mov	fp,sp
	DISABLE_INTERRUPTS();
     21c:	0001703a 	wrctl	status,zero
	printf("handler\n");
     220:	01000074 	movhi	r4,1
     224:	21359b04 	addi	r4,r4,-10644
     228:	00015cc0 	call	15cc <puts>
	from_handler = 1;
     22c:	00800044 	movi	r2,1
     230:	d0a6a915 	stw	r2,-25948(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     234:	00800074 	movhi	r2,1
     238:	1083e004 	addi	r2,r2,3968
     23c:	10800017 	ldw	r2,0(r2)
	return alt_ticks_per_second();
}
     240:	e037883a 	mov	sp,fp
     244:	dfc00117 	ldw	ra,4(sp)
     248:	df000017 	ldw	fp,0(sp)
     24c:	dec00204 	addi	sp,sp,8
     250:	f800283a 	ret

00000254 <initialize_alarm>:

void initialize_alarm(){
     254:	defffe04 	addi	sp,sp,-8
     258:	dfc00115 	stw	ra,4(sp)
     25c:	df000015 	stw	fp,0(sp)
     260:	d839883a 	mov	fp,sp
     264:	00800074 	movhi	r2,1
     268:	1083e004 	addi	r2,r2,3968
     26c:	10800017 	ldw	r2,0(r2)
     270:	100b883a 	mov	r5,r2
	if(alt_alarm_start(&alarm, alt_ticks_per_second(), my_interrupt_handler, NULL) != 0){
     274:	01000074 	movhi	r4,1
     278:	2103ed04 	addi	r4,r4,4020
     27c:	01800034 	movhi	r6,0
     280:	31808304 	addi	r6,r6,524
     284:	000f883a 	mov	r7,zero
     288:	000a65c0 	call	a65c <alt_alarm_start>
     28c:	1005003a 	cmpeq	r2,r2,zero
     290:	1000031e 	bne	r2,zero,2a0 <initialize_alarm+0x4c>
				printf("ERROR WITH TIMER");
     294:	01000074 	movhi	r4,1
     298:	21359d04 	addi	r4,r4,-10636
     29c:	00014b40 	call	14b4 <printf>
			}
}
     2a0:	e037883a 	mov	sp,fp
     2a4:	dfc00117 	ldw	ra,4(sp)
     2a8:	df000017 	ldw	fp,0(sp)
     2ac:	dec00204 	addi	sp,sp,8
     2b0:	f800283a 	ret

000002b4 <reset_alarm>:

void reset_alarm(alt_u32 ticks){
     2b4:	defffd04 	addi	sp,sp,-12
     2b8:	dfc00215 	stw	ra,8(sp)
     2bc:	df000115 	stw	fp,4(sp)
     2c0:	df000104 	addi	fp,sp,4
     2c4:	e13fff15 	stw	r4,-4(fp)
	alt_alarm_stop(&alarm);
     2c8:	01000074 	movhi	r4,1
     2cc:	2103ed04 	addi	r4,r4,4020
     2d0:	000b3d40 	call	b3d4 <alt_alarm_stop>
	if(alt_alarm_start(&alarm, ticks, my_interrupt_handler, NULL) != 0){
     2d4:	01000074 	movhi	r4,1
     2d8:	2103ed04 	addi	r4,r4,4020
     2dc:	e17fff17 	ldw	r5,-4(fp)
     2e0:	01800034 	movhi	r6,0
     2e4:	31808304 	addi	r6,r6,524
     2e8:	000f883a 	mov	r7,zero
     2ec:	000a65c0 	call	a65c <alt_alarm_start>
     2f0:	1005003a 	cmpeq	r2,r2,zero
     2f4:	1000031e 	bne	r2,zero,304 <reset_alarm+0x50>
				printf("ERROR WITH TIMER");
     2f8:	01000074 	movhi	r4,1
     2fc:	21359d04 	addi	r4,r4,-10636
     300:	00014b40 	call	14b4 <printf>
			}
}
     304:	e037883a 	mov	sp,fp
     308:	dfc00117 	ldw	ra,4(sp)
     30c:	df000017 	ldw	fp,0(sp)
     310:	dec00204 	addi	sp,sp,8
     314:	f800283a 	ret

00000318 <main>:
#define ALARMTICKS(x) ((alt_ticks_per_second()*(x))/10)
#define MAX 2555

// Note that ALARMTICKS(5) = 1 * 5 / 10 or 0.5 seconds
int main()
{
     318:	defffd04 	addi	sp,sp,-12
     31c:	dfc00215 	stw	ra,8(sp)
     320:	df000115 	stw	fp,4(sp)
     324:	df000104 	addi	fp,sp,4
	int i;
	for(i=0;i<5;i++){
     328:	e03fff15 	stw	zero,-4(fp)
     32c:	00000606 	br	348 <main+0x30>
		initialize_thread(i, 0);
     330:	e13fff17 	ldw	r4,-4(fp)
     334:	000b883a 	mov	r5,zero
     338:	00005cc0 	call	5cc <initialize_thread>

// Note that ALARMTICKS(5) = 1 * 5 / 10 or 0.5 seconds
int main()
{
	int i;
	for(i=0;i<5;i++){
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	10800044 	addi	r2,r2,1
     344:	e0bfff15 	stw	r2,-4(fp)
     348:	e0bfff17 	ldw	r2,-4(fp)
     34c:	10800150 	cmplti	r2,r2,5
     350:	103ff71e 	bne	r2,zero,330 <main+0x18>
		initialize_thread(i, 0);
	}
	for(i=5;i<8;i++){
     354:	00800144 	movi	r2,5
     358:	e0bfff15 	stw	r2,-4(fp)
     35c:	00000606 	br	378 <main+0x60>
		initialize_thread(i, 1);
     360:	e13fff17 	ldw	r4,-4(fp)
     364:	01400044 	movi	r5,1
     368:	00005cc0 	call	5cc <initialize_thread>
{
	int i;
	for(i=0;i<5;i++){
		initialize_thread(i, 0);
	}
	for(i=5;i<8;i++){
     36c:	e0bfff17 	ldw	r2,-4(fp)
     370:	10800044 	addi	r2,r2,1
     374:	e0bfff15 	stw	r2,-4(fp)
     378:	e0bfff17 	ldw	r2,-4(fp)
     37c:	10800210 	cmplti	r2,r2,8
     380:	103ff71e 	bne	r2,zero,360 <main+0x48>
		initialize_thread(i, 1);
	}
	for(i=8;i<12;i++){
     384:	00800204 	movi	r2,8
     388:	e0bfff15 	stw	r2,-4(fp)
     38c:	00000606 	br	3a8 <main+0x90>
		initialize_thread(i, 2);
     390:	e13fff17 	ldw	r4,-4(fp)
     394:	01400084 	movi	r5,2
     398:	00005cc0 	call	5cc <initialize_thread>
		initialize_thread(i, 0);
	}
	for(i=5;i<8;i++){
		initialize_thread(i, 1);
	}
	for(i=8;i<12;i++){
     39c:	e0bfff17 	ldw	r2,-4(fp)
     3a0:	10800044 	addi	r2,r2,1
     3a4:	e0bfff15 	stw	r2,-4(fp)
     3a8:	e0bfff17 	ldw	r2,-4(fp)
     3ac:	10800310 	cmplti	r2,r2,12
     3b0:	103ff71e 	bne	r2,zero,390 <main+0x78>
		initialize_thread(i, 2);
	}
	initialize_alarm();
     3b4:	00002540 	call	254 <initialize_alarm>
	//alt_printf("This is my prototype OS.\n");

	for(i=0;i<12;i++){
     3b8:	e03fff15 	stw	zero,-4(fp)
     3bc:	00000506 	br	3d4 <main+0xbc>
		join_thread(i);
     3c0:	e13fff17 	ldw	r4,-4(fp)
     3c4:	00004f00 	call	4f0 <join_thread>
		initialize_thread(i, 2);
	}
	initialize_alarm();
	//alt_printf("This is my prototype OS.\n");

	for(i=0;i<12;i++){
     3c8:	e0bfff17 	ldw	r2,-4(fp)
     3cc:	10800044 	addi	r2,r2,1
     3d0:	e0bfff15 	stw	r2,-4(fp)
     3d4:	e0bfff17 	ldw	r2,-4(fp)
     3d8:	10800310 	cmplti	r2,r2,12
     3dc:	103ff81e 	bne	r2,zero,3c0 <main+0xa8>
		join_thread(i);
	}
	prototype_os();
     3e0:	00003fc0 	call	3fc <prototype_os>
	return 0;
     3e4:	0005883a 	mov	r2,zero
}
     3e8:	e037883a 	mov	sp,fp
     3ec:	dfc00117 	ldw	ra,4(sp)
     3f0:	df000017 	ldw	fp,0(sp)
     3f4:	dec00204 	addi	sp,sp,8
     3f8:	f800283a 	ret

000003fc <prototype_os>:
void prototype_os()
{
     3fc:	defffd04 	addi	sp,sp,-12
     400:	dfc00215 	stw	ra,8(sp)
     404:	df000115 	stw	fp,4(sp)
     408:	df000104 	addi	fp,sp,4
	// initialize the timer and its interrupt handler

	while (1)
	{
		printf("This is my prototype OS.\n");
     40c:	01000074 	movhi	r4,1
     410:	2135a204 	addi	r4,r4,-10616
     414:	00015cc0 	call	15cc <puts>
		int j;
	// a delay loop is used below. Try adjust the value of MAX
	for (j = 0; j < 2554; j++){
     418:	e03fff15 	stw	zero,-4(fp)
     41c:	00000306 	br	42c <prototype_os+0x30>
     420:	e0bfff17 	ldw	r2,-4(fp)
     424:	10800044 	addi	r2,r2,1
     428:	e0bfff15 	stw	r2,-4(fp)
     42c:	e0bfff17 	ldw	r2,-4(fp)
     430:	10827e90 	cmplti	r2,r2,2554
     434:	103ffa1e 	bne	r2,zero,420 <prototype_os+0x24>

	}
	}
     438:	003ff406 	br	40c <prototype_os+0x10>

0000043c <check_interrupt>:
	alt_u32 runs;
};
struct thread threads[12];
alt_u32 current_thread = 0;
extern from_handler;
int check_interrupt(){
     43c:	defffe04 	addi	sp,sp,-8
     440:	dfc00115 	stw	ra,4(sp)
     444:	df000015 	stw	fp,0(sp)
     448:	d839883a 	mov	fp,sp
	if(from_handler == 1){
     44c:	00800074 	movhi	r2,1
     450:	1083d304 	addi	r2,r2,3916
     454:	10800017 	ldw	r2,0(r2)
     458:	10800058 	cmpnei	r2,r2,1
     45c:	1000041e 	bne	r2,zero,470 <check_interrupt+0x34>
	printf("check:%x\n",current_thread );}
     460:	d166aa17 	ldw	r5,-25944(gp)
     464:	01000074 	movhi	r4,1
     468:	2135a904 	addi	r4,r4,-10588
     46c:	00014b40 	call	14b4 <printf>
	return from_handler;
     470:	00800074 	movhi	r2,1
     474:	1083d304 	addi	r2,r2,3916
     478:	10800017 	ldw	r2,0(r2)
}
     47c:	e037883a 	mov	sp,fp
     480:	dfc00117 	ldw	ra,4(sp)
     484:	df000017 	ldw	fp,0(sp)
     488:	dec00204 	addi	sp,sp,8
     48c:	f800283a 	ret

00000490 <my_thread>:
void my_thread(alt_u32 thread_id){
     490:	defffc04 	addi	sp,sp,-16
     494:	dfc00315 	stw	ra,12(sp)
     498:	df000215 	stw	fp,8(sp)
     49c:	df000204 	addi	fp,sp,8
     4a0:	e13fff15 	stw	r4,-4(fp)
	int i = 0;
     4a4:	e03ffe15 	stw	zero,-8(fp)
	for(i=0; i<0xFFFFF; i++){
     4a8:	e03ffe15 	stw	zero,-8(fp)
     4ac:	00000306 	br	4bc <my_thread+0x2c>
     4b0:	e0bffe17 	ldw	r2,-8(fp)
     4b4:	10800044 	addi	r2,r2,1
     4b8:	e0bffe15 	stw	r2,-8(fp)
     4bc:	e0fffe17 	ldw	r3,-8(fp)
     4c0:	00800434 	movhi	r2,16
     4c4:	10bfff84 	addi	r2,r2,-2
     4c8:	10fff90e 	bge	r2,r3,4b0 <my_thread+0x20>

	}
	alt_printf("This is my thread:%x\n", thread_id);
     4cc:	01000074 	movhi	r4,1
     4d0:	2135ac04 	addi	r4,r4,-10576
     4d4:	e17fff17 	ldw	r5,-4(fp)
     4d8:	000ae840 	call	ae84 <alt_printf>
}
     4dc:	e037883a 	mov	sp,fp
     4e0:	dfc00117 	ldw	ra,4(sp)
     4e4:	df000017 	ldw	fp,0(sp)
     4e8:	dec00204 	addi	sp,sp,8
     4ec:	f800283a 	ret

000004f0 <join_thread>:
void join_thread(alt_u32 id){
     4f0:	defffc04 	addi	sp,sp,-16
     4f4:	dfc00315 	stw	ra,12(sp)
     4f8:	df000215 	stw	fp,8(sp)
     4fc:	dc000115 	stw	r16,4(sp)
     500:	df000104 	addi	fp,sp,4
     504:	e13fff15 	stw	r4,-4(fp)
	while(threads[id].state != 2){
     508:	e13fff17 	ldw	r4,-4(fp)
     50c:	04000074 	movhi	r16,1
     510:	8403f304 	addi	r16,r16,4044
     514:	01400704 	movi	r5,28
     518:	0000d140 	call	d14 <__mulsi3>
     51c:	1405883a 	add	r2,r2,r16
     520:	10800404 	addi	r2,r2,16
     524:	10800017 	ldw	r2,0(r2)
     528:	10800098 	cmpnei	r2,r2,2
     52c:	103ff61e 	bne	r2,zero,508 <join_thread+0x18>

	}
}
     530:	e037883a 	mov	sp,fp
     534:	dfc00217 	ldw	ra,8(sp)
     538:	df000117 	ldw	fp,4(sp)
     53c:	dc000017 	ldw	r16,0(sp)
     540:	dec00304 	addi	sp,sp,12
     544:	f800283a 	ret

00000548 <destroy_thread>:
void destroy_thread(){
     548:	defffc04 	addi	sp,sp,-16
     54c:	dfc00315 	stw	ra,12(sp)
     550:	df000215 	stw	fp,8(sp)
     554:	dc000115 	stw	r16,4(sp)
     558:	df000104 	addi	fp,sp,4
	//ENABLE_INTERRUPTS();
	free(threads[current_thread].stack_address);
     55c:	d126aa17 	ldw	r4,-25944(gp)
     560:	04000074 	movhi	r16,1
     564:	8403f304 	addi	r16,r16,4044
     568:	01400704 	movi	r5,28
     56c:	0000d140 	call	d14 <__mulsi3>
     570:	1405883a 	add	r2,r2,r16
     574:	10800104 	addi	r2,r2,4
     578:	11000017 	ldw	r4,0(r2)
     57c:	0000d4c0 	call	d4c <free>
	threads[current_thread].state = 2;
     580:	d126aa17 	ldw	r4,-25944(gp)
     584:	04000074 	movhi	r16,1
     588:	8403f304 	addi	r16,r16,4044
     58c:	01400704 	movi	r5,28
     590:	0000d140 	call	d14 <__mulsi3>
     594:	1405883a 	add	r2,r2,r16
     598:	10c00404 	addi	r3,r2,16
     59c:	00800084 	movi	r2,2
     5a0:	18800015 	stw	r2,0(r3)
	while(1){
		int i = 0;
     5a4:	e03fff15 	stw	zero,-4(fp)
		for(i=0; i<2555; i++){
     5a8:	e03fff15 	stw	zero,-4(fp)
     5ac:	00000306 	br	5bc <destroy_thread+0x74>
     5b0:	e0bfff17 	ldw	r2,-4(fp)
     5b4:	10800044 	addi	r2,r2,1
     5b8:	e0bfff15 	stw	r2,-4(fp)
     5bc:	e0bfff17 	ldw	r2,-4(fp)
     5c0:	10827ed0 	cmplti	r2,r2,2555
     5c4:	103ffa1e 	bne	r2,zero,5b0 <destroy_thread+0x68>

		}
	}
     5c8:	003ff606 	br	5a4 <destroy_thread+0x5c>

000005cc <initialize_thread>:
}

void initialize_thread(int num_thread, int priority){
     5cc:	defff904 	addi	sp,sp,-28
     5d0:	dfc00615 	stw	ra,24(sp)
     5d4:	df000515 	stw	fp,20(sp)
     5d8:	dc800415 	stw	r18,16(sp)
     5dc:	dc400315 	stw	r17,12(sp)
     5e0:	dc000215 	stw	r16,8(sp)
     5e4:	df000204 	addi	fp,sp,8
     5e8:	e13ffe15 	stw	r4,-8(fp)
     5ec:	e17fff15 	stw	r5,-4(fp)

		threads[num_thread].stack_size = 4096;
     5f0:	e13ffe17 	ldw	r4,-8(fp)
     5f4:	04000074 	movhi	r16,1
     5f8:	8403f304 	addi	r16,r16,4044
     5fc:	01400704 	movi	r5,28
     600:	0000d140 	call	d14 <__mulsi3>
     604:	1405883a 	add	r2,r2,r16
     608:	10c00204 	addi	r3,r2,8
     60c:	00840004 	movi	r2,4096
     610:	18800015 	stw	r2,0(r3)
		threads[num_thread].stack_address = malloc(threads[num_thread].stack_size);
     614:	e4bffe17 	ldw	r18,-8(fp)
     618:	e13ffe17 	ldw	r4,-8(fp)
     61c:	04000074 	movhi	r16,1
     620:	8403f304 	addi	r16,r16,4044
     624:	01400704 	movi	r5,28
     628:	0000d140 	call	d14 <__mulsi3>
     62c:	1405883a 	add	r2,r2,r16
     630:	10800204 	addi	r2,r2,8
     634:	11000017 	ldw	r4,0(r2)
     638:	0000d600 	call	d60 <malloc>
     63c:	1023883a 	mov	r17,r2
     640:	04000074 	movhi	r16,1
     644:	8403f304 	addi	r16,r16,4044
     648:	9009883a 	mov	r4,r18
     64c:	01400704 	movi	r5,28
     650:	0000d140 	call	d14 <__mulsi3>
     654:	1405883a 	add	r2,r2,r16
     658:	10800104 	addi	r2,r2,4
     65c:	14400015 	stw	r17,0(r2)
		threads[num_thread].stack_pointer = (alt_u32 *)(threads[num_thread].stack_address+threads[num_thread].stack_size-19*sizeof(alt_u32));
     660:	e4bffe17 	ldw	r18,-8(fp)
     664:	e13ffe17 	ldw	r4,-8(fp)
     668:	04000074 	movhi	r16,1
     66c:	8403f304 	addi	r16,r16,4044
     670:	01400704 	movi	r5,28
     674:	0000d140 	call	d14 <__mulsi3>
     678:	1405883a 	add	r2,r2,r16
     67c:	10800104 	addi	r2,r2,4
     680:	14400017 	ldw	r17,0(r2)
     684:	e13ffe17 	ldw	r4,-8(fp)
     688:	04000074 	movhi	r16,1
     68c:	8403f304 	addi	r16,r16,4044
     690:	01400704 	movi	r5,28
     694:	0000d140 	call	d14 <__mulsi3>
     698:	1405883a 	add	r2,r2,r16
     69c:	10800204 	addi	r2,r2,8
     6a0:	10800017 	ldw	r2,0(r2)
     6a4:	1085883a 	add	r2,r2,r2
     6a8:	1085883a 	add	r2,r2,r2
     6ac:	8885883a 	add	r2,r17,r2
     6b0:	147fb404 	addi	r17,r2,-304
     6b4:	04000074 	movhi	r16,1
     6b8:	8403f304 	addi	r16,r16,4044
     6bc:	9009883a 	mov	r4,r18
     6c0:	01400704 	movi	r5,28
     6c4:	0000d140 	call	d14 <__mulsi3>
     6c8:	1405883a 	add	r2,r2,r16
     6cc:	10800304 	addi	r2,r2,12
     6d0:	14400015 	stw	r17,0(r2)
		threads[num_thread].state = 0;
     6d4:	e13ffe17 	ldw	r4,-8(fp)
     6d8:	04000074 	movhi	r16,1
     6dc:	8403f304 	addi	r16,r16,4044
     6e0:	01400704 	movi	r5,28
     6e4:	0000d140 	call	d14 <__mulsi3>
     6e8:	1405883a 	add	r2,r2,r16
     6ec:	10800404 	addi	r2,r2,16
     6f0:	10000015 	stw	zero,0(r2)
		threads[num_thread].priority=priority;
     6f4:	e13ffe17 	ldw	r4,-8(fp)
     6f8:	e47fff17 	ldw	r17,-4(fp)
     6fc:	04000074 	movhi	r16,1
     700:	8403f304 	addi	r16,r16,4044
     704:	01400704 	movi	r5,28
     708:	0000d140 	call	d14 <__mulsi3>
     70c:	1405883a 	add	r2,r2,r16
     710:	10800504 	addi	r2,r2,20
     714:	14400015 	stw	r17,0(r2)

		//initialize stack
		threads[num_thread].stack_pointer[-1] = threads[num_thread].stack_address+threads[num_thread].stack_size;
     718:	e13ffe17 	ldw	r4,-8(fp)
     71c:	04000074 	movhi	r16,1
     720:	8403f304 	addi	r16,r16,4044
     724:	01400704 	movi	r5,28
     728:	0000d140 	call	d14 <__mulsi3>
     72c:	1405883a 	add	r2,r2,r16
     730:	10800304 	addi	r2,r2,12
     734:	10800017 	ldw	r2,0(r2)
     738:	147fff04 	addi	r17,r2,-4
     73c:	e13ffe17 	ldw	r4,-8(fp)
     740:	04000074 	movhi	r16,1
     744:	8403f304 	addi	r16,r16,4044
     748:	01400704 	movi	r5,28
     74c:	0000d140 	call	d14 <__mulsi3>
     750:	1405883a 	add	r2,r2,r16
     754:	10800104 	addi	r2,r2,4
     758:	14800017 	ldw	r18,0(r2)
     75c:	e13ffe17 	ldw	r4,-8(fp)
     760:	04000074 	movhi	r16,1
     764:	8403f304 	addi	r16,r16,4044
     768:	01400704 	movi	r5,28
     76c:	0000d140 	call	d14 <__mulsi3>
     770:	1405883a 	add	r2,r2,r16
     774:	10800204 	addi	r2,r2,8
     778:	10800017 	ldw	r2,0(r2)
     77c:	1085883a 	add	r2,r2,r2
     780:	1085883a 	add	r2,r2,r2
     784:	9085883a 	add	r2,r18,r2
     788:	88800015 	stw	r2,0(r17)
		threads[num_thread].stack_pointer[0] = &destroy_thread;
     78c:	e13ffe17 	ldw	r4,-8(fp)
     790:	04000074 	movhi	r16,1
     794:	8403f304 	addi	r16,r16,4044
     798:	01400704 	movi	r5,28
     79c:	0000d140 	call	d14 <__mulsi3>
     7a0:	1405883a 	add	r2,r2,r16
     7a4:	10800304 	addi	r2,r2,12
     7a8:	10c00017 	ldw	r3,0(r2)
     7ac:	00800034 	movhi	r2,0
     7b0:	10815204 	addi	r2,r2,1352
     7b4:	18800015 	stw	r2,0(r3)
		threads[num_thread].stack_pointer[5] = num_thread;
     7b8:	e13ffe17 	ldw	r4,-8(fp)
     7bc:	04000074 	movhi	r16,1
     7c0:	8403f304 	addi	r16,r16,4044
     7c4:	01400704 	movi	r5,28
     7c8:	0000d140 	call	d14 <__mulsi3>
     7cc:	1405883a 	add	r2,r2,r16
     7d0:	10800304 	addi	r2,r2,12
     7d4:	10800017 	ldw	r2,0(r2)
     7d8:	10c00504 	addi	r3,r2,20
     7dc:	e0bffe17 	ldw	r2,-8(fp)
     7e0:	18800015 	stw	r2,0(r3)
		threads[num_thread].stack_pointer[18] = &my_thread; //72
     7e4:	e13ffe17 	ldw	r4,-8(fp)
     7e8:	04000074 	movhi	r16,1
     7ec:	8403f304 	addi	r16,r16,4044
     7f0:	01400704 	movi	r5,28
     7f4:	0000d140 	call	d14 <__mulsi3>
     7f8:	1405883a 	add	r2,r2,r16
     7fc:	10800304 	addi	r2,r2,12
     800:	10800017 	ldw	r2,0(r2)
     804:	10c01204 	addi	r3,r2,72
     808:	00800034 	movhi	r2,0
     80c:	10812404 	addi	r2,r2,1168
     810:	18800015 	stw	r2,0(r3)
		threads[num_thread].stack_pointer[17] = 1;
     814:	e13ffe17 	ldw	r4,-8(fp)
     818:	04000074 	movhi	r16,1
     81c:	8403f304 	addi	r16,r16,4044
     820:	01400704 	movi	r5,28
     824:	0000d140 	call	d14 <__mulsi3>
     828:	1405883a 	add	r2,r2,r16
     82c:	10800304 	addi	r2,r2,12
     830:	10800017 	ldw	r2,0(r2)
     834:	10c01104 	addi	r3,r2,68
     838:	00800044 	movi	r2,1
     83c:	18800015 	stw	r2,0(r3)
}
     840:	e037883a 	mov	sp,fp
     844:	dfc00417 	ldw	ra,16(sp)
     848:	df000317 	ldw	fp,12(sp)
     84c:	dc800217 	ldw	r18,8(sp)
     850:	dc400117 	ldw	r17,4(sp)
     854:	dc000017 	ldw	r16,0(sp)
     858:	dec00504 	addi	sp,sp,20
     85c:	f800283a 	ret

00000860 <my_scheduler>:
int first_run = 1;
alt_u32 main_context;
alt_u32* my_scheduler(alt_u32 *sp){//round robin
     860:	defff704 	addi	sp,sp,-36
     864:	dfc00815 	stw	ra,32(sp)
     868:	df000715 	stw	fp,28(sp)
     86c:	dc800615 	stw	r18,24(sp)
     870:	dc400515 	stw	r17,20(sp)
     874:	dc000415 	stw	r16,16(sp)
     878:	df000404 	addi	fp,sp,16
     87c:	e13ffe15 	stw	r4,-8(fp)
	from_handler = 0;
     880:	00800074 	movhi	r2,1
     884:	1083d304 	addi	r2,r2,3916
     888:	10000015 	stw	zero,0(r2)
	if(first_run == 1){
     88c:	d0a00017 	ldw	r2,-32768(gp)
     890:	10800058 	cmpnei	r2,r2,1
     894:	1000031e 	bne	r2,zero,8a4 <my_scheduler+0x44>
		main_context = sp;
     898:	e0bffe17 	ldw	r2,-8(fp)
     89c:	d0a6ab15 	stw	r2,-25940(gp)
		first_run =0;
     8a0:	d0200015 	stw	zero,-32768(gp)
	if(current_thread == 0){
		//alt_printf("Zero\n");
	}

	/* This section of code is for testing to make sure the threads haven't finished */
	int thread_count = 0;
     8a4:	e03ffd15 	stw	zero,-12(fp)
	if(threads[current_thread].state == 1)						//Check to see if thread is in "Running" state
     8a8:	d126aa17 	ldw	r4,-25944(gp)
     8ac:	04000074 	movhi	r16,1
     8b0:	8403f304 	addi	r16,r16,4044
     8b4:	01400704 	movi	r5,28
     8b8:	0000d140 	call	d14 <__mulsi3>
     8bc:	1405883a 	add	r2,r2,r16
     8c0:	10800404 	addi	r2,r2,16
     8c4:	10800017 	ldw	r2,0(r2)
     8c8:	10800058 	cmpnei	r2,r2,1
     8cc:	10002b1e 	bne	r2,zero,97c <my_scheduler+0x11c>
	{
		alt_printf("This test ran\n");
     8d0:	01000074 	movhi	r4,1
     8d4:	2135b204 	addi	r4,r4,-10552
     8d8:	000ae840 	call	ae84 <alt_printf>
		threads[current_thread].state = 3;//If so we change the state to paused
     8dc:	d126aa17 	ldw	r4,-25944(gp)
     8e0:	04000074 	movhi	r16,1
     8e4:	8403f304 	addi	r16,r16,4044
     8e8:	01400704 	movi	r5,28
     8ec:	0000d140 	call	d14 <__mulsi3>
     8f0:	1405883a 	add	r2,r2,r16
     8f4:	10c00404 	addi	r3,r2,16
     8f8:	008000c4 	movi	r2,3
     8fc:	18800015 	stw	r2,0(r3)
		threads[current_thread].stack_pointer = sp;
     900:	d126aa17 	ldw	r4,-25944(gp)
     904:	04000074 	movhi	r16,1
     908:	8403f304 	addi	r16,r16,4044
     90c:	01400704 	movi	r5,28
     910:	0000d140 	call	d14 <__mulsi3>
     914:	1405883a 	add	r2,r2,r16
     918:	10c00304 	addi	r3,r2,12
     91c:	e0bffe17 	ldw	r2,-8(fp)
     920:	18800015 	stw	r2,0(r3)
		alt_printf("stack pointer_after run thread[%x]: %x\n", current_thread, sp);
     924:	d166aa17 	ldw	r5,-25944(gp)
     928:	01000074 	movhi	r4,1
     92c:	2135b604 	addi	r4,r4,-10536
     930:	e1bffe17 	ldw	r6,-8(fp)
     934:	000ae840 	call	ae84 <alt_printf>
		current_thread = (current_thread+1)%12;					//and move on to the next thread
     938:	d0a6aa17 	ldw	r2,-25944(gp)
     93c:	11000044 	addi	r4,r2,1
     940:	01400304 	movi	r5,12
     944:	0000d0c0 	call	d0c <__umodsi3>
     948:	d0a6aa15 	stw	r2,-25944(gp)
	}
	while(threads[current_thread].state == 2 && thread_count < 12)
     94c:	00000b06 	br	97c <my_scheduler+0x11c>
	{
		alt_printf("We have a dead thread\n");
     950:	01000074 	movhi	r4,1
     954:	2135c004 	addi	r4,r4,-10496
     958:	000ae840 	call	ae84 <alt_printf>
		thread_count++;											//This is used to keep track to see how many times we've run through the code
     95c:	e0bffd17 	ldw	r2,-12(fp)
     960:	10800044 	addi	r2,r2,1
     964:	e0bffd15 	stw	r2,-12(fp)
		current_thread = (current_thread+1)%12;					//Move to the next thread
     968:	d0a6aa17 	ldw	r2,-25944(gp)
     96c:	11000044 	addi	r4,r2,1
     970:	01400304 	movi	r5,12
     974:	0000d0c0 	call	d0c <__umodsi3>
     978:	d0a6aa15 	stw	r2,-25944(gp)
		threads[current_thread].state = 3;//If so we change the state to paused
		threads[current_thread].stack_pointer = sp;
		alt_printf("stack pointer_after run thread[%x]: %x\n", current_thread, sp);
		current_thread = (current_thread+1)%12;					//and move on to the next thread
	}
	while(threads[current_thread].state == 2 && thread_count < 12)
     97c:	d126aa17 	ldw	r4,-25944(gp)
     980:	04000074 	movhi	r16,1
     984:	8403f304 	addi	r16,r16,4044
     988:	01400704 	movi	r5,28
     98c:	0000d140 	call	d14 <__mulsi3>
     990:	1405883a 	add	r2,r2,r16
     994:	10800404 	addi	r2,r2,16
     998:	10800017 	ldw	r2,0(r2)
     99c:	10800098 	cmpnei	r2,r2,2
     9a0:	1000031e 	bne	r2,zero,9b0 <my_scheduler+0x150>
     9a4:	e0bffd17 	ldw	r2,-12(fp)
     9a8:	10800310 	cmplti	r2,r2,12
     9ac:	103fe81e 	bne	r2,zero,950 <my_scheduler+0xf0>
	{
		alt_printf("We have a dead thread\n");
		thread_count++;											//This is used to keep track to see how many times we've run through the code
		current_thread = (current_thread+1)%12;					//Move to the next thread
	}
if(thread_count == 12){ // all are dead
     9b0:	e0bffd17 	ldw	r2,-12(fp)
     9b4:	10800318 	cmpnei	r2,r2,12
     9b8:	1000051e 	bne	r2,zero,9d0 <my_scheduler+0x170>
	first_run = 1;
     9bc:	00800044 	movi	r2,1
     9c0:	d0a00015 	stw	r2,-32768(gp)
	return main_context;
     9c4:	d0a6ab17 	ldw	r2,-25940(gp)
     9c8:	e0bfff15 	stw	r2,-4(fp)
     9cc:	00007506 	br	ba4 <my_scheduler+0x344>
}
	threads[current_thread].state = 1;  // set to running
     9d0:	d126aa17 	ldw	r4,-25944(gp)
     9d4:	04000074 	movhi	r16,1
     9d8:	8403f304 	addi	r16,r16,4044
     9dc:	01400704 	movi	r5,28
     9e0:	0000d140 	call	d14 <__mulsi3>
     9e4:	1405883a 	add	r2,r2,r16
     9e8:	10c00404 	addi	r3,r2,16
     9ec:	00800044 	movi	r2,1
     9f0:	18800015 	stw	r2,0(r3)

	/* This is going to be a test to see if memory retention is working */
	if(current_thread == 6)
     9f4:	d0a6aa17 	ldw	r2,-25944(gp)
     9f8:	10800198 	cmpnei	r2,r2,6
     9fc:	1000091e 	bne	r2,zero,a24 <my_scheduler+0x1c4>
	{
		threads[current_thread].state = 2;
     a00:	d126aa17 	ldw	r4,-25944(gp)
     a04:	04000074 	movhi	r16,1
     a08:	8403f304 	addi	r16,r16,4044
     a0c:	01400704 	movi	r5,28
     a10:	0000d140 	call	d14 <__mulsi3>
     a14:	1405883a 	add	r2,r2,r16
     a18:	10c00404 	addi	r3,r2,16
     a1c:	00800084 	movi	r2,2
     a20:	18800015 	stw	r2,0(r3)
	}

	//alt_printf("test:%x\n",current_thread );
	threads[current_thread].stack_pointer[0] =  &destroy_thread;
     a24:	d126aa17 	ldw	r4,-25944(gp)
     a28:	04000074 	movhi	r16,1
     a2c:	8403f304 	addi	r16,r16,4044
     a30:	01400704 	movi	r5,28
     a34:	0000d140 	call	d14 <__mulsi3>
     a38:	1405883a 	add	r2,r2,r16
     a3c:	10800304 	addi	r2,r2,12
     a40:	10c00017 	ldw	r3,0(r2)
     a44:	00800034 	movhi	r2,0
     a48:	10815204 	addi	r2,r2,1352
     a4c:	18800015 	stw	r2,0(r3)


	/* This is for setting the run quantum time */
	int x = 1;
     a50:	00800044 	movi	r2,1
     a54:	e0bffc15 	stw	r2,-16(fp)
	if(threads[current_thread].priority == 0)
     a58:	d126aa17 	ldw	r4,-25944(gp)
     a5c:	04000074 	movhi	r16,1
     a60:	8403f304 	addi	r16,r16,4044
     a64:	01400704 	movi	r5,28
     a68:	0000d140 	call	d14 <__mulsi3>
     a6c:	1405883a 	add	r2,r2,r16
     a70:	10800504 	addi	r2,r2,20
     a74:	10800017 	ldw	r2,0(r2)
     a78:	1004c03a 	cmpne	r2,r2,zero
     a7c:	1000021e 	bne	r2,zero,a88 <my_scheduler+0x228>
		x = 2;
     a80:	00800084 	movi	r2,2
     a84:	e0bffc15 	stw	r2,-16(fp)
	if(threads[current_thread].priority == 1)
     a88:	d126aa17 	ldw	r4,-25944(gp)
     a8c:	04000074 	movhi	r16,1
     a90:	8403f304 	addi	r16,r16,4044
     a94:	01400704 	movi	r5,28
     a98:	0000d140 	call	d14 <__mulsi3>
     a9c:	1405883a 	add	r2,r2,r16
     aa0:	10800504 	addi	r2,r2,20
     aa4:	10800017 	ldw	r2,0(r2)
     aa8:	10800058 	cmpnei	r2,r2,1
     aac:	1000021e 	bne	r2,zero,ab8 <my_scheduler+0x258>
		x = 1.5;
     ab0:	00800044 	movi	r2,1
     ab4:	e0bffc15 	stw	r2,-16(fp)
     ab8:	00800074 	movhi	r2,1
     abc:	1083e004 	addi	r2,r2,3968
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1009883a 	mov	r4,r2
	reset_alarm(alt_ticks_per_second()*x);
     ac8:	e17ffc17 	ldw	r5,-16(fp)
     acc:	0000d140 	call	d14 <__mulsi3>
     ad0:	1009883a 	mov	r4,r2
     ad4:	00002b40 	call	2b4 <reset_alarm>
	threads[current_thread].runs++;
     ad8:	d466aa17 	ldw	r17,-25944(gp)
     adc:	04000074 	movhi	r16,1
     ae0:	8403f304 	addi	r16,r16,4044
     ae4:	8809883a 	mov	r4,r17
     ae8:	01400704 	movi	r5,28
     aec:	0000d140 	call	d14 <__mulsi3>
     af0:	1405883a 	add	r2,r2,r16
     af4:	10800604 	addi	r2,r2,24
     af8:	10800017 	ldw	r2,0(r2)
     afc:	14800044 	addi	r18,r2,1
     b00:	04000074 	movhi	r16,1
     b04:	8403f304 	addi	r16,r16,4044
     b08:	8809883a 	mov	r4,r17
     b0c:	01400704 	movi	r5,28
     b10:	0000d140 	call	d14 <__mulsi3>
     b14:	1405883a 	add	r2,r2,r16
     b18:	10800604 	addi	r2,r2,24
     b1c:	14800015 	stw	r18,0(r2)
	alt_printf("Stack pointer_prerun thread[%x]: %x\n", current_thread,threads[current_thread].stack_pointer);
     b20:	d466aa17 	ldw	r17,-25944(gp)
     b24:	d126aa17 	ldw	r4,-25944(gp)
     b28:	04000074 	movhi	r16,1
     b2c:	8403f304 	addi	r16,r16,4044
     b30:	01400704 	movi	r5,28
     b34:	0000d140 	call	d14 <__mulsi3>
     b38:	1405883a 	add	r2,r2,r16
     b3c:	10800304 	addi	r2,r2,12
     b40:	11800017 	ldw	r6,0(r2)
     b44:	01000074 	movhi	r4,1
     b48:	2135c604 	addi	r4,r4,-10472
     b4c:	880b883a 	mov	r5,r17
     b50:	000ae840 	call	ae84 <alt_printf>
	alt_printf("Run count: %x\n",threads[current_thread].runs);
     b54:	d126aa17 	ldw	r4,-25944(gp)
     b58:	04000074 	movhi	r16,1
     b5c:	8403f304 	addi	r16,r16,4044
     b60:	01400704 	movi	r5,28
     b64:	0000d140 	call	d14 <__mulsi3>
     b68:	1405883a 	add	r2,r2,r16
     b6c:	10800604 	addi	r2,r2,24
     b70:	11400017 	ldw	r5,0(r2)
     b74:	01000074 	movhi	r4,1
     b78:	2135d004 	addi	r4,r4,-10432
     b7c:	000ae840 	call	ae84 <alt_printf>

	return (void *)threads[current_thread].stack_pointer;
     b80:	d126aa17 	ldw	r4,-25944(gp)
     b84:	04000074 	movhi	r16,1
     b88:	8403f304 	addi	r16,r16,4044
     b8c:	01400704 	movi	r5,28
     b90:	0000d140 	call	d14 <__mulsi3>
     b94:	1405883a 	add	r2,r2,r16
     b98:	10800304 	addi	r2,r2,12
     b9c:	10800017 	ldw	r2,0(r2)
     ba0:	e0bfff15 	stw	r2,-4(fp)
     ba4:	e0bfff17 	ldw	r2,-4(fp)

	//return sp;
}
     ba8:	e037883a 	mov	sp,fp
     bac:	dfc00417 	ldw	ra,16(sp)
     bb0:	df000317 	ldw	fp,12(sp)
     bb4:	dc800217 	ldw	r18,8(sp)
     bb8:	dc400117 	ldw	r17,4(sp)
     bbc:	dc000017 	ldw	r16,0(sp)
     bc0:	dec00504 	addi	sp,sp,20
     bc4:	f800283a 	ret

00000bc8 <udivmodsi4>:
     bc8:	29001b2e 	bgeu	r5,r4,c38 <udivmodsi4+0x70>
     bcc:	28001a16 	blt	r5,zero,c38 <udivmodsi4+0x70>
     bd0:	00800044 	movi	r2,1
     bd4:	0007883a 	mov	r3,zero
     bd8:	01c007c4 	movi	r7,31
     bdc:	00000306 	br	bec <udivmodsi4+0x24>
     be0:	19c01326 	beq	r3,r7,c30 <udivmodsi4+0x68>
     be4:	18c00044 	addi	r3,r3,1
     be8:	28000416 	blt	r5,zero,bfc <udivmodsi4+0x34>
     bec:	294b883a 	add	r5,r5,r5
     bf0:	1085883a 	add	r2,r2,r2
     bf4:	293ffa36 	bltu	r5,r4,be0 <udivmodsi4+0x18>
     bf8:	10000d26 	beq	r2,zero,c30 <udivmodsi4+0x68>
     bfc:	0007883a 	mov	r3,zero
     c00:	21400236 	bltu	r4,r5,c0c <udivmodsi4+0x44>
     c04:	2149c83a 	sub	r4,r4,r5
     c08:	1886b03a 	or	r3,r3,r2
     c0c:	1004d07a 	srli	r2,r2,1
     c10:	280ad07a 	srli	r5,r5,1
     c14:	103ffa1e 	bne	r2,zero,c00 <udivmodsi4+0x38>
     c18:	30000226 	beq	r6,zero,c24 <udivmodsi4+0x5c>
     c1c:	2005883a 	mov	r2,r4
     c20:	f800283a 	ret
     c24:	1809883a 	mov	r4,r3
     c28:	2005883a 	mov	r2,r4
     c2c:	f800283a 	ret
     c30:	0007883a 	mov	r3,zero
     c34:	003ff806 	br	c18 <udivmodsi4+0x50>
     c38:	00800044 	movi	r2,1
     c3c:	0007883a 	mov	r3,zero
     c40:	003fef06 	br	c00 <udivmodsi4+0x38>

00000c44 <__divsi3>:
     c44:	defffe04 	addi	sp,sp,-8
     c48:	dc000015 	stw	r16,0(sp)
     c4c:	dfc00115 	stw	ra,4(sp)
     c50:	0021883a 	mov	r16,zero
     c54:	20000c16 	blt	r4,zero,c88 <__divsi3+0x44>
     c58:	000d883a 	mov	r6,zero
     c5c:	28000e16 	blt	r5,zero,c98 <__divsi3+0x54>
     c60:	0000bc80 	call	bc8 <udivmodsi4>
     c64:	1007883a 	mov	r3,r2
     c68:	8005003a 	cmpeq	r2,r16,zero
     c6c:	1000011e 	bne	r2,zero,c74 <__divsi3+0x30>
     c70:	00c7c83a 	sub	r3,zero,r3
     c74:	1805883a 	mov	r2,r3
     c78:	dfc00117 	ldw	ra,4(sp)
     c7c:	dc000017 	ldw	r16,0(sp)
     c80:	dec00204 	addi	sp,sp,8
     c84:	f800283a 	ret
     c88:	0109c83a 	sub	r4,zero,r4
     c8c:	04000044 	movi	r16,1
     c90:	000d883a 	mov	r6,zero
     c94:	283ff20e 	bge	r5,zero,c60 <__divsi3+0x1c>
     c98:	014bc83a 	sub	r5,zero,r5
     c9c:	8021003a 	cmpeq	r16,r16,zero
     ca0:	003fef06 	br	c60 <__divsi3+0x1c>

00000ca4 <__modsi3>:
     ca4:	deffff04 	addi	sp,sp,-4
     ca8:	dfc00015 	stw	ra,0(sp)
     cac:	01800044 	movi	r6,1
     cb0:	2807883a 	mov	r3,r5
     cb4:	20000416 	blt	r4,zero,cc8 <__modsi3+0x24>
     cb8:	28000c16 	blt	r5,zero,cec <__modsi3+0x48>
     cbc:	dfc00017 	ldw	ra,0(sp)
     cc0:	dec00104 	addi	sp,sp,4
     cc4:	0000bc81 	jmpi	bc8 <udivmodsi4>
     cc8:	0109c83a 	sub	r4,zero,r4
     ccc:	28000b16 	blt	r5,zero,cfc <__modsi3+0x58>
     cd0:	180b883a 	mov	r5,r3
     cd4:	01800044 	movi	r6,1
     cd8:	0000bc80 	call	bc8 <udivmodsi4>
     cdc:	0085c83a 	sub	r2,zero,r2
     ce0:	dfc00017 	ldw	ra,0(sp)
     ce4:	dec00104 	addi	sp,sp,4
     ce8:	f800283a 	ret
     cec:	014bc83a 	sub	r5,zero,r5
     cf0:	dfc00017 	ldw	ra,0(sp)
     cf4:	dec00104 	addi	sp,sp,4
     cf8:	0000bc81 	jmpi	bc8 <udivmodsi4>
     cfc:	0147c83a 	sub	r3,zero,r5
     d00:	003ff306 	br	cd0 <__modsi3+0x2c>

00000d04 <__udivsi3>:
     d04:	000d883a 	mov	r6,zero
     d08:	0000bc81 	jmpi	bc8 <udivmodsi4>

00000d0c <__umodsi3>:
     d0c:	01800044 	movi	r6,1
     d10:	0000bc81 	jmpi	bc8 <udivmodsi4>

00000d14 <__mulsi3>:
     d14:	20000a26 	beq	r4,zero,d40 <__mulsi3+0x2c>
     d18:	0007883a 	mov	r3,zero
     d1c:	2080004c 	andi	r2,r4,1
     d20:	1005003a 	cmpeq	r2,r2,zero
     d24:	2008d07a 	srli	r4,r4,1
     d28:	1000011e 	bne	r2,zero,d30 <__mulsi3+0x1c>
     d2c:	1947883a 	add	r3,r3,r5
     d30:	294b883a 	add	r5,r5,r5
     d34:	203ff91e 	bne	r4,zero,d1c <__mulsi3+0x8>
     d38:	1805883a 	mov	r2,r3
     d3c:	f800283a 	ret
     d40:	0007883a 	mov	r3,zero
     d44:	1805883a 	mov	r2,r3
     d48:	f800283a 	ret

00000d4c <free>:
     d4c:	00800074 	movhi	r2,1
     d50:	10bd2d04 	addi	r2,r2,-2892
     d54:	200b883a 	mov	r5,r4
     d58:	11000017 	ldw	r4,0(r2)
     d5c:	00055881 	jmpi	5588 <_free_r>

00000d60 <malloc>:
     d60:	00800074 	movhi	r2,1
     d64:	10bd2d04 	addi	r2,r2,-2892
     d68:	200b883a 	mov	r5,r4
     d6c:	11000017 	ldw	r4,0(r2)
     d70:	0000d741 	jmpi	d74 <_malloc_r>

00000d74 <_malloc_r>:
     d74:	defff604 	addi	sp,sp,-40
     d78:	28c002c4 	addi	r3,r5,11
     d7c:	00800584 	movi	r2,22
     d80:	dc800215 	stw	r18,8(sp)
     d84:	dfc00915 	stw	ra,36(sp)
     d88:	df000815 	stw	fp,32(sp)
     d8c:	ddc00715 	stw	r23,28(sp)
     d90:	dd800615 	stw	r22,24(sp)
     d94:	dd400515 	stw	r21,20(sp)
     d98:	dd000415 	stw	r20,16(sp)
     d9c:	dcc00315 	stw	r19,12(sp)
     da0:	dc400115 	stw	r17,4(sp)
     da4:	dc000015 	stw	r16,0(sp)
     da8:	2025883a 	mov	r18,r4
     dac:	10c01236 	bltu	r2,r3,df8 <_malloc_r+0x84>
     db0:	04400404 	movi	r17,16
     db4:	8940142e 	bgeu	r17,r5,e08 <_malloc_r+0x94>
     db8:	00800304 	movi	r2,12
     dbc:	0007883a 	mov	r3,zero
     dc0:	90800015 	stw	r2,0(r18)
     dc4:	1805883a 	mov	r2,r3
     dc8:	dfc00917 	ldw	ra,36(sp)
     dcc:	df000817 	ldw	fp,32(sp)
     dd0:	ddc00717 	ldw	r23,28(sp)
     dd4:	dd800617 	ldw	r22,24(sp)
     dd8:	dd400517 	ldw	r21,20(sp)
     ddc:	dd000417 	ldw	r20,16(sp)
     de0:	dcc00317 	ldw	r19,12(sp)
     de4:	dc800217 	ldw	r18,8(sp)
     de8:	dc400117 	ldw	r17,4(sp)
     dec:	dc000017 	ldw	r16,0(sp)
     df0:	dec00a04 	addi	sp,sp,40
     df4:	f800283a 	ret
     df8:	00bffe04 	movi	r2,-8
     dfc:	18a2703a 	and	r17,r3,r2
     e00:	883fed16 	blt	r17,zero,db8 <_malloc_r+0x44>
     e04:	897fec36 	bltu	r17,r5,db8 <_malloc_r+0x44>
     e08:	9009883a 	mov	r4,r18
     e0c:	000ae440 	call	ae44 <__malloc_lock>
     e10:	00807dc4 	movi	r2,503
     e14:	14402b2e 	bgeu	r2,r17,ec4 <_malloc_r+0x150>
     e18:	8806d27a 	srli	r3,r17,9
     e1c:	18003f1e 	bne	r3,zero,f1c <_malloc_r+0x1a8>
     e20:	880cd0fa 	srli	r6,r17,3
     e24:	300490fa 	slli	r2,r6,3
     e28:	02c00074 	movhi	r11,1
     e2c:	5af6a304 	addi	r11,r11,-9588
     e30:	12cb883a 	add	r5,r2,r11
     e34:	2c000317 	ldw	r16,12(r5)
     e38:	580f883a 	mov	r7,r11
     e3c:	2c00041e 	bne	r5,r16,e50 <_malloc_r+0xdc>
     e40:	00000a06 	br	e6c <_malloc_r+0xf8>
     e44:	1800860e 	bge	r3,zero,1060 <_malloc_r+0x2ec>
     e48:	84000317 	ldw	r16,12(r16)
     e4c:	2c000726 	beq	r5,r16,e6c <_malloc_r+0xf8>
     e50:	80800117 	ldw	r2,4(r16)
     e54:	00ffff04 	movi	r3,-4
     e58:	10c8703a 	and	r4,r2,r3
     e5c:	2447c83a 	sub	r3,r4,r17
     e60:	008003c4 	movi	r2,15
     e64:	10fff70e 	bge	r2,r3,e44 <_malloc_r+0xd0>
     e68:	31bfffc4 	addi	r6,r6,-1
     e6c:	32400044 	addi	r9,r6,1
     e70:	02800074 	movhi	r10,1
     e74:	52b6a504 	addi	r10,r10,-9580
     e78:	54000217 	ldw	r16,8(r10)
     e7c:	8280a026 	beq	r16,r10,1100 <_malloc_r+0x38c>
     e80:	80800117 	ldw	r2,4(r16)
     e84:	00ffff04 	movi	r3,-4
     e88:	10ca703a 	and	r5,r2,r3
     e8c:	2c4dc83a 	sub	r6,r5,r17
     e90:	008003c4 	movi	r2,15
     e94:	11808316 	blt	r2,r6,10a4 <_malloc_r+0x330>
     e98:	52800315 	stw	r10,12(r10)
     e9c:	52800215 	stw	r10,8(r10)
     ea0:	30002916 	blt	r6,zero,f48 <_malloc_r+0x1d4>
     ea4:	8147883a 	add	r3,r16,r5
     ea8:	18800117 	ldw	r2,4(r3)
     eac:	9009883a 	mov	r4,r18
     eb0:	10800054 	ori	r2,r2,1
     eb4:	18800115 	stw	r2,4(r3)
     eb8:	000ae640 	call	ae64 <__malloc_unlock>
     ebc:	80c00204 	addi	r3,r16,8
     ec0:	003fc006 	br	dc4 <_malloc_r+0x50>
     ec4:	02c00074 	movhi	r11,1
     ec8:	5af6a304 	addi	r11,r11,-9588
     ecc:	8ac5883a 	add	r2,r17,r11
     ed0:	14000317 	ldw	r16,12(r2)
     ed4:	580f883a 	mov	r7,r11
     ed8:	8806d0fa 	srli	r3,r17,3
     edc:	14006c26 	beq	r2,r16,1090 <_malloc_r+0x31c>
     ee0:	80c00117 	ldw	r3,4(r16)
     ee4:	00bfff04 	movi	r2,-4
     ee8:	81800317 	ldw	r6,12(r16)
     eec:	1886703a 	and	r3,r3,r2
     ef0:	80c7883a 	add	r3,r16,r3
     ef4:	18800117 	ldw	r2,4(r3)
     ef8:	81400217 	ldw	r5,8(r16)
     efc:	9009883a 	mov	r4,r18
     f00:	10800054 	ori	r2,r2,1
     f04:	18800115 	stw	r2,4(r3)
     f08:	31400215 	stw	r5,8(r6)
     f0c:	29800315 	stw	r6,12(r5)
     f10:	000ae640 	call	ae64 <__malloc_unlock>
     f14:	80c00204 	addi	r3,r16,8
     f18:	003faa06 	br	dc4 <_malloc_r+0x50>
     f1c:	00800104 	movi	r2,4
     f20:	10c0052e 	bgeu	r2,r3,f38 <_malloc_r+0x1c4>
     f24:	00800504 	movi	r2,20
     f28:	10c07836 	bltu	r2,r3,110c <_malloc_r+0x398>
     f2c:	198016c4 	addi	r6,r3,91
     f30:	300490fa 	slli	r2,r6,3
     f34:	003fbc06 	br	e28 <_malloc_r+0xb4>
     f38:	8804d1ba 	srli	r2,r17,6
     f3c:	11800e04 	addi	r6,r2,56
     f40:	300490fa 	slli	r2,r6,3
     f44:	003fb806 	br	e28 <_malloc_r+0xb4>
     f48:	00807fc4 	movi	r2,511
     f4c:	1140bb36 	bltu	r2,r5,123c <_malloc_r+0x4c8>
     f50:	2806d0fa 	srli	r3,r5,3
     f54:	573ffe04 	addi	fp,r10,-8
     f58:	00800044 	movi	r2,1
     f5c:	180890fa 	slli	r4,r3,3
     f60:	1807d0ba 	srai	r3,r3,2
     f64:	e1c00117 	ldw	r7,4(fp)
     f68:	5909883a 	add	r4,r11,r4
     f6c:	21400217 	ldw	r5,8(r4)
     f70:	10c4983a 	sll	r2,r2,r3
     f74:	81000315 	stw	r4,12(r16)
     f78:	81400215 	stw	r5,8(r16)
     f7c:	388eb03a 	or	r7,r7,r2
     f80:	2c000315 	stw	r16,12(r5)
     f84:	24000215 	stw	r16,8(r4)
     f88:	e1c00115 	stw	r7,4(fp)
     f8c:	4807883a 	mov	r3,r9
     f90:	4800cd16 	blt	r9,zero,12c8 <_malloc_r+0x554>
     f94:	1807d0ba 	srai	r3,r3,2
     f98:	00800044 	movi	r2,1
     f9c:	10c8983a 	sll	r4,r2,r3
     fa0:	39004436 	bltu	r7,r4,10b4 <_malloc_r+0x340>
     fa4:	21c4703a 	and	r2,r4,r7
     fa8:	10000a1e 	bne	r2,zero,fd4 <_malloc_r+0x260>
     fac:	2109883a 	add	r4,r4,r4
     fb0:	00bfff04 	movi	r2,-4
     fb4:	4884703a 	and	r2,r9,r2
     fb8:	3906703a 	and	r3,r7,r4
     fbc:	12400104 	addi	r9,r2,4
     fc0:	1800041e 	bne	r3,zero,fd4 <_malloc_r+0x260>
     fc4:	2109883a 	add	r4,r4,r4
     fc8:	3904703a 	and	r2,r7,r4
     fcc:	4a400104 	addi	r9,r9,4
     fd0:	103ffc26 	beq	r2,zero,fc4 <_malloc_r+0x250>
     fd4:	480490fa 	slli	r2,r9,3
     fd8:	4819883a 	mov	r12,r9
     fdc:	023fff04 	movi	r8,-4
     fe0:	589b883a 	add	r13,r11,r2
     fe4:	6807883a 	mov	r3,r13
     fe8:	014003c4 	movi	r5,15
     fec:	1c000317 	ldw	r16,12(r3)
     ff0:	1c00041e 	bne	r3,r16,1004 <_malloc_r+0x290>
     ff4:	0000a706 	br	1294 <_malloc_r+0x520>
     ff8:	3000ab0e 	bge	r6,zero,12a8 <_malloc_r+0x534>
     ffc:	84000317 	ldw	r16,12(r16)
    1000:	1c00a426 	beq	r3,r16,1294 <_malloc_r+0x520>
    1004:	80800117 	ldw	r2,4(r16)
    1008:	1204703a 	and	r2,r2,r8
    100c:	144dc83a 	sub	r6,r2,r17
    1010:	29bff90e 	bge	r5,r6,ff8 <_malloc_r+0x284>
    1014:	81000317 	ldw	r4,12(r16)
    1018:	80c00217 	ldw	r3,8(r16)
    101c:	89400054 	ori	r5,r17,1
    1020:	8445883a 	add	r2,r16,r17
    1024:	20c00215 	stw	r3,8(r4)
    1028:	19000315 	stw	r4,12(r3)
    102c:	81400115 	stw	r5,4(r16)
    1030:	1187883a 	add	r3,r2,r6
    1034:	31000054 	ori	r4,r6,1
    1038:	50800315 	stw	r2,12(r10)
    103c:	50800215 	stw	r2,8(r10)
    1040:	19800015 	stw	r6,0(r3)
    1044:	11000115 	stw	r4,4(r2)
    1048:	12800215 	stw	r10,8(r2)
    104c:	12800315 	stw	r10,12(r2)
    1050:	9009883a 	mov	r4,r18
    1054:	000ae640 	call	ae64 <__malloc_unlock>
    1058:	80c00204 	addi	r3,r16,8
    105c:	003f5906 	br	dc4 <_malloc_r+0x50>
    1060:	8109883a 	add	r4,r16,r4
    1064:	20800117 	ldw	r2,4(r4)
    1068:	80c00217 	ldw	r3,8(r16)
    106c:	81400317 	ldw	r5,12(r16)
    1070:	10800054 	ori	r2,r2,1
    1074:	20800115 	stw	r2,4(r4)
    1078:	28c00215 	stw	r3,8(r5)
    107c:	19400315 	stw	r5,12(r3)
    1080:	9009883a 	mov	r4,r18
    1084:	000ae640 	call	ae64 <__malloc_unlock>
    1088:	80c00204 	addi	r3,r16,8
    108c:	003f4d06 	br	dc4 <_malloc_r+0x50>
    1090:	80800204 	addi	r2,r16,8
    1094:	14000317 	ldw	r16,12(r2)
    1098:	143f911e 	bne	r2,r16,ee0 <_malloc_r+0x16c>
    109c:	1a400084 	addi	r9,r3,2
    10a0:	003f7306 	br	e70 <_malloc_r+0xfc>
    10a4:	88c00054 	ori	r3,r17,1
    10a8:	8445883a 	add	r2,r16,r17
    10ac:	80c00115 	stw	r3,4(r16)
    10b0:	003fdf06 	br	1030 <_malloc_r+0x2bc>
    10b4:	e4000217 	ldw	r16,8(fp)
    10b8:	00bfff04 	movi	r2,-4
    10bc:	80c00117 	ldw	r3,4(r16)
    10c0:	802d883a 	mov	r22,r16
    10c4:	18aa703a 	and	r21,r3,r2
    10c8:	ac401636 	bltu	r21,r17,1124 <_malloc_r+0x3b0>
    10cc:	ac49c83a 	sub	r4,r21,r17
    10d0:	008003c4 	movi	r2,15
    10d4:	1100130e 	bge	r2,r4,1124 <_malloc_r+0x3b0>
    10d8:	88800054 	ori	r2,r17,1
    10dc:	8447883a 	add	r3,r16,r17
    10e0:	80800115 	stw	r2,4(r16)
    10e4:	20800054 	ori	r2,r4,1
    10e8:	18800115 	stw	r2,4(r3)
    10ec:	e0c00215 	stw	r3,8(fp)
    10f0:	9009883a 	mov	r4,r18
    10f4:	000ae640 	call	ae64 <__malloc_unlock>
    10f8:	80c00204 	addi	r3,r16,8
    10fc:	003f3106 	br	dc4 <_malloc_r+0x50>
    1100:	39c00117 	ldw	r7,4(r7)
    1104:	573ffe04 	addi	fp,r10,-8
    1108:	003fa006 	br	f8c <_malloc_r+0x218>
    110c:	00801504 	movi	r2,84
    1110:	10c06736 	bltu	r2,r3,12b0 <_malloc_r+0x53c>
    1114:	8804d33a 	srli	r2,r17,12
    1118:	11801b84 	addi	r6,r2,110
    111c:	300490fa 	slli	r2,r6,3
    1120:	003f4106 	br	e28 <_malloc_r+0xb4>
    1124:	d0a6ac17 	ldw	r2,-25936(gp)
    1128:	d0e00217 	ldw	r3,-32760(gp)
    112c:	053fffc4 	movi	r20,-1
    1130:	10800404 	addi	r2,r2,16
    1134:	88a7883a 	add	r19,r17,r2
    1138:	1d000326 	beq	r3,r20,1148 <_malloc_r+0x3d4>
    113c:	98c3ffc4 	addi	r3,r19,4095
    1140:	00bc0004 	movi	r2,-4096
    1144:	18a6703a 	and	r19,r3,r2
    1148:	9009883a 	mov	r4,r18
    114c:	980b883a 	mov	r5,r19
    1150:	00015e00 	call	15e0 <_sbrk_r>
    1154:	1009883a 	mov	r4,r2
    1158:	15000426 	beq	r2,r20,116c <_malloc_r+0x3f8>
    115c:	854b883a 	add	r5,r16,r21
    1160:	1029883a 	mov	r20,r2
    1164:	11405a2e 	bgeu	r2,r5,12d0 <_malloc_r+0x55c>
    1168:	87000c26 	beq	r16,fp,119c <_malloc_r+0x428>
    116c:	e4000217 	ldw	r16,8(fp)
    1170:	80c00117 	ldw	r3,4(r16)
    1174:	00bfff04 	movi	r2,-4
    1178:	1884703a 	and	r2,r3,r2
    117c:	14400336 	bltu	r2,r17,118c <_malloc_r+0x418>
    1180:	1449c83a 	sub	r4,r2,r17
    1184:	008003c4 	movi	r2,15
    1188:	113fd316 	blt	r2,r4,10d8 <_malloc_r+0x364>
    118c:	9009883a 	mov	r4,r18
    1190:	000ae640 	call	ae64 <__malloc_unlock>
    1194:	0007883a 	mov	r3,zero
    1198:	003f0a06 	br	dc4 <_malloc_r+0x50>
    119c:	05c00074 	movhi	r23,1
    11a0:	bdc3e304 	addi	r23,r23,3980
    11a4:	b8800017 	ldw	r2,0(r23)
    11a8:	988d883a 	add	r6,r19,r2
    11ac:	b9800015 	stw	r6,0(r23)
    11b0:	d0e00217 	ldw	r3,-32760(gp)
    11b4:	00bfffc4 	movi	r2,-1
    11b8:	18808e26 	beq	r3,r2,13f4 <_malloc_r+0x680>
    11bc:	2145c83a 	sub	r2,r4,r5
    11c0:	3085883a 	add	r2,r6,r2
    11c4:	b8800015 	stw	r2,0(r23)
    11c8:	20c001cc 	andi	r3,r4,7
    11cc:	18005f1e 	bne	r3,zero,134c <_malloc_r+0x5d8>
    11d0:	000b883a 	mov	r5,zero
    11d4:	a4c5883a 	add	r2,r20,r19
    11d8:	1083ffcc 	andi	r2,r2,4095
    11dc:	00c40004 	movi	r3,4096
    11e0:	1887c83a 	sub	r3,r3,r2
    11e4:	28e7883a 	add	r19,r5,r3
    11e8:	9009883a 	mov	r4,r18
    11ec:	980b883a 	mov	r5,r19
    11f0:	00015e00 	call	15e0 <_sbrk_r>
    11f4:	1007883a 	mov	r3,r2
    11f8:	00bfffc4 	movi	r2,-1
    11fc:	18807a26 	beq	r3,r2,13e8 <_malloc_r+0x674>
    1200:	1d05c83a 	sub	r2,r3,r20
    1204:	9885883a 	add	r2,r19,r2
    1208:	10c00054 	ori	r3,r2,1
    120c:	b8800017 	ldw	r2,0(r23)
    1210:	a021883a 	mov	r16,r20
    1214:	a0c00115 	stw	r3,4(r20)
    1218:	9885883a 	add	r2,r19,r2
    121c:	b8800015 	stw	r2,0(r23)
    1220:	e5000215 	stw	r20,8(fp)
    1224:	b7003626 	beq	r22,fp,1300 <_malloc_r+0x58c>
    1228:	018003c4 	movi	r6,15
    122c:	35404b36 	bltu	r6,r21,135c <_malloc_r+0x5e8>
    1230:	00800044 	movi	r2,1
    1234:	a0800115 	stw	r2,4(r20)
    1238:	003fcd06 	br	1170 <_malloc_r+0x3fc>
    123c:	2808d27a 	srli	r4,r5,9
    1240:	2000371e 	bne	r4,zero,1320 <_malloc_r+0x5ac>
    1244:	2808d0fa 	srli	r4,r5,3
    1248:	200690fa 	slli	r3,r4,3
    124c:	1ad1883a 	add	r8,r3,r11
    1250:	41800217 	ldw	r6,8(r8)
    1254:	41805b26 	beq	r8,r6,13c4 <_malloc_r+0x650>
    1258:	30800117 	ldw	r2,4(r6)
    125c:	00ffff04 	movi	r3,-4
    1260:	10c4703a 	and	r2,r2,r3
    1264:	2880022e 	bgeu	r5,r2,1270 <_malloc_r+0x4fc>
    1268:	31800217 	ldw	r6,8(r6)
    126c:	41bffa1e 	bne	r8,r6,1258 <_malloc_r+0x4e4>
    1270:	32000317 	ldw	r8,12(r6)
    1274:	39c00117 	ldw	r7,4(r7)
    1278:	82000315 	stw	r8,12(r16)
    127c:	81800215 	stw	r6,8(r16)
    1280:	07000074 	movhi	fp,1
    1284:	e736a304 	addi	fp,fp,-9588
    1288:	34000315 	stw	r16,12(r6)
    128c:	44000215 	stw	r16,8(r8)
    1290:	003f3e06 	br	f8c <_malloc_r+0x218>
    1294:	63000044 	addi	r12,r12,1
    1298:	608000cc 	andi	r2,r12,3
    129c:	10005d26 	beq	r2,zero,1414 <_malloc_r+0x6a0>
    12a0:	18c00204 	addi	r3,r3,8
    12a4:	003f5106 	br	fec <_malloc_r+0x278>
    12a8:	8089883a 	add	r4,r16,r2
    12ac:	003f6d06 	br	1064 <_malloc_r+0x2f0>
    12b0:	00805504 	movi	r2,340
    12b4:	10c02036 	bltu	r2,r3,1338 <_malloc_r+0x5c4>
    12b8:	8804d3fa 	srli	r2,r17,15
    12bc:	11801dc4 	addi	r6,r2,119
    12c0:	300490fa 	slli	r2,r6,3
    12c4:	003ed806 	br	e28 <_malloc_r+0xb4>
    12c8:	48c000c4 	addi	r3,r9,3
    12cc:	003f3106 	br	f94 <_malloc_r+0x220>
    12d0:	05c00074 	movhi	r23,1
    12d4:	bdc3e304 	addi	r23,r23,3980
    12d8:	b8800017 	ldw	r2,0(r23)
    12dc:	988d883a 	add	r6,r19,r2
    12e0:	b9800015 	stw	r6,0(r23)
    12e4:	293fb21e 	bne	r5,r4,11b0 <_malloc_r+0x43c>
    12e8:	2083ffcc 	andi	r2,r4,4095
    12ec:	103fb01e 	bne	r2,zero,11b0 <_malloc_r+0x43c>
    12f0:	e4000217 	ldw	r16,8(fp)
    12f4:	9d45883a 	add	r2,r19,r21
    12f8:	10800054 	ori	r2,r2,1
    12fc:	80800115 	stw	r2,4(r16)
    1300:	b8c00017 	ldw	r3,0(r23)
    1304:	d0a6ad17 	ldw	r2,-25932(gp)
    1308:	10c0012e 	bgeu	r2,r3,1310 <_malloc_r+0x59c>
    130c:	d0e6ad15 	stw	r3,-25932(gp)
    1310:	d0a6ae17 	ldw	r2,-25928(gp)
    1314:	10ff962e 	bgeu	r2,r3,1170 <_malloc_r+0x3fc>
    1318:	d0e6ae15 	stw	r3,-25928(gp)
    131c:	003f9406 	br	1170 <_malloc_r+0x3fc>
    1320:	00800104 	movi	r2,4
    1324:	11001e36 	bltu	r2,r4,13a0 <_malloc_r+0x62c>
    1328:	2804d1ba 	srli	r2,r5,6
    132c:	11000e04 	addi	r4,r2,56
    1330:	200690fa 	slli	r3,r4,3
    1334:	003fc506 	br	124c <_malloc_r+0x4d8>
    1338:	00815504 	movi	r2,1364
    133c:	10c01d2e 	bgeu	r2,r3,13b4 <_malloc_r+0x640>
    1340:	01801f84 	movi	r6,126
    1344:	0080fc04 	movi	r2,1008
    1348:	003eb706 	br	e28 <_malloc_r+0xb4>
    134c:	00800204 	movi	r2,8
    1350:	10cbc83a 	sub	r5,r2,r3
    1354:	2169883a 	add	r20,r4,r5
    1358:	003f9e06 	br	11d4 <_malloc_r+0x460>
    135c:	00bffe04 	movi	r2,-8
    1360:	a93ffd04 	addi	r4,r21,-12
    1364:	2088703a 	and	r4,r4,r2
    1368:	b10b883a 	add	r5,r22,r4
    136c:	00c00144 	movi	r3,5
    1370:	28c00215 	stw	r3,8(r5)
    1374:	28c00115 	stw	r3,4(r5)
    1378:	b0800117 	ldw	r2,4(r22)
    137c:	1080004c 	andi	r2,r2,1
    1380:	2084b03a 	or	r2,r4,r2
    1384:	b0800115 	stw	r2,4(r22)
    1388:	313fdd2e 	bgeu	r6,r4,1300 <_malloc_r+0x58c>
    138c:	b1400204 	addi	r5,r22,8
    1390:	9009883a 	mov	r4,r18
    1394:	00055880 	call	5588 <_free_r>
    1398:	e4000217 	ldw	r16,8(fp)
    139c:	003fd806 	br	1300 <_malloc_r+0x58c>
    13a0:	00800504 	movi	r2,20
    13a4:	11001536 	bltu	r2,r4,13fc <_malloc_r+0x688>
    13a8:	210016c4 	addi	r4,r4,91
    13ac:	200690fa 	slli	r3,r4,3
    13b0:	003fa606 	br	124c <_malloc_r+0x4d8>
    13b4:	8804d4ba 	srli	r2,r17,18
    13b8:	11801f04 	addi	r6,r2,124
    13bc:	300490fa 	slli	r2,r6,3
    13c0:	003e9906 	br	e28 <_malloc_r+0xb4>
    13c4:	2009d0ba 	srai	r4,r4,2
    13c8:	01400074 	movhi	r5,1
    13cc:	2976a304 	addi	r5,r5,-9588
    13d0:	00c00044 	movi	r3,1
    13d4:	28800117 	ldw	r2,4(r5)
    13d8:	1906983a 	sll	r3,r3,r4
    13dc:	10c4b03a 	or	r2,r2,r3
    13e0:	28800115 	stw	r2,4(r5)
    13e4:	003fa306 	br	1274 <_malloc_r+0x500>
    13e8:	0027883a 	mov	r19,zero
    13ec:	00c00044 	movi	r3,1
    13f0:	003f8606 	br	120c <_malloc_r+0x498>
    13f4:	d1200215 	stw	r4,-32760(gp)
    13f8:	003f7306 	br	11c8 <_malloc_r+0x454>
    13fc:	00801504 	movi	r2,84
    1400:	11001936 	bltu	r2,r4,1468 <_malloc_r+0x6f4>
    1404:	2804d33a 	srli	r2,r5,12
    1408:	11001b84 	addi	r4,r2,110
    140c:	200690fa 	slli	r3,r4,3
    1410:	003f8e06 	br	124c <_malloc_r+0x4d8>
    1414:	480b883a 	mov	r5,r9
    1418:	6807883a 	mov	r3,r13
    141c:	288000cc 	andi	r2,r5,3
    1420:	18fffe04 	addi	r3,r3,-8
    1424:	297fffc4 	addi	r5,r5,-1
    1428:	10001526 	beq	r2,zero,1480 <_malloc_r+0x70c>
    142c:	18800217 	ldw	r2,8(r3)
    1430:	10fffa26 	beq	r2,r3,141c <_malloc_r+0x6a8>
    1434:	2109883a 	add	r4,r4,r4
    1438:	393f1e36 	bltu	r7,r4,10b4 <_malloc_r+0x340>
    143c:	203f1d26 	beq	r4,zero,10b4 <_malloc_r+0x340>
    1440:	21c4703a 	and	r2,r4,r7
    1444:	10000226 	beq	r2,zero,1450 <_malloc_r+0x6dc>
    1448:	6013883a 	mov	r9,r12
    144c:	003ee106 	br	fd4 <_malloc_r+0x260>
    1450:	2109883a 	add	r4,r4,r4
    1454:	3904703a 	and	r2,r7,r4
    1458:	63000104 	addi	r12,r12,4
    145c:	103ffc26 	beq	r2,zero,1450 <_malloc_r+0x6dc>
    1460:	6013883a 	mov	r9,r12
    1464:	003edb06 	br	fd4 <_malloc_r+0x260>
    1468:	00805504 	movi	r2,340
    146c:	11000836 	bltu	r2,r4,1490 <_malloc_r+0x71c>
    1470:	2804d3fa 	srli	r2,r5,15
    1474:	11001dc4 	addi	r4,r2,119
    1478:	200690fa 	slli	r3,r4,3
    147c:	003f7306 	br	124c <_malloc_r+0x4d8>
    1480:	0104303a 	nor	r2,zero,r4
    1484:	388e703a 	and	r7,r7,r2
    1488:	e1c00115 	stw	r7,4(fp)
    148c:	003fe906 	br	1434 <_malloc_r+0x6c0>
    1490:	00815504 	movi	r2,1364
    1494:	1100032e 	bgeu	r2,r4,14a4 <_malloc_r+0x730>
    1498:	01001f84 	movi	r4,126
    149c:	00c0fc04 	movi	r3,1008
    14a0:	003f6a06 	br	124c <_malloc_r+0x4d8>
    14a4:	2804d4ba 	srli	r2,r5,18
    14a8:	11001f04 	addi	r4,r2,124
    14ac:	200690fa 	slli	r3,r4,3
    14b0:	003f6606 	br	124c <_malloc_r+0x4d8>

000014b4 <printf>:
    14b4:	defffb04 	addi	sp,sp,-20
    14b8:	dfc00115 	stw	ra,4(sp)
    14bc:	d9400215 	stw	r5,8(sp)
    14c0:	d9800315 	stw	r6,12(sp)
    14c4:	d9c00415 	stw	r7,16(sp)
    14c8:	00800074 	movhi	r2,1
    14cc:	10bd2d04 	addi	r2,r2,-2892
    14d0:	10c00017 	ldw	r3,0(r2)
    14d4:	200b883a 	mov	r5,r4
    14d8:	d8800204 	addi	r2,sp,8
    14dc:	19000217 	ldw	r4,8(r3)
    14e0:	100d883a 	mov	r6,r2
    14e4:	d8800015 	stw	r2,0(sp)
    14e8:	00035e00 	call	35e0 <__vfprintf_internal>
    14ec:	dfc00117 	ldw	ra,4(sp)
    14f0:	dec00504 	addi	sp,sp,20
    14f4:	f800283a 	ret

000014f8 <_printf_r>:
    14f8:	defffc04 	addi	sp,sp,-16
    14fc:	dfc00115 	stw	ra,4(sp)
    1500:	d9800215 	stw	r6,8(sp)
    1504:	d9c00315 	stw	r7,12(sp)
    1508:	280d883a 	mov	r6,r5
    150c:	21400217 	ldw	r5,8(r4)
    1510:	d8c00204 	addi	r3,sp,8
    1514:	180f883a 	mov	r7,r3
    1518:	d8c00015 	stw	r3,0(sp)
    151c:	000171c0 	call	171c <___vfprintf_internal_r>
    1520:	dfc00117 	ldw	ra,4(sp)
    1524:	dec00404 	addi	sp,sp,16
    1528:	f800283a 	ret

0000152c <_puts_r>:
    152c:	defff604 	addi	sp,sp,-40
    1530:	dc400715 	stw	r17,28(sp)
    1534:	2023883a 	mov	r17,r4
    1538:	2809883a 	mov	r4,r5
    153c:	dfc00915 	stw	ra,36(sp)
    1540:	dcc00815 	stw	r19,32(sp)
    1544:	2827883a 	mov	r19,r5
    1548:	00016500 	call	1650 <strlen>
    154c:	89400217 	ldw	r5,8(r17)
    1550:	00c00074 	movhi	r3,1
    1554:	18f5d404 	addi	r3,r3,-10416
    1558:	01c00044 	movi	r7,1
    155c:	12000044 	addi	r8,r2,1
    1560:	d8c00515 	stw	r3,20(sp)
    1564:	d9c00615 	stw	r7,24(sp)
    1568:	d8c00304 	addi	r3,sp,12
    156c:	01c00084 	movi	r7,2
    1570:	8809883a 	mov	r4,r17
    1574:	d80d883a 	mov	r6,sp
    1578:	d8c00015 	stw	r3,0(sp)
    157c:	dcc00315 	stw	r19,12(sp)
    1580:	da000215 	stw	r8,8(sp)
    1584:	d9c00115 	stw	r7,4(sp)
    1588:	d8800415 	stw	r2,16(sp)
    158c:	000589c0 	call	589c <__sfvwrite_r>
    1590:	00ffffc4 	movi	r3,-1
    1594:	10000626 	beq	r2,zero,15b0 <_puts_r+0x84>
    1598:	1805883a 	mov	r2,r3
    159c:	dfc00917 	ldw	ra,36(sp)
    15a0:	dcc00817 	ldw	r19,32(sp)
    15a4:	dc400717 	ldw	r17,28(sp)
    15a8:	dec00a04 	addi	sp,sp,40
    15ac:	f800283a 	ret
    15b0:	00c00284 	movi	r3,10
    15b4:	1805883a 	mov	r2,r3
    15b8:	dfc00917 	ldw	ra,36(sp)
    15bc:	dcc00817 	ldw	r19,32(sp)
    15c0:	dc400717 	ldw	r17,28(sp)
    15c4:	dec00a04 	addi	sp,sp,40
    15c8:	f800283a 	ret

000015cc <puts>:
    15cc:	00800074 	movhi	r2,1
    15d0:	10bd2d04 	addi	r2,r2,-2892
    15d4:	200b883a 	mov	r5,r4
    15d8:	11000017 	ldw	r4,0(r2)
    15dc:	000152c1 	jmpi	152c <_puts_r>

000015e0 <_sbrk_r>:
    15e0:	defffd04 	addi	sp,sp,-12
    15e4:	dc000015 	stw	r16,0(sp)
    15e8:	04000074 	movhi	r16,1
    15ec:	8403d904 	addi	r16,r16,3940
    15f0:	dc400115 	stw	r17,4(sp)
    15f4:	80000015 	stw	zero,0(r16)
    15f8:	2023883a 	mov	r17,r4
    15fc:	2809883a 	mov	r4,r5
    1600:	dfc00215 	stw	ra,8(sp)
    1604:	000b3180 	call	b318 <sbrk>
    1608:	1007883a 	mov	r3,r2
    160c:	00bfffc4 	movi	r2,-1
    1610:	18800626 	beq	r3,r2,162c <_sbrk_r+0x4c>
    1614:	1805883a 	mov	r2,r3
    1618:	dfc00217 	ldw	ra,8(sp)
    161c:	dc400117 	ldw	r17,4(sp)
    1620:	dc000017 	ldw	r16,0(sp)
    1624:	dec00304 	addi	sp,sp,12
    1628:	f800283a 	ret
    162c:	80800017 	ldw	r2,0(r16)
    1630:	103ff826 	beq	r2,zero,1614 <_sbrk_r+0x34>
    1634:	88800015 	stw	r2,0(r17)
    1638:	1805883a 	mov	r2,r3
    163c:	dfc00217 	ldw	ra,8(sp)
    1640:	dc400117 	ldw	r17,4(sp)
    1644:	dc000017 	ldw	r16,0(sp)
    1648:	dec00304 	addi	sp,sp,12
    164c:	f800283a 	ret

00001650 <strlen>:
    1650:	208000cc 	andi	r2,r4,3
    1654:	2011883a 	mov	r8,r4
    1658:	1000161e 	bne	r2,zero,16b4 <strlen+0x64>
    165c:	20c00017 	ldw	r3,0(r4)
    1660:	017fbff4 	movhi	r5,65279
    1664:	297fbfc4 	addi	r5,r5,-257
    1668:	01e02074 	movhi	r7,32897
    166c:	39e02004 	addi	r7,r7,-32640
    1670:	1945883a 	add	r2,r3,r5
    1674:	11c4703a 	and	r2,r2,r7
    1678:	00c6303a 	nor	r3,zero,r3
    167c:	1886703a 	and	r3,r3,r2
    1680:	18000c1e 	bne	r3,zero,16b4 <strlen+0x64>
    1684:	280d883a 	mov	r6,r5
    1688:	380b883a 	mov	r5,r7
    168c:	21000104 	addi	r4,r4,4
    1690:	20800017 	ldw	r2,0(r4)
    1694:	1187883a 	add	r3,r2,r6
    1698:	1946703a 	and	r3,r3,r5
    169c:	0084303a 	nor	r2,zero,r2
    16a0:	10c4703a 	and	r2,r2,r3
    16a4:	103ff926 	beq	r2,zero,168c <strlen+0x3c>
    16a8:	20800007 	ldb	r2,0(r4)
    16ac:	10000326 	beq	r2,zero,16bc <strlen+0x6c>
    16b0:	21000044 	addi	r4,r4,1
    16b4:	20800007 	ldb	r2,0(r4)
    16b8:	103ffd1e 	bne	r2,zero,16b0 <strlen+0x60>
    16bc:	2205c83a 	sub	r2,r4,r8
    16c0:	f800283a 	ret

000016c4 <__sprint_r>:
    16c4:	30800217 	ldw	r2,8(r6)
    16c8:	defffe04 	addi	sp,sp,-8
    16cc:	dc000015 	stw	r16,0(sp)
    16d0:	dfc00115 	stw	ra,4(sp)
    16d4:	3021883a 	mov	r16,r6
    16d8:	0007883a 	mov	r3,zero
    16dc:	1000061e 	bne	r2,zero,16f8 <__sprint_r+0x34>
    16e0:	1805883a 	mov	r2,r3
    16e4:	30000115 	stw	zero,4(r6)
    16e8:	dfc00117 	ldw	ra,4(sp)
    16ec:	dc000017 	ldw	r16,0(sp)
    16f0:	dec00204 	addi	sp,sp,8
    16f4:	f800283a 	ret
    16f8:	000589c0 	call	589c <__sfvwrite_r>
    16fc:	1007883a 	mov	r3,r2
    1700:	1805883a 	mov	r2,r3
    1704:	80000115 	stw	zero,4(r16)
    1708:	80000215 	stw	zero,8(r16)
    170c:	dfc00117 	ldw	ra,4(sp)
    1710:	dc000017 	ldw	r16,0(sp)
    1714:	dec00204 	addi	sp,sp,8
    1718:	f800283a 	ret

0000171c <___vfprintf_internal_r>:
    171c:	defea404 	addi	sp,sp,-1392
    1720:	dd815815 	stw	r22,1376(sp)
    1724:	dc015215 	stw	r16,1352(sp)
    1728:	d9c15115 	stw	r7,1348(sp)
    172c:	dfc15b15 	stw	ra,1388(sp)
    1730:	df015a15 	stw	fp,1384(sp)
    1734:	ddc15915 	stw	r23,1380(sp)
    1738:	dd415715 	stw	r21,1372(sp)
    173c:	dd015615 	stw	r20,1368(sp)
    1740:	dcc15515 	stw	r19,1364(sp)
    1744:	dc815415 	stw	r18,1360(sp)
    1748:	dc415315 	stw	r17,1356(sp)
    174c:	282d883a 	mov	r22,r5
    1750:	3021883a 	mov	r16,r6
    1754:	d9014f15 	stw	r4,1340(sp)
    1758:	0005ec00 	call	5ec0 <_localeconv_r>
    175c:	10800017 	ldw	r2,0(r2)
    1760:	d9c15117 	ldw	r7,1348(sp)
    1764:	d8814915 	stw	r2,1316(sp)
    1768:	d8814f17 	ldw	r2,1340(sp)
    176c:	10000226 	beq	r2,zero,1778 <___vfprintf_internal_r+0x5c>
    1770:	10800e17 	ldw	r2,56(r2)
    1774:	10020d26 	beq	r2,zero,1fac <___vfprintf_internal_r+0x890>
    1778:	b080030b 	ldhu	r2,12(r22)
    177c:	1080020c 	andi	r2,r2,8
    1780:	10020e26 	beq	r2,zero,1fbc <___vfprintf_internal_r+0x8a0>
    1784:	b0800417 	ldw	r2,16(r22)
    1788:	10020c26 	beq	r2,zero,1fbc <___vfprintf_internal_r+0x8a0>
    178c:	b200030b 	ldhu	r8,12(r22)
    1790:	00800284 	movi	r2,10
    1794:	40c0068c 	andi	r3,r8,26
    1798:	18802f1e 	bne	r3,r2,1858 <___vfprintf_internal_r+0x13c>
    179c:	b080038f 	ldh	r2,14(r22)
    17a0:	10002d16 	blt	r2,zero,1858 <___vfprintf_internal_r+0x13c>
    17a4:	b240038b 	ldhu	r9,14(r22)
    17a8:	b2800717 	ldw	r10,28(r22)
    17ac:	b2c00917 	ldw	r11,36(r22)
    17b0:	d9014f17 	ldw	r4,1340(sp)
    17b4:	dc402904 	addi	r17,sp,164
    17b8:	d8804004 	addi	r2,sp,256
    17bc:	00c10004 	movi	r3,1024
    17c0:	423fff4c 	andi	r8,r8,65533
    17c4:	800d883a 	mov	r6,r16
    17c8:	880b883a 	mov	r5,r17
    17cc:	da002c0d 	sth	r8,176(sp)
    17d0:	da402c8d 	sth	r9,178(sp)
    17d4:	da803015 	stw	r10,192(sp)
    17d8:	dac03215 	stw	r11,200(sp)
    17dc:	d8802d15 	stw	r2,180(sp)
    17e0:	d8c02e15 	stw	r3,184(sp)
    17e4:	d8802915 	stw	r2,164(sp)
    17e8:	d8c02b15 	stw	r3,172(sp)
    17ec:	d8002f15 	stw	zero,188(sp)
    17f0:	000171c0 	call	171c <___vfprintf_internal_r>
    17f4:	d8814b15 	stw	r2,1324(sp)
    17f8:	10000416 	blt	r2,zero,180c <___vfprintf_internal_r+0xf0>
    17fc:	d9014f17 	ldw	r4,1340(sp)
    1800:	880b883a 	mov	r5,r17
    1804:	0004f380 	call	4f38 <_fflush_r>
    1808:	1002321e 	bne	r2,zero,20d4 <___vfprintf_internal_r+0x9b8>
    180c:	d8802c0b 	ldhu	r2,176(sp)
    1810:	1080100c 	andi	r2,r2,64
    1814:	10000326 	beq	r2,zero,1824 <___vfprintf_internal_r+0x108>
    1818:	b080030b 	ldhu	r2,12(r22)
    181c:	10801014 	ori	r2,r2,64
    1820:	b080030d 	sth	r2,12(r22)
    1824:	d8814b17 	ldw	r2,1324(sp)
    1828:	dfc15b17 	ldw	ra,1388(sp)
    182c:	df015a17 	ldw	fp,1384(sp)
    1830:	ddc15917 	ldw	r23,1380(sp)
    1834:	dd815817 	ldw	r22,1376(sp)
    1838:	dd415717 	ldw	r21,1372(sp)
    183c:	dd015617 	ldw	r20,1368(sp)
    1840:	dcc15517 	ldw	r19,1364(sp)
    1844:	dc815417 	ldw	r18,1360(sp)
    1848:	dc415317 	ldw	r17,1356(sp)
    184c:	dc015217 	ldw	r16,1352(sp)
    1850:	dec15c04 	addi	sp,sp,1392
    1854:	f800283a 	ret
    1858:	0005883a 	mov	r2,zero
    185c:	0007883a 	mov	r3,zero
    1860:	dd401904 	addi	r21,sp,100
    1864:	d8814215 	stw	r2,1288(sp)
    1868:	802f883a 	mov	r23,r16
    186c:	d8c14315 	stw	r3,1292(sp)
    1870:	d8014b15 	stw	zero,1324(sp)
    1874:	d8014815 	stw	zero,1312(sp)
    1878:	d8014415 	stw	zero,1296(sp)
    187c:	d8014715 	stw	zero,1308(sp)
    1880:	dd400c15 	stw	r21,48(sp)
    1884:	d8000e15 	stw	zero,56(sp)
    1888:	d8000d15 	stw	zero,52(sp)
    188c:	b8800007 	ldb	r2,0(r23)
    1890:	10001926 	beq	r2,zero,18f8 <___vfprintf_internal_r+0x1dc>
    1894:	00c00944 	movi	r3,37
    1898:	10c01726 	beq	r2,r3,18f8 <___vfprintf_internal_r+0x1dc>
    189c:	b821883a 	mov	r16,r23
    18a0:	00000106 	br	18a8 <___vfprintf_internal_r+0x18c>
    18a4:	10c00326 	beq	r2,r3,18b4 <___vfprintf_internal_r+0x198>
    18a8:	84000044 	addi	r16,r16,1
    18ac:	80800007 	ldb	r2,0(r16)
    18b0:	103ffc1e 	bne	r2,zero,18a4 <___vfprintf_internal_r+0x188>
    18b4:	85e7c83a 	sub	r19,r16,r23
    18b8:	98000e26 	beq	r19,zero,18f4 <___vfprintf_internal_r+0x1d8>
    18bc:	dc800e17 	ldw	r18,56(sp)
    18c0:	dc400d17 	ldw	r17,52(sp)
    18c4:	008001c4 	movi	r2,7
    18c8:	94e5883a 	add	r18,r18,r19
    18cc:	8c400044 	addi	r17,r17,1
    18d0:	adc00015 	stw	r23,0(r21)
    18d4:	dc800e15 	stw	r18,56(sp)
    18d8:	acc00115 	stw	r19,4(r21)
    18dc:	dc400d15 	stw	r17,52(sp)
    18e0:	14428b16 	blt	r2,r17,2310 <___vfprintf_internal_r+0xbf4>
    18e4:	ad400204 	addi	r21,r21,8
    18e8:	d9014b17 	ldw	r4,1324(sp)
    18ec:	24c9883a 	add	r4,r4,r19
    18f0:	d9014b15 	stw	r4,1324(sp)
    18f4:	802f883a 	mov	r23,r16
    18f8:	b8800007 	ldb	r2,0(r23)
    18fc:	10013c26 	beq	r2,zero,1df0 <___vfprintf_internal_r+0x6d4>
    1900:	bdc00044 	addi	r23,r23,1
    1904:	d8000405 	stb	zero,16(sp)
    1908:	b8c00007 	ldb	r3,0(r23)
    190c:	04ffffc4 	movi	r19,-1
    1910:	d8014c15 	stw	zero,1328(sp)
    1914:	d8014a15 	stw	zero,1320(sp)
    1918:	d8c14d15 	stw	r3,1332(sp)
    191c:	bdc00044 	addi	r23,r23,1
    1920:	d9414d17 	ldw	r5,1332(sp)
    1924:	00801604 	movi	r2,88
    1928:	28fff804 	addi	r3,r5,-32
    192c:	10c06036 	bltu	r2,r3,1ab0 <___vfprintf_internal_r+0x394>
    1930:	18c5883a 	add	r2,r3,r3
    1934:	1085883a 	add	r2,r2,r2
    1938:	00c00034 	movhi	r3,0
    193c:	18c65304 	addi	r3,r3,6476
    1940:	10c5883a 	add	r2,r2,r3
    1944:	11000017 	ldw	r4,0(r2)
    1948:	2000683a 	jmp	r4
    194c:	000028c0 	call	28c <initialize_alarm+0x38>
    1950:	00001ab0 	cmpltui	zero,zero,106
    1954:	00001ab0 	cmpltui	zero,zero,106
    1958:	000028ac 	andhi	zero,zero,162
    195c:	00001ab0 	cmpltui	zero,zero,106
    1960:	00001ab0 	cmpltui	zero,zero,106
    1964:	00001ab0 	cmpltui	zero,zero,106
    1968:	00001ab0 	cmpltui	zero,zero,106
    196c:	00001ab0 	cmpltui	zero,zero,106
    1970:	00001ab0 	cmpltui	zero,zero,106
    1974:	0000268c 	andi	zero,zero,154
    1978:	0000289c 	xori	zero,zero,162
    197c:	00001ab0 	cmpltui	zero,zero,106
    1980:	000026a4 	muli	zero,zero,154
    1984:	00002944 	movi	zero,165
    1988:	00001ab0 	cmpltui	zero,zero,106
    198c:	00002930 	cmpltui	zero,zero,164
    1990:	000028ec 	andhi	zero,zero,163
    1994:	000028ec 	andhi	zero,zero,163
    1998:	000028ec 	andhi	zero,zero,163
    199c:	000028ec 	andhi	zero,zero,163
    19a0:	000028ec 	andhi	zero,zero,163
    19a4:	000028ec 	andhi	zero,zero,163
    19a8:	000028ec 	andhi	zero,zero,163
    19ac:	000028ec 	andhi	zero,zero,163
    19b0:	000028ec 	andhi	zero,zero,163
    19b4:	00001ab0 	cmpltui	zero,zero,106
    19b8:	00001ab0 	cmpltui	zero,zero,106
    19bc:	00001ab0 	cmpltui	zero,zero,106
    19c0:	00001ab0 	cmpltui	zero,zero,106
    19c4:	00001ab0 	cmpltui	zero,zero,106
    19c8:	00001ab0 	cmpltui	zero,zero,106
    19cc:	00001ab0 	cmpltui	zero,zero,106
    19d0:	00001ab0 	cmpltui	zero,zero,106
    19d4:	00001ab0 	cmpltui	zero,zero,106
    19d8:	00001ab0 	cmpltui	zero,zero,106
    19dc:	00002108 	cmpgei	zero,zero,132
    19e0:	00002774 	movhi	zero,157
    19e4:	00001ab0 	cmpltui	zero,zero,106
    19e8:	00002774 	movhi	zero,157
    19ec:	00001ab0 	cmpltui	zero,zero,106
    19f0:	00001ab0 	cmpltui	zero,zero,106
    19f4:	00001ab0 	cmpltui	zero,zero,106
    19f8:	00001ab0 	cmpltui	zero,zero,106
    19fc:	000028d8 	cmpnei	zero,zero,163
    1a00:	00001ab0 	cmpltui	zero,zero,106
    1a04:	00001ab0 	cmpltui	zero,zero,106
    1a08:	000021bc 	xorhi	zero,zero,134
    1a0c:	00001ab0 	cmpltui	zero,zero,106
    1a10:	00001ab0 	cmpltui	zero,zero,106
    1a14:	00001ab0 	cmpltui	zero,zero,106
    1a18:	00001ab0 	cmpltui	zero,zero,106
    1a1c:	00001ab0 	cmpltui	zero,zero,106
    1a20:	00002208 	cmpgei	zero,zero,136
    1a24:	00001ab0 	cmpltui	zero,zero,106
    1a28:	00001ab0 	cmpltui	zero,zero,106
    1a2c:	00002828 	cmpgeui	zero,zero,160
    1a30:	00001ab0 	cmpltui	zero,zero,106
    1a34:	00001ab0 	cmpltui	zero,zero,106
    1a38:	00001ab0 	cmpltui	zero,zero,106
    1a3c:	00001ab0 	cmpltui	zero,zero,106
    1a40:	00001ab0 	cmpltui	zero,zero,106
    1a44:	00001ab0 	cmpltui	zero,zero,106
    1a48:	00001ab0 	cmpltui	zero,zero,106
    1a4c:	00001ab0 	cmpltui	zero,zero,106
    1a50:	00001ab0 	cmpltui	zero,zero,106
    1a54:	00001ab0 	cmpltui	zero,zero,106
    1a58:	000027fc 	xorhi	zero,zero,159
    1a5c:	00002114 	movui	zero,132
    1a60:	00002774 	movhi	zero,157
    1a64:	00002774 	movhi	zero,157
    1a68:	00002774 	movhi	zero,157
    1a6c:	00002760 	cmpeqi	zero,zero,157
    1a70:	00002114 	movui	zero,132
    1a74:	00001ab0 	cmpltui	zero,zero,106
    1a78:	00001ab0 	cmpltui	zero,zero,106
    1a7c:	000026e8 	cmpgeui	zero,zero,155
    1a80:	00001ab0 	cmpltui	zero,zero,106
    1a84:	000026b8 	rdprs	zero,zero,154
    1a88:	000021c8 	cmpgei	zero,zero,135
    1a8c:	00002718 	cmpnei	zero,zero,156
    1a90:	00002704 	movi	zero,156
    1a94:	00001ab0 	cmpltui	zero,zero,106
    1a98:	000029ac 	andhi	zero,zero,166
    1a9c:	00001ab0 	cmpltui	zero,zero,106
    1aa0:	00002214 	movui	zero,136
    1aa4:	00001ab0 	cmpltui	zero,zero,106
    1aa8:	00001ab0 	cmpltui	zero,zero,106
    1aac:	0000288c 	andi	zero,zero,162
    1ab0:	d9014d17 	ldw	r4,1332(sp)
    1ab4:	2000ce26 	beq	r4,zero,1df0 <___vfprintf_internal_r+0x6d4>
    1ab8:	01400044 	movi	r5,1
    1abc:	d9800f04 	addi	r6,sp,60
    1ac0:	d9c14015 	stw	r7,1280(sp)
    1ac4:	d9414515 	stw	r5,1300(sp)
    1ac8:	d9814115 	stw	r6,1284(sp)
    1acc:	280f883a 	mov	r7,r5
    1ad0:	d9000f05 	stb	r4,60(sp)
    1ad4:	d8000405 	stb	zero,16(sp)
    1ad8:	d8014615 	stw	zero,1304(sp)
    1adc:	d8c14c17 	ldw	r3,1328(sp)
    1ae0:	1880008c 	andi	r2,r3,2
    1ae4:	1005003a 	cmpeq	r2,r2,zero
    1ae8:	d8815015 	stw	r2,1344(sp)
    1aec:	1000031e 	bne	r2,zero,1afc <___vfprintf_internal_r+0x3e0>
    1af0:	d9014517 	ldw	r4,1300(sp)
    1af4:	21000084 	addi	r4,r4,2
    1af8:	d9014515 	stw	r4,1300(sp)
    1afc:	d9414c17 	ldw	r5,1328(sp)
    1b00:	2940210c 	andi	r5,r5,132
    1b04:	d9414e15 	stw	r5,1336(sp)
    1b08:	28002d1e 	bne	r5,zero,1bc0 <___vfprintf_internal_r+0x4a4>
    1b0c:	d9814a17 	ldw	r6,1320(sp)
    1b10:	d8814517 	ldw	r2,1300(sp)
    1b14:	30a1c83a 	sub	r16,r6,r2
    1b18:	0400290e 	bge	zero,r16,1bc0 <___vfprintf_internal_r+0x4a4>
    1b1c:	00800404 	movi	r2,16
    1b20:	14045e0e 	bge	r2,r16,2c9c <___vfprintf_internal_r+0x1580>
    1b24:	dc800e17 	ldw	r18,56(sp)
    1b28:	dc400d17 	ldw	r17,52(sp)
    1b2c:	1027883a 	mov	r19,r2
    1b30:	07000074 	movhi	fp,1
    1b34:	e735f084 	addi	fp,fp,-10302
    1b38:	050001c4 	movi	r20,7
    1b3c:	00000306 	br	1b4c <___vfprintf_internal_r+0x430>
    1b40:	843ffc04 	addi	r16,r16,-16
    1b44:	ad400204 	addi	r21,r21,8
    1b48:	9c00130e 	bge	r19,r16,1b98 <___vfprintf_internal_r+0x47c>
    1b4c:	94800404 	addi	r18,r18,16
    1b50:	8c400044 	addi	r17,r17,1
    1b54:	af000015 	stw	fp,0(r21)
    1b58:	acc00115 	stw	r19,4(r21)
    1b5c:	dc800e15 	stw	r18,56(sp)
    1b60:	dc400d15 	stw	r17,52(sp)
    1b64:	a47ff60e 	bge	r20,r17,1b40 <___vfprintf_internal_r+0x424>
    1b68:	d9014f17 	ldw	r4,1340(sp)
    1b6c:	b00b883a 	mov	r5,r22
    1b70:	d9800c04 	addi	r6,sp,48
    1b74:	d9c15115 	stw	r7,1348(sp)
    1b78:	00016c40 	call	16c4 <__sprint_r>
    1b7c:	d9c15117 	ldw	r7,1348(sp)
    1b80:	10009e1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    1b84:	843ffc04 	addi	r16,r16,-16
    1b88:	dc800e17 	ldw	r18,56(sp)
    1b8c:	dc400d17 	ldw	r17,52(sp)
    1b90:	dd401904 	addi	r21,sp,100
    1b94:	9c3fed16 	blt	r19,r16,1b4c <___vfprintf_internal_r+0x430>
    1b98:	9425883a 	add	r18,r18,r16
    1b9c:	8c400044 	addi	r17,r17,1
    1ba0:	008001c4 	movi	r2,7
    1ba4:	af000015 	stw	fp,0(r21)
    1ba8:	ac000115 	stw	r16,4(r21)
    1bac:	dc800e15 	stw	r18,56(sp)
    1bb0:	dc400d15 	stw	r17,52(sp)
    1bb4:	1441f516 	blt	r2,r17,238c <___vfprintf_internal_r+0xc70>
    1bb8:	ad400204 	addi	r21,r21,8
    1bbc:	00000206 	br	1bc8 <___vfprintf_internal_r+0x4ac>
    1bc0:	dc800e17 	ldw	r18,56(sp)
    1bc4:	dc400d17 	ldw	r17,52(sp)
    1bc8:	d8800407 	ldb	r2,16(sp)
    1bcc:	10000b26 	beq	r2,zero,1bfc <___vfprintf_internal_r+0x4e0>
    1bd0:	00800044 	movi	r2,1
    1bd4:	94800044 	addi	r18,r18,1
    1bd8:	8c400044 	addi	r17,r17,1
    1bdc:	a8800115 	stw	r2,4(r21)
    1be0:	d8c00404 	addi	r3,sp,16
    1be4:	008001c4 	movi	r2,7
    1be8:	a8c00015 	stw	r3,0(r21)
    1bec:	dc800e15 	stw	r18,56(sp)
    1bf0:	dc400d15 	stw	r17,52(sp)
    1bf4:	1441da16 	blt	r2,r17,2360 <___vfprintf_internal_r+0xc44>
    1bf8:	ad400204 	addi	r21,r21,8
    1bfc:	d9015017 	ldw	r4,1344(sp)
    1c00:	20000b1e 	bne	r4,zero,1c30 <___vfprintf_internal_r+0x514>
    1c04:	d8800444 	addi	r2,sp,17
    1c08:	94800084 	addi	r18,r18,2
    1c0c:	8c400044 	addi	r17,r17,1
    1c10:	a8800015 	stw	r2,0(r21)
    1c14:	00c00084 	movi	r3,2
    1c18:	008001c4 	movi	r2,7
    1c1c:	a8c00115 	stw	r3,4(r21)
    1c20:	dc800e15 	stw	r18,56(sp)
    1c24:	dc400d15 	stw	r17,52(sp)
    1c28:	1441c216 	blt	r2,r17,2334 <___vfprintf_internal_r+0xc18>
    1c2c:	ad400204 	addi	r21,r21,8
    1c30:	d9414e17 	ldw	r5,1336(sp)
    1c34:	00802004 	movi	r2,128
    1c38:	2880b126 	beq	r5,r2,1f00 <___vfprintf_internal_r+0x7e4>
    1c3c:	d8c14617 	ldw	r3,1304(sp)
    1c40:	19e1c83a 	sub	r16,r3,r7
    1c44:	0400260e 	bge	zero,r16,1ce0 <___vfprintf_internal_r+0x5c4>
    1c48:	00800404 	movi	r2,16
    1c4c:	1403cf0e 	bge	r2,r16,2b8c <___vfprintf_internal_r+0x1470>
    1c50:	1027883a 	mov	r19,r2
    1c54:	07000074 	movhi	fp,1
    1c58:	e735ec84 	addi	fp,fp,-10318
    1c5c:	050001c4 	movi	r20,7
    1c60:	00000306 	br	1c70 <___vfprintf_internal_r+0x554>
    1c64:	843ffc04 	addi	r16,r16,-16
    1c68:	ad400204 	addi	r21,r21,8
    1c6c:	9c00130e 	bge	r19,r16,1cbc <___vfprintf_internal_r+0x5a0>
    1c70:	94800404 	addi	r18,r18,16
    1c74:	8c400044 	addi	r17,r17,1
    1c78:	af000015 	stw	fp,0(r21)
    1c7c:	acc00115 	stw	r19,4(r21)
    1c80:	dc800e15 	stw	r18,56(sp)
    1c84:	dc400d15 	stw	r17,52(sp)
    1c88:	a47ff60e 	bge	r20,r17,1c64 <___vfprintf_internal_r+0x548>
    1c8c:	d9014f17 	ldw	r4,1340(sp)
    1c90:	b00b883a 	mov	r5,r22
    1c94:	d9800c04 	addi	r6,sp,48
    1c98:	d9c15115 	stw	r7,1348(sp)
    1c9c:	00016c40 	call	16c4 <__sprint_r>
    1ca0:	d9c15117 	ldw	r7,1348(sp)
    1ca4:	1000551e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    1ca8:	843ffc04 	addi	r16,r16,-16
    1cac:	dc800e17 	ldw	r18,56(sp)
    1cb0:	dc400d17 	ldw	r17,52(sp)
    1cb4:	dd401904 	addi	r21,sp,100
    1cb8:	9c3fed16 	blt	r19,r16,1c70 <___vfprintf_internal_r+0x554>
    1cbc:	9425883a 	add	r18,r18,r16
    1cc0:	8c400044 	addi	r17,r17,1
    1cc4:	008001c4 	movi	r2,7
    1cc8:	af000015 	stw	fp,0(r21)
    1ccc:	ac000115 	stw	r16,4(r21)
    1cd0:	dc800e15 	stw	r18,56(sp)
    1cd4:	dc400d15 	stw	r17,52(sp)
    1cd8:	14418216 	blt	r2,r17,22e4 <___vfprintf_internal_r+0xbc8>
    1cdc:	ad400204 	addi	r21,r21,8
    1ce0:	d9014c17 	ldw	r4,1328(sp)
    1ce4:	2080400c 	andi	r2,r4,256
    1ce8:	10004a1e 	bne	r2,zero,1e14 <___vfprintf_internal_r+0x6f8>
    1cec:	d9414117 	ldw	r5,1284(sp)
    1cf0:	91e5883a 	add	r18,r18,r7
    1cf4:	8c400044 	addi	r17,r17,1
    1cf8:	008001c4 	movi	r2,7
    1cfc:	a9400015 	stw	r5,0(r21)
    1d00:	a9c00115 	stw	r7,4(r21)
    1d04:	dc800e15 	stw	r18,56(sp)
    1d08:	dc400d15 	stw	r17,52(sp)
    1d0c:	14416716 	blt	r2,r17,22ac <___vfprintf_internal_r+0xb90>
    1d10:	a8c00204 	addi	r3,r21,8
    1d14:	d9814c17 	ldw	r6,1328(sp)
    1d18:	3080010c 	andi	r2,r6,4
    1d1c:	10002826 	beq	r2,zero,1dc0 <___vfprintf_internal_r+0x6a4>
    1d20:	d8814a17 	ldw	r2,1320(sp)
    1d24:	d9014517 	ldw	r4,1300(sp)
    1d28:	1121c83a 	sub	r16,r2,r4
    1d2c:	0400240e 	bge	zero,r16,1dc0 <___vfprintf_internal_r+0x6a4>
    1d30:	00800404 	movi	r2,16
    1d34:	1404550e 	bge	r2,r16,2e8c <___vfprintf_internal_r+0x1770>
    1d38:	dc400d17 	ldw	r17,52(sp)
    1d3c:	1027883a 	mov	r19,r2
    1d40:	07000074 	movhi	fp,1
    1d44:	e735f084 	addi	fp,fp,-10302
    1d48:	050001c4 	movi	r20,7
    1d4c:	00000306 	br	1d5c <___vfprintf_internal_r+0x640>
    1d50:	843ffc04 	addi	r16,r16,-16
    1d54:	18c00204 	addi	r3,r3,8
    1d58:	9c00110e 	bge	r19,r16,1da0 <___vfprintf_internal_r+0x684>
    1d5c:	94800404 	addi	r18,r18,16
    1d60:	8c400044 	addi	r17,r17,1
    1d64:	1f000015 	stw	fp,0(r3)
    1d68:	1cc00115 	stw	r19,4(r3)
    1d6c:	dc800e15 	stw	r18,56(sp)
    1d70:	dc400d15 	stw	r17,52(sp)
    1d74:	a47ff60e 	bge	r20,r17,1d50 <___vfprintf_internal_r+0x634>
    1d78:	d9014f17 	ldw	r4,1340(sp)
    1d7c:	b00b883a 	mov	r5,r22
    1d80:	d9800c04 	addi	r6,sp,48
    1d84:	00016c40 	call	16c4 <__sprint_r>
    1d88:	10001c1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    1d8c:	843ffc04 	addi	r16,r16,-16
    1d90:	dc800e17 	ldw	r18,56(sp)
    1d94:	dc400d17 	ldw	r17,52(sp)
    1d98:	d8c01904 	addi	r3,sp,100
    1d9c:	9c3fef16 	blt	r19,r16,1d5c <___vfprintf_internal_r+0x640>
    1da0:	9425883a 	add	r18,r18,r16
    1da4:	8c400044 	addi	r17,r17,1
    1da8:	008001c4 	movi	r2,7
    1dac:	1f000015 	stw	fp,0(r3)
    1db0:	1c000115 	stw	r16,4(r3)
    1db4:	dc800e15 	stw	r18,56(sp)
    1db8:	dc400d15 	stw	r17,52(sp)
    1dbc:	1440cb16 	blt	r2,r17,20ec <___vfprintf_internal_r+0x9d0>
    1dc0:	d8814a17 	ldw	r2,1320(sp)
    1dc4:	d9414517 	ldw	r5,1300(sp)
    1dc8:	1140010e 	bge	r2,r5,1dd0 <___vfprintf_internal_r+0x6b4>
    1dcc:	2805883a 	mov	r2,r5
    1dd0:	d9814b17 	ldw	r6,1324(sp)
    1dd4:	308d883a 	add	r6,r6,r2
    1dd8:	d9814b15 	stw	r6,1324(sp)
    1ddc:	90013b1e 	bne	r18,zero,22cc <___vfprintf_internal_r+0xbb0>
    1de0:	d9c14017 	ldw	r7,1280(sp)
    1de4:	dd401904 	addi	r21,sp,100
    1de8:	d8000d15 	stw	zero,52(sp)
    1dec:	003ea706 	br	188c <___vfprintf_internal_r+0x170>
    1df0:	d8800e17 	ldw	r2,56(sp)
    1df4:	1005451e 	bne	r2,zero,330c <___vfprintf_internal_r+0x1bf0>
    1df8:	d8000d15 	stw	zero,52(sp)
    1dfc:	b080030b 	ldhu	r2,12(r22)
    1e00:	1080100c 	andi	r2,r2,64
    1e04:	103e8726 	beq	r2,zero,1824 <___vfprintf_internal_r+0x108>
    1e08:	00bfffc4 	movi	r2,-1
    1e0c:	d8814b15 	stw	r2,1324(sp)
    1e10:	003e8406 	br	1824 <___vfprintf_internal_r+0x108>
    1e14:	d9814d17 	ldw	r6,1332(sp)
    1e18:	00801944 	movi	r2,101
    1e1c:	11806e16 	blt	r2,r6,1fd8 <___vfprintf_internal_r+0x8bc>
    1e20:	d9414717 	ldw	r5,1308(sp)
    1e24:	00c00044 	movi	r3,1
    1e28:	1943490e 	bge	r3,r5,2b50 <___vfprintf_internal_r+0x1434>
    1e2c:	d8814117 	ldw	r2,1284(sp)
    1e30:	94800044 	addi	r18,r18,1
    1e34:	8c400044 	addi	r17,r17,1
    1e38:	a8800015 	stw	r2,0(r21)
    1e3c:	008001c4 	movi	r2,7
    1e40:	a8c00115 	stw	r3,4(r21)
    1e44:	dc800e15 	stw	r18,56(sp)
    1e48:	dc400d15 	stw	r17,52(sp)
    1e4c:	1441ca16 	blt	r2,r17,2578 <___vfprintf_internal_r+0xe5c>
    1e50:	a8c00204 	addi	r3,r21,8
    1e54:	d9014917 	ldw	r4,1316(sp)
    1e58:	00800044 	movi	r2,1
    1e5c:	94800044 	addi	r18,r18,1
    1e60:	8c400044 	addi	r17,r17,1
    1e64:	18800115 	stw	r2,4(r3)
    1e68:	008001c4 	movi	r2,7
    1e6c:	19000015 	stw	r4,0(r3)
    1e70:	dc800e15 	stw	r18,56(sp)
    1e74:	dc400d15 	stw	r17,52(sp)
    1e78:	1441b616 	blt	r2,r17,2554 <___vfprintf_internal_r+0xe38>
    1e7c:	1cc00204 	addi	r19,r3,8
    1e80:	d9014217 	ldw	r4,1288(sp)
    1e84:	d9414317 	ldw	r5,1292(sp)
    1e88:	000d883a 	mov	r6,zero
    1e8c:	000f883a 	mov	r7,zero
    1e90:	0009a200 	call	9a20 <__nedf2>
    1e94:	10017426 	beq	r2,zero,2468 <___vfprintf_internal_r+0xd4c>
    1e98:	d9414717 	ldw	r5,1308(sp)
    1e9c:	d9814117 	ldw	r6,1284(sp)
    1ea0:	8c400044 	addi	r17,r17,1
    1ea4:	2c85883a 	add	r2,r5,r18
    1ea8:	14bfffc4 	addi	r18,r2,-1
    1eac:	28bfffc4 	addi	r2,r5,-1
    1eb0:	30c00044 	addi	r3,r6,1
    1eb4:	98800115 	stw	r2,4(r19)
    1eb8:	008001c4 	movi	r2,7
    1ebc:	98c00015 	stw	r3,0(r19)
    1ec0:	dc800e15 	stw	r18,56(sp)
    1ec4:	dc400d15 	stw	r17,52(sp)
    1ec8:	14418e16 	blt	r2,r17,2504 <___vfprintf_internal_r+0xde8>
    1ecc:	9cc00204 	addi	r19,r19,8
    1ed0:	d9414817 	ldw	r5,1312(sp)
    1ed4:	d8800804 	addi	r2,sp,32
    1ed8:	8c400044 	addi	r17,r17,1
    1edc:	9165883a 	add	r18,r18,r5
    1ee0:	98800015 	stw	r2,0(r19)
    1ee4:	008001c4 	movi	r2,7
    1ee8:	99400115 	stw	r5,4(r19)
    1eec:	dc800e15 	stw	r18,56(sp)
    1ef0:	dc400d15 	stw	r17,52(sp)
    1ef4:	1440ed16 	blt	r2,r17,22ac <___vfprintf_internal_r+0xb90>
    1ef8:	98c00204 	addi	r3,r19,8
    1efc:	003f8506 	br	1d14 <___vfprintf_internal_r+0x5f8>
    1f00:	d9814a17 	ldw	r6,1320(sp)
    1f04:	d8814517 	ldw	r2,1300(sp)
    1f08:	30a1c83a 	sub	r16,r6,r2
    1f0c:	043f4b0e 	bge	zero,r16,1c3c <___vfprintf_internal_r+0x520>
    1f10:	00800404 	movi	r2,16
    1f14:	14043a0e 	bge	r2,r16,3000 <___vfprintf_internal_r+0x18e4>
    1f18:	1027883a 	mov	r19,r2
    1f1c:	07000074 	movhi	fp,1
    1f20:	e735ec84 	addi	fp,fp,-10318
    1f24:	050001c4 	movi	r20,7
    1f28:	00000306 	br	1f38 <___vfprintf_internal_r+0x81c>
    1f2c:	843ffc04 	addi	r16,r16,-16
    1f30:	ad400204 	addi	r21,r21,8
    1f34:	9c00130e 	bge	r19,r16,1f84 <___vfprintf_internal_r+0x868>
    1f38:	94800404 	addi	r18,r18,16
    1f3c:	8c400044 	addi	r17,r17,1
    1f40:	af000015 	stw	fp,0(r21)
    1f44:	acc00115 	stw	r19,4(r21)
    1f48:	dc800e15 	stw	r18,56(sp)
    1f4c:	dc400d15 	stw	r17,52(sp)
    1f50:	a47ff60e 	bge	r20,r17,1f2c <___vfprintf_internal_r+0x810>
    1f54:	d9014f17 	ldw	r4,1340(sp)
    1f58:	b00b883a 	mov	r5,r22
    1f5c:	d9800c04 	addi	r6,sp,48
    1f60:	d9c15115 	stw	r7,1348(sp)
    1f64:	00016c40 	call	16c4 <__sprint_r>
    1f68:	d9c15117 	ldw	r7,1348(sp)
    1f6c:	103fa31e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    1f70:	843ffc04 	addi	r16,r16,-16
    1f74:	dc800e17 	ldw	r18,56(sp)
    1f78:	dc400d17 	ldw	r17,52(sp)
    1f7c:	dd401904 	addi	r21,sp,100
    1f80:	9c3fed16 	blt	r19,r16,1f38 <___vfprintf_internal_r+0x81c>
    1f84:	9425883a 	add	r18,r18,r16
    1f88:	8c400044 	addi	r17,r17,1
    1f8c:	008001c4 	movi	r2,7
    1f90:	af000015 	stw	fp,0(r21)
    1f94:	ac000115 	stw	r16,4(r21)
    1f98:	dc800e15 	stw	r18,56(sp)
    1f9c:	dc400d15 	stw	r17,52(sp)
    1fa0:	14416116 	blt	r2,r17,2528 <___vfprintf_internal_r+0xe0c>
    1fa4:	ad400204 	addi	r21,r21,8
    1fa8:	003f2406 	br	1c3c <___vfprintf_internal_r+0x520>
    1fac:	d9014f17 	ldw	r4,1340(sp)
    1fb0:	00051d00 	call	51d0 <__sinit>
    1fb4:	d9c15117 	ldw	r7,1348(sp)
    1fb8:	003def06 	br	1778 <___vfprintf_internal_r+0x5c>
    1fbc:	d9014f17 	ldw	r4,1340(sp)
    1fc0:	b00b883a 	mov	r5,r22
    1fc4:	d9c15115 	stw	r7,1348(sp)
    1fc8:	00036040 	call	3604 <__swsetup_r>
    1fcc:	d9c15117 	ldw	r7,1348(sp)
    1fd0:	103dee26 	beq	r2,zero,178c <___vfprintf_internal_r+0x70>
    1fd4:	003f8c06 	br	1e08 <___vfprintf_internal_r+0x6ec>
    1fd8:	d9014217 	ldw	r4,1288(sp)
    1fdc:	d9414317 	ldw	r5,1292(sp)
    1fe0:	000d883a 	mov	r6,zero
    1fe4:	000f883a 	mov	r7,zero
    1fe8:	00099980 	call	9998 <__eqdf2>
    1fec:	1000f21e 	bne	r2,zero,23b8 <___vfprintf_internal_r+0xc9c>
    1ff0:	00800074 	movhi	r2,1
    1ff4:	10b5ec04 	addi	r2,r2,-10320
    1ff8:	94800044 	addi	r18,r18,1
    1ffc:	8c400044 	addi	r17,r17,1
    2000:	a8800015 	stw	r2,0(r21)
    2004:	00c00044 	movi	r3,1
    2008:	008001c4 	movi	r2,7
    200c:	a8c00115 	stw	r3,4(r21)
    2010:	dc800e15 	stw	r18,56(sp)
    2014:	dc400d15 	stw	r17,52(sp)
    2018:	14430016 	blt	r2,r17,2c1c <___vfprintf_internal_r+0x1500>
    201c:	a8c00204 	addi	r3,r21,8
    2020:	d8800517 	ldw	r2,20(sp)
    2024:	d9014717 	ldw	r4,1308(sp)
    2028:	11015c0e 	bge	r2,r4,259c <___vfprintf_internal_r+0xe80>
    202c:	dc400d17 	ldw	r17,52(sp)
    2030:	d9814917 	ldw	r6,1316(sp)
    2034:	00800044 	movi	r2,1
    2038:	94800044 	addi	r18,r18,1
    203c:	8c400044 	addi	r17,r17,1
    2040:	18800115 	stw	r2,4(r3)
    2044:	008001c4 	movi	r2,7
    2048:	19800015 	stw	r6,0(r3)
    204c:	dc800e15 	stw	r18,56(sp)
    2050:	dc400d15 	stw	r17,52(sp)
    2054:	14431616 	blt	r2,r17,2cb0 <___vfprintf_internal_r+0x1594>
    2058:	18c00204 	addi	r3,r3,8
    205c:	d8814717 	ldw	r2,1308(sp)
    2060:	143fffc4 	addi	r16,r2,-1
    2064:	043f2b0e 	bge	zero,r16,1d14 <___vfprintf_internal_r+0x5f8>
    2068:	00800404 	movi	r2,16
    206c:	1402a80e 	bge	r2,r16,2b10 <___vfprintf_internal_r+0x13f4>
    2070:	dc400d17 	ldw	r17,52(sp)
    2074:	1027883a 	mov	r19,r2
    2078:	07000074 	movhi	fp,1
    207c:	e735ec84 	addi	fp,fp,-10318
    2080:	050001c4 	movi	r20,7
    2084:	00000306 	br	2094 <___vfprintf_internal_r+0x978>
    2088:	18c00204 	addi	r3,r3,8
    208c:	843ffc04 	addi	r16,r16,-16
    2090:	9c02a20e 	bge	r19,r16,2b1c <___vfprintf_internal_r+0x1400>
    2094:	94800404 	addi	r18,r18,16
    2098:	8c400044 	addi	r17,r17,1
    209c:	1f000015 	stw	fp,0(r3)
    20a0:	1cc00115 	stw	r19,4(r3)
    20a4:	dc800e15 	stw	r18,56(sp)
    20a8:	dc400d15 	stw	r17,52(sp)
    20ac:	a47ff60e 	bge	r20,r17,2088 <___vfprintf_internal_r+0x96c>
    20b0:	d9014f17 	ldw	r4,1340(sp)
    20b4:	b00b883a 	mov	r5,r22
    20b8:	d9800c04 	addi	r6,sp,48
    20bc:	00016c40 	call	16c4 <__sprint_r>
    20c0:	103f4e1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    20c4:	dc800e17 	ldw	r18,56(sp)
    20c8:	dc400d17 	ldw	r17,52(sp)
    20cc:	d8c01904 	addi	r3,sp,100
    20d0:	003fee06 	br	208c <___vfprintf_internal_r+0x970>
    20d4:	d8802c0b 	ldhu	r2,176(sp)
    20d8:	00ffffc4 	movi	r3,-1
    20dc:	d8c14b15 	stw	r3,1324(sp)
    20e0:	1080100c 	andi	r2,r2,64
    20e4:	103dcc1e 	bne	r2,zero,1818 <___vfprintf_internal_r+0xfc>
    20e8:	003dce06 	br	1824 <___vfprintf_internal_r+0x108>
    20ec:	d9014f17 	ldw	r4,1340(sp)
    20f0:	b00b883a 	mov	r5,r22
    20f4:	d9800c04 	addi	r6,sp,48
    20f8:	00016c40 	call	16c4 <__sprint_r>
    20fc:	103f3f1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2100:	dc800e17 	ldw	r18,56(sp)
    2104:	003f2e06 	br	1dc0 <___vfprintf_internal_r+0x6a4>
    2108:	d9414c17 	ldw	r5,1328(sp)
    210c:	29400414 	ori	r5,r5,16
    2110:	d9414c15 	stw	r5,1328(sp)
    2114:	d9814c17 	ldw	r6,1328(sp)
    2118:	3080080c 	andi	r2,r6,32
    211c:	10014f1e 	bne	r2,zero,265c <___vfprintf_internal_r+0xf40>
    2120:	d8c14c17 	ldw	r3,1328(sp)
    2124:	1880040c 	andi	r2,r3,16
    2128:	1002f01e 	bne	r2,zero,2cec <___vfprintf_internal_r+0x15d0>
    212c:	d9014c17 	ldw	r4,1328(sp)
    2130:	2080100c 	andi	r2,r4,64
    2134:	1002ed26 	beq	r2,zero,2cec <___vfprintf_internal_r+0x15d0>
    2138:	3880000f 	ldh	r2,0(r7)
    213c:	39c00104 	addi	r7,r7,4
    2140:	d9c14015 	stw	r7,1280(sp)
    2144:	1023d7fa 	srai	r17,r2,31
    2148:	1021883a 	mov	r16,r2
    214c:	88037816 	blt	r17,zero,2f30 <___vfprintf_internal_r+0x1814>
    2150:	01000044 	movi	r4,1
    2154:	98000416 	blt	r19,zero,2168 <___vfprintf_internal_r+0xa4c>
    2158:	d8c14c17 	ldw	r3,1328(sp)
    215c:	00bfdfc4 	movi	r2,-129
    2160:	1886703a 	and	r3,r3,r2
    2164:	d8c14c15 	stw	r3,1328(sp)
    2168:	8444b03a 	or	r2,r16,r17
    216c:	10022c1e 	bne	r2,zero,2a20 <___vfprintf_internal_r+0x1304>
    2170:	98022b1e 	bne	r19,zero,2a20 <___vfprintf_internal_r+0x1304>
    2174:	20803fcc 	andi	r2,r4,255
    2178:	1002a126 	beq	r2,zero,2c00 <___vfprintf_internal_r+0x14e4>
    217c:	d8c01904 	addi	r3,sp,100
    2180:	dd000f04 	addi	r20,sp,60
    2184:	d8c14115 	stw	r3,1284(sp)
    2188:	d8c14117 	ldw	r3,1284(sp)
    218c:	dcc14515 	stw	r19,1300(sp)
    2190:	a0c5c83a 	sub	r2,r20,r3
    2194:	11c00a04 	addi	r7,r2,40
    2198:	99c0010e 	bge	r19,r7,21a0 <___vfprintf_internal_r+0xa84>
    219c:	d9c14515 	stw	r7,1300(sp)
    21a0:	dcc14615 	stw	r19,1304(sp)
    21a4:	d8800407 	ldb	r2,16(sp)
    21a8:	103e4c26 	beq	r2,zero,1adc <___vfprintf_internal_r+0x3c0>
    21ac:	d8814517 	ldw	r2,1300(sp)
    21b0:	10800044 	addi	r2,r2,1
    21b4:	d8814515 	stw	r2,1300(sp)
    21b8:	003e4806 	br	1adc <___vfprintf_internal_r+0x3c0>
    21bc:	d9814c17 	ldw	r6,1328(sp)
    21c0:	31800414 	ori	r6,r6,16
    21c4:	d9814c15 	stw	r6,1328(sp)
    21c8:	d8c14c17 	ldw	r3,1328(sp)
    21cc:	1880080c 	andi	r2,r3,32
    21d0:	1001271e 	bne	r2,zero,2670 <___vfprintf_internal_r+0xf54>
    21d4:	d9414c17 	ldw	r5,1328(sp)
    21d8:	2880040c 	andi	r2,r5,16
    21dc:	1002bc1e 	bne	r2,zero,2cd0 <___vfprintf_internal_r+0x15b4>
    21e0:	d9814c17 	ldw	r6,1328(sp)
    21e4:	3080100c 	andi	r2,r6,64
    21e8:	1002b926 	beq	r2,zero,2cd0 <___vfprintf_internal_r+0x15b4>
    21ec:	3c00000b 	ldhu	r16,0(r7)
    21f0:	0009883a 	mov	r4,zero
    21f4:	39c00104 	addi	r7,r7,4
    21f8:	0023883a 	mov	r17,zero
    21fc:	d9c14015 	stw	r7,1280(sp)
    2200:	d8000405 	stb	zero,16(sp)
    2204:	003fd306 	br	2154 <___vfprintf_internal_r+0xa38>
    2208:	d9014c17 	ldw	r4,1328(sp)
    220c:	21000414 	ori	r4,r4,16
    2210:	d9014c15 	stw	r4,1328(sp)
    2214:	d9414c17 	ldw	r5,1328(sp)
    2218:	2880080c 	andi	r2,r5,32
    221c:	1001081e 	bne	r2,zero,2640 <___vfprintf_internal_r+0xf24>
    2220:	d8c14c17 	ldw	r3,1328(sp)
    2224:	1880040c 	andi	r2,r3,16
    2228:	1002b61e 	bne	r2,zero,2d04 <___vfprintf_internal_r+0x15e8>
    222c:	d9014c17 	ldw	r4,1328(sp)
    2230:	2080100c 	andi	r2,r4,64
    2234:	1002b326 	beq	r2,zero,2d04 <___vfprintf_internal_r+0x15e8>
    2238:	3c00000b 	ldhu	r16,0(r7)
    223c:	01000044 	movi	r4,1
    2240:	39c00104 	addi	r7,r7,4
    2244:	0023883a 	mov	r17,zero
    2248:	d9c14015 	stw	r7,1280(sp)
    224c:	d8000405 	stb	zero,16(sp)
    2250:	003fc006 	br	2154 <___vfprintf_internal_r+0xa38>
    2254:	d9014f17 	ldw	r4,1340(sp)
    2258:	b00b883a 	mov	r5,r22
    225c:	d9800c04 	addi	r6,sp,48
    2260:	00016c40 	call	16c4 <__sprint_r>
    2264:	103ee51e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2268:	dc800e17 	ldw	r18,56(sp)
    226c:	d8c01904 	addi	r3,sp,100
    2270:	d9814c17 	ldw	r6,1328(sp)
    2274:	3080004c 	andi	r2,r6,1
    2278:	1005003a 	cmpeq	r2,r2,zero
    227c:	103ea51e 	bne	r2,zero,1d14 <___vfprintf_internal_r+0x5f8>
    2280:	00800044 	movi	r2,1
    2284:	dc400d17 	ldw	r17,52(sp)
    2288:	18800115 	stw	r2,4(r3)
    228c:	d8814917 	ldw	r2,1316(sp)
    2290:	94800044 	addi	r18,r18,1
    2294:	8c400044 	addi	r17,r17,1
    2298:	18800015 	stw	r2,0(r3)
    229c:	008001c4 	movi	r2,7
    22a0:	dc800e15 	stw	r18,56(sp)
    22a4:	dc400d15 	stw	r17,52(sp)
    22a8:	1442240e 	bge	r2,r17,2b3c <___vfprintf_internal_r+0x1420>
    22ac:	d9014f17 	ldw	r4,1340(sp)
    22b0:	b00b883a 	mov	r5,r22
    22b4:	d9800c04 	addi	r6,sp,48
    22b8:	00016c40 	call	16c4 <__sprint_r>
    22bc:	103ecf1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    22c0:	dc800e17 	ldw	r18,56(sp)
    22c4:	d8c01904 	addi	r3,sp,100
    22c8:	003e9206 	br	1d14 <___vfprintf_internal_r+0x5f8>
    22cc:	d9014f17 	ldw	r4,1340(sp)
    22d0:	b00b883a 	mov	r5,r22
    22d4:	d9800c04 	addi	r6,sp,48
    22d8:	00016c40 	call	16c4 <__sprint_r>
    22dc:	103ec026 	beq	r2,zero,1de0 <___vfprintf_internal_r+0x6c4>
    22e0:	003ec606 	br	1dfc <___vfprintf_internal_r+0x6e0>
    22e4:	d9014f17 	ldw	r4,1340(sp)
    22e8:	b00b883a 	mov	r5,r22
    22ec:	d9800c04 	addi	r6,sp,48
    22f0:	d9c15115 	stw	r7,1348(sp)
    22f4:	00016c40 	call	16c4 <__sprint_r>
    22f8:	d9c15117 	ldw	r7,1348(sp)
    22fc:	103ebf1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2300:	dc800e17 	ldw	r18,56(sp)
    2304:	dc400d17 	ldw	r17,52(sp)
    2308:	dd401904 	addi	r21,sp,100
    230c:	003e7406 	br	1ce0 <___vfprintf_internal_r+0x5c4>
    2310:	d9014f17 	ldw	r4,1340(sp)
    2314:	b00b883a 	mov	r5,r22
    2318:	d9800c04 	addi	r6,sp,48
    231c:	d9c15115 	stw	r7,1348(sp)
    2320:	00016c40 	call	16c4 <__sprint_r>
    2324:	d9c15117 	ldw	r7,1348(sp)
    2328:	103eb41e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    232c:	dd401904 	addi	r21,sp,100
    2330:	003d6d06 	br	18e8 <___vfprintf_internal_r+0x1cc>
    2334:	d9014f17 	ldw	r4,1340(sp)
    2338:	b00b883a 	mov	r5,r22
    233c:	d9800c04 	addi	r6,sp,48
    2340:	d9c15115 	stw	r7,1348(sp)
    2344:	00016c40 	call	16c4 <__sprint_r>
    2348:	d9c15117 	ldw	r7,1348(sp)
    234c:	103eab1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2350:	dc800e17 	ldw	r18,56(sp)
    2354:	dc400d17 	ldw	r17,52(sp)
    2358:	dd401904 	addi	r21,sp,100
    235c:	003e3406 	br	1c30 <___vfprintf_internal_r+0x514>
    2360:	d9014f17 	ldw	r4,1340(sp)
    2364:	b00b883a 	mov	r5,r22
    2368:	d9800c04 	addi	r6,sp,48
    236c:	d9c15115 	stw	r7,1348(sp)
    2370:	00016c40 	call	16c4 <__sprint_r>
    2374:	d9c15117 	ldw	r7,1348(sp)
    2378:	103ea01e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    237c:	dc800e17 	ldw	r18,56(sp)
    2380:	dc400d17 	ldw	r17,52(sp)
    2384:	dd401904 	addi	r21,sp,100
    2388:	003e1c06 	br	1bfc <___vfprintf_internal_r+0x4e0>
    238c:	d9014f17 	ldw	r4,1340(sp)
    2390:	b00b883a 	mov	r5,r22
    2394:	d9800c04 	addi	r6,sp,48
    2398:	d9c15115 	stw	r7,1348(sp)
    239c:	00016c40 	call	16c4 <__sprint_r>
    23a0:	d9c15117 	ldw	r7,1348(sp)
    23a4:	103e951e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    23a8:	dc800e17 	ldw	r18,56(sp)
    23ac:	dc400d17 	ldw	r17,52(sp)
    23b0:	dd401904 	addi	r21,sp,100
    23b4:	003e0406 	br	1bc8 <___vfprintf_internal_r+0x4ac>
    23b8:	d9000517 	ldw	r4,20(sp)
    23bc:	0102580e 	bge	zero,r4,2d20 <___vfprintf_internal_r+0x1604>
    23c0:	d9814717 	ldw	r6,1308(sp)
    23c4:	21807a16 	blt	r4,r6,25b0 <___vfprintf_internal_r+0xe94>
    23c8:	d8814117 	ldw	r2,1284(sp)
    23cc:	91a5883a 	add	r18,r18,r6
    23d0:	8c400044 	addi	r17,r17,1
    23d4:	a8800015 	stw	r2,0(r21)
    23d8:	008001c4 	movi	r2,7
    23dc:	a9800115 	stw	r6,4(r21)
    23e0:	dc800e15 	stw	r18,56(sp)
    23e4:	dc400d15 	stw	r17,52(sp)
    23e8:	1442fc16 	blt	r2,r17,2fdc <___vfprintf_internal_r+0x18c0>
    23ec:	a8c00204 	addi	r3,r21,8
    23f0:	d9414717 	ldw	r5,1308(sp)
    23f4:	2161c83a 	sub	r16,r4,r5
    23f8:	043f9d0e 	bge	zero,r16,2270 <___vfprintf_internal_r+0xb54>
    23fc:	00800404 	movi	r2,16
    2400:	1402190e 	bge	r2,r16,2c68 <___vfprintf_internal_r+0x154c>
    2404:	dc400d17 	ldw	r17,52(sp)
    2408:	1027883a 	mov	r19,r2
    240c:	07000074 	movhi	fp,1
    2410:	e735ec84 	addi	fp,fp,-10318
    2414:	050001c4 	movi	r20,7
    2418:	00000306 	br	2428 <___vfprintf_internal_r+0xd0c>
    241c:	18c00204 	addi	r3,r3,8
    2420:	843ffc04 	addi	r16,r16,-16
    2424:	9c02130e 	bge	r19,r16,2c74 <___vfprintf_internal_r+0x1558>
    2428:	94800404 	addi	r18,r18,16
    242c:	8c400044 	addi	r17,r17,1
    2430:	1f000015 	stw	fp,0(r3)
    2434:	1cc00115 	stw	r19,4(r3)
    2438:	dc800e15 	stw	r18,56(sp)
    243c:	dc400d15 	stw	r17,52(sp)
    2440:	a47ff60e 	bge	r20,r17,241c <___vfprintf_internal_r+0xd00>
    2444:	d9014f17 	ldw	r4,1340(sp)
    2448:	b00b883a 	mov	r5,r22
    244c:	d9800c04 	addi	r6,sp,48
    2450:	00016c40 	call	16c4 <__sprint_r>
    2454:	103e691e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2458:	dc800e17 	ldw	r18,56(sp)
    245c:	dc400d17 	ldw	r17,52(sp)
    2460:	d8c01904 	addi	r3,sp,100
    2464:	003fee06 	br	2420 <___vfprintf_internal_r+0xd04>
    2468:	d8814717 	ldw	r2,1308(sp)
    246c:	143fffc4 	addi	r16,r2,-1
    2470:	043e970e 	bge	zero,r16,1ed0 <___vfprintf_internal_r+0x7b4>
    2474:	00800404 	movi	r2,16
    2478:	1400180e 	bge	r2,r16,24dc <___vfprintf_internal_r+0xdc0>
    247c:	1029883a 	mov	r20,r2
    2480:	07000074 	movhi	fp,1
    2484:	e735ec84 	addi	fp,fp,-10318
    2488:	054001c4 	movi	r21,7
    248c:	00000306 	br	249c <___vfprintf_internal_r+0xd80>
    2490:	9cc00204 	addi	r19,r19,8
    2494:	843ffc04 	addi	r16,r16,-16
    2498:	a400120e 	bge	r20,r16,24e4 <___vfprintf_internal_r+0xdc8>
    249c:	94800404 	addi	r18,r18,16
    24a0:	8c400044 	addi	r17,r17,1
    24a4:	9f000015 	stw	fp,0(r19)
    24a8:	9d000115 	stw	r20,4(r19)
    24ac:	dc800e15 	stw	r18,56(sp)
    24b0:	dc400d15 	stw	r17,52(sp)
    24b4:	ac7ff60e 	bge	r21,r17,2490 <___vfprintf_internal_r+0xd74>
    24b8:	d9014f17 	ldw	r4,1340(sp)
    24bc:	b00b883a 	mov	r5,r22
    24c0:	d9800c04 	addi	r6,sp,48
    24c4:	00016c40 	call	16c4 <__sprint_r>
    24c8:	103e4c1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    24cc:	dc800e17 	ldw	r18,56(sp)
    24d0:	dc400d17 	ldw	r17,52(sp)
    24d4:	dcc01904 	addi	r19,sp,100
    24d8:	003fee06 	br	2494 <___vfprintf_internal_r+0xd78>
    24dc:	07000074 	movhi	fp,1
    24e0:	e735ec84 	addi	fp,fp,-10318
    24e4:	9425883a 	add	r18,r18,r16
    24e8:	8c400044 	addi	r17,r17,1
    24ec:	008001c4 	movi	r2,7
    24f0:	9f000015 	stw	fp,0(r19)
    24f4:	9c000115 	stw	r16,4(r19)
    24f8:	dc800e15 	stw	r18,56(sp)
    24fc:	dc400d15 	stw	r17,52(sp)
    2500:	147e720e 	bge	r2,r17,1ecc <___vfprintf_internal_r+0x7b0>
    2504:	d9014f17 	ldw	r4,1340(sp)
    2508:	b00b883a 	mov	r5,r22
    250c:	d9800c04 	addi	r6,sp,48
    2510:	00016c40 	call	16c4 <__sprint_r>
    2514:	103e391e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2518:	dc800e17 	ldw	r18,56(sp)
    251c:	dc400d17 	ldw	r17,52(sp)
    2520:	dcc01904 	addi	r19,sp,100
    2524:	003e6a06 	br	1ed0 <___vfprintf_internal_r+0x7b4>
    2528:	d9014f17 	ldw	r4,1340(sp)
    252c:	b00b883a 	mov	r5,r22
    2530:	d9800c04 	addi	r6,sp,48
    2534:	d9c15115 	stw	r7,1348(sp)
    2538:	00016c40 	call	16c4 <__sprint_r>
    253c:	d9c15117 	ldw	r7,1348(sp)
    2540:	103e2e1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2544:	dc800e17 	ldw	r18,56(sp)
    2548:	dc400d17 	ldw	r17,52(sp)
    254c:	dd401904 	addi	r21,sp,100
    2550:	003dba06 	br	1c3c <___vfprintf_internal_r+0x520>
    2554:	d9014f17 	ldw	r4,1340(sp)
    2558:	b00b883a 	mov	r5,r22
    255c:	d9800c04 	addi	r6,sp,48
    2560:	00016c40 	call	16c4 <__sprint_r>
    2564:	103e251e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2568:	dc800e17 	ldw	r18,56(sp)
    256c:	dc400d17 	ldw	r17,52(sp)
    2570:	dcc01904 	addi	r19,sp,100
    2574:	003e4206 	br	1e80 <___vfprintf_internal_r+0x764>
    2578:	d9014f17 	ldw	r4,1340(sp)
    257c:	b00b883a 	mov	r5,r22
    2580:	d9800c04 	addi	r6,sp,48
    2584:	00016c40 	call	16c4 <__sprint_r>
    2588:	103e1c1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    258c:	dc800e17 	ldw	r18,56(sp)
    2590:	dc400d17 	ldw	r17,52(sp)
    2594:	d8c01904 	addi	r3,sp,100
    2598:	003e2e06 	br	1e54 <___vfprintf_internal_r+0x738>
    259c:	d9414c17 	ldw	r5,1328(sp)
    25a0:	2880004c 	andi	r2,r5,1
    25a4:	1005003a 	cmpeq	r2,r2,zero
    25a8:	103dda1e 	bne	r2,zero,1d14 <___vfprintf_internal_r+0x5f8>
    25ac:	003e9f06 	br	202c <___vfprintf_internal_r+0x910>
    25b0:	d8c14117 	ldw	r3,1284(sp)
    25b4:	9125883a 	add	r18,r18,r4
    25b8:	8c400044 	addi	r17,r17,1
    25bc:	008001c4 	movi	r2,7
    25c0:	a8c00015 	stw	r3,0(r21)
    25c4:	a9000115 	stw	r4,4(r21)
    25c8:	dc800e15 	stw	r18,56(sp)
    25cc:	dc400d15 	stw	r17,52(sp)
    25d0:	14426c16 	blt	r2,r17,2f84 <___vfprintf_internal_r+0x1868>
    25d4:	a8c00204 	addi	r3,r21,8
    25d8:	d9414917 	ldw	r5,1316(sp)
    25dc:	00800044 	movi	r2,1
    25e0:	94800044 	addi	r18,r18,1
    25e4:	8c400044 	addi	r17,r17,1
    25e8:	18800115 	stw	r2,4(r3)
    25ec:	008001c4 	movi	r2,7
    25f0:	19400015 	stw	r5,0(r3)
    25f4:	dc800e15 	stw	r18,56(sp)
    25f8:	dc400d15 	stw	r17,52(sp)
    25fc:	2021883a 	mov	r16,r4
    2600:	14425616 	blt	r2,r17,2f5c <___vfprintf_internal_r+0x1840>
    2604:	19400204 	addi	r5,r3,8
    2608:	d9814717 	ldw	r6,1308(sp)
    260c:	8c400044 	addi	r17,r17,1
    2610:	dc400d15 	stw	r17,52(sp)
    2614:	3107c83a 	sub	r3,r6,r4
    2618:	d9014117 	ldw	r4,1284(sp)
    261c:	90e5883a 	add	r18,r18,r3
    2620:	28c00115 	stw	r3,4(r5)
    2624:	8105883a 	add	r2,r16,r4
    2628:	28800015 	stw	r2,0(r5)
    262c:	008001c4 	movi	r2,7
    2630:	dc800e15 	stw	r18,56(sp)
    2634:	147f1d16 	blt	r2,r17,22ac <___vfprintf_internal_r+0xb90>
    2638:	28c00204 	addi	r3,r5,8
    263c:	003db506 	br	1d14 <___vfprintf_internal_r+0x5f8>
    2640:	3c000017 	ldw	r16,0(r7)
    2644:	3c400117 	ldw	r17,4(r7)
    2648:	39800204 	addi	r6,r7,8
    264c:	01000044 	movi	r4,1
    2650:	d9814015 	stw	r6,1280(sp)
    2654:	d8000405 	stb	zero,16(sp)
    2658:	003ebe06 	br	2154 <___vfprintf_internal_r+0xa38>
    265c:	3c000017 	ldw	r16,0(r7)
    2660:	3c400117 	ldw	r17,4(r7)
    2664:	38800204 	addi	r2,r7,8
    2668:	d8814015 	stw	r2,1280(sp)
    266c:	003eb706 	br	214c <___vfprintf_internal_r+0xa30>
    2670:	3c000017 	ldw	r16,0(r7)
    2674:	3c400117 	ldw	r17,4(r7)
    2678:	39000204 	addi	r4,r7,8
    267c:	d9014015 	stw	r4,1280(sp)
    2680:	0009883a 	mov	r4,zero
    2684:	d8000405 	stb	zero,16(sp)
    2688:	003eb206 	br	2154 <___vfprintf_internal_r+0xa38>
    268c:	38c00017 	ldw	r3,0(r7)
    2690:	39c00104 	addi	r7,r7,4
    2694:	d8c14a15 	stw	r3,1320(sp)
    2698:	1800d70e 	bge	r3,zero,29f8 <___vfprintf_internal_r+0x12dc>
    269c:	00c7c83a 	sub	r3,zero,r3
    26a0:	d8c14a15 	stw	r3,1320(sp)
    26a4:	d9014c17 	ldw	r4,1328(sp)
    26a8:	b8c00007 	ldb	r3,0(r23)
    26ac:	21000114 	ori	r4,r4,4
    26b0:	d9014c15 	stw	r4,1328(sp)
    26b4:	003c9806 	br	1918 <___vfprintf_internal_r+0x1fc>
    26b8:	d9814c17 	ldw	r6,1328(sp)
    26bc:	3080080c 	andi	r2,r6,32
    26c0:	1001f626 	beq	r2,zero,2e9c <___vfprintf_internal_r+0x1780>
    26c4:	d9014b17 	ldw	r4,1324(sp)
    26c8:	38800017 	ldw	r2,0(r7)
    26cc:	39c00104 	addi	r7,r7,4
    26d0:	d9c14015 	stw	r7,1280(sp)
    26d4:	2007d7fa 	srai	r3,r4,31
    26d8:	d9c14017 	ldw	r7,1280(sp)
    26dc:	11000015 	stw	r4,0(r2)
    26e0:	10c00115 	stw	r3,4(r2)
    26e4:	003c6906 	br	188c <___vfprintf_internal_r+0x170>
    26e8:	b8c00007 	ldb	r3,0(r23)
    26ec:	00801b04 	movi	r2,108
    26f0:	18825526 	beq	r3,r2,3048 <___vfprintf_internal_r+0x192c>
    26f4:	d9414c17 	ldw	r5,1328(sp)
    26f8:	29400414 	ori	r5,r5,16
    26fc:	d9414c15 	stw	r5,1328(sp)
    2700:	003c8506 	br	1918 <___vfprintf_internal_r+0x1fc>
    2704:	d9814c17 	ldw	r6,1328(sp)
    2708:	b8c00007 	ldb	r3,0(r23)
    270c:	31800814 	ori	r6,r6,32
    2710:	d9814c15 	stw	r6,1328(sp)
    2714:	003c8006 	br	1918 <___vfprintf_internal_r+0x1fc>
    2718:	d8814c17 	ldw	r2,1328(sp)
    271c:	3c000017 	ldw	r16,0(r7)
    2720:	00c01e04 	movi	r3,120
    2724:	10800094 	ori	r2,r2,2
    2728:	d8814c15 	stw	r2,1328(sp)
    272c:	39c00104 	addi	r7,r7,4
    2730:	01400074 	movhi	r5,1
    2734:	2975d504 	addi	r5,r5,-10412
    2738:	00800c04 	movi	r2,48
    273c:	0023883a 	mov	r17,zero
    2740:	01000084 	movi	r4,2
    2744:	d9c14015 	stw	r7,1280(sp)
    2748:	d8c14d15 	stw	r3,1332(sp)
    274c:	d9414415 	stw	r5,1296(sp)
    2750:	d8800445 	stb	r2,17(sp)
    2754:	d8c00485 	stb	r3,18(sp)
    2758:	d8000405 	stb	zero,16(sp)
    275c:	003e7d06 	br	2154 <___vfprintf_internal_r+0xa38>
    2760:	d8814c17 	ldw	r2,1328(sp)
    2764:	b8c00007 	ldb	r3,0(r23)
    2768:	10801014 	ori	r2,r2,64
    276c:	d8814c15 	stw	r2,1328(sp)
    2770:	003c6906 	br	1918 <___vfprintf_internal_r+0x1fc>
    2774:	d9414c17 	ldw	r5,1328(sp)
    2778:	2880020c 	andi	r2,r5,8
    277c:	1001e526 	beq	r2,zero,2f14 <___vfprintf_internal_r+0x17f8>
    2780:	39800017 	ldw	r6,0(r7)
    2784:	38800204 	addi	r2,r7,8
    2788:	d8814015 	stw	r2,1280(sp)
    278c:	d9814215 	stw	r6,1288(sp)
    2790:	39c00117 	ldw	r7,4(r7)
    2794:	d9c14315 	stw	r7,1292(sp)
    2798:	d9014217 	ldw	r4,1288(sp)
    279c:	d9414317 	ldw	r5,1292(sp)
    27a0:	0007a8c0 	call	7a8c <__isinfd>
    27a4:	10021d26 	beq	r2,zero,301c <___vfprintf_internal_r+0x1900>
    27a8:	d9014217 	ldw	r4,1288(sp)
    27ac:	d9414317 	ldw	r5,1292(sp)
    27b0:	000d883a 	mov	r6,zero
    27b4:	000f883a 	mov	r7,zero
    27b8:	0009bb80 	call	9bb8 <__ltdf2>
    27bc:	1002d016 	blt	r2,zero,3300 <___vfprintf_internal_r+0x1be4>
    27c0:	d9414d17 	ldw	r5,1332(sp)
    27c4:	008011c4 	movi	r2,71
    27c8:	11421016 	blt	r2,r5,300c <___vfprintf_internal_r+0x18f0>
    27cc:	01800074 	movhi	r6,1
    27d0:	31b5da04 	addi	r6,r6,-10392
    27d4:	d9814115 	stw	r6,1284(sp)
    27d8:	d9014c17 	ldw	r4,1328(sp)
    27dc:	00c000c4 	movi	r3,3
    27e0:	00bfdfc4 	movi	r2,-129
    27e4:	2088703a 	and	r4,r4,r2
    27e8:	180f883a 	mov	r7,r3
    27ec:	d8c14515 	stw	r3,1300(sp)
    27f0:	d9014c15 	stw	r4,1328(sp)
    27f4:	d8014615 	stw	zero,1304(sp)
    27f8:	003e6a06 	br	21a4 <___vfprintf_internal_r+0xa88>
    27fc:	38800017 	ldw	r2,0(r7)
    2800:	00c00044 	movi	r3,1
    2804:	39c00104 	addi	r7,r7,4
    2808:	d9c14015 	stw	r7,1280(sp)
    280c:	d9000f04 	addi	r4,sp,60
    2810:	180f883a 	mov	r7,r3
    2814:	d8c14515 	stw	r3,1300(sp)
    2818:	d9014115 	stw	r4,1284(sp)
    281c:	d8800f05 	stb	r2,60(sp)
    2820:	d8000405 	stb	zero,16(sp)
    2824:	003cac06 	br	1ad8 <___vfprintf_internal_r+0x3bc>
    2828:	01400074 	movhi	r5,1
    282c:	2975e004 	addi	r5,r5,-10368
    2830:	d9414415 	stw	r5,1296(sp)
    2834:	d9814c17 	ldw	r6,1328(sp)
    2838:	3080080c 	andi	r2,r6,32
    283c:	1000ff26 	beq	r2,zero,2c3c <___vfprintf_internal_r+0x1520>
    2840:	3c000017 	ldw	r16,0(r7)
    2844:	3c400117 	ldw	r17,4(r7)
    2848:	38800204 	addi	r2,r7,8
    284c:	d8814015 	stw	r2,1280(sp)
    2850:	d9414c17 	ldw	r5,1328(sp)
    2854:	2880004c 	andi	r2,r5,1
    2858:	1005003a 	cmpeq	r2,r2,zero
    285c:	1000b91e 	bne	r2,zero,2b44 <___vfprintf_internal_r+0x1428>
    2860:	8444b03a 	or	r2,r16,r17
    2864:	1000b726 	beq	r2,zero,2b44 <___vfprintf_internal_r+0x1428>
    2868:	d9814d17 	ldw	r6,1332(sp)
    286c:	29400094 	ori	r5,r5,2
    2870:	00800c04 	movi	r2,48
    2874:	01000084 	movi	r4,2
    2878:	d9414c15 	stw	r5,1328(sp)
    287c:	d8800445 	stb	r2,17(sp)
    2880:	d9800485 	stb	r6,18(sp)
    2884:	d8000405 	stb	zero,16(sp)
    2888:	003e3206 	br	2154 <___vfprintf_internal_r+0xa38>
    288c:	01800074 	movhi	r6,1
    2890:	31b5d504 	addi	r6,r6,-10412
    2894:	d9814415 	stw	r6,1296(sp)
    2898:	003fe606 	br	2834 <___vfprintf_internal_r+0x1118>
    289c:	00800ac4 	movi	r2,43
    28a0:	d8800405 	stb	r2,16(sp)
    28a4:	b8c00007 	ldb	r3,0(r23)
    28a8:	003c1b06 	br	1918 <___vfprintf_internal_r+0x1fc>
    28ac:	d8814c17 	ldw	r2,1328(sp)
    28b0:	b8c00007 	ldb	r3,0(r23)
    28b4:	10800054 	ori	r2,r2,1
    28b8:	d8814c15 	stw	r2,1328(sp)
    28bc:	003c1606 	br	1918 <___vfprintf_internal_r+0x1fc>
    28c0:	d8800407 	ldb	r2,16(sp)
    28c4:	10004c1e 	bne	r2,zero,29f8 <___vfprintf_internal_r+0x12dc>
    28c8:	00800804 	movi	r2,32
    28cc:	d8800405 	stb	r2,16(sp)
    28d0:	b8c00007 	ldb	r3,0(r23)
    28d4:	003c1006 	br	1918 <___vfprintf_internal_r+0x1fc>
    28d8:	d9814c17 	ldw	r6,1328(sp)
    28dc:	b8c00007 	ldb	r3,0(r23)
    28e0:	31800214 	ori	r6,r6,8
    28e4:	d9814c15 	stw	r6,1328(sp)
    28e8:	003c0b06 	br	1918 <___vfprintf_internal_r+0x1fc>
    28ec:	0009883a 	mov	r4,zero
    28f0:	04000244 	movi	r16,9
    28f4:	01400284 	movi	r5,10
    28f8:	d9c15115 	stw	r7,1348(sp)
    28fc:	0000d140 	call	d14 <__mulsi3>
    2900:	b9000007 	ldb	r4,0(r23)
    2904:	d8c14d17 	ldw	r3,1332(sp)
    2908:	bdc00044 	addi	r23,r23,1
    290c:	d9014d15 	stw	r4,1332(sp)
    2910:	d9414d17 	ldw	r5,1332(sp)
    2914:	1885883a 	add	r2,r3,r2
    2918:	113ff404 	addi	r4,r2,-48
    291c:	28bff404 	addi	r2,r5,-48
    2920:	d9c15117 	ldw	r7,1348(sp)
    2924:	80bff32e 	bgeu	r16,r2,28f4 <___vfprintf_internal_r+0x11d8>
    2928:	d9014a15 	stw	r4,1320(sp)
    292c:	003bfc06 	br	1920 <___vfprintf_internal_r+0x204>
    2930:	d8814c17 	ldw	r2,1328(sp)
    2934:	b8c00007 	ldb	r3,0(r23)
    2938:	10802014 	ori	r2,r2,128
    293c:	d8814c15 	stw	r2,1328(sp)
    2940:	003bf506 	br	1918 <___vfprintf_internal_r+0x1fc>
    2944:	b8c00007 	ldb	r3,0(r23)
    2948:	00800a84 	movi	r2,42
    294c:	bdc00044 	addi	r23,r23,1
    2950:	18831826 	beq	r3,r2,35b4 <___vfprintf_internal_r+0x1e98>
    2954:	d8c14d15 	stw	r3,1332(sp)
    2958:	18bff404 	addi	r2,r3,-48
    295c:	00c00244 	movi	r3,9
    2960:	18827b36 	bltu	r3,r2,3350 <___vfprintf_internal_r+0x1c34>
    2964:	1821883a 	mov	r16,r3
    2968:	0009883a 	mov	r4,zero
    296c:	01400284 	movi	r5,10
    2970:	d9c15115 	stw	r7,1348(sp)
    2974:	0000d140 	call	d14 <__mulsi3>
    2978:	d9414d17 	ldw	r5,1332(sp)
    297c:	b9800007 	ldb	r6,0(r23)
    2980:	d9c15117 	ldw	r7,1348(sp)
    2984:	1145883a 	add	r2,r2,r5
    2988:	113ff404 	addi	r4,r2,-48
    298c:	30bff404 	addi	r2,r6,-48
    2990:	d9814d15 	stw	r6,1332(sp)
    2994:	bdc00044 	addi	r23,r23,1
    2998:	80bff42e 	bgeu	r16,r2,296c <___vfprintf_internal_r+0x1250>
    299c:	2027883a 	mov	r19,r4
    29a0:	203bdf0e 	bge	r4,zero,1920 <___vfprintf_internal_r+0x204>
    29a4:	04ffffc4 	movi	r19,-1
    29a8:	003bdd06 	br	1920 <___vfprintf_internal_r+0x204>
    29ac:	d8000405 	stb	zero,16(sp)
    29b0:	39800017 	ldw	r6,0(r7)
    29b4:	39c00104 	addi	r7,r7,4
    29b8:	d9c14015 	stw	r7,1280(sp)
    29bc:	d9814115 	stw	r6,1284(sp)
    29c0:	3001c926 	beq	r6,zero,30e8 <___vfprintf_internal_r+0x19cc>
    29c4:	98000e16 	blt	r19,zero,2a00 <___vfprintf_internal_r+0x12e4>
    29c8:	d9014117 	ldw	r4,1284(sp)
    29cc:	000b883a 	mov	r5,zero
    29d0:	980d883a 	mov	r6,r19
    29d4:	00061100 	call	6110 <memchr>
    29d8:	10025926 	beq	r2,zero,3340 <___vfprintf_internal_r+0x1c24>
    29dc:	d8c14117 	ldw	r3,1284(sp)
    29e0:	10cfc83a 	sub	r7,r2,r3
    29e4:	99c19e16 	blt	r19,r7,3060 <___vfprintf_internal_r+0x1944>
    29e8:	d9c14515 	stw	r7,1300(sp)
    29ec:	38000916 	blt	r7,zero,2a14 <___vfprintf_internal_r+0x12f8>
    29f0:	d8014615 	stw	zero,1304(sp)
    29f4:	003deb06 	br	21a4 <___vfprintf_internal_r+0xa88>
    29f8:	b8c00007 	ldb	r3,0(r23)
    29fc:	003bc606 	br	1918 <___vfprintf_internal_r+0x1fc>
    2a00:	d9014117 	ldw	r4,1284(sp)
    2a04:	00016500 	call	1650 <strlen>
    2a08:	d8814515 	stw	r2,1300(sp)
    2a0c:	100f883a 	mov	r7,r2
    2a10:	103ff70e 	bge	r2,zero,29f0 <___vfprintf_internal_r+0x12d4>
    2a14:	d8014515 	stw	zero,1300(sp)
    2a18:	d8014615 	stw	zero,1304(sp)
    2a1c:	003de106 	br	21a4 <___vfprintf_internal_r+0xa88>
    2a20:	20c03fcc 	andi	r3,r4,255
    2a24:	00800044 	movi	r2,1
    2a28:	18802d26 	beq	r3,r2,2ae0 <___vfprintf_internal_r+0x13c4>
    2a2c:	18800e36 	bltu	r3,r2,2a68 <___vfprintf_internal_r+0x134c>
    2a30:	00800084 	movi	r2,2
    2a34:	1880fa26 	beq	r3,r2,2e20 <___vfprintf_internal_r+0x1704>
    2a38:	01000074 	movhi	r4,1
    2a3c:	2135e504 	addi	r4,r4,-10348
    2a40:	00016500 	call	1650 <strlen>
    2a44:	100f883a 	mov	r7,r2
    2a48:	dcc14515 	stw	r19,1300(sp)
    2a4c:	9880010e 	bge	r19,r2,2a54 <___vfprintf_internal_r+0x1338>
    2a50:	d8814515 	stw	r2,1300(sp)
    2a54:	00800074 	movhi	r2,1
    2a58:	10b5e504 	addi	r2,r2,-10348
    2a5c:	dcc14615 	stw	r19,1304(sp)
    2a60:	d8814115 	stw	r2,1284(sp)
    2a64:	003dcf06 	br	21a4 <___vfprintf_internal_r+0xa88>
    2a68:	d9401904 	addi	r5,sp,100
    2a6c:	dd000f04 	addi	r20,sp,60
    2a70:	d9414115 	stw	r5,1284(sp)
    2a74:	880a977a 	slli	r5,r17,29
    2a78:	d9814117 	ldw	r6,1284(sp)
    2a7c:	8004d0fa 	srli	r2,r16,3
    2a80:	8806d0fa 	srli	r3,r17,3
    2a84:	810001cc 	andi	r4,r16,7
    2a88:	2884b03a 	or	r2,r5,r2
    2a8c:	31bfffc4 	addi	r6,r6,-1
    2a90:	21000c04 	addi	r4,r4,48
    2a94:	d9814115 	stw	r6,1284(sp)
    2a98:	10cab03a 	or	r5,r2,r3
    2a9c:	31000005 	stb	r4,0(r6)
    2aa0:	1021883a 	mov	r16,r2
    2aa4:	1823883a 	mov	r17,r3
    2aa8:	283ff21e 	bne	r5,zero,2a74 <___vfprintf_internal_r+0x1358>
    2aac:	d8c14c17 	ldw	r3,1328(sp)
    2ab0:	1880004c 	andi	r2,r3,1
    2ab4:	1005003a 	cmpeq	r2,r2,zero
    2ab8:	103db31e 	bne	r2,zero,2188 <___vfprintf_internal_r+0xa6c>
    2abc:	20803fcc 	andi	r2,r4,255
    2ac0:	1080201c 	xori	r2,r2,128
    2ac4:	10bfe004 	addi	r2,r2,-128
    2ac8:	00c00c04 	movi	r3,48
    2acc:	10fdae26 	beq	r2,r3,2188 <___vfprintf_internal_r+0xa6c>
    2ad0:	31bfffc4 	addi	r6,r6,-1
    2ad4:	d9814115 	stw	r6,1284(sp)
    2ad8:	30c00005 	stb	r3,0(r6)
    2adc:	003daa06 	br	2188 <___vfprintf_internal_r+0xa6c>
    2ae0:	88800068 	cmpgeui	r2,r17,1
    2ae4:	10002c1e 	bne	r2,zero,2b98 <___vfprintf_internal_r+0x147c>
    2ae8:	8800021e 	bne	r17,zero,2af4 <___vfprintf_internal_r+0x13d8>
    2aec:	00800244 	movi	r2,9
    2af0:	14002936 	bltu	r2,r16,2b98 <___vfprintf_internal_r+0x147c>
    2af4:	d90018c4 	addi	r4,sp,99
    2af8:	dd000f04 	addi	r20,sp,60
    2afc:	d9014115 	stw	r4,1284(sp)
    2b00:	d9014117 	ldw	r4,1284(sp)
    2b04:	80800c04 	addi	r2,r16,48
    2b08:	20800005 	stb	r2,0(r4)
    2b0c:	003d9e06 	br	2188 <___vfprintf_internal_r+0xa6c>
    2b10:	dc400d17 	ldw	r17,52(sp)
    2b14:	07000074 	movhi	fp,1
    2b18:	e735ec84 	addi	fp,fp,-10318
    2b1c:	9425883a 	add	r18,r18,r16
    2b20:	8c400044 	addi	r17,r17,1
    2b24:	008001c4 	movi	r2,7
    2b28:	1f000015 	stw	fp,0(r3)
    2b2c:	1c000115 	stw	r16,4(r3)
    2b30:	dc800e15 	stw	r18,56(sp)
    2b34:	dc400d15 	stw	r17,52(sp)
    2b38:	147ddc16 	blt	r2,r17,22ac <___vfprintf_internal_r+0xb90>
    2b3c:	18c00204 	addi	r3,r3,8
    2b40:	003c7406 	br	1d14 <___vfprintf_internal_r+0x5f8>
    2b44:	01000084 	movi	r4,2
    2b48:	d8000405 	stb	zero,16(sp)
    2b4c:	003d8106 	br	2154 <___vfprintf_internal_r+0xa38>
    2b50:	d9814c17 	ldw	r6,1328(sp)
    2b54:	30c4703a 	and	r2,r6,r3
    2b58:	1005003a 	cmpeq	r2,r2,zero
    2b5c:	103cb326 	beq	r2,zero,1e2c <___vfprintf_internal_r+0x710>
    2b60:	d9014117 	ldw	r4,1284(sp)
    2b64:	94800044 	addi	r18,r18,1
    2b68:	8c400044 	addi	r17,r17,1
    2b6c:	008001c4 	movi	r2,7
    2b70:	a9000015 	stw	r4,0(r21)
    2b74:	a8c00115 	stw	r3,4(r21)
    2b78:	dc800e15 	stw	r18,56(sp)
    2b7c:	dc400d15 	stw	r17,52(sp)
    2b80:	147e6016 	blt	r2,r17,2504 <___vfprintf_internal_r+0xde8>
    2b84:	acc00204 	addi	r19,r21,8
    2b88:	003cd106 	br	1ed0 <___vfprintf_internal_r+0x7b4>
    2b8c:	07000074 	movhi	fp,1
    2b90:	e735ec84 	addi	fp,fp,-10318
    2b94:	003c4906 	br	1cbc <___vfprintf_internal_r+0x5a0>
    2b98:	dd000f04 	addi	r20,sp,60
    2b9c:	dc801904 	addi	r18,sp,100
    2ba0:	8009883a 	mov	r4,r16
    2ba4:	880b883a 	mov	r5,r17
    2ba8:	01800284 	movi	r6,10
    2bac:	000f883a 	mov	r7,zero
    2bb0:	00088180 	call	8818 <__umoddi3>
    2bb4:	12000c04 	addi	r8,r2,48
    2bb8:	94bfffc4 	addi	r18,r18,-1
    2bbc:	8009883a 	mov	r4,r16
    2bc0:	880b883a 	mov	r5,r17
    2bc4:	01800284 	movi	r6,10
    2bc8:	000f883a 	mov	r7,zero
    2bcc:	92000005 	stb	r8,0(r18)
    2bd0:	00081ac0 	call	81ac <__udivdi3>
    2bd4:	1009883a 	mov	r4,r2
    2bd8:	1021883a 	mov	r16,r2
    2bdc:	18800068 	cmpgeui	r2,r3,1
    2be0:	1823883a 	mov	r17,r3
    2be4:	103fee1e 	bne	r2,zero,2ba0 <___vfprintf_internal_r+0x1484>
    2be8:	1800021e 	bne	r3,zero,2bf4 <___vfprintf_internal_r+0x14d8>
    2bec:	00800244 	movi	r2,9
    2bf0:	113feb36 	bltu	r2,r4,2ba0 <___vfprintf_internal_r+0x1484>
    2bf4:	94bfffc4 	addi	r18,r18,-1
    2bf8:	dc814115 	stw	r18,1284(sp)
    2bfc:	003fc006 	br	2b00 <___vfprintf_internal_r+0x13e4>
    2c00:	d9014c17 	ldw	r4,1328(sp)
    2c04:	2080004c 	andi	r2,r4,1
    2c08:	10009a1e 	bne	r2,zero,2e74 <___vfprintf_internal_r+0x1758>
    2c0c:	d9401904 	addi	r5,sp,100
    2c10:	dd000f04 	addi	r20,sp,60
    2c14:	d9414115 	stw	r5,1284(sp)
    2c18:	003d5b06 	br	2188 <___vfprintf_internal_r+0xa6c>
    2c1c:	d9014f17 	ldw	r4,1340(sp)
    2c20:	b00b883a 	mov	r5,r22
    2c24:	d9800c04 	addi	r6,sp,48
    2c28:	00016c40 	call	16c4 <__sprint_r>
    2c2c:	103c731e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2c30:	dc800e17 	ldw	r18,56(sp)
    2c34:	d8c01904 	addi	r3,sp,100
    2c38:	003cf906 	br	2020 <___vfprintf_internal_r+0x904>
    2c3c:	d8c14c17 	ldw	r3,1328(sp)
    2c40:	1880040c 	andi	r2,r3,16
    2c44:	1000711e 	bne	r2,zero,2e0c <___vfprintf_internal_r+0x16f0>
    2c48:	d9014c17 	ldw	r4,1328(sp)
    2c4c:	2080100c 	andi	r2,r4,64
    2c50:	10006e26 	beq	r2,zero,2e0c <___vfprintf_internal_r+0x16f0>
    2c54:	3c00000b 	ldhu	r16,0(r7)
    2c58:	0023883a 	mov	r17,zero
    2c5c:	39c00104 	addi	r7,r7,4
    2c60:	d9c14015 	stw	r7,1280(sp)
    2c64:	003efa06 	br	2850 <___vfprintf_internal_r+0x1134>
    2c68:	dc400d17 	ldw	r17,52(sp)
    2c6c:	07000074 	movhi	fp,1
    2c70:	e735ec84 	addi	fp,fp,-10318
    2c74:	9425883a 	add	r18,r18,r16
    2c78:	8c400044 	addi	r17,r17,1
    2c7c:	008001c4 	movi	r2,7
    2c80:	1f000015 	stw	fp,0(r3)
    2c84:	1c000115 	stw	r16,4(r3)
    2c88:	dc800e15 	stw	r18,56(sp)
    2c8c:	dc400d15 	stw	r17,52(sp)
    2c90:	147d7016 	blt	r2,r17,2254 <___vfprintf_internal_r+0xb38>
    2c94:	18c00204 	addi	r3,r3,8
    2c98:	003d7506 	br	2270 <___vfprintf_internal_r+0xb54>
    2c9c:	dc800e17 	ldw	r18,56(sp)
    2ca0:	dc400d17 	ldw	r17,52(sp)
    2ca4:	07000074 	movhi	fp,1
    2ca8:	e735f084 	addi	fp,fp,-10302
    2cac:	003bba06 	br	1b98 <___vfprintf_internal_r+0x47c>
    2cb0:	d9014f17 	ldw	r4,1340(sp)
    2cb4:	b00b883a 	mov	r5,r22
    2cb8:	d9800c04 	addi	r6,sp,48
    2cbc:	00016c40 	call	16c4 <__sprint_r>
    2cc0:	103c4e1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2cc4:	dc800e17 	ldw	r18,56(sp)
    2cc8:	d8c01904 	addi	r3,sp,100
    2ccc:	003ce306 	br	205c <___vfprintf_internal_r+0x940>
    2cd0:	3c000017 	ldw	r16,0(r7)
    2cd4:	0009883a 	mov	r4,zero
    2cd8:	39c00104 	addi	r7,r7,4
    2cdc:	0023883a 	mov	r17,zero
    2ce0:	d9c14015 	stw	r7,1280(sp)
    2ce4:	d8000405 	stb	zero,16(sp)
    2ce8:	003d1a06 	br	2154 <___vfprintf_internal_r+0xa38>
    2cec:	38800017 	ldw	r2,0(r7)
    2cf0:	39c00104 	addi	r7,r7,4
    2cf4:	d9c14015 	stw	r7,1280(sp)
    2cf8:	1023d7fa 	srai	r17,r2,31
    2cfc:	1021883a 	mov	r16,r2
    2d00:	003d1206 	br	214c <___vfprintf_internal_r+0xa30>
    2d04:	3c000017 	ldw	r16,0(r7)
    2d08:	01000044 	movi	r4,1
    2d0c:	39c00104 	addi	r7,r7,4
    2d10:	0023883a 	mov	r17,zero
    2d14:	d9c14015 	stw	r7,1280(sp)
    2d18:	d8000405 	stb	zero,16(sp)
    2d1c:	003d0d06 	br	2154 <___vfprintf_internal_r+0xa38>
    2d20:	00800074 	movhi	r2,1
    2d24:	10b5ec04 	addi	r2,r2,-10320
    2d28:	94800044 	addi	r18,r18,1
    2d2c:	8c400044 	addi	r17,r17,1
    2d30:	a8800015 	stw	r2,0(r21)
    2d34:	00c00044 	movi	r3,1
    2d38:	008001c4 	movi	r2,7
    2d3c:	a8c00115 	stw	r3,4(r21)
    2d40:	dc800e15 	stw	r18,56(sp)
    2d44:	dc400d15 	stw	r17,52(sp)
    2d48:	1440ca16 	blt	r2,r17,3074 <___vfprintf_internal_r+0x1958>
    2d4c:	a8c00204 	addi	r3,r21,8
    2d50:	2000061e 	bne	r4,zero,2d6c <___vfprintf_internal_r+0x1650>
    2d54:	d9414717 	ldw	r5,1308(sp)
    2d58:	2800041e 	bne	r5,zero,2d6c <___vfprintf_internal_r+0x1650>
    2d5c:	d9814c17 	ldw	r6,1328(sp)
    2d60:	3080004c 	andi	r2,r6,1
    2d64:	1005003a 	cmpeq	r2,r2,zero
    2d68:	103bea1e 	bne	r2,zero,1d14 <___vfprintf_internal_r+0x5f8>
    2d6c:	00800044 	movi	r2,1
    2d70:	dc400d17 	ldw	r17,52(sp)
    2d74:	18800115 	stw	r2,4(r3)
    2d78:	d8814917 	ldw	r2,1316(sp)
    2d7c:	94800044 	addi	r18,r18,1
    2d80:	8c400044 	addi	r17,r17,1
    2d84:	18800015 	stw	r2,0(r3)
    2d88:	008001c4 	movi	r2,7
    2d8c:	dc800e15 	stw	r18,56(sp)
    2d90:	dc400d15 	stw	r17,52(sp)
    2d94:	1440ca16 	blt	r2,r17,30c0 <___vfprintf_internal_r+0x19a4>
    2d98:	18c00204 	addi	r3,r3,8
    2d9c:	0121c83a 	sub	r16,zero,r4
    2da0:	0400500e 	bge	zero,r16,2ee4 <___vfprintf_internal_r+0x17c8>
    2da4:	00800404 	movi	r2,16
    2da8:	1400800e 	bge	r2,r16,2fac <___vfprintf_internal_r+0x1890>
    2dac:	1027883a 	mov	r19,r2
    2db0:	07000074 	movhi	fp,1
    2db4:	e735ec84 	addi	fp,fp,-10318
    2db8:	050001c4 	movi	r20,7
    2dbc:	00000306 	br	2dcc <___vfprintf_internal_r+0x16b0>
    2dc0:	18c00204 	addi	r3,r3,8
    2dc4:	843ffc04 	addi	r16,r16,-16
    2dc8:	9c007a0e 	bge	r19,r16,2fb4 <___vfprintf_internal_r+0x1898>
    2dcc:	94800404 	addi	r18,r18,16
    2dd0:	8c400044 	addi	r17,r17,1
    2dd4:	1f000015 	stw	fp,0(r3)
    2dd8:	1cc00115 	stw	r19,4(r3)
    2ddc:	dc800e15 	stw	r18,56(sp)
    2de0:	dc400d15 	stw	r17,52(sp)
    2de4:	a47ff60e 	bge	r20,r17,2dc0 <___vfprintf_internal_r+0x16a4>
    2de8:	d9014f17 	ldw	r4,1340(sp)
    2dec:	b00b883a 	mov	r5,r22
    2df0:	d9800c04 	addi	r6,sp,48
    2df4:	00016c40 	call	16c4 <__sprint_r>
    2df8:	103c001e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2dfc:	dc800e17 	ldw	r18,56(sp)
    2e00:	dc400d17 	ldw	r17,52(sp)
    2e04:	d8c01904 	addi	r3,sp,100
    2e08:	003fee06 	br	2dc4 <___vfprintf_internal_r+0x16a8>
    2e0c:	3c000017 	ldw	r16,0(r7)
    2e10:	0023883a 	mov	r17,zero
    2e14:	39c00104 	addi	r7,r7,4
    2e18:	d9c14015 	stw	r7,1280(sp)
    2e1c:	003e8c06 	br	2850 <___vfprintf_internal_r+0x1134>
    2e20:	d9401904 	addi	r5,sp,100
    2e24:	dd000f04 	addi	r20,sp,60
    2e28:	d9414115 	stw	r5,1284(sp)
    2e2c:	d9814417 	ldw	r6,1296(sp)
    2e30:	880a973a 	slli	r5,r17,28
    2e34:	8004d13a 	srli	r2,r16,4
    2e38:	810003cc 	andi	r4,r16,15
    2e3c:	3109883a 	add	r4,r6,r4
    2e40:	2884b03a 	or	r2,r5,r2
    2e44:	21400003 	ldbu	r5,0(r4)
    2e48:	d9014117 	ldw	r4,1284(sp)
    2e4c:	8806d13a 	srli	r3,r17,4
    2e50:	1021883a 	mov	r16,r2
    2e54:	213fffc4 	addi	r4,r4,-1
    2e58:	d9014115 	stw	r4,1284(sp)
    2e5c:	d9814117 	ldw	r6,1284(sp)
    2e60:	10c8b03a 	or	r4,r2,r3
    2e64:	1823883a 	mov	r17,r3
    2e68:	31400005 	stb	r5,0(r6)
    2e6c:	203fef1e 	bne	r4,zero,2e2c <___vfprintf_internal_r+0x1710>
    2e70:	003cc506 	br	2188 <___vfprintf_internal_r+0xa6c>
    2e74:	00800c04 	movi	r2,48
    2e78:	d98018c4 	addi	r6,sp,99
    2e7c:	dd000f04 	addi	r20,sp,60
    2e80:	d88018c5 	stb	r2,99(sp)
    2e84:	d9814115 	stw	r6,1284(sp)
    2e88:	003cbf06 	br	2188 <___vfprintf_internal_r+0xa6c>
    2e8c:	dc400d17 	ldw	r17,52(sp)
    2e90:	07000074 	movhi	fp,1
    2e94:	e735f084 	addi	fp,fp,-10302
    2e98:	003bc106 	br	1da0 <___vfprintf_internal_r+0x684>
    2e9c:	d9414c17 	ldw	r5,1328(sp)
    2ea0:	2880040c 	andi	r2,r5,16
    2ea4:	10007c26 	beq	r2,zero,3098 <___vfprintf_internal_r+0x197c>
    2ea8:	38800017 	ldw	r2,0(r7)
    2eac:	39c00104 	addi	r7,r7,4
    2eb0:	d9c14015 	stw	r7,1280(sp)
    2eb4:	d9814b17 	ldw	r6,1324(sp)
    2eb8:	d9c14017 	ldw	r7,1280(sp)
    2ebc:	11800015 	stw	r6,0(r2)
    2ec0:	003a7206 	br	188c <___vfprintf_internal_r+0x170>
    2ec4:	d9014f17 	ldw	r4,1340(sp)
    2ec8:	b00b883a 	mov	r5,r22
    2ecc:	d9800c04 	addi	r6,sp,48
    2ed0:	00016c40 	call	16c4 <__sprint_r>
    2ed4:	103bc91e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2ed8:	dc800e17 	ldw	r18,56(sp)
    2edc:	dc400d17 	ldw	r17,52(sp)
    2ee0:	d8c01904 	addi	r3,sp,100
    2ee4:	d9014717 	ldw	r4,1308(sp)
    2ee8:	d9414117 	ldw	r5,1284(sp)
    2eec:	8c400044 	addi	r17,r17,1
    2ef0:	9125883a 	add	r18,r18,r4
    2ef4:	008001c4 	movi	r2,7
    2ef8:	19400015 	stw	r5,0(r3)
    2efc:	19000115 	stw	r4,4(r3)
    2f00:	dc800e15 	stw	r18,56(sp)
    2f04:	dc400d15 	stw	r17,52(sp)
    2f08:	147ce816 	blt	r2,r17,22ac <___vfprintf_internal_r+0xb90>
    2f0c:	18c00204 	addi	r3,r3,8
    2f10:	003b8006 	br	1d14 <___vfprintf_internal_r+0x5f8>
    2f14:	38c00017 	ldw	r3,0(r7)
    2f18:	39000204 	addi	r4,r7,8
    2f1c:	d9014015 	stw	r4,1280(sp)
    2f20:	d8c14215 	stw	r3,1288(sp)
    2f24:	39c00117 	ldw	r7,4(r7)
    2f28:	d9c14315 	stw	r7,1292(sp)
    2f2c:	003e1a06 	br	2798 <___vfprintf_internal_r+0x107c>
    2f30:	0005883a 	mov	r2,zero
    2f34:	1409c83a 	sub	r4,r2,r16
    2f38:	1105803a 	cmpltu	r2,r2,r4
    2f3c:	044bc83a 	sub	r5,zero,r17
    2f40:	2885c83a 	sub	r2,r5,r2
    2f44:	2021883a 	mov	r16,r4
    2f48:	1023883a 	mov	r17,r2
    2f4c:	01000044 	movi	r4,1
    2f50:	00800b44 	movi	r2,45
    2f54:	d8800405 	stb	r2,16(sp)
    2f58:	003c7e06 	br	2154 <___vfprintf_internal_r+0xa38>
    2f5c:	d9014f17 	ldw	r4,1340(sp)
    2f60:	b00b883a 	mov	r5,r22
    2f64:	d9800c04 	addi	r6,sp,48
    2f68:	00016c40 	call	16c4 <__sprint_r>
    2f6c:	103ba31e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2f70:	dc800e17 	ldw	r18,56(sp)
    2f74:	dc400d17 	ldw	r17,52(sp)
    2f78:	d9000517 	ldw	r4,20(sp)
    2f7c:	d9401904 	addi	r5,sp,100
    2f80:	003da106 	br	2608 <___vfprintf_internal_r+0xeec>
    2f84:	d9014f17 	ldw	r4,1340(sp)
    2f88:	b00b883a 	mov	r5,r22
    2f8c:	d9800c04 	addi	r6,sp,48
    2f90:	00016c40 	call	16c4 <__sprint_r>
    2f94:	103b991e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2f98:	dc800e17 	ldw	r18,56(sp)
    2f9c:	dc400d17 	ldw	r17,52(sp)
    2fa0:	d9000517 	ldw	r4,20(sp)
    2fa4:	d8c01904 	addi	r3,sp,100
    2fa8:	003d8b06 	br	25d8 <___vfprintf_internal_r+0xebc>
    2fac:	07000074 	movhi	fp,1
    2fb0:	e735ec84 	addi	fp,fp,-10318
    2fb4:	9425883a 	add	r18,r18,r16
    2fb8:	8c400044 	addi	r17,r17,1
    2fbc:	008001c4 	movi	r2,7
    2fc0:	1f000015 	stw	fp,0(r3)
    2fc4:	1c000115 	stw	r16,4(r3)
    2fc8:	dc800e15 	stw	r18,56(sp)
    2fcc:	dc400d15 	stw	r17,52(sp)
    2fd0:	147fbc16 	blt	r2,r17,2ec4 <___vfprintf_internal_r+0x17a8>
    2fd4:	18c00204 	addi	r3,r3,8
    2fd8:	003fc206 	br	2ee4 <___vfprintf_internal_r+0x17c8>
    2fdc:	d9014f17 	ldw	r4,1340(sp)
    2fe0:	b00b883a 	mov	r5,r22
    2fe4:	d9800c04 	addi	r6,sp,48
    2fe8:	00016c40 	call	16c4 <__sprint_r>
    2fec:	103b831e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    2ff0:	dc800e17 	ldw	r18,56(sp)
    2ff4:	d9000517 	ldw	r4,20(sp)
    2ff8:	d8c01904 	addi	r3,sp,100
    2ffc:	003cfc06 	br	23f0 <___vfprintf_internal_r+0xcd4>
    3000:	07000074 	movhi	fp,1
    3004:	e735ec84 	addi	fp,fp,-10318
    3008:	003bde06 	br	1f84 <___vfprintf_internal_r+0x868>
    300c:	00800074 	movhi	r2,1
    3010:	10b5db04 	addi	r2,r2,-10388
    3014:	d8814115 	stw	r2,1284(sp)
    3018:	003def06 	br	27d8 <___vfprintf_internal_r+0x10bc>
    301c:	d9014217 	ldw	r4,1288(sp)
    3020:	d9414317 	ldw	r5,1292(sp)
    3024:	0007acc0 	call	7acc <__isnand>
    3028:	10003926 	beq	r2,zero,3110 <___vfprintf_internal_r+0x19f4>
    302c:	d9414d17 	ldw	r5,1332(sp)
    3030:	008011c4 	movi	r2,71
    3034:	1140ce16 	blt	r2,r5,3370 <___vfprintf_internal_r+0x1c54>
    3038:	01800074 	movhi	r6,1
    303c:	31b5dc04 	addi	r6,r6,-10384
    3040:	d9814115 	stw	r6,1284(sp)
    3044:	003de406 	br	27d8 <___vfprintf_internal_r+0x10bc>
    3048:	d9014c17 	ldw	r4,1328(sp)
    304c:	bdc00044 	addi	r23,r23,1
    3050:	b8c00007 	ldb	r3,0(r23)
    3054:	21000814 	ori	r4,r4,32
    3058:	d9014c15 	stw	r4,1328(sp)
    305c:	003a2e06 	br	1918 <___vfprintf_internal_r+0x1fc>
    3060:	dcc14515 	stw	r19,1300(sp)
    3064:	98011016 	blt	r19,zero,34a8 <___vfprintf_internal_r+0x1d8c>
    3068:	980f883a 	mov	r7,r19
    306c:	d8014615 	stw	zero,1304(sp)
    3070:	003c4c06 	br	21a4 <___vfprintf_internal_r+0xa88>
    3074:	d9014f17 	ldw	r4,1340(sp)
    3078:	b00b883a 	mov	r5,r22
    307c:	d9800c04 	addi	r6,sp,48
    3080:	00016c40 	call	16c4 <__sprint_r>
    3084:	103b5d1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    3088:	dc800e17 	ldw	r18,56(sp)
    308c:	d9000517 	ldw	r4,20(sp)
    3090:	d8c01904 	addi	r3,sp,100
    3094:	003f2e06 	br	2d50 <___vfprintf_internal_r+0x1634>
    3098:	d8c14c17 	ldw	r3,1328(sp)
    309c:	1880100c 	andi	r2,r3,64
    30a0:	1000a026 	beq	r2,zero,3324 <___vfprintf_internal_r+0x1c08>
    30a4:	38800017 	ldw	r2,0(r7)
    30a8:	39c00104 	addi	r7,r7,4
    30ac:	d9c14015 	stw	r7,1280(sp)
    30b0:	d9014b17 	ldw	r4,1324(sp)
    30b4:	d9c14017 	ldw	r7,1280(sp)
    30b8:	1100000d 	sth	r4,0(r2)
    30bc:	0039f306 	br	188c <___vfprintf_internal_r+0x170>
    30c0:	d9014f17 	ldw	r4,1340(sp)
    30c4:	b00b883a 	mov	r5,r22
    30c8:	d9800c04 	addi	r6,sp,48
    30cc:	00016c40 	call	16c4 <__sprint_r>
    30d0:	103b4a1e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    30d4:	dc800e17 	ldw	r18,56(sp)
    30d8:	dc400d17 	ldw	r17,52(sp)
    30dc:	d9000517 	ldw	r4,20(sp)
    30e0:	d8c01904 	addi	r3,sp,100
    30e4:	003f2d06 	br	2d9c <___vfprintf_internal_r+0x1680>
    30e8:	00800184 	movi	r2,6
    30ec:	14c09a36 	bltu	r2,r19,3358 <___vfprintf_internal_r+0x1c3c>
    30f0:	dcc14515 	stw	r19,1300(sp)
    30f4:	9800010e 	bge	r19,zero,30fc <___vfprintf_internal_r+0x19e0>
    30f8:	d8014515 	stw	zero,1300(sp)
    30fc:	00800074 	movhi	r2,1
    3100:	10b5de04 	addi	r2,r2,-10376
    3104:	980f883a 	mov	r7,r19
    3108:	d8814115 	stw	r2,1284(sp)
    310c:	003a7206 	br	1ad8 <___vfprintf_internal_r+0x3bc>
    3110:	00bfffc4 	movi	r2,-1
    3114:	9880e226 	beq	r19,r2,34a0 <___vfprintf_internal_r+0x1d84>
    3118:	d9414d17 	ldw	r5,1332(sp)
    311c:	008019c4 	movi	r2,103
    3120:	2880dc26 	beq	r5,r2,3494 <___vfprintf_internal_r+0x1d78>
    3124:	008011c4 	movi	r2,71
    3128:	2880da26 	beq	r5,r2,3494 <___vfprintf_internal_r+0x1d78>
    312c:	d9414c17 	ldw	r5,1328(sp)
    3130:	d9014317 	ldw	r4,1292(sp)
    3134:	d9814217 	ldw	r6,1288(sp)
    3138:	29404014 	ori	r5,r5,256
    313c:	d9414c15 	stw	r5,1328(sp)
    3140:	2000cc16 	blt	r4,zero,3474 <___vfprintf_internal_r+0x1d58>
    3144:	3021883a 	mov	r16,r6
    3148:	2023883a 	mov	r17,r4
    314c:	0039883a 	mov	fp,zero
    3150:	d9414d17 	ldw	r5,1332(sp)
    3154:	00801984 	movi	r2,102
    3158:	2880b726 	beq	r5,r2,3438 <___vfprintf_internal_r+0x1d1c>
    315c:	00801184 	movi	r2,70
    3160:	2880b526 	beq	r5,r2,3438 <___vfprintf_internal_r+0x1d1c>
    3164:	00801944 	movi	r2,101
    3168:	2880c826 	beq	r5,r2,348c <___vfprintf_internal_r+0x1d70>
    316c:	00801144 	movi	r2,69
    3170:	2880c626 	beq	r5,r2,348c <___vfprintf_internal_r+0x1d70>
    3174:	9829883a 	mov	r20,r19
    3178:	d9014f17 	ldw	r4,1340(sp)
    317c:	d8800504 	addi	r2,sp,20
    3180:	880d883a 	mov	r6,r17
    3184:	d8800115 	stw	r2,4(sp)
    3188:	d8c00604 	addi	r3,sp,24
    318c:	d8800704 	addi	r2,sp,28
    3190:	800b883a 	mov	r5,r16
    3194:	01c00084 	movi	r7,2
    3198:	d8c00215 	stw	r3,8(sp)
    319c:	d8800315 	stw	r2,12(sp)
    31a0:	dd000015 	stw	r20,0(sp)
    31a4:	00039840 	call	3984 <_dtoa_r>
    31a8:	d9814d17 	ldw	r6,1332(sp)
    31ac:	d8814115 	stw	r2,1284(sp)
    31b0:	008019c4 	movi	r2,103
    31b4:	30809526 	beq	r6,r2,340c <___vfprintf_internal_r+0x1cf0>
    31b8:	d8c14d17 	ldw	r3,1332(sp)
    31bc:	008011c4 	movi	r2,71
    31c0:	18809226 	beq	r3,r2,340c <___vfprintf_internal_r+0x1cf0>
    31c4:	d9414117 	ldw	r5,1284(sp)
    31c8:	d9814d17 	ldw	r6,1332(sp)
    31cc:	00801984 	movi	r2,102
    31d0:	2d25883a 	add	r18,r5,r20
    31d4:	30808626 	beq	r6,r2,33f0 <___vfprintf_internal_r+0x1cd4>
    31d8:	00801184 	movi	r2,70
    31dc:	30808426 	beq	r6,r2,33f0 <___vfprintf_internal_r+0x1cd4>
    31e0:	000d883a 	mov	r6,zero
    31e4:	000f883a 	mov	r7,zero
    31e8:	880b883a 	mov	r5,r17
    31ec:	8009883a 	mov	r4,r16
    31f0:	00099980 	call	9998 <__eqdf2>
    31f4:	1000751e 	bne	r2,zero,33cc <___vfprintf_internal_r+0x1cb0>
    31f8:	9005883a 	mov	r2,r18
    31fc:	dc800715 	stw	r18,28(sp)
    3200:	d9014117 	ldw	r4,1284(sp)
    3204:	d9414d17 	ldw	r5,1332(sp)
    3208:	00c019c4 	movi	r3,103
    320c:	1125c83a 	sub	r18,r2,r4
    3210:	28c06826 	beq	r5,r3,33b4 <___vfprintf_internal_r+0x1c98>
    3214:	008011c4 	movi	r2,71
    3218:	28806626 	beq	r5,r2,33b4 <___vfprintf_internal_r+0x1c98>
    321c:	d9000517 	ldw	r4,20(sp)
    3220:	d8c14d17 	ldw	r3,1332(sp)
    3224:	00801944 	movi	r2,101
    3228:	10c05516 	blt	r2,r3,3380 <___vfprintf_internal_r+0x1c64>
    322c:	213fffc4 	addi	r4,r4,-1
    3230:	d9000515 	stw	r4,20(sp)
    3234:	d8c00805 	stb	r3,32(sp)
    3238:	2021883a 	mov	r16,r4
    323c:	2000c116 	blt	r4,zero,3544 <___vfprintf_internal_r+0x1e28>
    3240:	00800ac4 	movi	r2,43
    3244:	d8800845 	stb	r2,33(sp)
    3248:	00800244 	movi	r2,9
    324c:	1400af0e 	bge	r2,r16,350c <___vfprintf_internal_r+0x1df0>
    3250:	1027883a 	mov	r19,r2
    3254:	dc400b84 	addi	r17,sp,46
    3258:	8009883a 	mov	r4,r16
    325c:	01400284 	movi	r5,10
    3260:	0000ca40 	call	ca4 <__modsi3>
    3264:	10800c04 	addi	r2,r2,48
    3268:	8c7fffc4 	addi	r17,r17,-1
    326c:	8009883a 	mov	r4,r16
    3270:	01400284 	movi	r5,10
    3274:	88800005 	stb	r2,0(r17)
    3278:	0000c440 	call	c44 <__divsi3>
    327c:	1021883a 	mov	r16,r2
    3280:	98bff516 	blt	r19,r2,3258 <___vfprintf_internal_r+0x1b3c>
    3284:	10c00c04 	addi	r3,r2,48
    3288:	d88009c4 	addi	r2,sp,39
    328c:	108001c4 	addi	r2,r2,7
    3290:	897fffc4 	addi	r5,r17,-1
    3294:	88ffffc5 	stb	r3,-1(r17)
    3298:	2880a72e 	bgeu	r5,r2,3538 <___vfprintf_internal_r+0x1e1c>
    329c:	1009883a 	mov	r4,r2
    32a0:	d9800804 	addi	r6,sp,32
    32a4:	d8c00884 	addi	r3,sp,34
    32a8:	28800003 	ldbu	r2,0(r5)
    32ac:	29400044 	addi	r5,r5,1
    32b0:	18800005 	stb	r2,0(r3)
    32b4:	18c00044 	addi	r3,r3,1
    32b8:	293ffb36 	bltu	r5,r4,32a8 <___vfprintf_internal_r+0x1b8c>
    32bc:	1987c83a 	sub	r3,r3,r6
    32c0:	00800044 	movi	r2,1
    32c4:	d8c14815 	stw	r3,1312(sp)
    32c8:	90cf883a 	add	r7,r18,r3
    32cc:	1480960e 	bge	r2,r18,3528 <___vfprintf_internal_r+0x1e0c>
    32d0:	39c00044 	addi	r7,r7,1
    32d4:	d9c14515 	stw	r7,1300(sp)
    32d8:	38003416 	blt	r7,zero,33ac <___vfprintf_internal_r+0x1c90>
    32dc:	e0803fcc 	andi	r2,fp,255
    32e0:	1080201c 	xori	r2,r2,128
    32e4:	10bfe004 	addi	r2,r2,-128
    32e8:	10004e26 	beq	r2,zero,3424 <___vfprintf_internal_r+0x1d08>
    32ec:	00800b44 	movi	r2,45
    32f0:	dc814715 	stw	r18,1308(sp)
    32f4:	d8014615 	stw	zero,1304(sp)
    32f8:	d8800405 	stb	r2,16(sp)
    32fc:	003bab06 	br	21ac <___vfprintf_internal_r+0xa90>
    3300:	00800b44 	movi	r2,45
    3304:	d8800405 	stb	r2,16(sp)
    3308:	003d2d06 	br	27c0 <___vfprintf_internal_r+0x10a4>
    330c:	d9014f17 	ldw	r4,1340(sp)
    3310:	b00b883a 	mov	r5,r22
    3314:	d9800c04 	addi	r6,sp,48
    3318:	00016c40 	call	16c4 <__sprint_r>
    331c:	103ab71e 	bne	r2,zero,1dfc <___vfprintf_internal_r+0x6e0>
    3320:	003ab506 	br	1df8 <___vfprintf_internal_r+0x6dc>
    3324:	38800017 	ldw	r2,0(r7)
    3328:	39c00104 	addi	r7,r7,4
    332c:	d9c14015 	stw	r7,1280(sp)
    3330:	d9414b17 	ldw	r5,1324(sp)
    3334:	d9c14017 	ldw	r7,1280(sp)
    3338:	11400015 	stw	r5,0(r2)
    333c:	00395306 	br	188c <___vfprintf_internal_r+0x170>
    3340:	980f883a 	mov	r7,r19
    3344:	dcc14515 	stw	r19,1300(sp)
    3348:	d8014615 	stw	zero,1304(sp)
    334c:	003b9506 	br	21a4 <___vfprintf_internal_r+0xa88>
    3350:	0027883a 	mov	r19,zero
    3354:	00397206 	br	1920 <___vfprintf_internal_r+0x204>
    3358:	00c00074 	movhi	r3,1
    335c:	18f5de04 	addi	r3,r3,-10376
    3360:	100f883a 	mov	r7,r2
    3364:	d8814515 	stw	r2,1300(sp)
    3368:	d8c14115 	stw	r3,1284(sp)
    336c:	0039da06 	br	1ad8 <___vfprintf_internal_r+0x3bc>
    3370:	00800074 	movhi	r2,1
    3374:	10b5dd04 	addi	r2,r2,-10380
    3378:	d8814115 	stw	r2,1284(sp)
    337c:	003d1606 	br	27d8 <___vfprintf_internal_r+0x10bc>
    3380:	d9414d17 	ldw	r5,1332(sp)
    3384:	00801984 	movi	r2,102
    3388:	28804926 	beq	r5,r2,34b0 <___vfprintf_internal_r+0x1d94>
    338c:	200f883a 	mov	r7,r4
    3390:	24805716 	blt	r4,r18,34f0 <___vfprintf_internal_r+0x1dd4>
    3394:	d9414c17 	ldw	r5,1328(sp)
    3398:	2880004c 	andi	r2,r5,1
    339c:	10000126 	beq	r2,zero,33a4 <___vfprintf_internal_r+0x1c88>
    33a0:	21c00044 	addi	r7,r4,1
    33a4:	d9c14515 	stw	r7,1300(sp)
    33a8:	383fcc0e 	bge	r7,zero,32dc <___vfprintf_internal_r+0x1bc0>
    33ac:	d8014515 	stw	zero,1300(sp)
    33b0:	003fca06 	br	32dc <___vfprintf_internal_r+0x1bc0>
    33b4:	d9000517 	ldw	r4,20(sp)
    33b8:	00bfff04 	movi	r2,-4
    33bc:	1100480e 	bge	r2,r4,34e0 <___vfprintf_internal_r+0x1dc4>
    33c0:	99004716 	blt	r19,r4,34e0 <___vfprintf_internal_r+0x1dc4>
    33c4:	d8c14d15 	stw	r3,1332(sp)
    33c8:	003ff006 	br	338c <___vfprintf_internal_r+0x1c70>
    33cc:	d8800717 	ldw	r2,28(sp)
    33d0:	14bf8b2e 	bgeu	r2,r18,3200 <___vfprintf_internal_r+0x1ae4>
    33d4:	9007883a 	mov	r3,r18
    33d8:	01000c04 	movi	r4,48
    33dc:	11000005 	stb	r4,0(r2)
    33e0:	10800044 	addi	r2,r2,1
    33e4:	d8800715 	stw	r2,28(sp)
    33e8:	18bffc1e 	bne	r3,r2,33dc <___vfprintf_internal_r+0x1cc0>
    33ec:	003f8406 	br	3200 <___vfprintf_internal_r+0x1ae4>
    33f0:	d8814117 	ldw	r2,1284(sp)
    33f4:	10c00007 	ldb	r3,0(r2)
    33f8:	00800c04 	movi	r2,48
    33fc:	18805b26 	beq	r3,r2,356c <___vfprintf_internal_r+0x1e50>
    3400:	d9000517 	ldw	r4,20(sp)
    3404:	9125883a 	add	r18,r18,r4
    3408:	003f7506 	br	31e0 <___vfprintf_internal_r+0x1ac4>
    340c:	d9014c17 	ldw	r4,1328(sp)
    3410:	2080004c 	andi	r2,r4,1
    3414:	1005003a 	cmpeq	r2,r2,zero
    3418:	103f6a26 	beq	r2,zero,31c4 <___vfprintf_internal_r+0x1aa8>
    341c:	d8800717 	ldw	r2,28(sp)
    3420:	003f7706 	br	3200 <___vfprintf_internal_r+0x1ae4>
    3424:	d9c14515 	stw	r7,1300(sp)
    3428:	38004d16 	blt	r7,zero,3560 <___vfprintf_internal_r+0x1e44>
    342c:	dc814715 	stw	r18,1308(sp)
    3430:	d8014615 	stw	zero,1304(sp)
    3434:	003b5b06 	br	21a4 <___vfprintf_internal_r+0xa88>
    3438:	d9014f17 	ldw	r4,1340(sp)
    343c:	d8800504 	addi	r2,sp,20
    3440:	d8800115 	stw	r2,4(sp)
    3444:	d8c00604 	addi	r3,sp,24
    3448:	d8800704 	addi	r2,sp,28
    344c:	800b883a 	mov	r5,r16
    3450:	880d883a 	mov	r6,r17
    3454:	01c000c4 	movi	r7,3
    3458:	d8c00215 	stw	r3,8(sp)
    345c:	d8800315 	stw	r2,12(sp)
    3460:	dcc00015 	stw	r19,0(sp)
    3464:	9829883a 	mov	r20,r19
    3468:	00039840 	call	3984 <_dtoa_r>
    346c:	d8814115 	stw	r2,1284(sp)
    3470:	003f5106 	br	31b8 <___vfprintf_internal_r+0x1a9c>
    3474:	d8c14217 	ldw	r3,1288(sp)
    3478:	d9014317 	ldw	r4,1292(sp)
    347c:	07000b44 	movi	fp,45
    3480:	1821883a 	mov	r16,r3
    3484:	2460003c 	xorhi	r17,r4,32768
    3488:	003f3106 	br	3150 <___vfprintf_internal_r+0x1a34>
    348c:	9d000044 	addi	r20,r19,1
    3490:	003f3906 	br	3178 <___vfprintf_internal_r+0x1a5c>
    3494:	983f251e 	bne	r19,zero,312c <___vfprintf_internal_r+0x1a10>
    3498:	04c00044 	movi	r19,1
    349c:	003f2306 	br	312c <___vfprintf_internal_r+0x1a10>
    34a0:	04c00184 	movi	r19,6
    34a4:	003f2106 	br	312c <___vfprintf_internal_r+0x1a10>
    34a8:	d8014515 	stw	zero,1300(sp)
    34ac:	003eee06 	br	3068 <___vfprintf_internal_r+0x194c>
    34b0:	200f883a 	mov	r7,r4
    34b4:	0100370e 	bge	zero,r4,3594 <___vfprintf_internal_r+0x1e78>
    34b8:	9800031e 	bne	r19,zero,34c8 <___vfprintf_internal_r+0x1dac>
    34bc:	d9814c17 	ldw	r6,1328(sp)
    34c0:	3080004c 	andi	r2,r6,1
    34c4:	103fb726 	beq	r2,zero,33a4 <___vfprintf_internal_r+0x1c88>
    34c8:	20800044 	addi	r2,r4,1
    34cc:	98a7883a 	add	r19,r19,r2
    34d0:	dcc14515 	stw	r19,1300(sp)
    34d4:	980f883a 	mov	r7,r19
    34d8:	983f800e 	bge	r19,zero,32dc <___vfprintf_internal_r+0x1bc0>
    34dc:	003fb306 	br	33ac <___vfprintf_internal_r+0x1c90>
    34e0:	d9814d17 	ldw	r6,1332(sp)
    34e4:	31bfff84 	addi	r6,r6,-2
    34e8:	d9814d15 	stw	r6,1332(sp)
    34ec:	003f4c06 	br	3220 <___vfprintf_internal_r+0x1b04>
    34f0:	0100180e 	bge	zero,r4,3554 <___vfprintf_internal_r+0x1e38>
    34f4:	00800044 	movi	r2,1
    34f8:	1485883a 	add	r2,r2,r18
    34fc:	d8814515 	stw	r2,1300(sp)
    3500:	100f883a 	mov	r7,r2
    3504:	103f750e 	bge	r2,zero,32dc <___vfprintf_internal_r+0x1bc0>
    3508:	003fa806 	br	33ac <___vfprintf_internal_r+0x1c90>
    350c:	80c00c04 	addi	r3,r16,48
    3510:	00800c04 	movi	r2,48
    3514:	d8c008c5 	stb	r3,35(sp)
    3518:	d9800804 	addi	r6,sp,32
    351c:	d8c00904 	addi	r3,sp,36
    3520:	d8800885 	stb	r2,34(sp)
    3524:	003f6506 	br	32bc <___vfprintf_internal_r+0x1ba0>
    3528:	d9014c17 	ldw	r4,1328(sp)
    352c:	2084703a 	and	r2,r4,r2
    3530:	103f9c26 	beq	r2,zero,33a4 <___vfprintf_internal_r+0x1c88>
    3534:	003f6606 	br	32d0 <___vfprintf_internal_r+0x1bb4>
    3538:	d9800804 	addi	r6,sp,32
    353c:	d8c00884 	addi	r3,sp,34
    3540:	003f5e06 	br	32bc <___vfprintf_internal_r+0x1ba0>
    3544:	00800b44 	movi	r2,45
    3548:	0121c83a 	sub	r16,zero,r4
    354c:	d8800845 	stb	r2,33(sp)
    3550:	003f3d06 	br	3248 <___vfprintf_internal_r+0x1b2c>
    3554:	00800084 	movi	r2,2
    3558:	1105c83a 	sub	r2,r2,r4
    355c:	003fe606 	br	34f8 <___vfprintf_internal_r+0x1ddc>
    3560:	d8014515 	stw	zero,1300(sp)
    3564:	dc814715 	stw	r18,1308(sp)
    3568:	003fb106 	br	3430 <___vfprintf_internal_r+0x1d14>
    356c:	000d883a 	mov	r6,zero
    3570:	000f883a 	mov	r7,zero
    3574:	8009883a 	mov	r4,r16
    3578:	880b883a 	mov	r5,r17
    357c:	0009a200 	call	9a20 <__nedf2>
    3580:	103f9f26 	beq	r2,zero,3400 <___vfprintf_internal_r+0x1ce4>
    3584:	00800044 	movi	r2,1
    3588:	1509c83a 	sub	r4,r2,r20
    358c:	d9000515 	stw	r4,20(sp)
    3590:	003f9b06 	br	3400 <___vfprintf_internal_r+0x1ce4>
    3594:	98000d1e 	bne	r19,zero,35cc <___vfprintf_internal_r+0x1eb0>
    3598:	d8c14c17 	ldw	r3,1328(sp)
    359c:	1880004c 	andi	r2,r3,1
    35a0:	10000a1e 	bne	r2,zero,35cc <___vfprintf_internal_r+0x1eb0>
    35a4:	01000044 	movi	r4,1
    35a8:	200f883a 	mov	r7,r4
    35ac:	d9014515 	stw	r4,1300(sp)
    35b0:	003f4a06 	br	32dc <___vfprintf_internal_r+0x1bc0>
    35b4:	3cc00017 	ldw	r19,0(r7)
    35b8:	39c00104 	addi	r7,r7,4
    35bc:	983d0e0e 	bge	r19,zero,29f8 <___vfprintf_internal_r+0x12dc>
    35c0:	b8c00007 	ldb	r3,0(r23)
    35c4:	04ffffc4 	movi	r19,-1
    35c8:	0038d306 	br	1918 <___vfprintf_internal_r+0x1fc>
    35cc:	9cc00084 	addi	r19,r19,2
    35d0:	dcc14515 	stw	r19,1300(sp)
    35d4:	980f883a 	mov	r7,r19
    35d8:	983f400e 	bge	r19,zero,32dc <___vfprintf_internal_r+0x1bc0>
    35dc:	003f7306 	br	33ac <___vfprintf_internal_r+0x1c90>

000035e0 <__vfprintf_internal>:
    35e0:	00800074 	movhi	r2,1
    35e4:	10bd2d04 	addi	r2,r2,-2892
    35e8:	2013883a 	mov	r9,r4
    35ec:	11000017 	ldw	r4,0(r2)
    35f0:	2805883a 	mov	r2,r5
    35f4:	300f883a 	mov	r7,r6
    35f8:	480b883a 	mov	r5,r9
    35fc:	100d883a 	mov	r6,r2
    3600:	000171c1 	jmpi	171c <___vfprintf_internal_r>

00003604 <__swsetup_r>:
    3604:	00800074 	movhi	r2,1
    3608:	10bd2d04 	addi	r2,r2,-2892
    360c:	10c00017 	ldw	r3,0(r2)
    3610:	defffd04 	addi	sp,sp,-12
    3614:	dc400115 	stw	r17,4(sp)
    3618:	dc000015 	stw	r16,0(sp)
    361c:	dfc00215 	stw	ra,8(sp)
    3620:	2023883a 	mov	r17,r4
    3624:	2821883a 	mov	r16,r5
    3628:	18000226 	beq	r3,zero,3634 <__swsetup_r+0x30>
    362c:	18800e17 	ldw	r2,56(r3)
    3630:	10001f26 	beq	r2,zero,36b0 <__swsetup_r+0xac>
    3634:	8100030b 	ldhu	r4,12(r16)
    3638:	2080020c 	andi	r2,r4,8
    363c:	10002826 	beq	r2,zero,36e0 <__swsetup_r+0xdc>
    3640:	81400417 	ldw	r5,16(r16)
    3644:	28001d26 	beq	r5,zero,36bc <__swsetup_r+0xb8>
    3648:	2080004c 	andi	r2,r4,1
    364c:	1005003a 	cmpeq	r2,r2,zero
    3650:	10000b26 	beq	r2,zero,3680 <__swsetup_r+0x7c>
    3654:	2080008c 	andi	r2,r4,2
    3658:	10001226 	beq	r2,zero,36a4 <__swsetup_r+0xa0>
    365c:	0005883a 	mov	r2,zero
    3660:	80800215 	stw	r2,8(r16)
    3664:	28000b26 	beq	r5,zero,3694 <__swsetup_r+0x90>
    3668:	0005883a 	mov	r2,zero
    366c:	dfc00217 	ldw	ra,8(sp)
    3670:	dc400117 	ldw	r17,4(sp)
    3674:	dc000017 	ldw	r16,0(sp)
    3678:	dec00304 	addi	sp,sp,12
    367c:	f800283a 	ret
    3680:	80800517 	ldw	r2,20(r16)
    3684:	80000215 	stw	zero,8(r16)
    3688:	0085c83a 	sub	r2,zero,r2
    368c:	80800615 	stw	r2,24(r16)
    3690:	283ff51e 	bne	r5,zero,3668 <__swsetup_r+0x64>
    3694:	2080200c 	andi	r2,r4,128
    3698:	103ff326 	beq	r2,zero,3668 <__swsetup_r+0x64>
    369c:	00bfffc4 	movi	r2,-1
    36a0:	003ff206 	br	366c <__swsetup_r+0x68>
    36a4:	80800517 	ldw	r2,20(r16)
    36a8:	80800215 	stw	r2,8(r16)
    36ac:	003fed06 	br	3664 <__swsetup_r+0x60>
    36b0:	1809883a 	mov	r4,r3
    36b4:	00051d00 	call	51d0 <__sinit>
    36b8:	003fde06 	br	3634 <__swsetup_r+0x30>
    36bc:	20c0a00c 	andi	r3,r4,640
    36c0:	00808004 	movi	r2,512
    36c4:	18bfe026 	beq	r3,r2,3648 <__swsetup_r+0x44>
    36c8:	8809883a 	mov	r4,r17
    36cc:	800b883a 	mov	r5,r16
    36d0:	0005f7c0 	call	5f7c <__smakebuf_r>
    36d4:	8100030b 	ldhu	r4,12(r16)
    36d8:	81400417 	ldw	r5,16(r16)
    36dc:	003fda06 	br	3648 <__swsetup_r+0x44>
    36e0:	2080040c 	andi	r2,r4,16
    36e4:	103fed26 	beq	r2,zero,369c <__swsetup_r+0x98>
    36e8:	2080010c 	andi	r2,r4,4
    36ec:	10001226 	beq	r2,zero,3738 <__swsetup_r+0x134>
    36f0:	81400c17 	ldw	r5,48(r16)
    36f4:	28000526 	beq	r5,zero,370c <__swsetup_r+0x108>
    36f8:	80801004 	addi	r2,r16,64
    36fc:	28800226 	beq	r5,r2,3708 <__swsetup_r+0x104>
    3700:	8809883a 	mov	r4,r17
    3704:	00055880 	call	5588 <_free_r>
    3708:	80000c15 	stw	zero,48(r16)
    370c:	8080030b 	ldhu	r2,12(r16)
    3710:	81400417 	ldw	r5,16(r16)
    3714:	80000115 	stw	zero,4(r16)
    3718:	10bff6cc 	andi	r2,r2,65499
    371c:	8080030d 	sth	r2,12(r16)
    3720:	81400015 	stw	r5,0(r16)
    3724:	8080030b 	ldhu	r2,12(r16)
    3728:	10800214 	ori	r2,r2,8
    372c:	113fffcc 	andi	r4,r2,65535
    3730:	8080030d 	sth	r2,12(r16)
    3734:	003fc306 	br	3644 <__swsetup_r+0x40>
    3738:	81400417 	ldw	r5,16(r16)
    373c:	003ff906 	br	3724 <__swsetup_r+0x120>

00003740 <quorem>:
    3740:	28c00417 	ldw	r3,16(r5)
    3744:	20800417 	ldw	r2,16(r4)
    3748:	defff104 	addi	sp,sp,-60
    374c:	dfc00e15 	stw	ra,56(sp)
    3750:	df000d15 	stw	fp,52(sp)
    3754:	ddc00c15 	stw	r23,48(sp)
    3758:	dd800b15 	stw	r22,44(sp)
    375c:	dd400a15 	stw	r21,40(sp)
    3760:	dd000915 	stw	r20,36(sp)
    3764:	dcc00815 	stw	r19,32(sp)
    3768:	dc800715 	stw	r18,28(sp)
    376c:	dc400615 	stw	r17,24(sp)
    3770:	dc000515 	stw	r16,20(sp)
    3774:	d9000315 	stw	r4,12(sp)
    3778:	d9400415 	stw	r5,16(sp)
    377c:	10c07f16 	blt	r2,r3,397c <quorem+0x23c>
    3780:	1d3fffc4 	addi	r20,r3,-1
    3784:	d8c00417 	ldw	r3,16(sp)
    3788:	d9000317 	ldw	r4,12(sp)
    378c:	a505883a 	add	r2,r20,r20
    3790:	1085883a 	add	r2,r2,r2
    3794:	1cc00504 	addi	r19,r3,20
    3798:	25c00504 	addi	r23,r4,20
    379c:	98ad883a 	add	r22,r19,r2
    37a0:	15c7883a 	add	r3,r2,r23
    37a4:	b1400017 	ldw	r5,0(r22)
    37a8:	19000017 	ldw	r4,0(r3)
    37ac:	d8c00015 	stw	r3,0(sp)
    37b0:	29400044 	addi	r5,r5,1
    37b4:	d9000215 	stw	r4,8(sp)
    37b8:	0000d040 	call	d04 <__udivsi3>
    37bc:	1039883a 	mov	fp,r2
    37c0:	10003d1e 	bne	r2,zero,38b8 <quorem+0x178>
    37c4:	d9400417 	ldw	r5,16(sp)
    37c8:	d9000317 	ldw	r4,12(sp)
    37cc:	00065680 	call	6568 <__mcmp>
    37d0:	10002c16 	blt	r2,zero,3884 <quorem+0x144>
    37d4:	e7000044 	addi	fp,fp,1
    37d8:	b80f883a 	mov	r7,r23
    37dc:	0011883a 	mov	r8,zero
    37e0:	0009883a 	mov	r4,zero
    37e4:	99400017 	ldw	r5,0(r19)
    37e8:	38c00017 	ldw	r3,0(r7)
    37ec:	9cc00104 	addi	r19,r19,4
    37f0:	28bfffcc 	andi	r2,r5,65535
    37f4:	2085883a 	add	r2,r4,r2
    37f8:	11bfffcc 	andi	r6,r2,65535
    37fc:	193fffcc 	andi	r4,r3,65535
    3800:	1004d43a 	srli	r2,r2,16
    3804:	280ad43a 	srli	r5,r5,16
    3808:	2189c83a 	sub	r4,r4,r6
    380c:	2209883a 	add	r4,r4,r8
    3810:	1806d43a 	srli	r3,r3,16
    3814:	288b883a 	add	r5,r5,r2
    3818:	200dd43a 	srai	r6,r4,16
    381c:	28bfffcc 	andi	r2,r5,65535
    3820:	1887c83a 	sub	r3,r3,r2
    3824:	1987883a 	add	r3,r3,r6
    3828:	3900000d 	sth	r4,0(r7)
    382c:	38c0008d 	sth	r3,2(r7)
    3830:	2808d43a 	srli	r4,r5,16
    3834:	39c00104 	addi	r7,r7,4
    3838:	1811d43a 	srai	r8,r3,16
    383c:	b4ffe92e 	bgeu	r22,r19,37e4 <quorem+0xa4>
    3840:	a505883a 	add	r2,r20,r20
    3844:	1085883a 	add	r2,r2,r2
    3848:	b885883a 	add	r2,r23,r2
    384c:	10c00017 	ldw	r3,0(r2)
    3850:	18000c1e 	bne	r3,zero,3884 <quorem+0x144>
    3854:	113fff04 	addi	r4,r2,-4
    3858:	b900082e 	bgeu	r23,r4,387c <quorem+0x13c>
    385c:	10bfff17 	ldw	r2,-4(r2)
    3860:	10000326 	beq	r2,zero,3870 <quorem+0x130>
    3864:	00000506 	br	387c <quorem+0x13c>
    3868:	20800017 	ldw	r2,0(r4)
    386c:	1000031e 	bne	r2,zero,387c <quorem+0x13c>
    3870:	213fff04 	addi	r4,r4,-4
    3874:	a53fffc4 	addi	r20,r20,-1
    3878:	b93ffb36 	bltu	r23,r4,3868 <quorem+0x128>
    387c:	d9000317 	ldw	r4,12(sp)
    3880:	25000415 	stw	r20,16(r4)
    3884:	e005883a 	mov	r2,fp
    3888:	dfc00e17 	ldw	ra,56(sp)
    388c:	df000d17 	ldw	fp,52(sp)
    3890:	ddc00c17 	ldw	r23,48(sp)
    3894:	dd800b17 	ldw	r22,44(sp)
    3898:	dd400a17 	ldw	r21,40(sp)
    389c:	dd000917 	ldw	r20,36(sp)
    38a0:	dcc00817 	ldw	r19,32(sp)
    38a4:	dc800717 	ldw	r18,28(sp)
    38a8:	dc400617 	ldw	r17,24(sp)
    38ac:	dc000517 	ldw	r16,20(sp)
    38b0:	dec00f04 	addi	sp,sp,60
    38b4:	f800283a 	ret
    38b8:	b823883a 	mov	r17,r23
    38bc:	9825883a 	mov	r18,r19
    38c0:	d8000115 	stw	zero,4(sp)
    38c4:	002b883a 	mov	r21,zero
    38c8:	94000017 	ldw	r16,0(r18)
    38cc:	e009883a 	mov	r4,fp
    38d0:	94800104 	addi	r18,r18,4
    38d4:	817fffcc 	andi	r5,r16,65535
    38d8:	0000d140 	call	d14 <__mulsi3>
    38dc:	800ad43a 	srli	r5,r16,16
    38e0:	e009883a 	mov	r4,fp
    38e4:	a8a1883a 	add	r16,r21,r2
    38e8:	0000d140 	call	d14 <__mulsi3>
    38ec:	89000017 	ldw	r4,0(r17)
    38f0:	80ffffcc 	andi	r3,r16,65535
    38f4:	8020d43a 	srli	r16,r16,16
    38f8:	217fffcc 	andi	r5,r4,65535
    38fc:	28cbc83a 	sub	r5,r5,r3
    3900:	d8c00117 	ldw	r3,4(sp)
    3904:	2008d43a 	srli	r4,r4,16
    3908:	1405883a 	add	r2,r2,r16
    390c:	28cb883a 	add	r5,r5,r3
    3910:	280dd43a 	srai	r6,r5,16
    3914:	10ffffcc 	andi	r3,r2,65535
    3918:	20c9c83a 	sub	r4,r4,r3
    391c:	2189883a 	add	r4,r4,r6
    3920:	8900008d 	sth	r4,2(r17)
    3924:	2009d43a 	srai	r4,r4,16
    3928:	8940000d 	sth	r5,0(r17)
    392c:	102ad43a 	srli	r21,r2,16
    3930:	8c400104 	addi	r17,r17,4
    3934:	d9000115 	stw	r4,4(sp)
    3938:	b4bfe32e 	bgeu	r22,r18,38c8 <quorem+0x188>
    393c:	d9000217 	ldw	r4,8(sp)
    3940:	203fa01e 	bne	r4,zero,37c4 <quorem+0x84>
    3944:	d8800017 	ldw	r2,0(sp)
    3948:	10ffff04 	addi	r3,r2,-4
    394c:	b8c0082e 	bgeu	r23,r3,3970 <quorem+0x230>
    3950:	10bfff17 	ldw	r2,-4(r2)
    3954:	10000326 	beq	r2,zero,3964 <quorem+0x224>
    3958:	00000506 	br	3970 <quorem+0x230>
    395c:	18800017 	ldw	r2,0(r3)
    3960:	1000031e 	bne	r2,zero,3970 <quorem+0x230>
    3964:	18ffff04 	addi	r3,r3,-4
    3968:	a53fffc4 	addi	r20,r20,-1
    396c:	b8fffb36 	bltu	r23,r3,395c <quorem+0x21c>
    3970:	d8c00317 	ldw	r3,12(sp)
    3974:	1d000415 	stw	r20,16(r3)
    3978:	003f9206 	br	37c4 <quorem+0x84>
    397c:	0005883a 	mov	r2,zero
    3980:	003fc106 	br	3888 <quorem+0x148>

00003984 <_dtoa_r>:
    3984:	22001017 	ldw	r8,64(r4)
    3988:	deffda04 	addi	sp,sp,-152
    398c:	dd402115 	stw	r21,132(sp)
    3990:	dd002015 	stw	r20,128(sp)
    3994:	dc801e15 	stw	r18,120(sp)
    3998:	dc401d15 	stw	r17,116(sp)
    399c:	dfc02515 	stw	ra,148(sp)
    39a0:	df002415 	stw	fp,144(sp)
    39a4:	ddc02315 	stw	r23,140(sp)
    39a8:	dd802215 	stw	r22,136(sp)
    39ac:	dcc01f15 	stw	r19,124(sp)
    39b0:	dc001c15 	stw	r16,112(sp)
    39b4:	d9001615 	stw	r4,88(sp)
    39b8:	3023883a 	mov	r17,r6
    39bc:	2829883a 	mov	r20,r5
    39c0:	d9c01715 	stw	r7,92(sp)
    39c4:	dc802817 	ldw	r18,160(sp)
    39c8:	302b883a 	mov	r21,r6
    39cc:	40000a26 	beq	r8,zero,39f8 <_dtoa_r+0x74>
    39d0:	20801117 	ldw	r2,68(r4)
    39d4:	400b883a 	mov	r5,r8
    39d8:	40800115 	stw	r2,4(r8)
    39dc:	20c01117 	ldw	r3,68(r4)
    39e0:	00800044 	movi	r2,1
    39e4:	10c4983a 	sll	r2,r2,r3
    39e8:	40800215 	stw	r2,8(r8)
    39ec:	000640c0 	call	640c <_Bfree>
    39f0:	d8c01617 	ldw	r3,88(sp)
    39f4:	18001015 	stw	zero,64(r3)
    39f8:	8800a316 	blt	r17,zero,3c88 <_dtoa_r+0x304>
    39fc:	90000015 	stw	zero,0(r18)
    3a00:	a8dffc2c 	andhi	r3,r21,32752
    3a04:	009ffc34 	movhi	r2,32752
    3a08:	18809126 	beq	r3,r2,3c50 <_dtoa_r+0x2cc>
    3a0c:	000d883a 	mov	r6,zero
    3a10:	000f883a 	mov	r7,zero
    3a14:	a009883a 	mov	r4,r20
    3a18:	a80b883a 	mov	r5,r21
    3a1c:	dd001215 	stw	r20,72(sp)
    3a20:	dd401315 	stw	r21,76(sp)
    3a24:	0009a200 	call	9a20 <__nedf2>
    3a28:	1000171e 	bne	r2,zero,3a88 <_dtoa_r+0x104>
    3a2c:	d9802717 	ldw	r6,156(sp)
    3a30:	00800044 	movi	r2,1
    3a34:	30800015 	stw	r2,0(r6)
    3a38:	d8802917 	ldw	r2,164(sp)
    3a3c:	10029b26 	beq	r2,zero,44ac <_dtoa_r+0xb28>
    3a40:	d9002917 	ldw	r4,164(sp)
    3a44:	00800074 	movhi	r2,1
    3a48:	10b5ec44 	addi	r2,r2,-10319
    3a4c:	10ffffc4 	addi	r3,r2,-1
    3a50:	20800015 	stw	r2,0(r4)
    3a54:	1805883a 	mov	r2,r3
    3a58:	dfc02517 	ldw	ra,148(sp)
    3a5c:	df002417 	ldw	fp,144(sp)
    3a60:	ddc02317 	ldw	r23,140(sp)
    3a64:	dd802217 	ldw	r22,136(sp)
    3a68:	dd402117 	ldw	r21,132(sp)
    3a6c:	dd002017 	ldw	r20,128(sp)
    3a70:	dcc01f17 	ldw	r19,124(sp)
    3a74:	dc801e17 	ldw	r18,120(sp)
    3a78:	dc401d17 	ldw	r17,116(sp)
    3a7c:	dc001c17 	ldw	r16,112(sp)
    3a80:	dec02604 	addi	sp,sp,152
    3a84:	f800283a 	ret
    3a88:	d9001617 	ldw	r4,88(sp)
    3a8c:	d9401217 	ldw	r5,72(sp)
    3a90:	d8800104 	addi	r2,sp,4
    3a94:	a80d883a 	mov	r6,r21
    3a98:	d9c00204 	addi	r7,sp,8
    3a9c:	d8800015 	stw	r2,0(sp)
    3aa0:	0006a480 	call	6a48 <__d2b>
    3aa4:	d8800715 	stw	r2,28(sp)
    3aa8:	a804d53a 	srli	r2,r21,20
    3aac:	1101ffcc 	andi	r4,r2,2047
    3ab0:	20008626 	beq	r4,zero,3ccc <_dtoa_r+0x348>
    3ab4:	d8c01217 	ldw	r3,72(sp)
    3ab8:	00800434 	movhi	r2,16
    3abc:	10bfffc4 	addi	r2,r2,-1
    3ac0:	ddc00117 	ldw	r23,4(sp)
    3ac4:	a884703a 	and	r2,r21,r2
    3ac8:	1811883a 	mov	r8,r3
    3acc:	124ffc34 	orhi	r9,r2,16368
    3ad0:	25bf0044 	addi	r22,r4,-1023
    3ad4:	d8000815 	stw	zero,32(sp)
    3ad8:	0005883a 	mov	r2,zero
    3adc:	00cffe34 	movhi	r3,16376
    3ae0:	480b883a 	mov	r5,r9
    3ae4:	4009883a 	mov	r4,r8
    3ae8:	180f883a 	mov	r7,r3
    3aec:	100d883a 	mov	r6,r2
    3af0:	00092880 	call	9288 <__subdf3>
    3af4:	0218dbf4 	movhi	r8,25455
    3af8:	4210d844 	addi	r8,r8,17249
    3afc:	024ff4f4 	movhi	r9,16339
    3b00:	4a61e9c4 	addi	r9,r9,-30809
    3b04:	480f883a 	mov	r7,r9
    3b08:	400d883a 	mov	r6,r8
    3b0c:	180b883a 	mov	r5,r3
    3b10:	1009883a 	mov	r4,r2
    3b14:	000937c0 	call	937c <__muldf3>
    3b18:	0222d874 	movhi	r8,35681
    3b1c:	42322cc4 	addi	r8,r8,-14157
    3b20:	024ff1f4 	movhi	r9,16327
    3b24:	4a628a04 	addi	r9,r9,-30168
    3b28:	480f883a 	mov	r7,r9
    3b2c:	400d883a 	mov	r6,r8
    3b30:	180b883a 	mov	r5,r3
    3b34:	1009883a 	mov	r4,r2
    3b38:	00093080 	call	9308 <__adddf3>
    3b3c:	b009883a 	mov	r4,r22
    3b40:	1021883a 	mov	r16,r2
    3b44:	1823883a 	mov	r17,r3
    3b48:	0009c400 	call	9c40 <__floatsidf>
    3b4c:	021427f4 	movhi	r8,20639
    3b50:	421e7ec4 	addi	r8,r8,31227
    3b54:	024ff4f4 	movhi	r9,16339
    3b58:	4a5104c4 	addi	r9,r9,17427
    3b5c:	480f883a 	mov	r7,r9
    3b60:	400d883a 	mov	r6,r8
    3b64:	180b883a 	mov	r5,r3
    3b68:	1009883a 	mov	r4,r2
    3b6c:	000937c0 	call	937c <__muldf3>
    3b70:	180f883a 	mov	r7,r3
    3b74:	880b883a 	mov	r5,r17
    3b78:	100d883a 	mov	r6,r2
    3b7c:	8009883a 	mov	r4,r16
    3b80:	00093080 	call	9308 <__adddf3>
    3b84:	1009883a 	mov	r4,r2
    3b88:	180b883a 	mov	r5,r3
    3b8c:	1021883a 	mov	r16,r2
    3b90:	1823883a 	mov	r17,r3
    3b94:	0009d380 	call	9d38 <__fixdfsi>
    3b98:	000d883a 	mov	r6,zero
    3b9c:	000f883a 	mov	r7,zero
    3ba0:	8009883a 	mov	r4,r16
    3ba4:	880b883a 	mov	r5,r17
    3ba8:	d8800d15 	stw	r2,52(sp)
    3bac:	0009bb80 	call	9bb8 <__ltdf2>
    3bb0:	10031716 	blt	r2,zero,4810 <_dtoa_r+0xe8c>
    3bb4:	d8c00d17 	ldw	r3,52(sp)
    3bb8:	00800584 	movi	r2,22
    3bbc:	10c1482e 	bgeu	r2,r3,40e0 <_dtoa_r+0x75c>
    3bc0:	01000044 	movi	r4,1
    3bc4:	d9000c15 	stw	r4,48(sp)
    3bc8:	bd85c83a 	sub	r2,r23,r22
    3bcc:	11bfffc4 	addi	r6,r2,-1
    3bd0:	30030b16 	blt	r6,zero,4800 <_dtoa_r+0xe7c>
    3bd4:	d9800a15 	stw	r6,40(sp)
    3bd8:	d8001115 	stw	zero,68(sp)
    3bdc:	d8c00d17 	ldw	r3,52(sp)
    3be0:	1802ff16 	blt	r3,zero,47e0 <_dtoa_r+0xe5c>
    3be4:	d9000a17 	ldw	r4,40(sp)
    3be8:	d8c00915 	stw	r3,36(sp)
    3bec:	d8001015 	stw	zero,64(sp)
    3bf0:	20c9883a 	add	r4,r4,r3
    3bf4:	d9000a15 	stw	r4,40(sp)
    3bf8:	d9001717 	ldw	r4,92(sp)
    3bfc:	00800244 	movi	r2,9
    3c00:	11004636 	bltu	r2,r4,3d1c <_dtoa_r+0x398>
    3c04:	00800144 	movi	r2,5
    3c08:	11020416 	blt	r2,r4,441c <_dtoa_r+0xa98>
    3c0c:	04400044 	movi	r17,1
    3c10:	d8c01717 	ldw	r3,92(sp)
    3c14:	00800144 	movi	r2,5
    3c18:	10c1ed36 	bltu	r2,r3,43d0 <_dtoa_r+0xa4c>
    3c1c:	18c5883a 	add	r2,r3,r3
    3c20:	1085883a 	add	r2,r2,r2
    3c24:	00c00034 	movhi	r3,0
    3c28:	18cf0e04 	addi	r3,r3,15416
    3c2c:	10c5883a 	add	r2,r2,r3
    3c30:	11000017 	ldw	r4,0(r2)
    3c34:	2000683a 	jmp	r4
    3c38:	00003d24 	muli	zero,zero,244
    3c3c:	00003d24 	muli	zero,zero,244
    3c40:	00004724 	muli	zero,zero,284
    3c44:	000046fc 	xorhi	zero,zero,283
    3c48:	00004740 	call	474 <check_interrupt+0x38>
    3c4c:	0000474c 	andi	zero,zero,285
    3c50:	d9002717 	ldw	r4,156(sp)
    3c54:	0089c3c4 	movi	r2,9999
    3c58:	20800015 	stw	r2,0(r4)
    3c5c:	a0001026 	beq	r20,zero,3ca0 <_dtoa_r+0x31c>
    3c60:	00c00074 	movhi	r3,1
    3c64:	18f5f804 	addi	r3,r3,-10272
    3c68:	d9802917 	ldw	r6,164(sp)
    3c6c:	303f7926 	beq	r6,zero,3a54 <_dtoa_r+0xd0>
    3c70:	188000c7 	ldb	r2,3(r3)
    3c74:	190000c4 	addi	r4,r3,3
    3c78:	1000101e 	bne	r2,zero,3cbc <_dtoa_r+0x338>
    3c7c:	d8802917 	ldw	r2,164(sp)
    3c80:	11000015 	stw	r4,0(r2)
    3c84:	003f7306 	br	3a54 <_dtoa_r+0xd0>
    3c88:	00a00034 	movhi	r2,32768
    3c8c:	10bfffc4 	addi	r2,r2,-1
    3c90:	00c00044 	movi	r3,1
    3c94:	88aa703a 	and	r21,r17,r2
    3c98:	90c00015 	stw	r3,0(r18)
    3c9c:	003f5806 	br	3a00 <_dtoa_r+0x7c>
    3ca0:	00800434 	movhi	r2,16
    3ca4:	10bfffc4 	addi	r2,r2,-1
    3ca8:	a884703a 	and	r2,r21,r2
    3cac:	103fec1e 	bne	r2,zero,3c60 <_dtoa_r+0x2dc>
    3cb0:	00c00074 	movhi	r3,1
    3cb4:	18f5f504 	addi	r3,r3,-10284
    3cb8:	003feb06 	br	3c68 <_dtoa_r+0x2e4>
    3cbc:	d8802917 	ldw	r2,164(sp)
    3cc0:	19000204 	addi	r4,r3,8
    3cc4:	11000015 	stw	r4,0(r2)
    3cc8:	003f6206 	br	3a54 <_dtoa_r+0xd0>
    3ccc:	ddc00117 	ldw	r23,4(sp)
    3cd0:	d8800217 	ldw	r2,8(sp)
    3cd4:	01000804 	movi	r4,32
    3cd8:	b8c10c84 	addi	r3,r23,1074
    3cdc:	18a3883a 	add	r17,r3,r2
    3ce0:	2441b80e 	bge	r4,r17,43c4 <_dtoa_r+0xa40>
    3ce4:	00c01004 	movi	r3,64
    3ce8:	1c47c83a 	sub	r3,r3,r17
    3cec:	88bff804 	addi	r2,r17,-32
    3cf0:	a8c6983a 	sll	r3,r21,r3
    3cf4:	a084d83a 	srl	r2,r20,r2
    3cf8:	1888b03a 	or	r4,r3,r2
    3cfc:	0009e100 	call	9e10 <__floatunsidf>
    3d00:	1011883a 	mov	r8,r2
    3d04:	00bf8434 	movhi	r2,65040
    3d08:	01000044 	movi	r4,1
    3d0c:	10d3883a 	add	r9,r2,r3
    3d10:	8dbef344 	addi	r22,r17,-1075
    3d14:	d9000815 	stw	r4,32(sp)
    3d18:	003f6f06 	br	3ad8 <_dtoa_r+0x154>
    3d1c:	d8001715 	stw	zero,92(sp)
    3d20:	04400044 	movi	r17,1
    3d24:	00bfffc4 	movi	r2,-1
    3d28:	00c00044 	movi	r3,1
    3d2c:	d8800e15 	stw	r2,56(sp)
    3d30:	d8002615 	stw	zero,152(sp)
    3d34:	d8800f15 	stw	r2,60(sp)
    3d38:	d8c00b15 	stw	r3,44(sp)
    3d3c:	1021883a 	mov	r16,r2
    3d40:	d8801617 	ldw	r2,88(sp)
    3d44:	10001115 	stw	zero,68(r2)
    3d48:	d8801617 	ldw	r2,88(sp)
    3d4c:	11401117 	ldw	r5,68(r2)
    3d50:	1009883a 	mov	r4,r2
    3d54:	000698c0 	call	698c <_Balloc>
    3d58:	d8c01617 	ldw	r3,88(sp)
    3d5c:	d8800515 	stw	r2,20(sp)
    3d60:	18801015 	stw	r2,64(r3)
    3d64:	00800384 	movi	r2,14
    3d68:	14006836 	bltu	r2,r16,3f0c <_dtoa_r+0x588>
    3d6c:	8805003a 	cmpeq	r2,r17,zero
    3d70:	1000661e 	bne	r2,zero,3f0c <_dtoa_r+0x588>
    3d74:	d9000d17 	ldw	r4,52(sp)
    3d78:	0102300e 	bge	zero,r4,463c <_dtoa_r+0xcb8>
    3d7c:	208003cc 	andi	r2,r4,15
    3d80:	100490fa 	slli	r2,r2,3
    3d84:	2025d13a 	srai	r18,r4,4
    3d88:	00c00074 	movhi	r3,1
    3d8c:	18f60a04 	addi	r3,r3,-10200
    3d90:	10c5883a 	add	r2,r2,r3
    3d94:	90c0040c 	andi	r3,r18,16
    3d98:	14000017 	ldw	r16,0(r2)
    3d9c:	14400117 	ldw	r17,4(r2)
    3da0:	18036a1e 	bne	r3,zero,4b4c <_dtoa_r+0x11c8>
    3da4:	05800084 	movi	r22,2
    3da8:	90001026 	beq	r18,zero,3dec <_dtoa_r+0x468>
    3dac:	04c00074 	movhi	r19,1
    3db0:	9cf63c04 	addi	r19,r19,-10000
    3db4:	9080004c 	andi	r2,r18,1
    3db8:	1005003a 	cmpeq	r2,r2,zero
    3dbc:	1000081e 	bne	r2,zero,3de0 <_dtoa_r+0x45c>
    3dc0:	99800017 	ldw	r6,0(r19)
    3dc4:	99c00117 	ldw	r7,4(r19)
    3dc8:	880b883a 	mov	r5,r17
    3dcc:	8009883a 	mov	r4,r16
    3dd0:	000937c0 	call	937c <__muldf3>
    3dd4:	1021883a 	mov	r16,r2
    3dd8:	b5800044 	addi	r22,r22,1
    3ddc:	1823883a 	mov	r17,r3
    3de0:	9025d07a 	srai	r18,r18,1
    3de4:	9cc00204 	addi	r19,r19,8
    3de8:	903ff21e 	bne	r18,zero,3db4 <_dtoa_r+0x430>
    3dec:	a80b883a 	mov	r5,r21
    3df0:	a009883a 	mov	r4,r20
    3df4:	880f883a 	mov	r7,r17
    3df8:	800d883a 	mov	r6,r16
    3dfc:	00097400 	call	9740 <__divdf3>
    3e00:	1029883a 	mov	r20,r2
    3e04:	182b883a 	mov	r21,r3
    3e08:	d8c00c17 	ldw	r3,48(sp)
    3e0c:	1805003a 	cmpeq	r2,r3,zero
    3e10:	1000081e 	bne	r2,zero,3e34 <_dtoa_r+0x4b0>
    3e14:	0005883a 	mov	r2,zero
    3e18:	00cffc34 	movhi	r3,16368
    3e1c:	180f883a 	mov	r7,r3
    3e20:	a009883a 	mov	r4,r20
    3e24:	a80b883a 	mov	r5,r21
    3e28:	100d883a 	mov	r6,r2
    3e2c:	0009bb80 	call	9bb8 <__ltdf2>
    3e30:	1003fe16 	blt	r2,zero,4e2c <_dtoa_r+0x14a8>
    3e34:	b009883a 	mov	r4,r22
    3e38:	0009c400 	call	9c40 <__floatsidf>
    3e3c:	180b883a 	mov	r5,r3
    3e40:	1009883a 	mov	r4,r2
    3e44:	a00d883a 	mov	r6,r20
    3e48:	a80f883a 	mov	r7,r21
    3e4c:	000937c0 	call	937c <__muldf3>
    3e50:	0011883a 	mov	r8,zero
    3e54:	02500734 	movhi	r9,16412
    3e58:	1009883a 	mov	r4,r2
    3e5c:	180b883a 	mov	r5,r3
    3e60:	480f883a 	mov	r7,r9
    3e64:	400d883a 	mov	r6,r8
    3e68:	00093080 	call	9308 <__adddf3>
    3e6c:	d9000f17 	ldw	r4,60(sp)
    3e70:	102d883a 	mov	r22,r2
    3e74:	00bf3034 	movhi	r2,64704
    3e78:	18b9883a 	add	fp,r3,r2
    3e7c:	e02f883a 	mov	r23,fp
    3e80:	20028f1e 	bne	r4,zero,48c0 <_dtoa_r+0xf3c>
    3e84:	0005883a 	mov	r2,zero
    3e88:	00d00534 	movhi	r3,16404
    3e8c:	a009883a 	mov	r4,r20
    3e90:	a80b883a 	mov	r5,r21
    3e94:	180f883a 	mov	r7,r3
    3e98:	100d883a 	mov	r6,r2
    3e9c:	00092880 	call	9288 <__subdf3>
    3ea0:	1009883a 	mov	r4,r2
    3ea4:	e00f883a 	mov	r7,fp
    3ea8:	180b883a 	mov	r5,r3
    3eac:	b00d883a 	mov	r6,r22
    3eb0:	1025883a 	mov	r18,r2
    3eb4:	1827883a 	mov	r19,r3
    3eb8:	0009aa80 	call	9aa8 <__gtdf2>
    3ebc:	00834f16 	blt	zero,r2,4bfc <_dtoa_r+0x1278>
    3ec0:	e0e0003c 	xorhi	r3,fp,32768
    3ec4:	9009883a 	mov	r4,r18
    3ec8:	980b883a 	mov	r5,r19
    3ecc:	180f883a 	mov	r7,r3
    3ed0:	b00d883a 	mov	r6,r22
    3ed4:	0009bb80 	call	9bb8 <__ltdf2>
    3ed8:	1000080e 	bge	r2,zero,3efc <_dtoa_r+0x578>
    3edc:	0027883a 	mov	r19,zero
    3ee0:	0025883a 	mov	r18,zero
    3ee4:	d8802617 	ldw	r2,152(sp)
    3ee8:	df000517 	ldw	fp,20(sp)
    3eec:	d8000615 	stw	zero,24(sp)
    3ef0:	0084303a 	nor	r2,zero,r2
    3ef4:	d8800d15 	stw	r2,52(sp)
    3ef8:	00019b06 	br	4568 <_dtoa_r+0xbe4>
    3efc:	d9801217 	ldw	r6,72(sp)
    3f00:	d8801317 	ldw	r2,76(sp)
    3f04:	3029883a 	mov	r20,r6
    3f08:	102b883a 	mov	r21,r2
    3f0c:	d8c00217 	ldw	r3,8(sp)
    3f10:	18008516 	blt	r3,zero,4128 <_dtoa_r+0x7a4>
    3f14:	d9000d17 	ldw	r4,52(sp)
    3f18:	00800384 	movi	r2,14
    3f1c:	11008216 	blt	r2,r4,4128 <_dtoa_r+0x7a4>
    3f20:	200490fa 	slli	r2,r4,3
    3f24:	d9802617 	ldw	r6,152(sp)
    3f28:	00c00074 	movhi	r3,1
    3f2c:	18f60a04 	addi	r3,r3,-10200
    3f30:	10c5883a 	add	r2,r2,r3
    3f34:	14800017 	ldw	r18,0(r2)
    3f38:	14c00117 	ldw	r19,4(r2)
    3f3c:	30031e16 	blt	r6,zero,4bb8 <_dtoa_r+0x1234>
    3f40:	d9000517 	ldw	r4,20(sp)
    3f44:	d8c00f17 	ldw	r3,60(sp)
    3f48:	a823883a 	mov	r17,r21
    3f4c:	a021883a 	mov	r16,r20
    3f50:	192b883a 	add	r21,r3,r4
    3f54:	2039883a 	mov	fp,r4
    3f58:	00000f06 	br	3f98 <_dtoa_r+0x614>
    3f5c:	0005883a 	mov	r2,zero
    3f60:	00d00934 	movhi	r3,16420
    3f64:	5009883a 	mov	r4,r10
    3f68:	580b883a 	mov	r5,r11
    3f6c:	180f883a 	mov	r7,r3
    3f70:	100d883a 	mov	r6,r2
    3f74:	000937c0 	call	937c <__muldf3>
    3f78:	180b883a 	mov	r5,r3
    3f7c:	000d883a 	mov	r6,zero
    3f80:	000f883a 	mov	r7,zero
    3f84:	1009883a 	mov	r4,r2
    3f88:	1021883a 	mov	r16,r2
    3f8c:	1823883a 	mov	r17,r3
    3f90:	0009a200 	call	9a20 <__nedf2>
    3f94:	10004526 	beq	r2,zero,40ac <_dtoa_r+0x728>
    3f98:	900d883a 	mov	r6,r18
    3f9c:	980f883a 	mov	r7,r19
    3fa0:	8009883a 	mov	r4,r16
    3fa4:	880b883a 	mov	r5,r17
    3fa8:	00097400 	call	9740 <__divdf3>
    3fac:	180b883a 	mov	r5,r3
    3fb0:	1009883a 	mov	r4,r2
    3fb4:	0009d380 	call	9d38 <__fixdfsi>
    3fb8:	1009883a 	mov	r4,r2
    3fbc:	1029883a 	mov	r20,r2
    3fc0:	0009c400 	call	9c40 <__floatsidf>
    3fc4:	180f883a 	mov	r7,r3
    3fc8:	9009883a 	mov	r4,r18
    3fcc:	980b883a 	mov	r5,r19
    3fd0:	100d883a 	mov	r6,r2
    3fd4:	000937c0 	call	937c <__muldf3>
    3fd8:	180f883a 	mov	r7,r3
    3fdc:	880b883a 	mov	r5,r17
    3fe0:	8009883a 	mov	r4,r16
    3fe4:	100d883a 	mov	r6,r2
    3fe8:	00092880 	call	9288 <__subdf3>
    3fec:	1015883a 	mov	r10,r2
    3ff0:	a0800c04 	addi	r2,r20,48
    3ff4:	e0800005 	stb	r2,0(fp)
    3ff8:	e7000044 	addi	fp,fp,1
    3ffc:	1817883a 	mov	r11,r3
    4000:	e57fd61e 	bne	fp,r21,3f5c <_dtoa_r+0x5d8>
    4004:	500d883a 	mov	r6,r10
    4008:	180f883a 	mov	r7,r3
    400c:	5009883a 	mov	r4,r10
    4010:	180b883a 	mov	r5,r3
    4014:	00093080 	call	9308 <__adddf3>
    4018:	100d883a 	mov	r6,r2
    401c:	9009883a 	mov	r4,r18
    4020:	980b883a 	mov	r5,r19
    4024:	180f883a 	mov	r7,r3
    4028:	1021883a 	mov	r16,r2
    402c:	1823883a 	mov	r17,r3
    4030:	0009bb80 	call	9bb8 <__ltdf2>
    4034:	10000816 	blt	r2,zero,4058 <_dtoa_r+0x6d4>
    4038:	980b883a 	mov	r5,r19
    403c:	800d883a 	mov	r6,r16
    4040:	880f883a 	mov	r7,r17
    4044:	9009883a 	mov	r4,r18
    4048:	00099980 	call	9998 <__eqdf2>
    404c:	1000171e 	bne	r2,zero,40ac <_dtoa_r+0x728>
    4050:	a080004c 	andi	r2,r20,1
    4054:	10001526 	beq	r2,zero,40ac <_dtoa_r+0x728>
    4058:	d8800d17 	ldw	r2,52(sp)
    405c:	d8800415 	stw	r2,16(sp)
    4060:	e009883a 	mov	r4,fp
    4064:	213fffc4 	addi	r4,r4,-1
    4068:	20c00007 	ldb	r3,0(r4)
    406c:	00800e44 	movi	r2,57
    4070:	1880081e 	bne	r3,r2,4094 <_dtoa_r+0x710>
    4074:	d8800517 	ldw	r2,20(sp)
    4078:	113ffa1e 	bne	r2,r4,4064 <_dtoa_r+0x6e0>
    407c:	d8c00417 	ldw	r3,16(sp)
    4080:	d9800517 	ldw	r6,20(sp)
    4084:	00800c04 	movi	r2,48
    4088:	18c00044 	addi	r3,r3,1
    408c:	d8c00415 	stw	r3,16(sp)
    4090:	30800005 	stb	r2,0(r6)
    4094:	20800003 	ldbu	r2,0(r4)
    4098:	d8c00417 	ldw	r3,16(sp)
    409c:	27000044 	addi	fp,r4,1
    40a0:	10800044 	addi	r2,r2,1
    40a4:	d8c00d15 	stw	r3,52(sp)
    40a8:	20800005 	stb	r2,0(r4)
    40ac:	d9001617 	ldw	r4,88(sp)
    40b0:	d9400717 	ldw	r5,28(sp)
    40b4:	000640c0 	call	640c <_Bfree>
    40b8:	e0000005 	stb	zero,0(fp)
    40bc:	d9800d17 	ldw	r6,52(sp)
    40c0:	d8c02717 	ldw	r3,156(sp)
    40c4:	d9002917 	ldw	r4,164(sp)
    40c8:	30800044 	addi	r2,r6,1
    40cc:	18800015 	stw	r2,0(r3)
    40d0:	20029c26 	beq	r4,zero,4b44 <_dtoa_r+0x11c0>
    40d4:	d8c00517 	ldw	r3,20(sp)
    40d8:	27000015 	stw	fp,0(r4)
    40dc:	003e5d06 	br	3a54 <_dtoa_r+0xd0>
    40e0:	d9800d17 	ldw	r6,52(sp)
    40e4:	00c00074 	movhi	r3,1
    40e8:	18f60a04 	addi	r3,r3,-10200
    40ec:	d9001217 	ldw	r4,72(sp)
    40f0:	300490fa 	slli	r2,r6,3
    40f4:	d9401317 	ldw	r5,76(sp)
    40f8:	10c5883a 	add	r2,r2,r3
    40fc:	12000017 	ldw	r8,0(r2)
    4100:	12400117 	ldw	r9,4(r2)
    4104:	400d883a 	mov	r6,r8
    4108:	480f883a 	mov	r7,r9
    410c:	0009bb80 	call	9bb8 <__ltdf2>
    4110:	1000030e 	bge	r2,zero,4120 <_dtoa_r+0x79c>
    4114:	d8800d17 	ldw	r2,52(sp)
    4118:	10bfffc4 	addi	r2,r2,-1
    411c:	d8800d15 	stw	r2,52(sp)
    4120:	d8000c15 	stw	zero,48(sp)
    4124:	003ea806 	br	3bc8 <_dtoa_r+0x244>
    4128:	d9000b17 	ldw	r4,44(sp)
    412c:	202cc03a 	cmpne	r22,r4,zero
    4130:	b000c71e 	bne	r22,zero,4450 <_dtoa_r+0xacc>
    4134:	dc001117 	ldw	r16,68(sp)
    4138:	dc801017 	ldw	r18,64(sp)
    413c:	0027883a 	mov	r19,zero
    4140:	04000b0e 	bge	zero,r16,4170 <_dtoa_r+0x7ec>
    4144:	d8c00a17 	ldw	r3,40(sp)
    4148:	00c0090e 	bge	zero,r3,4170 <_dtoa_r+0x7ec>
    414c:	8005883a 	mov	r2,r16
    4150:	1c011316 	blt	r3,r16,45a0 <_dtoa_r+0xc1c>
    4154:	d9000a17 	ldw	r4,40(sp)
    4158:	d9801117 	ldw	r6,68(sp)
    415c:	80a1c83a 	sub	r16,r16,r2
    4160:	2089c83a 	sub	r4,r4,r2
    4164:	308dc83a 	sub	r6,r6,r2
    4168:	d9000a15 	stw	r4,40(sp)
    416c:	d9801115 	stw	r6,68(sp)
    4170:	d8801017 	ldw	r2,64(sp)
    4174:	0080150e 	bge	zero,r2,41cc <_dtoa_r+0x848>
    4178:	d8c00b17 	ldw	r3,44(sp)
    417c:	1805003a 	cmpeq	r2,r3,zero
    4180:	1001c91e 	bne	r2,zero,48a8 <_dtoa_r+0xf24>
    4184:	04800e0e 	bge	zero,r18,41c0 <_dtoa_r+0x83c>
    4188:	d9001617 	ldw	r4,88(sp)
    418c:	980b883a 	mov	r5,r19
    4190:	900d883a 	mov	r6,r18
    4194:	00072580 	call	7258 <__pow5mult>
    4198:	d9001617 	ldw	r4,88(sp)
    419c:	d9800717 	ldw	r6,28(sp)
    41a0:	100b883a 	mov	r5,r2
    41a4:	1027883a 	mov	r19,r2
    41a8:	0006e9c0 	call	6e9c <__multiply>
    41ac:	d9001617 	ldw	r4,88(sp)
    41b0:	d9400717 	ldw	r5,28(sp)
    41b4:	1023883a 	mov	r17,r2
    41b8:	000640c0 	call	640c <_Bfree>
    41bc:	dc400715 	stw	r17,28(sp)
    41c0:	d9001017 	ldw	r4,64(sp)
    41c4:	248dc83a 	sub	r6,r4,r18
    41c8:	30010e1e 	bne	r6,zero,4604 <_dtoa_r+0xc80>
    41cc:	d9001617 	ldw	r4,88(sp)
    41d0:	04400044 	movi	r17,1
    41d4:	880b883a 	mov	r5,r17
    41d8:	00070f00 	call	70f0 <__i2b>
    41dc:	d9800917 	ldw	r6,36(sp)
    41e0:	1025883a 	mov	r18,r2
    41e4:	0180040e 	bge	zero,r6,41f8 <_dtoa_r+0x874>
    41e8:	d9001617 	ldw	r4,88(sp)
    41ec:	100b883a 	mov	r5,r2
    41f0:	00072580 	call	7258 <__pow5mult>
    41f4:	1025883a 	mov	r18,r2
    41f8:	d8801717 	ldw	r2,92(sp)
    41fc:	8880f30e 	bge	r17,r2,45cc <_dtoa_r+0xc48>
    4200:	0023883a 	mov	r17,zero
    4204:	d9800917 	ldw	r6,36(sp)
    4208:	30019e1e 	bne	r6,zero,4884 <_dtoa_r+0xf00>
    420c:	00c00044 	movi	r3,1
    4210:	d9000a17 	ldw	r4,40(sp)
    4214:	20c5883a 	add	r2,r4,r3
    4218:	10c007cc 	andi	r3,r2,31
    421c:	1800841e 	bne	r3,zero,4430 <_dtoa_r+0xaac>
    4220:	00800704 	movi	r2,28
    4224:	d9000a17 	ldw	r4,40(sp)
    4228:	d9801117 	ldw	r6,68(sp)
    422c:	80a1883a 	add	r16,r16,r2
    4230:	2089883a 	add	r4,r4,r2
    4234:	308d883a 	add	r6,r6,r2
    4238:	d9000a15 	stw	r4,40(sp)
    423c:	d9801115 	stw	r6,68(sp)
    4240:	d8801117 	ldw	r2,68(sp)
    4244:	0080050e 	bge	zero,r2,425c <_dtoa_r+0x8d8>
    4248:	d9400717 	ldw	r5,28(sp)
    424c:	d9001617 	ldw	r4,88(sp)
    4250:	100d883a 	mov	r6,r2
    4254:	0006d500 	call	6d50 <__lshift>
    4258:	d8800715 	stw	r2,28(sp)
    425c:	d8c00a17 	ldw	r3,40(sp)
    4260:	00c0050e 	bge	zero,r3,4278 <_dtoa_r+0x8f4>
    4264:	d9001617 	ldw	r4,88(sp)
    4268:	900b883a 	mov	r5,r18
    426c:	180d883a 	mov	r6,r3
    4270:	0006d500 	call	6d50 <__lshift>
    4274:	1025883a 	mov	r18,r2
    4278:	d9000c17 	ldw	r4,48(sp)
    427c:	2005003a 	cmpeq	r2,r4,zero
    4280:	10016f26 	beq	r2,zero,4840 <_dtoa_r+0xebc>
    4284:	d9000f17 	ldw	r4,60(sp)
    4288:	0102170e 	bge	zero,r4,4ae8 <_dtoa_r+0x1164>
    428c:	d9800b17 	ldw	r6,44(sp)
    4290:	3005003a 	cmpeq	r2,r6,zero
    4294:	1000881e 	bne	r2,zero,44b8 <_dtoa_r+0xb34>
    4298:	0400050e 	bge	zero,r16,42b0 <_dtoa_r+0x92c>
    429c:	d9001617 	ldw	r4,88(sp)
    42a0:	980b883a 	mov	r5,r19
    42a4:	800d883a 	mov	r6,r16
    42a8:	0006d500 	call	6d50 <__lshift>
    42ac:	1027883a 	mov	r19,r2
    42b0:	8804c03a 	cmpne	r2,r17,zero
    42b4:	1002541e 	bne	r2,zero,4c08 <_dtoa_r+0x1284>
    42b8:	980b883a 	mov	r5,r19
    42bc:	dd800517 	ldw	r22,20(sp)
    42c0:	dcc00615 	stw	r19,24(sp)
    42c4:	a700004c 	andi	fp,r20,1
    42c8:	2827883a 	mov	r19,r5
    42cc:	d9000717 	ldw	r4,28(sp)
    42d0:	900b883a 	mov	r5,r18
    42d4:	00037400 	call	3740 <quorem>
    42d8:	d9000717 	ldw	r4,28(sp)
    42dc:	d9400617 	ldw	r5,24(sp)
    42e0:	1023883a 	mov	r17,r2
    42e4:	8dc00c04 	addi	r23,r17,48
    42e8:	00065680 	call	6568 <__mcmp>
    42ec:	d9001617 	ldw	r4,88(sp)
    42f0:	900b883a 	mov	r5,r18
    42f4:	980d883a 	mov	r6,r19
    42f8:	1029883a 	mov	r20,r2
    42fc:	0006bc40 	call	6bc4 <__mdiff>
    4300:	102b883a 	mov	r21,r2
    4304:	10800317 	ldw	r2,12(r2)
    4308:	1001281e 	bne	r2,zero,47ac <_dtoa_r+0xe28>
    430c:	d9000717 	ldw	r4,28(sp)
    4310:	a80b883a 	mov	r5,r21
    4314:	00065680 	call	6568 <__mcmp>
    4318:	d9001617 	ldw	r4,88(sp)
    431c:	1021883a 	mov	r16,r2
    4320:	a80b883a 	mov	r5,r21
    4324:	000640c0 	call	640c <_Bfree>
    4328:	8000041e 	bne	r16,zero,433c <_dtoa_r+0x9b8>
    432c:	d8801717 	ldw	r2,92(sp)
    4330:	1000021e 	bne	r2,zero,433c <_dtoa_r+0x9b8>
    4334:	e004c03a 	cmpne	r2,fp,zero
    4338:	10011726 	beq	r2,zero,4798 <_dtoa_r+0xe14>
    433c:	a0010616 	blt	r20,zero,4758 <_dtoa_r+0xdd4>
    4340:	a000041e 	bne	r20,zero,4354 <_dtoa_r+0x9d0>
    4344:	d8c01717 	ldw	r3,92(sp)
    4348:	1800021e 	bne	r3,zero,4354 <_dtoa_r+0x9d0>
    434c:	e004c03a 	cmpne	r2,fp,zero
    4350:	10010126 	beq	r2,zero,4758 <_dtoa_r+0xdd4>
    4354:	04023d16 	blt	zero,r16,4c4c <_dtoa_r+0x12c8>
    4358:	b5c00005 	stb	r23,0(r22)
    435c:	d9800517 	ldw	r6,20(sp)
    4360:	d9000f17 	ldw	r4,60(sp)
    4364:	b5800044 	addi	r22,r22,1
    4368:	3105883a 	add	r2,r6,r4
    436c:	b0806526 	beq	r22,r2,4504 <_dtoa_r+0xb80>
    4370:	d9400717 	ldw	r5,28(sp)
    4374:	d9001617 	ldw	r4,88(sp)
    4378:	01800284 	movi	r6,10
    437c:	000f883a 	mov	r7,zero
    4380:	000712c0 	call	712c <__multadd>
    4384:	d8800715 	stw	r2,28(sp)
    4388:	d8800617 	ldw	r2,24(sp)
    438c:	14c10c26 	beq	r2,r19,47c0 <_dtoa_r+0xe3c>
    4390:	d9400617 	ldw	r5,24(sp)
    4394:	d9001617 	ldw	r4,88(sp)
    4398:	01800284 	movi	r6,10
    439c:	000f883a 	mov	r7,zero
    43a0:	000712c0 	call	712c <__multadd>
    43a4:	d9001617 	ldw	r4,88(sp)
    43a8:	980b883a 	mov	r5,r19
    43ac:	01800284 	movi	r6,10
    43b0:	000f883a 	mov	r7,zero
    43b4:	d8800615 	stw	r2,24(sp)
    43b8:	000712c0 	call	712c <__multadd>
    43bc:	1027883a 	mov	r19,r2
    43c0:	003fc206 	br	42cc <_dtoa_r+0x948>
    43c4:	2445c83a 	sub	r2,r4,r17
    43c8:	a088983a 	sll	r4,r20,r2
    43cc:	003e4b06 	br	3cfc <_dtoa_r+0x378>
    43d0:	01bfffc4 	movi	r6,-1
    43d4:	00800044 	movi	r2,1
    43d8:	d9800e15 	stw	r6,56(sp)
    43dc:	d9800f15 	stw	r6,60(sp)
    43e0:	d8800b15 	stw	r2,44(sp)
    43e4:	d8c01617 	ldw	r3,88(sp)
    43e8:	008005c4 	movi	r2,23
    43ec:	18001115 	stw	zero,68(r3)
    43f0:	1580082e 	bgeu	r2,r22,4414 <_dtoa_r+0xa90>
    43f4:	00c00104 	movi	r3,4
    43f8:	0009883a 	mov	r4,zero
    43fc:	18c7883a 	add	r3,r3,r3
    4400:	18800504 	addi	r2,r3,20
    4404:	21000044 	addi	r4,r4,1
    4408:	b0bffc2e 	bgeu	r22,r2,43fc <_dtoa_r+0xa78>
    440c:	d9801617 	ldw	r6,88(sp)
    4410:	31001115 	stw	r4,68(r6)
    4414:	dc000f17 	ldw	r16,60(sp)
    4418:	003e4b06 	br	3d48 <_dtoa_r+0x3c4>
    441c:	d9801717 	ldw	r6,92(sp)
    4420:	0023883a 	mov	r17,zero
    4424:	31bfff04 	addi	r6,r6,-4
    4428:	d9801715 	stw	r6,92(sp)
    442c:	003df806 	br	3c10 <_dtoa_r+0x28c>
    4430:	00800804 	movi	r2,32
    4434:	10c9c83a 	sub	r4,r2,r3
    4438:	00c00104 	movi	r3,4
    443c:	19005a16 	blt	r3,r4,45a8 <_dtoa_r+0xc24>
    4440:	008000c4 	movi	r2,3
    4444:	113f7e16 	blt	r2,r4,4240 <_dtoa_r+0x8bc>
    4448:	20800704 	addi	r2,r4,28
    444c:	003f7506 	br	4224 <_dtoa_r+0x8a0>
    4450:	d9801717 	ldw	r6,92(sp)
    4454:	00800044 	movi	r2,1
    4458:	1180a10e 	bge	r2,r6,46e0 <_dtoa_r+0xd5c>
    445c:	d9800f17 	ldw	r6,60(sp)
    4460:	d8c01017 	ldw	r3,64(sp)
    4464:	30bfffc4 	addi	r2,r6,-1
    4468:	1881c616 	blt	r3,r2,4b84 <_dtoa_r+0x1200>
    446c:	18a5c83a 	sub	r18,r3,r2
    4470:	d8800f17 	ldw	r2,60(sp)
    4474:	10026216 	blt	r2,zero,4e00 <_dtoa_r+0x147c>
    4478:	dc001117 	ldw	r16,68(sp)
    447c:	1007883a 	mov	r3,r2
    4480:	d9800a17 	ldw	r6,40(sp)
    4484:	d8801117 	ldw	r2,68(sp)
    4488:	d9001617 	ldw	r4,88(sp)
    448c:	30cd883a 	add	r6,r6,r3
    4490:	10c5883a 	add	r2,r2,r3
    4494:	01400044 	movi	r5,1
    4498:	d9800a15 	stw	r6,40(sp)
    449c:	d8801115 	stw	r2,68(sp)
    44a0:	00070f00 	call	70f0 <__i2b>
    44a4:	1027883a 	mov	r19,r2
    44a8:	003f2506 	br	4140 <_dtoa_r+0x7bc>
    44ac:	00c00074 	movhi	r3,1
    44b0:	18f5ec04 	addi	r3,r3,-10320
    44b4:	003d6706 	br	3a54 <_dtoa_r+0xd0>
    44b8:	dd800517 	ldw	r22,20(sp)
    44bc:	04000044 	movi	r16,1
    44c0:	00000706 	br	44e0 <_dtoa_r+0xb5c>
    44c4:	d9400717 	ldw	r5,28(sp)
    44c8:	d9001617 	ldw	r4,88(sp)
    44cc:	01800284 	movi	r6,10
    44d0:	000f883a 	mov	r7,zero
    44d4:	000712c0 	call	712c <__multadd>
    44d8:	d8800715 	stw	r2,28(sp)
    44dc:	84000044 	addi	r16,r16,1
    44e0:	d9000717 	ldw	r4,28(sp)
    44e4:	900b883a 	mov	r5,r18
    44e8:	00037400 	call	3740 <quorem>
    44ec:	15c00c04 	addi	r23,r2,48
    44f0:	b5c00005 	stb	r23,0(r22)
    44f4:	d8c00f17 	ldw	r3,60(sp)
    44f8:	b5800044 	addi	r22,r22,1
    44fc:	80fff116 	blt	r16,r3,44c4 <_dtoa_r+0xb40>
    4500:	d8000615 	stw	zero,24(sp)
    4504:	d9400717 	ldw	r5,28(sp)
    4508:	d9001617 	ldw	r4,88(sp)
    450c:	01800044 	movi	r6,1
    4510:	0006d500 	call	6d50 <__lshift>
    4514:	1009883a 	mov	r4,r2
    4518:	900b883a 	mov	r5,r18
    451c:	d8800715 	stw	r2,28(sp)
    4520:	00065680 	call	6568 <__mcmp>
    4524:	00803c0e 	bge	zero,r2,4618 <_dtoa_r+0xc94>
    4528:	b009883a 	mov	r4,r22
    452c:	213fffc4 	addi	r4,r4,-1
    4530:	21400003 	ldbu	r5,0(r4)
    4534:	00800e44 	movi	r2,57
    4538:	28c03fcc 	andi	r3,r5,255
    453c:	18c0201c 	xori	r3,r3,128
    4540:	18ffe004 	addi	r3,r3,-128
    4544:	1881981e 	bne	r3,r2,4ba8 <_dtoa_r+0x1224>
    4548:	d9800517 	ldw	r6,20(sp)
    454c:	21bff71e 	bne	r4,r6,452c <_dtoa_r+0xba8>
    4550:	d8800d17 	ldw	r2,52(sp)
    4554:	37000044 	addi	fp,r6,1
    4558:	10800044 	addi	r2,r2,1
    455c:	d8800d15 	stw	r2,52(sp)
    4560:	00800c44 	movi	r2,49
    4564:	30800005 	stb	r2,0(r6)
    4568:	d9001617 	ldw	r4,88(sp)
    456c:	900b883a 	mov	r5,r18
    4570:	000640c0 	call	640c <_Bfree>
    4574:	983ecd26 	beq	r19,zero,40ac <_dtoa_r+0x728>
    4578:	d8c00617 	ldw	r3,24(sp)
    457c:	18000426 	beq	r3,zero,4590 <_dtoa_r+0xc0c>
    4580:	1cc00326 	beq	r3,r19,4590 <_dtoa_r+0xc0c>
    4584:	d9001617 	ldw	r4,88(sp)
    4588:	180b883a 	mov	r5,r3
    458c:	000640c0 	call	640c <_Bfree>
    4590:	d9001617 	ldw	r4,88(sp)
    4594:	980b883a 	mov	r5,r19
    4598:	000640c0 	call	640c <_Bfree>
    459c:	003ec306 	br	40ac <_dtoa_r+0x728>
    45a0:	1805883a 	mov	r2,r3
    45a4:	003eeb06 	br	4154 <_dtoa_r+0x7d0>
    45a8:	d9800a17 	ldw	r6,40(sp)
    45ac:	d8c01117 	ldw	r3,68(sp)
    45b0:	20bfff04 	addi	r2,r4,-4
    45b4:	308d883a 	add	r6,r6,r2
    45b8:	1887883a 	add	r3,r3,r2
    45bc:	80a1883a 	add	r16,r16,r2
    45c0:	d9800a15 	stw	r6,40(sp)
    45c4:	d8c01115 	stw	r3,68(sp)
    45c8:	003f1d06 	br	4240 <_dtoa_r+0x8bc>
    45cc:	a03f0c1e 	bne	r20,zero,4200 <_dtoa_r+0x87c>
    45d0:	00800434 	movhi	r2,16
    45d4:	10bfffc4 	addi	r2,r2,-1
    45d8:	a884703a 	and	r2,r21,r2
    45dc:	103f081e 	bne	r2,zero,4200 <_dtoa_r+0x87c>
    45e0:	a89ffc2c 	andhi	r2,r21,32752
    45e4:	103f0626 	beq	r2,zero,4200 <_dtoa_r+0x87c>
    45e8:	d8c01117 	ldw	r3,68(sp)
    45ec:	d9000a17 	ldw	r4,40(sp)
    45f0:	18c00044 	addi	r3,r3,1
    45f4:	21000044 	addi	r4,r4,1
    45f8:	d8c01115 	stw	r3,68(sp)
    45fc:	d9000a15 	stw	r4,40(sp)
    4600:	003f0006 	br	4204 <_dtoa_r+0x880>
    4604:	d9400717 	ldw	r5,28(sp)
    4608:	d9001617 	ldw	r4,88(sp)
    460c:	00072580 	call	7258 <__pow5mult>
    4610:	d8800715 	stw	r2,28(sp)
    4614:	003eed06 	br	41cc <_dtoa_r+0x848>
    4618:	1000021e 	bne	r2,zero,4624 <_dtoa_r+0xca0>
    461c:	b880004c 	andi	r2,r23,1
    4620:	103fc11e 	bne	r2,zero,4528 <_dtoa_r+0xba4>
    4624:	b5bfffc4 	addi	r22,r22,-1
    4628:	b0c00007 	ldb	r3,0(r22)
    462c:	00800c04 	movi	r2,48
    4630:	18bffc26 	beq	r3,r2,4624 <_dtoa_r+0xca0>
    4634:	b7000044 	addi	fp,r22,1
    4638:	003fcb06 	br	4568 <_dtoa_r+0xbe4>
    463c:	d9800d17 	ldw	r6,52(sp)
    4640:	018fc83a 	sub	r7,zero,r6
    4644:	3801f726 	beq	r7,zero,4e24 <_dtoa_r+0x14a0>
    4648:	398003cc 	andi	r6,r7,15
    464c:	300c90fa 	slli	r6,r6,3
    4650:	01400074 	movhi	r5,1
    4654:	29760a04 	addi	r5,r5,-10200
    4658:	d9001217 	ldw	r4,72(sp)
    465c:	314d883a 	add	r6,r6,r5
    4660:	30c00117 	ldw	r3,4(r6)
    4664:	30800017 	ldw	r2,0(r6)
    4668:	d9401317 	ldw	r5,76(sp)
    466c:	3821d13a 	srai	r16,r7,4
    4670:	100d883a 	mov	r6,r2
    4674:	180f883a 	mov	r7,r3
    4678:	000937c0 	call	937c <__muldf3>
    467c:	1011883a 	mov	r8,r2
    4680:	1813883a 	mov	r9,r3
    4684:	1029883a 	mov	r20,r2
    4688:	182b883a 	mov	r21,r3
    468c:	8001e526 	beq	r16,zero,4e24 <_dtoa_r+0x14a0>
    4690:	05800084 	movi	r22,2
    4694:	04400074 	movhi	r17,1
    4698:	8c763c04 	addi	r17,r17,-10000
    469c:	8080004c 	andi	r2,r16,1
    46a0:	1005003a 	cmpeq	r2,r2,zero
    46a4:	1000081e 	bne	r2,zero,46c8 <_dtoa_r+0xd44>
    46a8:	89800017 	ldw	r6,0(r17)
    46ac:	89c00117 	ldw	r7,4(r17)
    46b0:	480b883a 	mov	r5,r9
    46b4:	4009883a 	mov	r4,r8
    46b8:	000937c0 	call	937c <__muldf3>
    46bc:	1011883a 	mov	r8,r2
    46c0:	b5800044 	addi	r22,r22,1
    46c4:	1813883a 	mov	r9,r3
    46c8:	8021d07a 	srai	r16,r16,1
    46cc:	8c400204 	addi	r17,r17,8
    46d0:	803ff21e 	bne	r16,zero,469c <_dtoa_r+0xd18>
    46d4:	4029883a 	mov	r20,r8
    46d8:	482b883a 	mov	r21,r9
    46dc:	003dca06 	br	3e08 <_dtoa_r+0x484>
    46e0:	d9000817 	ldw	r4,32(sp)
    46e4:	2005003a 	cmpeq	r2,r4,zero
    46e8:	1001f61e 	bne	r2,zero,4ec4 <_dtoa_r+0x1540>
    46ec:	dc001117 	ldw	r16,68(sp)
    46f0:	dc801017 	ldw	r18,64(sp)
    46f4:	18c10cc4 	addi	r3,r3,1075
    46f8:	003f6106 	br	4480 <_dtoa_r+0xafc>
    46fc:	d8000b15 	stw	zero,44(sp)
    4700:	d9802617 	ldw	r6,152(sp)
    4704:	d8c00d17 	ldw	r3,52(sp)
    4708:	30800044 	addi	r2,r6,1
    470c:	18ad883a 	add	r22,r3,r2
    4710:	b13fffc4 	addi	r4,r22,-1
    4714:	d9000e15 	stw	r4,56(sp)
    4718:	0581f60e 	bge	zero,r22,4ef4 <_dtoa_r+0x1570>
    471c:	dd800f15 	stw	r22,60(sp)
    4720:	003f3006 	br	43e4 <_dtoa_r+0xa60>
    4724:	d8000b15 	stw	zero,44(sp)
    4728:	d9002617 	ldw	r4,152(sp)
    472c:	0101eb0e 	bge	zero,r4,4edc <_dtoa_r+0x1558>
    4730:	202d883a 	mov	r22,r4
    4734:	d9000e15 	stw	r4,56(sp)
    4738:	d9000f15 	stw	r4,60(sp)
    473c:	003f2906 	br	43e4 <_dtoa_r+0xa60>
    4740:	01800044 	movi	r6,1
    4744:	d9800b15 	stw	r6,44(sp)
    4748:	003ff706 	br	4728 <_dtoa_r+0xda4>
    474c:	01000044 	movi	r4,1
    4750:	d9000b15 	stw	r4,44(sp)
    4754:	003fea06 	br	4700 <_dtoa_r+0xd7c>
    4758:	04000c0e 	bge	zero,r16,478c <_dtoa_r+0xe08>
    475c:	d9400717 	ldw	r5,28(sp)
    4760:	d9001617 	ldw	r4,88(sp)
    4764:	01800044 	movi	r6,1
    4768:	0006d500 	call	6d50 <__lshift>
    476c:	1009883a 	mov	r4,r2
    4770:	900b883a 	mov	r5,r18
    4774:	d8800715 	stw	r2,28(sp)
    4778:	00065680 	call	6568 <__mcmp>
    477c:	0081e00e 	bge	zero,r2,4f00 <_dtoa_r+0x157c>
    4780:	bdc00044 	addi	r23,r23,1
    4784:	00800e84 	movi	r2,58
    4788:	b881a226 	beq	r23,r2,4e14 <_dtoa_r+0x1490>
    478c:	b7000044 	addi	fp,r22,1
    4790:	b5c00005 	stb	r23,0(r22)
    4794:	003f7406 	br	4568 <_dtoa_r+0xbe4>
    4798:	00800e44 	movi	r2,57
    479c:	b8819d26 	beq	r23,r2,4e14 <_dtoa_r+0x1490>
    47a0:	053ffa0e 	bge	zero,r20,478c <_dtoa_r+0xe08>
    47a4:	8dc00c44 	addi	r23,r17,49
    47a8:	003ff806 	br	478c <_dtoa_r+0xe08>
    47ac:	d9001617 	ldw	r4,88(sp)
    47b0:	a80b883a 	mov	r5,r21
    47b4:	04000044 	movi	r16,1
    47b8:	000640c0 	call	640c <_Bfree>
    47bc:	003edf06 	br	433c <_dtoa_r+0x9b8>
    47c0:	d9001617 	ldw	r4,88(sp)
    47c4:	980b883a 	mov	r5,r19
    47c8:	01800284 	movi	r6,10
    47cc:	000f883a 	mov	r7,zero
    47d0:	000712c0 	call	712c <__multadd>
    47d4:	1027883a 	mov	r19,r2
    47d8:	d8800615 	stw	r2,24(sp)
    47dc:	003ebb06 	br	42cc <_dtoa_r+0x948>
    47e0:	d9801117 	ldw	r6,68(sp)
    47e4:	d8800d17 	ldw	r2,52(sp)
    47e8:	d8000915 	stw	zero,36(sp)
    47ec:	308dc83a 	sub	r6,r6,r2
    47f0:	0087c83a 	sub	r3,zero,r2
    47f4:	d9801115 	stw	r6,68(sp)
    47f8:	d8c01015 	stw	r3,64(sp)
    47fc:	003cfe06 	br	3bf8 <_dtoa_r+0x274>
    4800:	018dc83a 	sub	r6,zero,r6
    4804:	d9801115 	stw	r6,68(sp)
    4808:	d8000a15 	stw	zero,40(sp)
    480c:	003cf306 	br	3bdc <_dtoa_r+0x258>
    4810:	d9000d17 	ldw	r4,52(sp)
    4814:	0009c400 	call	9c40 <__floatsidf>
    4818:	880b883a 	mov	r5,r17
    481c:	8009883a 	mov	r4,r16
    4820:	180f883a 	mov	r7,r3
    4824:	100d883a 	mov	r6,r2
    4828:	0009a200 	call	9a20 <__nedf2>
    482c:	103ce126 	beq	r2,zero,3bb4 <_dtoa_r+0x230>
    4830:	d9800d17 	ldw	r6,52(sp)
    4834:	31bfffc4 	addi	r6,r6,-1
    4838:	d9800d15 	stw	r6,52(sp)
    483c:	003cdd06 	br	3bb4 <_dtoa_r+0x230>
    4840:	d9000717 	ldw	r4,28(sp)
    4844:	900b883a 	mov	r5,r18
    4848:	00065680 	call	6568 <__mcmp>
    484c:	103e8d0e 	bge	r2,zero,4284 <_dtoa_r+0x900>
    4850:	d9400717 	ldw	r5,28(sp)
    4854:	d9001617 	ldw	r4,88(sp)
    4858:	01800284 	movi	r6,10
    485c:	000f883a 	mov	r7,zero
    4860:	000712c0 	call	712c <__multadd>
    4864:	d9800d17 	ldw	r6,52(sp)
    4868:	d8800715 	stw	r2,28(sp)
    486c:	31bfffc4 	addi	r6,r6,-1
    4870:	d9800d15 	stw	r6,52(sp)
    4874:	b001a71e 	bne	r22,zero,4f14 <_dtoa_r+0x1590>
    4878:	d8800e17 	ldw	r2,56(sp)
    487c:	d8800f15 	stw	r2,60(sp)
    4880:	003e8006 	br	4284 <_dtoa_r+0x900>
    4884:	90800417 	ldw	r2,16(r18)
    4888:	1085883a 	add	r2,r2,r2
    488c:	1085883a 	add	r2,r2,r2
    4890:	1485883a 	add	r2,r2,r18
    4894:	11000417 	ldw	r4,16(r2)
    4898:	00064340 	call	6434 <__hi0bits>
    489c:	00c00804 	movi	r3,32
    48a0:	1887c83a 	sub	r3,r3,r2
    48a4:	003e5a06 	br	4210 <_dtoa_r+0x88c>
    48a8:	d9400717 	ldw	r5,28(sp)
    48ac:	d9801017 	ldw	r6,64(sp)
    48b0:	d9001617 	ldw	r4,88(sp)
    48b4:	00072580 	call	7258 <__pow5mult>
    48b8:	d8800715 	stw	r2,28(sp)
    48bc:	003e4306 	br	41cc <_dtoa_r+0x848>
    48c0:	d9800f17 	ldw	r6,60(sp)
    48c4:	d8800d17 	ldw	r2,52(sp)
    48c8:	d9800315 	stw	r6,12(sp)
    48cc:	d8800415 	stw	r2,16(sp)
    48d0:	d8c00b17 	ldw	r3,44(sp)
    48d4:	1805003a 	cmpeq	r2,r3,zero
    48d8:	1000e21e 	bne	r2,zero,4c64 <_dtoa_r+0x12e0>
    48dc:	d9000317 	ldw	r4,12(sp)
    48e0:	0005883a 	mov	r2,zero
    48e4:	00cff834 	movhi	r3,16352
    48e8:	200c90fa 	slli	r6,r4,3
    48ec:	01000074 	movhi	r4,1
    48f0:	21360a04 	addi	r4,r4,-10200
    48f4:	180b883a 	mov	r5,r3
    48f8:	310d883a 	add	r6,r6,r4
    48fc:	327fff17 	ldw	r9,-4(r6)
    4900:	323ffe17 	ldw	r8,-8(r6)
    4904:	1009883a 	mov	r4,r2
    4908:	480f883a 	mov	r7,r9
    490c:	400d883a 	mov	r6,r8
    4910:	00097400 	call	9740 <__divdf3>
    4914:	180b883a 	mov	r5,r3
    4918:	b00d883a 	mov	r6,r22
    491c:	b80f883a 	mov	r7,r23
    4920:	1009883a 	mov	r4,r2
    4924:	00092880 	call	9288 <__subdf3>
    4928:	a80b883a 	mov	r5,r21
    492c:	a009883a 	mov	r4,r20
    4930:	d8c01915 	stw	r3,100(sp)
    4934:	d8801815 	stw	r2,96(sp)
    4938:	0009d380 	call	9d38 <__fixdfsi>
    493c:	1009883a 	mov	r4,r2
    4940:	1027883a 	mov	r19,r2
    4944:	0009c400 	call	9c40 <__floatsidf>
    4948:	a80b883a 	mov	r5,r21
    494c:	a009883a 	mov	r4,r20
    4950:	180f883a 	mov	r7,r3
    4954:	100d883a 	mov	r6,r2
    4958:	00092880 	call	9288 <__subdf3>
    495c:	d9801817 	ldw	r6,96(sp)
    4960:	1823883a 	mov	r17,r3
    4964:	d8801415 	stw	r2,80(sp)
    4968:	302d883a 	mov	r22,r6
    496c:	d9800517 	ldw	r6,20(sp)
    4970:	9cc00c04 	addi	r19,r19,48
    4974:	dc401515 	stw	r17,84(sp)
    4978:	d8c01917 	ldw	r3,100(sp)
    497c:	34c00005 	stb	r19,0(r6)
    4980:	d8800517 	ldw	r2,20(sp)
    4984:	d9401917 	ldw	r5,100(sp)
    4988:	d9801417 	ldw	r6,80(sp)
    498c:	b009883a 	mov	r4,r22
    4990:	880f883a 	mov	r7,r17
    4994:	182f883a 	mov	r23,r3
    4998:	17000044 	addi	fp,r2,1
    499c:	0009aa80 	call	9aa8 <__gtdf2>
    49a0:	00804e16 	blt	zero,r2,4adc <_dtoa_r+0x1158>
    49a4:	d9801417 	ldw	r6,80(sp)
    49a8:	0005883a 	mov	r2,zero
    49ac:	00cffc34 	movhi	r3,16368
    49b0:	180b883a 	mov	r5,r3
    49b4:	880f883a 	mov	r7,r17
    49b8:	1009883a 	mov	r4,r2
    49bc:	00092880 	call	9288 <__subdf3>
    49c0:	d9401917 	ldw	r5,100(sp)
    49c4:	180f883a 	mov	r7,r3
    49c8:	b009883a 	mov	r4,r22
    49cc:	100d883a 	mov	r6,r2
    49d0:	0009aa80 	call	9aa8 <__gtdf2>
    49d4:	00bda216 	blt	zero,r2,4060 <_dtoa_r+0x6dc>
    49d8:	d8c00317 	ldw	r3,12(sp)
    49dc:	00800044 	movi	r2,1
    49e0:	10c01216 	blt	r2,r3,4a2c <_dtoa_r+0x10a8>
    49e4:	003d4506 	br	3efc <_dtoa_r+0x578>
    49e8:	d9801417 	ldw	r6,80(sp)
    49ec:	0005883a 	mov	r2,zero
    49f0:	00cffc34 	movhi	r3,16368
    49f4:	180b883a 	mov	r5,r3
    49f8:	880f883a 	mov	r7,r17
    49fc:	1009883a 	mov	r4,r2
    4a00:	00092880 	call	9288 <__subdf3>
    4a04:	d9c01b17 	ldw	r7,108(sp)
    4a08:	180b883a 	mov	r5,r3
    4a0c:	1009883a 	mov	r4,r2
    4a10:	b00d883a 	mov	r6,r22
    4a14:	0009bb80 	call	9bb8 <__ltdf2>
    4a18:	103d9116 	blt	r2,zero,4060 <_dtoa_r+0x6dc>
    4a1c:	d9800517 	ldw	r6,20(sp)
    4a20:	d9000317 	ldw	r4,12(sp)
    4a24:	3105883a 	add	r2,r6,r4
    4a28:	e0bd3426 	beq	fp,r2,3efc <_dtoa_r+0x578>
    4a2c:	04500934 	movhi	r17,16420
    4a30:	0021883a 	mov	r16,zero
    4a34:	b80b883a 	mov	r5,r23
    4a38:	b009883a 	mov	r4,r22
    4a3c:	800d883a 	mov	r6,r16
    4a40:	880f883a 	mov	r7,r17
    4a44:	000937c0 	call	937c <__muldf3>
    4a48:	d9401517 	ldw	r5,84(sp)
    4a4c:	d9001417 	ldw	r4,80(sp)
    4a50:	880f883a 	mov	r7,r17
    4a54:	000d883a 	mov	r6,zero
    4a58:	d8801a15 	stw	r2,104(sp)
    4a5c:	d8c01b15 	stw	r3,108(sp)
    4a60:	000937c0 	call	937c <__muldf3>
    4a64:	180b883a 	mov	r5,r3
    4a68:	1009883a 	mov	r4,r2
    4a6c:	1823883a 	mov	r17,r3
    4a70:	1021883a 	mov	r16,r2
    4a74:	0009d380 	call	9d38 <__fixdfsi>
    4a78:	1009883a 	mov	r4,r2
    4a7c:	102b883a 	mov	r21,r2
    4a80:	0009c400 	call	9c40 <__floatsidf>
    4a84:	880b883a 	mov	r5,r17
    4a88:	8009883a 	mov	r4,r16
    4a8c:	180f883a 	mov	r7,r3
    4a90:	100d883a 	mov	r6,r2
    4a94:	00092880 	call	9288 <__subdf3>
    4a98:	1021883a 	mov	r16,r2
    4a9c:	d9001b17 	ldw	r4,108(sp)
    4aa0:	1823883a 	mov	r17,r3
    4aa4:	dc001415 	stw	r16,80(sp)
    4aa8:	ad400c04 	addi	r21,r21,48
    4aac:	dc401515 	stw	r17,84(sp)
    4ab0:	d8801a17 	ldw	r2,104(sp)
    4ab4:	e5400005 	stb	r21,0(fp)
    4ab8:	202f883a 	mov	r23,r4
    4abc:	d9c01b17 	ldw	r7,108(sp)
    4ac0:	d9001417 	ldw	r4,80(sp)
    4ac4:	880b883a 	mov	r5,r17
    4ac8:	100d883a 	mov	r6,r2
    4acc:	102d883a 	mov	r22,r2
    4ad0:	e7000044 	addi	fp,fp,1
    4ad4:	0009bb80 	call	9bb8 <__ltdf2>
    4ad8:	103fc30e 	bge	r2,zero,49e8 <_dtoa_r+0x1064>
    4adc:	d9000417 	ldw	r4,16(sp)
    4ae0:	d9000d15 	stw	r4,52(sp)
    4ae4:	003d7106 	br	40ac <_dtoa_r+0x728>
    4ae8:	d9801717 	ldw	r6,92(sp)
    4aec:	00800084 	movi	r2,2
    4af0:	11bde60e 	bge	r2,r6,428c <_dtoa_r+0x908>
    4af4:	203cfb1e 	bne	r4,zero,3ee4 <_dtoa_r+0x560>
    4af8:	d9001617 	ldw	r4,88(sp)
    4afc:	900b883a 	mov	r5,r18
    4b00:	01800144 	movi	r6,5
    4b04:	000f883a 	mov	r7,zero
    4b08:	000712c0 	call	712c <__multadd>
    4b0c:	d9000717 	ldw	r4,28(sp)
    4b10:	100b883a 	mov	r5,r2
    4b14:	1025883a 	mov	r18,r2
    4b18:	00065680 	call	6568 <__mcmp>
    4b1c:	00bcf10e 	bge	zero,r2,3ee4 <_dtoa_r+0x560>
    4b20:	d8c00d17 	ldw	r3,52(sp)
    4b24:	d9000517 	ldw	r4,20(sp)
    4b28:	d8000615 	stw	zero,24(sp)
    4b2c:	18c00044 	addi	r3,r3,1
    4b30:	d8c00d15 	stw	r3,52(sp)
    4b34:	00800c44 	movi	r2,49
    4b38:	27000044 	addi	fp,r4,1
    4b3c:	20800005 	stb	r2,0(r4)
    4b40:	003e8906 	br	4568 <_dtoa_r+0xbe4>
    4b44:	d8c00517 	ldw	r3,20(sp)
    4b48:	003bc206 	br	3a54 <_dtoa_r+0xd0>
    4b4c:	01800074 	movhi	r6,1
    4b50:	31b63c04 	addi	r6,r6,-10000
    4b54:	30c00917 	ldw	r3,36(r6)
    4b58:	30800817 	ldw	r2,32(r6)
    4b5c:	d9001217 	ldw	r4,72(sp)
    4b60:	d9401317 	ldw	r5,76(sp)
    4b64:	180f883a 	mov	r7,r3
    4b68:	100d883a 	mov	r6,r2
    4b6c:	00097400 	call	9740 <__divdf3>
    4b70:	948003cc 	andi	r18,r18,15
    4b74:	058000c4 	movi	r22,3
    4b78:	1029883a 	mov	r20,r2
    4b7c:	182b883a 	mov	r21,r3
    4b80:	003c8906 	br	3da8 <_dtoa_r+0x424>
    4b84:	d9001017 	ldw	r4,64(sp)
    4b88:	d9800917 	ldw	r6,36(sp)
    4b8c:	0025883a 	mov	r18,zero
    4b90:	1105c83a 	sub	r2,r2,r4
    4b94:	2089883a 	add	r4,r4,r2
    4b98:	308d883a 	add	r6,r6,r2
    4b9c:	d9001015 	stw	r4,64(sp)
    4ba0:	d9800915 	stw	r6,36(sp)
    4ba4:	003e3206 	br	4470 <_dtoa_r+0xaec>
    4ba8:	28800044 	addi	r2,r5,1
    4bac:	27000044 	addi	fp,r4,1
    4bb0:	20800005 	stb	r2,0(r4)
    4bb4:	003e6c06 	br	4568 <_dtoa_r+0xbe4>
    4bb8:	d8800f17 	ldw	r2,60(sp)
    4bbc:	00bce016 	blt	zero,r2,3f40 <_dtoa_r+0x5bc>
    4bc0:	d9800f17 	ldw	r6,60(sp)
    4bc4:	303cc51e 	bne	r6,zero,3edc <_dtoa_r+0x558>
    4bc8:	0005883a 	mov	r2,zero
    4bcc:	00d00534 	movhi	r3,16404
    4bd0:	980b883a 	mov	r5,r19
    4bd4:	180f883a 	mov	r7,r3
    4bd8:	9009883a 	mov	r4,r18
    4bdc:	100d883a 	mov	r6,r2
    4be0:	000937c0 	call	937c <__muldf3>
    4be4:	180b883a 	mov	r5,r3
    4be8:	a80f883a 	mov	r7,r21
    4bec:	1009883a 	mov	r4,r2
    4bf0:	a00d883a 	mov	r6,r20
    4bf4:	0009b300 	call	9b30 <__gedf2>
    4bf8:	103cb80e 	bge	r2,zero,3edc <_dtoa_r+0x558>
    4bfc:	0027883a 	mov	r19,zero
    4c00:	0025883a 	mov	r18,zero
    4c04:	003fc606 	br	4b20 <_dtoa_r+0x119c>
    4c08:	99400117 	ldw	r5,4(r19)
    4c0c:	d9001617 	ldw	r4,88(sp)
    4c10:	000698c0 	call	698c <_Balloc>
    4c14:	99800417 	ldw	r6,16(r19)
    4c18:	11000304 	addi	r4,r2,12
    4c1c:	99400304 	addi	r5,r19,12
    4c20:	318d883a 	add	r6,r6,r6
    4c24:	318d883a 	add	r6,r6,r6
    4c28:	31800204 	addi	r6,r6,8
    4c2c:	1023883a 	mov	r17,r2
    4c30:	00061f40 	call	61f4 <memcpy>
    4c34:	d9001617 	ldw	r4,88(sp)
    4c38:	880b883a 	mov	r5,r17
    4c3c:	01800044 	movi	r6,1
    4c40:	0006d500 	call	6d50 <__lshift>
    4c44:	100b883a 	mov	r5,r2
    4c48:	003d9c06 	br	42bc <_dtoa_r+0x938>
    4c4c:	00800e44 	movi	r2,57
    4c50:	b8807026 	beq	r23,r2,4e14 <_dtoa_r+0x1490>
    4c54:	b8800044 	addi	r2,r23,1
    4c58:	b7000044 	addi	fp,r22,1
    4c5c:	b0800005 	stb	r2,0(r22)
    4c60:	003e4106 	br	4568 <_dtoa_r+0xbe4>
    4c64:	d8800317 	ldw	r2,12(sp)
    4c68:	01800074 	movhi	r6,1
    4c6c:	31b60a04 	addi	r6,r6,-10200
    4c70:	b009883a 	mov	r4,r22
    4c74:	100e90fa 	slli	r7,r2,3
    4c78:	b80b883a 	mov	r5,r23
    4c7c:	398f883a 	add	r7,r7,r6
    4c80:	38bffe17 	ldw	r2,-8(r7)
    4c84:	d9800517 	ldw	r6,20(sp)
    4c88:	38ffff17 	ldw	r3,-4(r7)
    4c8c:	37000044 	addi	fp,r6,1
    4c90:	180f883a 	mov	r7,r3
    4c94:	100d883a 	mov	r6,r2
    4c98:	000937c0 	call	937c <__muldf3>
    4c9c:	a80b883a 	mov	r5,r21
    4ca0:	a009883a 	mov	r4,r20
    4ca4:	182f883a 	mov	r23,r3
    4ca8:	102d883a 	mov	r22,r2
    4cac:	0009d380 	call	9d38 <__fixdfsi>
    4cb0:	1009883a 	mov	r4,r2
    4cb4:	1027883a 	mov	r19,r2
    4cb8:	0009c400 	call	9c40 <__floatsidf>
    4cbc:	a80b883a 	mov	r5,r21
    4cc0:	a009883a 	mov	r4,r20
    4cc4:	180f883a 	mov	r7,r3
    4cc8:	100d883a 	mov	r6,r2
    4ccc:	00092880 	call	9288 <__subdf3>
    4cd0:	180b883a 	mov	r5,r3
    4cd4:	d8c00517 	ldw	r3,20(sp)
    4cd8:	9cc00c04 	addi	r19,r19,48
    4cdc:	1009883a 	mov	r4,r2
    4ce0:	1cc00005 	stb	r19,0(r3)
    4ce4:	2021883a 	mov	r16,r4
    4ce8:	d9000317 	ldw	r4,12(sp)
    4cec:	00800044 	movi	r2,1
    4cf0:	2823883a 	mov	r17,r5
    4cf4:	20802226 	beq	r4,r2,4d80 <_dtoa_r+0x13fc>
    4cf8:	1029883a 	mov	r20,r2
    4cfc:	0005883a 	mov	r2,zero
    4d00:	00d00934 	movhi	r3,16420
    4d04:	180f883a 	mov	r7,r3
    4d08:	100d883a 	mov	r6,r2
    4d0c:	880b883a 	mov	r5,r17
    4d10:	8009883a 	mov	r4,r16
    4d14:	000937c0 	call	937c <__muldf3>
    4d18:	180b883a 	mov	r5,r3
    4d1c:	1009883a 	mov	r4,r2
    4d20:	1823883a 	mov	r17,r3
    4d24:	1021883a 	mov	r16,r2
    4d28:	0009d380 	call	9d38 <__fixdfsi>
    4d2c:	1009883a 	mov	r4,r2
    4d30:	102b883a 	mov	r21,r2
    4d34:	0009c400 	call	9c40 <__floatsidf>
    4d38:	880b883a 	mov	r5,r17
    4d3c:	8009883a 	mov	r4,r16
    4d40:	180f883a 	mov	r7,r3
    4d44:	100d883a 	mov	r6,r2
    4d48:	00092880 	call	9288 <__subdf3>
    4d4c:	180b883a 	mov	r5,r3
    4d50:	d8c00517 	ldw	r3,20(sp)
    4d54:	1009883a 	mov	r4,r2
    4d58:	ad400c04 	addi	r21,r21,48
    4d5c:	1d05883a 	add	r2,r3,r20
    4d60:	15400005 	stb	r21,0(r2)
    4d64:	2021883a 	mov	r16,r4
    4d68:	d9000317 	ldw	r4,12(sp)
    4d6c:	a5000044 	addi	r20,r20,1
    4d70:	2823883a 	mov	r17,r5
    4d74:	a13fe11e 	bne	r20,r4,4cfc <_dtoa_r+0x1378>
    4d78:	e505883a 	add	r2,fp,r20
    4d7c:	173fffc4 	addi	fp,r2,-1
    4d80:	0025883a 	mov	r18,zero
    4d84:	04cff834 	movhi	r19,16352
    4d88:	b009883a 	mov	r4,r22
    4d8c:	b80b883a 	mov	r5,r23
    4d90:	900d883a 	mov	r6,r18
    4d94:	980f883a 	mov	r7,r19
    4d98:	00093080 	call	9308 <__adddf3>
    4d9c:	180b883a 	mov	r5,r3
    4da0:	1009883a 	mov	r4,r2
    4da4:	800d883a 	mov	r6,r16
    4da8:	880f883a 	mov	r7,r17
    4dac:	0009bb80 	call	9bb8 <__ltdf2>
    4db0:	103cab16 	blt	r2,zero,4060 <_dtoa_r+0x6dc>
    4db4:	0009883a 	mov	r4,zero
    4db8:	980b883a 	mov	r5,r19
    4dbc:	b80f883a 	mov	r7,r23
    4dc0:	b00d883a 	mov	r6,r22
    4dc4:	00092880 	call	9288 <__subdf3>
    4dc8:	180b883a 	mov	r5,r3
    4dcc:	880f883a 	mov	r7,r17
    4dd0:	1009883a 	mov	r4,r2
    4dd4:	800d883a 	mov	r6,r16
    4dd8:	0009aa80 	call	9aa8 <__gtdf2>
    4ddc:	00bc470e 	bge	zero,r2,3efc <_dtoa_r+0x578>
    4de0:	00c00c04 	movi	r3,48
    4de4:	e73fffc4 	addi	fp,fp,-1
    4de8:	e0800007 	ldb	r2,0(fp)
    4dec:	10fffd26 	beq	r2,r3,4de4 <_dtoa_r+0x1460>
    4df0:	d9800417 	ldw	r6,16(sp)
    4df4:	e7000044 	addi	fp,fp,1
    4df8:	d9800d15 	stw	r6,52(sp)
    4dfc:	003cab06 	br	40ac <_dtoa_r+0x728>
    4e00:	d8c00f17 	ldw	r3,60(sp)
    4e04:	d9001117 	ldw	r4,68(sp)
    4e08:	20e1c83a 	sub	r16,r4,r3
    4e0c:	0007883a 	mov	r3,zero
    4e10:	003d9b06 	br	4480 <_dtoa_r+0xafc>
    4e14:	00800e44 	movi	r2,57
    4e18:	b0800005 	stb	r2,0(r22)
    4e1c:	b5800044 	addi	r22,r22,1
    4e20:	003dc106 	br	4528 <_dtoa_r+0xba4>
    4e24:	05800084 	movi	r22,2
    4e28:	003bf706 	br	3e08 <_dtoa_r+0x484>
    4e2c:	d9000f17 	ldw	r4,60(sp)
    4e30:	013c000e 	bge	zero,r4,3e34 <_dtoa_r+0x4b0>
    4e34:	d9800e17 	ldw	r6,56(sp)
    4e38:	01bc300e 	bge	zero,r6,3efc <_dtoa_r+0x578>
    4e3c:	0005883a 	mov	r2,zero
    4e40:	00d00934 	movhi	r3,16420
    4e44:	a80b883a 	mov	r5,r21
    4e48:	180f883a 	mov	r7,r3
    4e4c:	a009883a 	mov	r4,r20
    4e50:	100d883a 	mov	r6,r2
    4e54:	000937c0 	call	937c <__muldf3>
    4e58:	b1000044 	addi	r4,r22,1
    4e5c:	1021883a 	mov	r16,r2
    4e60:	1823883a 	mov	r17,r3
    4e64:	0009c400 	call	9c40 <__floatsidf>
    4e68:	880b883a 	mov	r5,r17
    4e6c:	8009883a 	mov	r4,r16
    4e70:	180f883a 	mov	r7,r3
    4e74:	100d883a 	mov	r6,r2
    4e78:	000937c0 	call	937c <__muldf3>
    4e7c:	0011883a 	mov	r8,zero
    4e80:	02500734 	movhi	r9,16412
    4e84:	180b883a 	mov	r5,r3
    4e88:	480f883a 	mov	r7,r9
    4e8c:	1009883a 	mov	r4,r2
    4e90:	400d883a 	mov	r6,r8
    4e94:	00093080 	call	9308 <__adddf3>
    4e98:	102d883a 	mov	r22,r2
    4e9c:	00bf3034 	movhi	r2,64704
    4ea0:	10ef883a 	add	r23,r2,r3
    4ea4:	d8800d17 	ldw	r2,52(sp)
    4ea8:	d8c00e17 	ldw	r3,56(sp)
    4eac:	8029883a 	mov	r20,r16
    4eb0:	10bfffc4 	addi	r2,r2,-1
    4eb4:	882b883a 	mov	r21,r17
    4eb8:	d8800415 	stw	r2,16(sp)
    4ebc:	d8c00315 	stw	r3,12(sp)
    4ec0:	003e8306 	br	48d0 <_dtoa_r+0xf4c>
    4ec4:	d8800117 	ldw	r2,4(sp)
    4ec8:	dc001117 	ldw	r16,68(sp)
    4ecc:	dc801017 	ldw	r18,64(sp)
    4ed0:	00c00d84 	movi	r3,54
    4ed4:	1887c83a 	sub	r3,r3,r2
    4ed8:	003d6906 	br	4480 <_dtoa_r+0xafc>
    4edc:	01800044 	movi	r6,1
    4ee0:	3021883a 	mov	r16,r6
    4ee4:	d9800f15 	stw	r6,60(sp)
    4ee8:	d9802615 	stw	r6,152(sp)
    4eec:	d9800e15 	stw	r6,56(sp)
    4ef0:	003b9306 	br	3d40 <_dtoa_r+0x3bc>
    4ef4:	b021883a 	mov	r16,r22
    4ef8:	dd800f15 	stw	r22,60(sp)
    4efc:	003b9006 	br	3d40 <_dtoa_r+0x3bc>
    4f00:	103e221e 	bne	r2,zero,478c <_dtoa_r+0xe08>
    4f04:	b880004c 	andi	r2,r23,1
    4f08:	1005003a 	cmpeq	r2,r2,zero
    4f0c:	103e1f1e 	bne	r2,zero,478c <_dtoa_r+0xe08>
    4f10:	003e1b06 	br	4780 <_dtoa_r+0xdfc>
    4f14:	d9001617 	ldw	r4,88(sp)
    4f18:	980b883a 	mov	r5,r19
    4f1c:	01800284 	movi	r6,10
    4f20:	000f883a 	mov	r7,zero
    4f24:	000712c0 	call	712c <__multadd>
    4f28:	d8c00e17 	ldw	r3,56(sp)
    4f2c:	1027883a 	mov	r19,r2
    4f30:	d8c00f15 	stw	r3,60(sp)
    4f34:	003cd306 	br	4284 <_dtoa_r+0x900>

00004f38 <_fflush_r>:
    4f38:	defffb04 	addi	sp,sp,-20
    4f3c:	dcc00315 	stw	r19,12(sp)
    4f40:	dc800215 	stw	r18,8(sp)
    4f44:	dfc00415 	stw	ra,16(sp)
    4f48:	dc400115 	stw	r17,4(sp)
    4f4c:	dc000015 	stw	r16,0(sp)
    4f50:	2027883a 	mov	r19,r4
    4f54:	2825883a 	mov	r18,r5
    4f58:	20000226 	beq	r4,zero,4f64 <_fflush_r+0x2c>
    4f5c:	20800e17 	ldw	r2,56(r4)
    4f60:	10005626 	beq	r2,zero,50bc <_fflush_r+0x184>
    4f64:	9100030b 	ldhu	r4,12(r18)
    4f68:	20ffffcc 	andi	r3,r4,65535
    4f6c:	18e0001c 	xori	r3,r3,32768
    4f70:	18e00004 	addi	r3,r3,-32768
    4f74:	1880020c 	andi	r2,r3,8
    4f78:	1000261e 	bne	r2,zero,5014 <_fflush_r+0xdc>
    4f7c:	90c00117 	ldw	r3,4(r18)
    4f80:	20820014 	ori	r2,r4,2048
    4f84:	9080030d 	sth	r2,12(r18)
    4f88:	1009883a 	mov	r4,r2
    4f8c:	00c0400e 	bge	zero,r3,5090 <_fflush_r+0x158>
    4f90:	92000a17 	ldw	r8,40(r18)
    4f94:	40004026 	beq	r8,zero,5098 <_fflush_r+0x160>
    4f98:	2084000c 	andi	r2,r4,4096
    4f9c:	10005326 	beq	r2,zero,50ec <_fflush_r+0x1b4>
    4fa0:	94001417 	ldw	r16,80(r18)
    4fa4:	9080030b 	ldhu	r2,12(r18)
    4fa8:	1080010c 	andi	r2,r2,4
    4fac:	1000481e 	bne	r2,zero,50d0 <_fflush_r+0x198>
    4fb0:	91400717 	ldw	r5,28(r18)
    4fb4:	9809883a 	mov	r4,r19
    4fb8:	800d883a 	mov	r6,r16
    4fbc:	000f883a 	mov	r7,zero
    4fc0:	403ee83a 	callr	r8
    4fc4:	8080261e 	bne	r16,r2,5060 <_fflush_r+0x128>
    4fc8:	9080030b 	ldhu	r2,12(r18)
    4fcc:	91000417 	ldw	r4,16(r18)
    4fd0:	90000115 	stw	zero,4(r18)
    4fd4:	10bdffcc 	andi	r2,r2,63487
    4fd8:	10ffffcc 	andi	r3,r2,65535
    4fdc:	18c4000c 	andi	r3,r3,4096
    4fe0:	9080030d 	sth	r2,12(r18)
    4fe4:	91000015 	stw	r4,0(r18)
    4fe8:	18002b26 	beq	r3,zero,5098 <_fflush_r+0x160>
    4fec:	0007883a 	mov	r3,zero
    4ff0:	1805883a 	mov	r2,r3
    4ff4:	94001415 	stw	r16,80(r18)
    4ff8:	dfc00417 	ldw	ra,16(sp)
    4ffc:	dcc00317 	ldw	r19,12(sp)
    5000:	dc800217 	ldw	r18,8(sp)
    5004:	dc400117 	ldw	r17,4(sp)
    5008:	dc000017 	ldw	r16,0(sp)
    500c:	dec00504 	addi	sp,sp,20
    5010:	f800283a 	ret
    5014:	94400417 	ldw	r17,16(r18)
    5018:	88001f26 	beq	r17,zero,5098 <_fflush_r+0x160>
    501c:	90800017 	ldw	r2,0(r18)
    5020:	18c000cc 	andi	r3,r3,3
    5024:	94400015 	stw	r17,0(r18)
    5028:	1461c83a 	sub	r16,r2,r17
    502c:	18002526 	beq	r3,zero,50c4 <_fflush_r+0x18c>
    5030:	0005883a 	mov	r2,zero
    5034:	90800215 	stw	r2,8(r18)
    5038:	0400170e 	bge	zero,r16,5098 <_fflush_r+0x160>
    503c:	90c00917 	ldw	r3,36(r18)
    5040:	91400717 	ldw	r5,28(r18)
    5044:	880d883a 	mov	r6,r17
    5048:	800f883a 	mov	r7,r16
    504c:	9809883a 	mov	r4,r19
    5050:	183ee83a 	callr	r3
    5054:	88a3883a 	add	r17,r17,r2
    5058:	80a1c83a 	sub	r16,r16,r2
    505c:	00bff616 	blt	zero,r2,5038 <_fflush_r+0x100>
    5060:	9080030b 	ldhu	r2,12(r18)
    5064:	00ffffc4 	movi	r3,-1
    5068:	10801014 	ori	r2,r2,64
    506c:	9080030d 	sth	r2,12(r18)
    5070:	1805883a 	mov	r2,r3
    5074:	dfc00417 	ldw	ra,16(sp)
    5078:	dcc00317 	ldw	r19,12(sp)
    507c:	dc800217 	ldw	r18,8(sp)
    5080:	dc400117 	ldw	r17,4(sp)
    5084:	dc000017 	ldw	r16,0(sp)
    5088:	dec00504 	addi	sp,sp,20
    508c:	f800283a 	ret
    5090:	90800f17 	ldw	r2,60(r18)
    5094:	00bfbe16 	blt	zero,r2,4f90 <_fflush_r+0x58>
    5098:	0007883a 	mov	r3,zero
    509c:	1805883a 	mov	r2,r3
    50a0:	dfc00417 	ldw	ra,16(sp)
    50a4:	dcc00317 	ldw	r19,12(sp)
    50a8:	dc800217 	ldw	r18,8(sp)
    50ac:	dc400117 	ldw	r17,4(sp)
    50b0:	dc000017 	ldw	r16,0(sp)
    50b4:	dec00504 	addi	sp,sp,20
    50b8:	f800283a 	ret
    50bc:	00051d00 	call	51d0 <__sinit>
    50c0:	003fa806 	br	4f64 <_fflush_r+0x2c>
    50c4:	90800517 	ldw	r2,20(r18)
    50c8:	90800215 	stw	r2,8(r18)
    50cc:	003fda06 	br	5038 <_fflush_r+0x100>
    50d0:	90800117 	ldw	r2,4(r18)
    50d4:	90c00c17 	ldw	r3,48(r18)
    50d8:	80a1c83a 	sub	r16,r16,r2
    50dc:	183fb426 	beq	r3,zero,4fb0 <_fflush_r+0x78>
    50e0:	90800f17 	ldw	r2,60(r18)
    50e4:	80a1c83a 	sub	r16,r16,r2
    50e8:	003fb106 	br	4fb0 <_fflush_r+0x78>
    50ec:	91400717 	ldw	r5,28(r18)
    50f0:	9809883a 	mov	r4,r19
    50f4:	000d883a 	mov	r6,zero
    50f8:	01c00044 	movi	r7,1
    50fc:	403ee83a 	callr	r8
    5100:	1021883a 	mov	r16,r2
    5104:	00bfffc4 	movi	r2,-1
    5108:	80800226 	beq	r16,r2,5114 <_fflush_r+0x1dc>
    510c:	92000a17 	ldw	r8,40(r18)
    5110:	003fa406 	br	4fa4 <_fflush_r+0x6c>
    5114:	98c00017 	ldw	r3,0(r19)
    5118:	00800744 	movi	r2,29
    511c:	18bfde26 	beq	r3,r2,5098 <_fflush_r+0x160>
    5120:	9080030b 	ldhu	r2,12(r18)
    5124:	8007883a 	mov	r3,r16
    5128:	10801014 	ori	r2,r2,64
    512c:	9080030d 	sth	r2,12(r18)
    5130:	003fcf06 	br	5070 <_fflush_r+0x138>

00005134 <fflush>:
    5134:	01400034 	movhi	r5,0
    5138:	2953ce04 	addi	r5,r5,20280
    513c:	2007883a 	mov	r3,r4
    5140:	20000526 	beq	r4,zero,5158 <fflush+0x24>
    5144:	00800074 	movhi	r2,1
    5148:	10bd2d04 	addi	r2,r2,-2892
    514c:	11000017 	ldw	r4,0(r2)
    5150:	180b883a 	mov	r5,r3
    5154:	0004f381 	jmpi	4f38 <_fflush_r>
    5158:	00800074 	movhi	r2,1
    515c:	10bd2e04 	addi	r2,r2,-2888
    5160:	11000017 	ldw	r4,0(r2)
    5164:	0005d381 	jmpi	5d38 <_fwalk_reent>

00005168 <std>:
    5168:	00800034 	movhi	r2,0
    516c:	109ebf04 	addi	r2,r2,31484
    5170:	20800b15 	stw	r2,44(r4)
    5174:	00800034 	movhi	r2,0
    5178:	109efa04 	addi	r2,r2,31720
    517c:	20800815 	stw	r2,32(r4)
    5180:	00c00034 	movhi	r3,0
    5184:	18dedb04 	addi	r3,r3,31596
    5188:	00800034 	movhi	r2,0
    518c:	109ec104 	addi	r2,r2,31492
    5190:	2140030d 	sth	r5,12(r4)
    5194:	2180038d 	sth	r6,14(r4)
    5198:	20c00915 	stw	r3,36(r4)
    519c:	20800a15 	stw	r2,40(r4)
    51a0:	20000015 	stw	zero,0(r4)
    51a4:	20000115 	stw	zero,4(r4)
    51a8:	20000215 	stw	zero,8(r4)
    51ac:	20000415 	stw	zero,16(r4)
    51b0:	20000515 	stw	zero,20(r4)
    51b4:	20000615 	stw	zero,24(r4)
    51b8:	21000715 	stw	r4,28(r4)
    51bc:	f800283a 	ret

000051c0 <__sfp_lock_acquire>:
    51c0:	f800283a 	ret

000051c4 <__sfp_lock_release>:
    51c4:	f800283a 	ret

000051c8 <__sinit_lock_acquire>:
    51c8:	f800283a 	ret

000051cc <__sinit_lock_release>:
    51cc:	f800283a 	ret

000051d0 <__sinit>:
    51d0:	20800e17 	ldw	r2,56(r4)
    51d4:	defffd04 	addi	sp,sp,-12
    51d8:	dc400115 	stw	r17,4(sp)
    51dc:	dc000015 	stw	r16,0(sp)
    51e0:	dfc00215 	stw	ra,8(sp)
    51e4:	04400044 	movi	r17,1
    51e8:	01400104 	movi	r5,4
    51ec:	000d883a 	mov	r6,zero
    51f0:	2021883a 	mov	r16,r4
    51f4:	2200bb04 	addi	r8,r4,748
    51f8:	200f883a 	mov	r7,r4
    51fc:	10000526 	beq	r2,zero,5214 <__sinit+0x44>
    5200:	dfc00217 	ldw	ra,8(sp)
    5204:	dc400117 	ldw	r17,4(sp)
    5208:	dc000017 	ldw	r16,0(sp)
    520c:	dec00304 	addi	sp,sp,12
    5210:	f800283a 	ret
    5214:	21000117 	ldw	r4,4(r4)
    5218:	00800034 	movhi	r2,0
    521c:	1094ad04 	addi	r2,r2,21172
    5220:	00c000c4 	movi	r3,3
    5224:	80800f15 	stw	r2,60(r16)
    5228:	80c0b915 	stw	r3,740(r16)
    522c:	8200ba15 	stw	r8,744(r16)
    5230:	84400e15 	stw	r17,56(r16)
    5234:	8000b815 	stw	zero,736(r16)
    5238:	00051680 	call	5168 <std>
    523c:	81000217 	ldw	r4,8(r16)
    5240:	880d883a 	mov	r6,r17
    5244:	800f883a 	mov	r7,r16
    5248:	01400284 	movi	r5,10
    524c:	00051680 	call	5168 <std>
    5250:	81000317 	ldw	r4,12(r16)
    5254:	800f883a 	mov	r7,r16
    5258:	01400484 	movi	r5,18
    525c:	01800084 	movi	r6,2
    5260:	dfc00217 	ldw	ra,8(sp)
    5264:	dc400117 	ldw	r17,4(sp)
    5268:	dc000017 	ldw	r16,0(sp)
    526c:	dec00304 	addi	sp,sp,12
    5270:	00051681 	jmpi	5168 <std>

00005274 <__fp_lock>:
    5274:	0005883a 	mov	r2,zero
    5278:	f800283a 	ret

0000527c <__fp_unlock>:
    527c:	0005883a 	mov	r2,zero
    5280:	f800283a 	ret

00005284 <__fp_unlock_all>:
    5284:	00800074 	movhi	r2,1
    5288:	10bd2d04 	addi	r2,r2,-2892
    528c:	11000017 	ldw	r4,0(r2)
    5290:	01400034 	movhi	r5,0
    5294:	29549f04 	addi	r5,r5,21116
    5298:	0005e001 	jmpi	5e00 <_fwalk>

0000529c <__fp_lock_all>:
    529c:	00800074 	movhi	r2,1
    52a0:	10bd2d04 	addi	r2,r2,-2892
    52a4:	11000017 	ldw	r4,0(r2)
    52a8:	01400034 	movhi	r5,0
    52ac:	29549d04 	addi	r5,r5,21108
    52b0:	0005e001 	jmpi	5e00 <_fwalk>

000052b4 <_cleanup_r>:
    52b4:	01400034 	movhi	r5,0
    52b8:	295ff104 	addi	r5,r5,32708
    52bc:	0005e001 	jmpi	5e00 <_fwalk>

000052c0 <_cleanup>:
    52c0:	00800074 	movhi	r2,1
    52c4:	10bd2e04 	addi	r2,r2,-2888
    52c8:	11000017 	ldw	r4,0(r2)
    52cc:	00052b41 	jmpi	52b4 <_cleanup_r>

000052d0 <__sfmoreglue>:
    52d0:	defffc04 	addi	sp,sp,-16
    52d4:	dc000015 	stw	r16,0(sp)
    52d8:	2821883a 	mov	r16,r5
    52dc:	dc400115 	stw	r17,4(sp)
    52e0:	01401704 	movi	r5,92
    52e4:	2023883a 	mov	r17,r4
    52e8:	8009883a 	mov	r4,r16
    52ec:	dfc00315 	stw	ra,12(sp)
    52f0:	dcc00215 	stw	r19,8(sp)
    52f4:	0000d140 	call	d14 <__mulsi3>
    52f8:	11400304 	addi	r5,r2,12
    52fc:	8809883a 	mov	r4,r17
    5300:	1027883a 	mov	r19,r2
    5304:	0000d740 	call	d74 <_malloc_r>
    5308:	10c00304 	addi	r3,r2,12
    530c:	1023883a 	mov	r17,r2
    5310:	1809883a 	mov	r4,r3
    5314:	980d883a 	mov	r6,r19
    5318:	000b883a 	mov	r5,zero
    531c:	10000b26 	beq	r2,zero,534c <__sfmoreglue+0x7c>
    5320:	14000115 	stw	r16,4(r2)
    5324:	10c00215 	stw	r3,8(r2)
    5328:	10000015 	stw	zero,0(r2)
    532c:	00063740 	call	6374 <memset>
    5330:	8805883a 	mov	r2,r17
    5334:	dfc00317 	ldw	ra,12(sp)
    5338:	dcc00217 	ldw	r19,8(sp)
    533c:	dc400117 	ldw	r17,4(sp)
    5340:	dc000017 	ldw	r16,0(sp)
    5344:	dec00404 	addi	sp,sp,16
    5348:	f800283a 	ret
    534c:	0023883a 	mov	r17,zero
    5350:	8805883a 	mov	r2,r17
    5354:	dfc00317 	ldw	ra,12(sp)
    5358:	dcc00217 	ldw	r19,8(sp)
    535c:	dc400117 	ldw	r17,4(sp)
    5360:	dc000017 	ldw	r16,0(sp)
    5364:	dec00404 	addi	sp,sp,16
    5368:	f800283a 	ret

0000536c <__sfp>:
    536c:	defffd04 	addi	sp,sp,-12
    5370:	00800074 	movhi	r2,1
    5374:	10bd2e04 	addi	r2,r2,-2888
    5378:	dc000015 	stw	r16,0(sp)
    537c:	14000017 	ldw	r16,0(r2)
    5380:	dc400115 	stw	r17,4(sp)
    5384:	dfc00215 	stw	ra,8(sp)
    5388:	80800e17 	ldw	r2,56(r16)
    538c:	2023883a 	mov	r17,r4
    5390:	10002626 	beq	r2,zero,542c <__sfp+0xc0>
    5394:	8400b804 	addi	r16,r16,736
    5398:	80800117 	ldw	r2,4(r16)
    539c:	81000217 	ldw	r4,8(r16)
    53a0:	10ffffc4 	addi	r3,r2,-1
    53a4:	18000916 	blt	r3,zero,53cc <__sfp+0x60>
    53a8:	2080030f 	ldh	r2,12(r4)
    53ac:	10000b26 	beq	r2,zero,53dc <__sfp+0x70>
    53b0:	017fffc4 	movi	r5,-1
    53b4:	00000206 	br	53c0 <__sfp+0x54>
    53b8:	2080030f 	ldh	r2,12(r4)
    53bc:	10000726 	beq	r2,zero,53dc <__sfp+0x70>
    53c0:	18ffffc4 	addi	r3,r3,-1
    53c4:	21001704 	addi	r4,r4,92
    53c8:	197ffb1e 	bne	r3,r5,53b8 <__sfp+0x4c>
    53cc:	80800017 	ldw	r2,0(r16)
    53d0:	10001926 	beq	r2,zero,5438 <__sfp+0xcc>
    53d4:	1021883a 	mov	r16,r2
    53d8:	003fef06 	br	5398 <__sfp+0x2c>
    53dc:	00bfffc4 	movi	r2,-1
    53e0:	00c00044 	movi	r3,1
    53e4:	2080038d 	sth	r2,14(r4)
    53e8:	20c0030d 	sth	r3,12(r4)
    53ec:	20000015 	stw	zero,0(r4)
    53f0:	20000215 	stw	zero,8(r4)
    53f4:	20000115 	stw	zero,4(r4)
    53f8:	20000415 	stw	zero,16(r4)
    53fc:	20000515 	stw	zero,20(r4)
    5400:	20000615 	stw	zero,24(r4)
    5404:	20000c15 	stw	zero,48(r4)
    5408:	20000d15 	stw	zero,52(r4)
    540c:	20001115 	stw	zero,68(r4)
    5410:	20001215 	stw	zero,72(r4)
    5414:	2005883a 	mov	r2,r4
    5418:	dfc00217 	ldw	ra,8(sp)
    541c:	dc400117 	ldw	r17,4(sp)
    5420:	dc000017 	ldw	r16,0(sp)
    5424:	dec00304 	addi	sp,sp,12
    5428:	f800283a 	ret
    542c:	8009883a 	mov	r4,r16
    5430:	00051d00 	call	51d0 <__sinit>
    5434:	003fd706 	br	5394 <__sfp+0x28>
    5438:	8809883a 	mov	r4,r17
    543c:	01400104 	movi	r5,4
    5440:	00052d00 	call	52d0 <__sfmoreglue>
    5444:	80800015 	stw	r2,0(r16)
    5448:	103fe21e 	bne	r2,zero,53d4 <__sfp+0x68>
    544c:	00800304 	movi	r2,12
    5450:	0009883a 	mov	r4,zero
    5454:	88800015 	stw	r2,0(r17)
    5458:	003fee06 	br	5414 <__sfp+0xa8>

0000545c <_malloc_trim_r>:
    545c:	defffb04 	addi	sp,sp,-20
    5460:	dcc00315 	stw	r19,12(sp)
    5464:	04c00074 	movhi	r19,1
    5468:	9cf6a304 	addi	r19,r19,-9588
    546c:	dc800215 	stw	r18,8(sp)
    5470:	dc400115 	stw	r17,4(sp)
    5474:	dc000015 	stw	r16,0(sp)
    5478:	2823883a 	mov	r17,r5
    547c:	2025883a 	mov	r18,r4
    5480:	dfc00415 	stw	ra,16(sp)
    5484:	000ae440 	call	ae44 <__malloc_lock>
    5488:	98800217 	ldw	r2,8(r19)
    548c:	9009883a 	mov	r4,r18
    5490:	000b883a 	mov	r5,zero
    5494:	10c00117 	ldw	r3,4(r2)
    5498:	00bfff04 	movi	r2,-4
    549c:	18a0703a 	and	r16,r3,r2
    54a0:	8463c83a 	sub	r17,r16,r17
    54a4:	8c43fbc4 	addi	r17,r17,4079
    54a8:	8822d33a 	srli	r17,r17,12
    54ac:	0083ffc4 	movi	r2,4095
    54b0:	8c7fffc4 	addi	r17,r17,-1
    54b4:	8822933a 	slli	r17,r17,12
    54b8:	1440060e 	bge	r2,r17,54d4 <_malloc_trim_r+0x78>
    54bc:	00015e00 	call	15e0 <_sbrk_r>
    54c0:	98c00217 	ldw	r3,8(r19)
    54c4:	9009883a 	mov	r4,r18
    54c8:	044bc83a 	sub	r5,zero,r17
    54cc:	80c7883a 	add	r3,r16,r3
    54d0:	10c00926 	beq	r2,r3,54f8 <_malloc_trim_r+0x9c>
    54d4:	000ae640 	call	ae64 <__malloc_unlock>
    54d8:	0005883a 	mov	r2,zero
    54dc:	dfc00417 	ldw	ra,16(sp)
    54e0:	dcc00317 	ldw	r19,12(sp)
    54e4:	dc800217 	ldw	r18,8(sp)
    54e8:	dc400117 	ldw	r17,4(sp)
    54ec:	dc000017 	ldw	r16,0(sp)
    54f0:	dec00504 	addi	sp,sp,20
    54f4:	f800283a 	ret
    54f8:	9009883a 	mov	r4,r18
    54fc:	00015e00 	call	15e0 <_sbrk_r>
    5500:	844dc83a 	sub	r6,r16,r17
    5504:	00ffffc4 	movi	r3,-1
    5508:	9009883a 	mov	r4,r18
    550c:	000b883a 	mov	r5,zero
    5510:	01c00074 	movhi	r7,1
    5514:	39c3e304 	addi	r7,r7,3980
    5518:	31800054 	ori	r6,r6,1
    551c:	10c00926 	beq	r2,r3,5544 <_malloc_trim_r+0xe8>
    5520:	38800017 	ldw	r2,0(r7)
    5524:	98c00217 	ldw	r3,8(r19)
    5528:	9009883a 	mov	r4,r18
    552c:	1445c83a 	sub	r2,r2,r17
    5530:	38800015 	stw	r2,0(r7)
    5534:	19800115 	stw	r6,4(r3)
    5538:	000ae640 	call	ae64 <__malloc_unlock>
    553c:	00800044 	movi	r2,1
    5540:	003fe606 	br	54dc <_malloc_trim_r+0x80>
    5544:	00015e00 	call	15e0 <_sbrk_r>
    5548:	99800217 	ldw	r6,8(r19)
    554c:	100f883a 	mov	r7,r2
    5550:	9009883a 	mov	r4,r18
    5554:	1187c83a 	sub	r3,r2,r6
    5558:	008003c4 	movi	r2,15
    555c:	19400054 	ori	r5,r3,1
    5560:	10ffdc0e 	bge	r2,r3,54d4 <_malloc_trim_r+0x78>
    5564:	00800074 	movhi	r2,1
    5568:	10bd2c04 	addi	r2,r2,-2896
    556c:	10c00017 	ldw	r3,0(r2)
    5570:	00800074 	movhi	r2,1
    5574:	1083e304 	addi	r2,r2,3980
    5578:	31400115 	stw	r5,4(r6)
    557c:	38c7c83a 	sub	r3,r7,r3
    5580:	10c00015 	stw	r3,0(r2)
    5584:	003fd306 	br	54d4 <_malloc_trim_r+0x78>

00005588 <_free_r>:
    5588:	defffd04 	addi	sp,sp,-12
    558c:	dc400115 	stw	r17,4(sp)
    5590:	dc000015 	stw	r16,0(sp)
    5594:	dfc00215 	stw	ra,8(sp)
    5598:	2821883a 	mov	r16,r5
    559c:	2023883a 	mov	r17,r4
    55a0:	28005a26 	beq	r5,zero,570c <_free_r+0x184>
    55a4:	000ae440 	call	ae44 <__malloc_lock>
    55a8:	823ffe04 	addi	r8,r16,-8
    55ac:	41400117 	ldw	r5,4(r8)
    55b0:	00bfff84 	movi	r2,-2
    55b4:	02800074 	movhi	r10,1
    55b8:	52b6a304 	addi	r10,r10,-9588
    55bc:	288e703a 	and	r7,r5,r2
    55c0:	41cd883a 	add	r6,r8,r7
    55c4:	30c00117 	ldw	r3,4(r6)
    55c8:	51000217 	ldw	r4,8(r10)
    55cc:	00bfff04 	movi	r2,-4
    55d0:	1892703a 	and	r9,r3,r2
    55d4:	5017883a 	mov	r11,r10
    55d8:	31006726 	beq	r6,r4,5778 <_free_r+0x1f0>
    55dc:	2880004c 	andi	r2,r5,1
    55e0:	1005003a 	cmpeq	r2,r2,zero
    55e4:	32400115 	stw	r9,4(r6)
    55e8:	10001a1e 	bne	r2,zero,5654 <_free_r+0xcc>
    55ec:	000b883a 	mov	r5,zero
    55f0:	3247883a 	add	r3,r6,r9
    55f4:	18800117 	ldw	r2,4(r3)
    55f8:	1080004c 	andi	r2,r2,1
    55fc:	1000231e 	bne	r2,zero,568c <_free_r+0x104>
    5600:	280ac03a 	cmpne	r5,r5,zero
    5604:	3a4f883a 	add	r7,r7,r9
    5608:	2800451e 	bne	r5,zero,5720 <_free_r+0x198>
    560c:	31000217 	ldw	r4,8(r6)
    5610:	00800074 	movhi	r2,1
    5614:	10b6a504 	addi	r2,r2,-9580
    5618:	20807b26 	beq	r4,r2,5808 <_free_r+0x280>
    561c:	30800317 	ldw	r2,12(r6)
    5620:	3a07883a 	add	r3,r7,r8
    5624:	19c00015 	stw	r7,0(r3)
    5628:	11000215 	stw	r4,8(r2)
    562c:	20800315 	stw	r2,12(r4)
    5630:	38800054 	ori	r2,r7,1
    5634:	40800115 	stw	r2,4(r8)
    5638:	28001a26 	beq	r5,zero,56a4 <_free_r+0x11c>
    563c:	8809883a 	mov	r4,r17
    5640:	dfc00217 	ldw	ra,8(sp)
    5644:	dc400117 	ldw	r17,4(sp)
    5648:	dc000017 	ldw	r16,0(sp)
    564c:	dec00304 	addi	sp,sp,12
    5650:	000ae641 	jmpi	ae64 <__malloc_unlock>
    5654:	80bffe17 	ldw	r2,-8(r16)
    5658:	50c00204 	addi	r3,r10,8
    565c:	4091c83a 	sub	r8,r8,r2
    5660:	41000217 	ldw	r4,8(r8)
    5664:	388f883a 	add	r7,r7,r2
    5668:	20c06126 	beq	r4,r3,57f0 <_free_r+0x268>
    566c:	40800317 	ldw	r2,12(r8)
    5670:	3247883a 	add	r3,r6,r9
    5674:	000b883a 	mov	r5,zero
    5678:	11000215 	stw	r4,8(r2)
    567c:	20800315 	stw	r2,12(r4)
    5680:	18800117 	ldw	r2,4(r3)
    5684:	1080004c 	andi	r2,r2,1
    5688:	103fdd26 	beq	r2,zero,5600 <_free_r+0x78>
    568c:	38800054 	ori	r2,r7,1
    5690:	3a07883a 	add	r3,r7,r8
    5694:	280ac03a 	cmpne	r5,r5,zero
    5698:	40800115 	stw	r2,4(r8)
    569c:	19c00015 	stw	r7,0(r3)
    56a0:	283fe61e 	bne	r5,zero,563c <_free_r+0xb4>
    56a4:	00807fc4 	movi	r2,511
    56a8:	11c01f2e 	bgeu	r2,r7,5728 <_free_r+0x1a0>
    56ac:	3806d27a 	srli	r3,r7,9
    56b0:	1800481e 	bne	r3,zero,57d4 <_free_r+0x24c>
    56b4:	3804d0fa 	srli	r2,r7,3
    56b8:	100690fa 	slli	r3,r2,3
    56bc:	1acd883a 	add	r6,r3,r11
    56c0:	31400217 	ldw	r5,8(r6)
    56c4:	31405926 	beq	r6,r5,582c <_free_r+0x2a4>
    56c8:	28800117 	ldw	r2,4(r5)
    56cc:	00ffff04 	movi	r3,-4
    56d0:	10c4703a 	and	r2,r2,r3
    56d4:	3880022e 	bgeu	r7,r2,56e0 <_free_r+0x158>
    56d8:	29400217 	ldw	r5,8(r5)
    56dc:	317ffa1e 	bne	r6,r5,56c8 <_free_r+0x140>
    56e0:	29800317 	ldw	r6,12(r5)
    56e4:	41800315 	stw	r6,12(r8)
    56e8:	41400215 	stw	r5,8(r8)
    56ec:	8809883a 	mov	r4,r17
    56f0:	2a000315 	stw	r8,12(r5)
    56f4:	32000215 	stw	r8,8(r6)
    56f8:	dfc00217 	ldw	ra,8(sp)
    56fc:	dc400117 	ldw	r17,4(sp)
    5700:	dc000017 	ldw	r16,0(sp)
    5704:	dec00304 	addi	sp,sp,12
    5708:	000ae641 	jmpi	ae64 <__malloc_unlock>
    570c:	dfc00217 	ldw	ra,8(sp)
    5710:	dc400117 	ldw	r17,4(sp)
    5714:	dc000017 	ldw	r16,0(sp)
    5718:	dec00304 	addi	sp,sp,12
    571c:	f800283a 	ret
    5720:	31000217 	ldw	r4,8(r6)
    5724:	003fbd06 	br	561c <_free_r+0x94>
    5728:	3806d0fa 	srli	r3,r7,3
    572c:	00800044 	movi	r2,1
    5730:	51400117 	ldw	r5,4(r10)
    5734:	180890fa 	slli	r4,r3,3
    5738:	1807d0ba 	srai	r3,r3,2
    573c:	22c9883a 	add	r4,r4,r11
    5740:	21800217 	ldw	r6,8(r4)
    5744:	10c4983a 	sll	r2,r2,r3
    5748:	41000315 	stw	r4,12(r8)
    574c:	41800215 	stw	r6,8(r8)
    5750:	288ab03a 	or	r5,r5,r2
    5754:	22000215 	stw	r8,8(r4)
    5758:	8809883a 	mov	r4,r17
    575c:	51400115 	stw	r5,4(r10)
    5760:	32000315 	stw	r8,12(r6)
    5764:	dfc00217 	ldw	ra,8(sp)
    5768:	dc400117 	ldw	r17,4(sp)
    576c:	dc000017 	ldw	r16,0(sp)
    5770:	dec00304 	addi	sp,sp,12
    5774:	000ae641 	jmpi	ae64 <__malloc_unlock>
    5778:	2880004c 	andi	r2,r5,1
    577c:	3a4d883a 	add	r6,r7,r9
    5780:	1000071e 	bne	r2,zero,57a0 <_free_r+0x218>
    5784:	80bffe17 	ldw	r2,-8(r16)
    5788:	4091c83a 	sub	r8,r8,r2
    578c:	41000317 	ldw	r4,12(r8)
    5790:	40c00217 	ldw	r3,8(r8)
    5794:	308d883a 	add	r6,r6,r2
    5798:	20c00215 	stw	r3,8(r4)
    579c:	19000315 	stw	r4,12(r3)
    57a0:	00800074 	movhi	r2,1
    57a4:	10bd2b04 	addi	r2,r2,-2900
    57a8:	11000017 	ldw	r4,0(r2)
    57ac:	30c00054 	ori	r3,r6,1
    57b0:	52000215 	stw	r8,8(r10)
    57b4:	40c00115 	stw	r3,4(r8)
    57b8:	313fa036 	bltu	r6,r4,563c <_free_r+0xb4>
    57bc:	00800074 	movhi	r2,1
    57c0:	1083d604 	addi	r2,r2,3928
    57c4:	11400017 	ldw	r5,0(r2)
    57c8:	8809883a 	mov	r4,r17
    57cc:	000545c0 	call	545c <_malloc_trim_r>
    57d0:	003f9a06 	br	563c <_free_r+0xb4>
    57d4:	00800104 	movi	r2,4
    57d8:	10c0072e 	bgeu	r2,r3,57f8 <_free_r+0x270>
    57dc:	00800504 	movi	r2,20
    57e0:	10c01936 	bltu	r2,r3,5848 <_free_r+0x2c0>
    57e4:	188016c4 	addi	r2,r3,91
    57e8:	100690fa 	slli	r3,r2,3
    57ec:	003fb306 	br	56bc <_free_r+0x134>
    57f0:	01400044 	movi	r5,1
    57f4:	003f7e06 	br	55f0 <_free_r+0x68>
    57f8:	3804d1ba 	srli	r2,r7,6
    57fc:	10800e04 	addi	r2,r2,56
    5800:	100690fa 	slli	r3,r2,3
    5804:	003fad06 	br	56bc <_free_r+0x134>
    5808:	22000315 	stw	r8,12(r4)
    580c:	22000215 	stw	r8,8(r4)
    5810:	3a05883a 	add	r2,r7,r8
    5814:	38c00054 	ori	r3,r7,1
    5818:	11c00015 	stw	r7,0(r2)
    581c:	41000215 	stw	r4,8(r8)
    5820:	40c00115 	stw	r3,4(r8)
    5824:	41000315 	stw	r4,12(r8)
    5828:	003f8406 	br	563c <_free_r+0xb4>
    582c:	1005d0ba 	srai	r2,r2,2
    5830:	00c00044 	movi	r3,1
    5834:	51000117 	ldw	r4,4(r10)
    5838:	1886983a 	sll	r3,r3,r2
    583c:	20c8b03a 	or	r4,r4,r3
    5840:	51000115 	stw	r4,4(r10)
    5844:	003fa706 	br	56e4 <_free_r+0x15c>
    5848:	00801504 	movi	r2,84
    584c:	10c00436 	bltu	r2,r3,5860 <_free_r+0x2d8>
    5850:	3804d33a 	srli	r2,r7,12
    5854:	10801b84 	addi	r2,r2,110
    5858:	100690fa 	slli	r3,r2,3
    585c:	003f9706 	br	56bc <_free_r+0x134>
    5860:	00805504 	movi	r2,340
    5864:	10c00436 	bltu	r2,r3,5878 <_free_r+0x2f0>
    5868:	3804d3fa 	srli	r2,r7,15
    586c:	10801dc4 	addi	r2,r2,119
    5870:	100690fa 	slli	r3,r2,3
    5874:	003f9106 	br	56bc <_free_r+0x134>
    5878:	00815504 	movi	r2,1364
    587c:	10c0032e 	bgeu	r2,r3,588c <_free_r+0x304>
    5880:	00801f84 	movi	r2,126
    5884:	00c0fc04 	movi	r3,1008
    5888:	003f8c06 	br	56bc <_free_r+0x134>
    588c:	3804d4ba 	srli	r2,r7,18
    5890:	10801f04 	addi	r2,r2,124
    5894:	100690fa 	slli	r3,r2,3
    5898:	003f8806 	br	56bc <_free_r+0x134>

0000589c <__sfvwrite_r>:
    589c:	30800217 	ldw	r2,8(r6)
    58a0:	defff504 	addi	sp,sp,-44
    58a4:	df000915 	stw	fp,36(sp)
    58a8:	dd800715 	stw	r22,28(sp)
    58ac:	dc800315 	stw	r18,12(sp)
    58b0:	dfc00a15 	stw	ra,40(sp)
    58b4:	ddc00815 	stw	r23,32(sp)
    58b8:	dd400615 	stw	r21,24(sp)
    58bc:	dd000515 	stw	r20,20(sp)
    58c0:	dcc00415 	stw	r19,16(sp)
    58c4:	dc400215 	stw	r17,8(sp)
    58c8:	dc000115 	stw	r16,4(sp)
    58cc:	302d883a 	mov	r22,r6
    58d0:	2039883a 	mov	fp,r4
    58d4:	2825883a 	mov	r18,r5
    58d8:	10001c26 	beq	r2,zero,594c <__sfvwrite_r+0xb0>
    58dc:	29c0030b 	ldhu	r7,12(r5)
    58e0:	3880020c 	andi	r2,r7,8
    58e4:	10002726 	beq	r2,zero,5984 <__sfvwrite_r+0xe8>
    58e8:	28800417 	ldw	r2,16(r5)
    58ec:	10002526 	beq	r2,zero,5984 <__sfvwrite_r+0xe8>
    58f0:	3880008c 	andi	r2,r7,2
    58f4:	b5400017 	ldw	r21,0(r22)
    58f8:	10002826 	beq	r2,zero,599c <__sfvwrite_r+0x100>
    58fc:	0021883a 	mov	r16,zero
    5900:	0023883a 	mov	r17,zero
    5904:	880d883a 	mov	r6,r17
    5908:	e009883a 	mov	r4,fp
    590c:	00810004 	movi	r2,1024
    5910:	80006e26 	beq	r16,zero,5acc <__sfvwrite_r+0x230>
    5914:	800f883a 	mov	r7,r16
    5918:	91400717 	ldw	r5,28(r18)
    591c:	1400012e 	bgeu	r2,r16,5924 <__sfvwrite_r+0x88>
    5920:	100f883a 	mov	r7,r2
    5924:	90c00917 	ldw	r3,36(r18)
    5928:	183ee83a 	callr	r3
    592c:	1007883a 	mov	r3,r2
    5930:	80a1c83a 	sub	r16,r16,r2
    5934:	88a3883a 	add	r17,r17,r2
    5938:	00806d0e 	bge	zero,r2,5af0 <__sfvwrite_r+0x254>
    593c:	b0800217 	ldw	r2,8(r22)
    5940:	10c5c83a 	sub	r2,r2,r3
    5944:	b0800215 	stw	r2,8(r22)
    5948:	103fee1e 	bne	r2,zero,5904 <__sfvwrite_r+0x68>
    594c:	0009883a 	mov	r4,zero
    5950:	2005883a 	mov	r2,r4
    5954:	dfc00a17 	ldw	ra,40(sp)
    5958:	df000917 	ldw	fp,36(sp)
    595c:	ddc00817 	ldw	r23,32(sp)
    5960:	dd800717 	ldw	r22,28(sp)
    5964:	dd400617 	ldw	r21,24(sp)
    5968:	dd000517 	ldw	r20,20(sp)
    596c:	dcc00417 	ldw	r19,16(sp)
    5970:	dc800317 	ldw	r18,12(sp)
    5974:	dc400217 	ldw	r17,8(sp)
    5978:	dc000117 	ldw	r16,4(sp)
    597c:	dec00b04 	addi	sp,sp,44
    5980:	f800283a 	ret
    5984:	00036040 	call	3604 <__swsetup_r>
    5988:	1000e41e 	bne	r2,zero,5d1c <__sfvwrite_r+0x480>
    598c:	91c0030b 	ldhu	r7,12(r18)
    5990:	b5400017 	ldw	r21,0(r22)
    5994:	3880008c 	andi	r2,r7,2
    5998:	103fd81e 	bne	r2,zero,58fc <__sfvwrite_r+0x60>
    599c:	3880004c 	andi	r2,r7,1
    59a0:	1005003a 	cmpeq	r2,r2,zero
    59a4:	10005726 	beq	r2,zero,5b04 <__sfvwrite_r+0x268>
    59a8:	0029883a 	mov	r20,zero
    59ac:	002f883a 	mov	r23,zero
    59b0:	a0004226 	beq	r20,zero,5abc <__sfvwrite_r+0x220>
    59b4:	3880800c 	andi	r2,r7,512
    59b8:	94000217 	ldw	r16,8(r18)
    59bc:	10008b26 	beq	r2,zero,5bec <__sfvwrite_r+0x350>
    59c0:	800d883a 	mov	r6,r16
    59c4:	a400a536 	bltu	r20,r16,5c5c <__sfvwrite_r+0x3c0>
    59c8:	3881200c 	andi	r2,r7,1152
    59cc:	10002726 	beq	r2,zero,5a6c <__sfvwrite_r+0x1d0>
    59d0:	90800517 	ldw	r2,20(r18)
    59d4:	92000417 	ldw	r8,16(r18)
    59d8:	91400017 	ldw	r5,0(r18)
    59dc:	1087883a 	add	r3,r2,r2
    59e0:	1887883a 	add	r3,r3,r2
    59e4:	1808d7fa 	srli	r4,r3,31
    59e8:	2a21c83a 	sub	r16,r5,r8
    59ec:	80800044 	addi	r2,r16,1
    59f0:	20c9883a 	add	r4,r4,r3
    59f4:	2027d07a 	srai	r19,r4,1
    59f8:	a085883a 	add	r2,r20,r2
    59fc:	980d883a 	mov	r6,r19
    5a00:	9880022e 	bgeu	r19,r2,5a0c <__sfvwrite_r+0x170>
    5a04:	1027883a 	mov	r19,r2
    5a08:	100d883a 	mov	r6,r2
    5a0c:	3881000c 	andi	r2,r7,1024
    5a10:	1000b826 	beq	r2,zero,5cf4 <__sfvwrite_r+0x458>
    5a14:	300b883a 	mov	r5,r6
    5a18:	e009883a 	mov	r4,fp
    5a1c:	0000d740 	call	d74 <_malloc_r>
    5a20:	10003126 	beq	r2,zero,5ae8 <__sfvwrite_r+0x24c>
    5a24:	91400417 	ldw	r5,16(r18)
    5a28:	1009883a 	mov	r4,r2
    5a2c:	800d883a 	mov	r6,r16
    5a30:	1023883a 	mov	r17,r2
    5a34:	00061f40 	call	61f4 <memcpy>
    5a38:	90c0030b 	ldhu	r3,12(r18)
    5a3c:	00beffc4 	movi	r2,-1025
    5a40:	1886703a 	and	r3,r3,r2
    5a44:	18c02014 	ori	r3,r3,128
    5a48:	90c0030d 	sth	r3,12(r18)
    5a4c:	9c07c83a 	sub	r3,r19,r16
    5a50:	8c05883a 	add	r2,r17,r16
    5a54:	a00d883a 	mov	r6,r20
    5a58:	a021883a 	mov	r16,r20
    5a5c:	90800015 	stw	r2,0(r18)
    5a60:	90c00215 	stw	r3,8(r18)
    5a64:	94400415 	stw	r17,16(r18)
    5a68:	94c00515 	stw	r19,20(r18)
    5a6c:	91000017 	ldw	r4,0(r18)
    5a70:	b80b883a 	mov	r5,r23
    5a74:	a023883a 	mov	r17,r20
    5a78:	00062940 	call	6294 <memmove>
    5a7c:	90c00217 	ldw	r3,8(r18)
    5a80:	90800017 	ldw	r2,0(r18)
    5a84:	a027883a 	mov	r19,r20
    5a88:	1c07c83a 	sub	r3,r3,r16
    5a8c:	1405883a 	add	r2,r2,r16
    5a90:	90c00215 	stw	r3,8(r18)
    5a94:	a021883a 	mov	r16,r20
    5a98:	90800015 	stw	r2,0(r18)
    5a9c:	b0800217 	ldw	r2,8(r22)
    5aa0:	1405c83a 	sub	r2,r2,r16
    5aa4:	b0800215 	stw	r2,8(r22)
    5aa8:	103fa826 	beq	r2,zero,594c <__sfvwrite_r+0xb0>
    5aac:	a469c83a 	sub	r20,r20,r17
    5ab0:	91c0030b 	ldhu	r7,12(r18)
    5ab4:	bcef883a 	add	r23,r23,r19
    5ab8:	a03fbe1e 	bne	r20,zero,59b4 <__sfvwrite_r+0x118>
    5abc:	adc00017 	ldw	r23,0(r21)
    5ac0:	ad000117 	ldw	r20,4(r21)
    5ac4:	ad400204 	addi	r21,r21,8
    5ac8:	003fb906 	br	59b0 <__sfvwrite_r+0x114>
    5acc:	ac400017 	ldw	r17,0(r21)
    5ad0:	ac000117 	ldw	r16,4(r21)
    5ad4:	ad400204 	addi	r21,r21,8
    5ad8:	003f8a06 	br	5904 <__sfvwrite_r+0x68>
    5adc:	91400417 	ldw	r5,16(r18)
    5ae0:	e009883a 	mov	r4,fp
    5ae4:	00055880 	call	5588 <_free_r>
    5ae8:	00800304 	movi	r2,12
    5aec:	e0800015 	stw	r2,0(fp)
    5af0:	9080030b 	ldhu	r2,12(r18)
    5af4:	013fffc4 	movi	r4,-1
    5af8:	10801014 	ori	r2,r2,64
    5afc:	9080030d 	sth	r2,12(r18)
    5b00:	003f9306 	br	5950 <__sfvwrite_r+0xb4>
    5b04:	0027883a 	mov	r19,zero
    5b08:	002f883a 	mov	r23,zero
    5b0c:	d8000015 	stw	zero,0(sp)
    5b10:	0029883a 	mov	r20,zero
    5b14:	98001e26 	beq	r19,zero,5b90 <__sfvwrite_r+0x2f4>
    5b18:	d8c00017 	ldw	r3,0(sp)
    5b1c:	1804c03a 	cmpne	r2,r3,zero
    5b20:	10005e26 	beq	r2,zero,5c9c <__sfvwrite_r+0x400>
    5b24:	9821883a 	mov	r16,r19
    5b28:	a4c0012e 	bgeu	r20,r19,5b30 <__sfvwrite_r+0x294>
    5b2c:	a021883a 	mov	r16,r20
    5b30:	91000017 	ldw	r4,0(r18)
    5b34:	90800417 	ldw	r2,16(r18)
    5b38:	91800217 	ldw	r6,8(r18)
    5b3c:	91c00517 	ldw	r7,20(r18)
    5b40:	1100022e 	bgeu	r2,r4,5b4c <__sfvwrite_r+0x2b0>
    5b44:	31e3883a 	add	r17,r6,r7
    5b48:	8c001616 	blt	r17,r16,5ba4 <__sfvwrite_r+0x308>
    5b4c:	81c03816 	blt	r16,r7,5c30 <__sfvwrite_r+0x394>
    5b50:	90c00917 	ldw	r3,36(r18)
    5b54:	91400717 	ldw	r5,28(r18)
    5b58:	e009883a 	mov	r4,fp
    5b5c:	b80d883a 	mov	r6,r23
    5b60:	183ee83a 	callr	r3
    5b64:	1023883a 	mov	r17,r2
    5b68:	00bfe10e 	bge	zero,r2,5af0 <__sfvwrite_r+0x254>
    5b6c:	a469c83a 	sub	r20,r20,r17
    5b70:	a0001826 	beq	r20,zero,5bd4 <__sfvwrite_r+0x338>
    5b74:	b0800217 	ldw	r2,8(r22)
    5b78:	1445c83a 	sub	r2,r2,r17
    5b7c:	b0800215 	stw	r2,8(r22)
    5b80:	103f7226 	beq	r2,zero,594c <__sfvwrite_r+0xb0>
    5b84:	9c67c83a 	sub	r19,r19,r17
    5b88:	bc6f883a 	add	r23,r23,r17
    5b8c:	983fe21e 	bne	r19,zero,5b18 <__sfvwrite_r+0x27c>
    5b90:	adc00017 	ldw	r23,0(r21)
    5b94:	acc00117 	ldw	r19,4(r21)
    5b98:	ad400204 	addi	r21,r21,8
    5b9c:	d8000015 	stw	zero,0(sp)
    5ba0:	003fdc06 	br	5b14 <__sfvwrite_r+0x278>
    5ba4:	b80b883a 	mov	r5,r23
    5ba8:	880d883a 	mov	r6,r17
    5bac:	00062940 	call	6294 <memmove>
    5bb0:	90c00017 	ldw	r3,0(r18)
    5bb4:	e009883a 	mov	r4,fp
    5bb8:	900b883a 	mov	r5,r18
    5bbc:	1c47883a 	add	r3,r3,r17
    5bc0:	90c00015 	stw	r3,0(r18)
    5bc4:	0004f380 	call	4f38 <_fflush_r>
    5bc8:	103fc91e 	bne	r2,zero,5af0 <__sfvwrite_r+0x254>
    5bcc:	a469c83a 	sub	r20,r20,r17
    5bd0:	a03fe81e 	bne	r20,zero,5b74 <__sfvwrite_r+0x2d8>
    5bd4:	e009883a 	mov	r4,fp
    5bd8:	900b883a 	mov	r5,r18
    5bdc:	0004f380 	call	4f38 <_fflush_r>
    5be0:	103fc31e 	bne	r2,zero,5af0 <__sfvwrite_r+0x254>
    5be4:	d8000015 	stw	zero,0(sp)
    5be8:	003fe206 	br	5b74 <__sfvwrite_r+0x2d8>
    5bec:	91000017 	ldw	r4,0(r18)
    5bf0:	90800417 	ldw	r2,16(r18)
    5bf4:	1100022e 	bgeu	r2,r4,5c00 <__sfvwrite_r+0x364>
    5bf8:	8023883a 	mov	r17,r16
    5bfc:	85003136 	bltu	r16,r20,5cc4 <__sfvwrite_r+0x428>
    5c00:	91c00517 	ldw	r7,20(r18)
    5c04:	a1c01836 	bltu	r20,r7,5c68 <__sfvwrite_r+0x3cc>
    5c08:	90c00917 	ldw	r3,36(r18)
    5c0c:	91400717 	ldw	r5,28(r18)
    5c10:	e009883a 	mov	r4,fp
    5c14:	b80d883a 	mov	r6,r23
    5c18:	183ee83a 	callr	r3
    5c1c:	1021883a 	mov	r16,r2
    5c20:	00bfb30e 	bge	zero,r2,5af0 <__sfvwrite_r+0x254>
    5c24:	1023883a 	mov	r17,r2
    5c28:	1027883a 	mov	r19,r2
    5c2c:	003f9b06 	br	5a9c <__sfvwrite_r+0x200>
    5c30:	b80b883a 	mov	r5,r23
    5c34:	800d883a 	mov	r6,r16
    5c38:	00062940 	call	6294 <memmove>
    5c3c:	90c00217 	ldw	r3,8(r18)
    5c40:	90800017 	ldw	r2,0(r18)
    5c44:	8023883a 	mov	r17,r16
    5c48:	1c07c83a 	sub	r3,r3,r16
    5c4c:	1405883a 	add	r2,r2,r16
    5c50:	90c00215 	stw	r3,8(r18)
    5c54:	90800015 	stw	r2,0(r18)
    5c58:	003fc406 	br	5b6c <__sfvwrite_r+0x2d0>
    5c5c:	a00d883a 	mov	r6,r20
    5c60:	a021883a 	mov	r16,r20
    5c64:	003f8106 	br	5a6c <__sfvwrite_r+0x1d0>
    5c68:	b80b883a 	mov	r5,r23
    5c6c:	a00d883a 	mov	r6,r20
    5c70:	00062940 	call	6294 <memmove>
    5c74:	90c00217 	ldw	r3,8(r18)
    5c78:	90800017 	ldw	r2,0(r18)
    5c7c:	a021883a 	mov	r16,r20
    5c80:	1d07c83a 	sub	r3,r3,r20
    5c84:	1505883a 	add	r2,r2,r20
    5c88:	a023883a 	mov	r17,r20
    5c8c:	a027883a 	mov	r19,r20
    5c90:	90c00215 	stw	r3,8(r18)
    5c94:	90800015 	stw	r2,0(r18)
    5c98:	003f8006 	br	5a9c <__sfvwrite_r+0x200>
    5c9c:	b809883a 	mov	r4,r23
    5ca0:	01400284 	movi	r5,10
    5ca4:	980d883a 	mov	r6,r19
    5ca8:	00061100 	call	6110 <memchr>
    5cac:	10001726 	beq	r2,zero,5d0c <__sfvwrite_r+0x470>
    5cb0:	15c5c83a 	sub	r2,r2,r23
    5cb4:	15000044 	addi	r20,r2,1
    5cb8:	00800044 	movi	r2,1
    5cbc:	d8800015 	stw	r2,0(sp)
    5cc0:	003f9806 	br	5b24 <__sfvwrite_r+0x288>
    5cc4:	b80b883a 	mov	r5,r23
    5cc8:	800d883a 	mov	r6,r16
    5ccc:	00062940 	call	6294 <memmove>
    5cd0:	90c00017 	ldw	r3,0(r18)
    5cd4:	e009883a 	mov	r4,fp
    5cd8:	900b883a 	mov	r5,r18
    5cdc:	1c07883a 	add	r3,r3,r16
    5ce0:	90c00015 	stw	r3,0(r18)
    5ce4:	8027883a 	mov	r19,r16
    5ce8:	0004f380 	call	4f38 <_fflush_r>
    5cec:	103f6b26 	beq	r2,zero,5a9c <__sfvwrite_r+0x200>
    5cf0:	003f7f06 	br	5af0 <__sfvwrite_r+0x254>
    5cf4:	400b883a 	mov	r5,r8
    5cf8:	e009883a 	mov	r4,fp
    5cfc:	00074980 	call	7498 <_realloc_r>
    5d00:	103f7626 	beq	r2,zero,5adc <__sfvwrite_r+0x240>
    5d04:	1023883a 	mov	r17,r2
    5d08:	003f5006 	br	5a4c <__sfvwrite_r+0x1b0>
    5d0c:	00c00044 	movi	r3,1
    5d10:	9d000044 	addi	r20,r19,1
    5d14:	d8c00015 	stw	r3,0(sp)
    5d18:	003f8206 	br	5b24 <__sfvwrite_r+0x288>
    5d1c:	9080030b 	ldhu	r2,12(r18)
    5d20:	00c00244 	movi	r3,9
    5d24:	013fffc4 	movi	r4,-1
    5d28:	10801014 	ori	r2,r2,64
    5d2c:	9080030d 	sth	r2,12(r18)
    5d30:	e0c00015 	stw	r3,0(fp)
    5d34:	003f0606 	br	5950 <__sfvwrite_r+0xb4>

00005d38 <_fwalk_reent>:
    5d38:	defff704 	addi	sp,sp,-36
    5d3c:	dcc00315 	stw	r19,12(sp)
    5d40:	24c0b804 	addi	r19,r4,736
    5d44:	dd800615 	stw	r22,24(sp)
    5d48:	dd400515 	stw	r21,20(sp)
    5d4c:	dfc00815 	stw	ra,32(sp)
    5d50:	ddc00715 	stw	r23,28(sp)
    5d54:	dd000415 	stw	r20,16(sp)
    5d58:	dc800215 	stw	r18,8(sp)
    5d5c:	dc400115 	stw	r17,4(sp)
    5d60:	dc000015 	stw	r16,0(sp)
    5d64:	202b883a 	mov	r21,r4
    5d68:	282d883a 	mov	r22,r5
    5d6c:	00051c00 	call	51c0 <__sfp_lock_acquire>
    5d70:	98002126 	beq	r19,zero,5df8 <_fwalk_reent+0xc0>
    5d74:	002f883a 	mov	r23,zero
    5d78:	9c800117 	ldw	r18,4(r19)
    5d7c:	9c000217 	ldw	r16,8(r19)
    5d80:	90bfffc4 	addi	r2,r18,-1
    5d84:	10000d16 	blt	r2,zero,5dbc <_fwalk_reent+0x84>
    5d88:	0023883a 	mov	r17,zero
    5d8c:	053fffc4 	movi	r20,-1
    5d90:	8080030f 	ldh	r2,12(r16)
    5d94:	8c400044 	addi	r17,r17,1
    5d98:	10000626 	beq	r2,zero,5db4 <_fwalk_reent+0x7c>
    5d9c:	8080038f 	ldh	r2,14(r16)
    5da0:	800b883a 	mov	r5,r16
    5da4:	a809883a 	mov	r4,r21
    5da8:	15000226 	beq	r2,r20,5db4 <_fwalk_reent+0x7c>
    5dac:	b03ee83a 	callr	r22
    5db0:	b8aeb03a 	or	r23,r23,r2
    5db4:	84001704 	addi	r16,r16,92
    5db8:	947ff51e 	bne	r18,r17,5d90 <_fwalk_reent+0x58>
    5dbc:	9cc00017 	ldw	r19,0(r19)
    5dc0:	983fed1e 	bne	r19,zero,5d78 <_fwalk_reent+0x40>
    5dc4:	00051c40 	call	51c4 <__sfp_lock_release>
    5dc8:	b805883a 	mov	r2,r23
    5dcc:	dfc00817 	ldw	ra,32(sp)
    5dd0:	ddc00717 	ldw	r23,28(sp)
    5dd4:	dd800617 	ldw	r22,24(sp)
    5dd8:	dd400517 	ldw	r21,20(sp)
    5ddc:	dd000417 	ldw	r20,16(sp)
    5de0:	dcc00317 	ldw	r19,12(sp)
    5de4:	dc800217 	ldw	r18,8(sp)
    5de8:	dc400117 	ldw	r17,4(sp)
    5dec:	dc000017 	ldw	r16,0(sp)
    5df0:	dec00904 	addi	sp,sp,36
    5df4:	f800283a 	ret
    5df8:	002f883a 	mov	r23,zero
    5dfc:	003ff106 	br	5dc4 <_fwalk_reent+0x8c>

00005e00 <_fwalk>:
    5e00:	defff804 	addi	sp,sp,-32
    5e04:	dcc00315 	stw	r19,12(sp)
    5e08:	24c0b804 	addi	r19,r4,736
    5e0c:	dd400515 	stw	r21,20(sp)
    5e10:	dfc00715 	stw	ra,28(sp)
    5e14:	dd800615 	stw	r22,24(sp)
    5e18:	dd000415 	stw	r20,16(sp)
    5e1c:	dc800215 	stw	r18,8(sp)
    5e20:	dc400115 	stw	r17,4(sp)
    5e24:	dc000015 	stw	r16,0(sp)
    5e28:	282b883a 	mov	r21,r5
    5e2c:	00051c00 	call	51c0 <__sfp_lock_acquire>
    5e30:	98001f26 	beq	r19,zero,5eb0 <_fwalk+0xb0>
    5e34:	002d883a 	mov	r22,zero
    5e38:	9c800117 	ldw	r18,4(r19)
    5e3c:	9c000217 	ldw	r16,8(r19)
    5e40:	90bfffc4 	addi	r2,r18,-1
    5e44:	10000c16 	blt	r2,zero,5e78 <_fwalk+0x78>
    5e48:	0023883a 	mov	r17,zero
    5e4c:	053fffc4 	movi	r20,-1
    5e50:	8080030f 	ldh	r2,12(r16)
    5e54:	8c400044 	addi	r17,r17,1
    5e58:	10000526 	beq	r2,zero,5e70 <_fwalk+0x70>
    5e5c:	8080038f 	ldh	r2,14(r16)
    5e60:	8009883a 	mov	r4,r16
    5e64:	15000226 	beq	r2,r20,5e70 <_fwalk+0x70>
    5e68:	a83ee83a 	callr	r21
    5e6c:	b0acb03a 	or	r22,r22,r2
    5e70:	84001704 	addi	r16,r16,92
    5e74:	947ff61e 	bne	r18,r17,5e50 <_fwalk+0x50>
    5e78:	9cc00017 	ldw	r19,0(r19)
    5e7c:	983fee1e 	bne	r19,zero,5e38 <_fwalk+0x38>
    5e80:	00051c40 	call	51c4 <__sfp_lock_release>
    5e84:	b005883a 	mov	r2,r22
    5e88:	dfc00717 	ldw	ra,28(sp)
    5e8c:	dd800617 	ldw	r22,24(sp)
    5e90:	dd400517 	ldw	r21,20(sp)
    5e94:	dd000417 	ldw	r20,16(sp)
    5e98:	dcc00317 	ldw	r19,12(sp)
    5e9c:	dc800217 	ldw	r18,8(sp)
    5ea0:	dc400117 	ldw	r17,4(sp)
    5ea4:	dc000017 	ldw	r16,0(sp)
    5ea8:	dec00804 	addi	sp,sp,32
    5eac:	f800283a 	ret
    5eb0:	002d883a 	mov	r22,zero
    5eb4:	003ff206 	br	5e80 <_fwalk+0x80>

00005eb8 <__locale_charset>:
    5eb8:	d0a00617 	ldw	r2,-32744(gp)
    5ebc:	f800283a 	ret

00005ec0 <_localeconv_r>:
    5ec0:	00800074 	movhi	r2,1
    5ec4:	10b5fe04 	addi	r2,r2,-10248
    5ec8:	f800283a 	ret

00005ecc <localeconv>:
    5ecc:	00800074 	movhi	r2,1
    5ed0:	10bd2d04 	addi	r2,r2,-2892
    5ed4:	11000017 	ldw	r4,0(r2)
    5ed8:	0005ec01 	jmpi	5ec0 <_localeconv_r>

00005edc <_setlocale_r>:
    5edc:	defffc04 	addi	sp,sp,-16
    5ee0:	00c00074 	movhi	r3,1
    5ee4:	18f5f904 	addi	r3,r3,-10268
    5ee8:	dc800215 	stw	r18,8(sp)
    5eec:	dc400115 	stw	r17,4(sp)
    5ef0:	dc000015 	stw	r16,0(sp)
    5ef4:	2023883a 	mov	r17,r4
    5ef8:	2825883a 	mov	r18,r5
    5efc:	dfc00315 	stw	ra,12(sp)
    5f00:	3021883a 	mov	r16,r6
    5f04:	3009883a 	mov	r4,r6
    5f08:	180b883a 	mov	r5,r3
    5f0c:	30000926 	beq	r6,zero,5f34 <_setlocale_r+0x58>
    5f10:	0007c480 	call	7c48 <strcmp>
    5f14:	8009883a 	mov	r4,r16
    5f18:	01400074 	movhi	r5,1
    5f1c:	2975e404 	addi	r5,r5,-10352
    5f20:	10000b1e 	bne	r2,zero,5f50 <_setlocale_r+0x74>
    5f24:	8c000d15 	stw	r16,52(r17)
    5f28:	8c800c15 	stw	r18,48(r17)
    5f2c:	00c00074 	movhi	r3,1
    5f30:	18f5f904 	addi	r3,r3,-10268
    5f34:	1805883a 	mov	r2,r3
    5f38:	dfc00317 	ldw	ra,12(sp)
    5f3c:	dc800217 	ldw	r18,8(sp)
    5f40:	dc400117 	ldw	r17,4(sp)
    5f44:	dc000017 	ldw	r16,0(sp)
    5f48:	dec00404 	addi	sp,sp,16
    5f4c:	f800283a 	ret
    5f50:	0007c480 	call	7c48 <strcmp>
    5f54:	0007883a 	mov	r3,zero
    5f58:	103ff226 	beq	r2,zero,5f24 <_setlocale_r+0x48>
    5f5c:	003ff506 	br	5f34 <_setlocale_r+0x58>

00005f60 <setlocale>:
    5f60:	01800074 	movhi	r6,1
    5f64:	31bd2d04 	addi	r6,r6,-2892
    5f68:	2007883a 	mov	r3,r4
    5f6c:	31000017 	ldw	r4,0(r6)
    5f70:	280d883a 	mov	r6,r5
    5f74:	180b883a 	mov	r5,r3
    5f78:	0005edc1 	jmpi	5edc <_setlocale_r>

00005f7c <__smakebuf_r>:
    5f7c:	2880030b 	ldhu	r2,12(r5)
    5f80:	deffed04 	addi	sp,sp,-76
    5f84:	dc401015 	stw	r17,64(sp)
    5f88:	1080008c 	andi	r2,r2,2
    5f8c:	dc000f15 	stw	r16,60(sp)
    5f90:	dfc01215 	stw	ra,72(sp)
    5f94:	dc801115 	stw	r18,68(sp)
    5f98:	2821883a 	mov	r16,r5
    5f9c:	2023883a 	mov	r17,r4
    5fa0:	10000b26 	beq	r2,zero,5fd0 <__smakebuf_r+0x54>
    5fa4:	28c010c4 	addi	r3,r5,67
    5fa8:	00800044 	movi	r2,1
    5fac:	28800515 	stw	r2,20(r5)
    5fb0:	28c00415 	stw	r3,16(r5)
    5fb4:	28c00015 	stw	r3,0(r5)
    5fb8:	dfc01217 	ldw	ra,72(sp)
    5fbc:	dc801117 	ldw	r18,68(sp)
    5fc0:	dc401017 	ldw	r17,64(sp)
    5fc4:	dc000f17 	ldw	r16,60(sp)
    5fc8:	dec01304 	addi	sp,sp,76
    5fcc:	f800283a 	ret
    5fd0:	2940038f 	ldh	r5,14(r5)
    5fd4:	28002116 	blt	r5,zero,605c <__smakebuf_r+0xe0>
    5fd8:	d80d883a 	mov	r6,sp
    5fdc:	0007fd80 	call	7fd8 <_fstat_r>
    5fe0:	10001e16 	blt	r2,zero,605c <__smakebuf_r+0xe0>
    5fe4:	d8800117 	ldw	r2,4(sp)
    5fe8:	00e00014 	movui	r3,32768
    5fec:	113c000c 	andi	r4,r2,61440
    5ff0:	20c03126 	beq	r4,r3,60b8 <__smakebuf_r+0x13c>
    5ff4:	8080030b 	ldhu	r2,12(r16)
    5ff8:	00c80004 	movi	r3,8192
    5ffc:	10820014 	ori	r2,r2,2048
    6000:	8080030d 	sth	r2,12(r16)
    6004:	20c01e26 	beq	r4,r3,6080 <__smakebuf_r+0x104>
    6008:	04810004 	movi	r18,1024
    600c:	8809883a 	mov	r4,r17
    6010:	900b883a 	mov	r5,r18
    6014:	0000d740 	call	d74 <_malloc_r>
    6018:	1009883a 	mov	r4,r2
    601c:	10003126 	beq	r2,zero,60e4 <__smakebuf_r+0x168>
    6020:	80c0030b 	ldhu	r3,12(r16)
    6024:	00800034 	movhi	r2,0
    6028:	1094ad04 	addi	r2,r2,21172
    602c:	88800f15 	stw	r2,60(r17)
    6030:	18c02014 	ori	r3,r3,128
    6034:	84800515 	stw	r18,20(r16)
    6038:	80c0030d 	sth	r3,12(r16)
    603c:	81000415 	stw	r4,16(r16)
    6040:	81000015 	stw	r4,0(r16)
    6044:	dfc01217 	ldw	ra,72(sp)
    6048:	dc801117 	ldw	r18,68(sp)
    604c:	dc401017 	ldw	r17,64(sp)
    6050:	dc000f17 	ldw	r16,60(sp)
    6054:	dec01304 	addi	sp,sp,76
    6058:	f800283a 	ret
    605c:	80c0030b 	ldhu	r3,12(r16)
    6060:	1880200c 	andi	r2,r3,128
    6064:	10000426 	beq	r2,zero,6078 <__smakebuf_r+0xfc>
    6068:	04801004 	movi	r18,64
    606c:	18820014 	ori	r2,r3,2048
    6070:	8080030d 	sth	r2,12(r16)
    6074:	003fe506 	br	600c <__smakebuf_r+0x90>
    6078:	04810004 	movi	r18,1024
    607c:	003ffb06 	br	606c <__smakebuf_r+0xf0>
    6080:	8140038f 	ldh	r5,14(r16)
    6084:	8809883a 	mov	r4,r17
    6088:	000804c0 	call	804c <_isatty_r>
    608c:	103fde26 	beq	r2,zero,6008 <__smakebuf_r+0x8c>
    6090:	8080030b 	ldhu	r2,12(r16)
    6094:	80c010c4 	addi	r3,r16,67
    6098:	04810004 	movi	r18,1024
    609c:	10800054 	ori	r2,r2,1
    60a0:	8080030d 	sth	r2,12(r16)
    60a4:	00800044 	movi	r2,1
    60a8:	80c00415 	stw	r3,16(r16)
    60ac:	80800515 	stw	r2,20(r16)
    60b0:	80c00015 	stw	r3,0(r16)
    60b4:	003fd506 	br	600c <__smakebuf_r+0x90>
    60b8:	80c00a17 	ldw	r3,40(r16)
    60bc:	00800034 	movhi	r2,0
    60c0:	109ec104 	addi	r2,r2,31492
    60c4:	18bfcb1e 	bne	r3,r2,5ff4 <__smakebuf_r+0x78>
    60c8:	8080030b 	ldhu	r2,12(r16)
    60cc:	00c10004 	movi	r3,1024
    60d0:	1825883a 	mov	r18,r3
    60d4:	10c4b03a 	or	r2,r2,r3
    60d8:	8080030d 	sth	r2,12(r16)
    60dc:	80c01315 	stw	r3,76(r16)
    60e0:	003fca06 	br	600c <__smakebuf_r+0x90>
    60e4:	8100030b 	ldhu	r4,12(r16)
    60e8:	2080800c 	andi	r2,r4,512
    60ec:	103fb21e 	bne	r2,zero,5fb8 <__smakebuf_r+0x3c>
    60f0:	80c010c4 	addi	r3,r16,67
    60f4:	21000094 	ori	r4,r4,2
    60f8:	00800044 	movi	r2,1
    60fc:	80800515 	stw	r2,20(r16)
    6100:	8100030d 	sth	r4,12(r16)
    6104:	80c00415 	stw	r3,16(r16)
    6108:	80c00015 	stw	r3,0(r16)
    610c:	003faa06 	br	5fb8 <__smakebuf_r+0x3c>

00006110 <memchr>:
    6110:	008000c4 	movi	r2,3
    6114:	29403fcc 	andi	r5,r5,255
    6118:	2007883a 	mov	r3,r4
    611c:	1180022e 	bgeu	r2,r6,6128 <memchr+0x18>
    6120:	2084703a 	and	r2,r4,r2
    6124:	10000b26 	beq	r2,zero,6154 <memchr+0x44>
    6128:	313fffc4 	addi	r4,r6,-1
    612c:	3000051e 	bne	r6,zero,6144 <memchr+0x34>
    6130:	00002c06 	br	61e4 <memchr+0xd4>
    6134:	213fffc4 	addi	r4,r4,-1
    6138:	00bfffc4 	movi	r2,-1
    613c:	18c00044 	addi	r3,r3,1
    6140:	20802826 	beq	r4,r2,61e4 <memchr+0xd4>
    6144:	18800003 	ldbu	r2,0(r3)
    6148:	28bffa1e 	bne	r5,r2,6134 <memchr+0x24>
    614c:	1805883a 	mov	r2,r3
    6150:	f800283a 	ret
    6154:	0011883a 	mov	r8,zero
    6158:	0007883a 	mov	r3,zero
    615c:	01c00104 	movi	r7,4
    6160:	4004923a 	slli	r2,r8,8
    6164:	18c00044 	addi	r3,r3,1
    6168:	1151883a 	add	r8,r2,r5
    616c:	19fffc1e 	bne	r3,r7,6160 <memchr+0x50>
    6170:	02bfbff4 	movhi	r10,65279
    6174:	52bfbfc4 	addi	r10,r10,-257
    6178:	02602074 	movhi	r9,32897
    617c:	4a602004 	addi	r9,r9,-32640
    6180:	02c000c4 	movi	r11,3
    6184:	20800017 	ldw	r2,0(r4)
    6188:	31bfff04 	addi	r6,r6,-4
    618c:	200f883a 	mov	r7,r4
    6190:	1204f03a 	xor	r2,r2,r8
    6194:	1287883a 	add	r3,r2,r10
    6198:	1a46703a 	and	r3,r3,r9
    619c:	0084303a 	nor	r2,zero,r2
    61a0:	10c4703a 	and	r2,r2,r3
    61a4:	10000b26 	beq	r2,zero,61d4 <memchr+0xc4>
    61a8:	20800003 	ldbu	r2,0(r4)
    61ac:	28800f26 	beq	r5,r2,61ec <memchr+0xdc>
    61b0:	20800043 	ldbu	r2,1(r4)
    61b4:	21c00044 	addi	r7,r4,1
    61b8:	28800c26 	beq	r5,r2,61ec <memchr+0xdc>
    61bc:	20800083 	ldbu	r2,2(r4)
    61c0:	21c00084 	addi	r7,r4,2
    61c4:	28800926 	beq	r5,r2,61ec <memchr+0xdc>
    61c8:	208000c3 	ldbu	r2,3(r4)
    61cc:	21c000c4 	addi	r7,r4,3
    61d0:	28800626 	beq	r5,r2,61ec <memchr+0xdc>
    61d4:	21000104 	addi	r4,r4,4
    61d8:	59bfea36 	bltu	r11,r6,6184 <memchr+0x74>
    61dc:	2007883a 	mov	r3,r4
    61e0:	003fd106 	br	6128 <memchr+0x18>
    61e4:	0005883a 	mov	r2,zero
    61e8:	f800283a 	ret
    61ec:	3805883a 	mov	r2,r7
    61f0:	f800283a 	ret

000061f4 <memcpy>:
    61f4:	01c003c4 	movi	r7,15
    61f8:	2007883a 	mov	r3,r4
    61fc:	3980032e 	bgeu	r7,r6,620c <memcpy+0x18>
    6200:	2904b03a 	or	r2,r5,r4
    6204:	108000cc 	andi	r2,r2,3
    6208:	10000926 	beq	r2,zero,6230 <memcpy+0x3c>
    620c:	30000626 	beq	r6,zero,6228 <memcpy+0x34>
    6210:	30cd883a 	add	r6,r6,r3
    6214:	28800003 	ldbu	r2,0(r5)
    6218:	29400044 	addi	r5,r5,1
    621c:	18800005 	stb	r2,0(r3)
    6220:	18c00044 	addi	r3,r3,1
    6224:	30fffb1e 	bne	r6,r3,6214 <memcpy+0x20>
    6228:	2005883a 	mov	r2,r4
    622c:	f800283a 	ret
    6230:	3811883a 	mov	r8,r7
    6234:	200f883a 	mov	r7,r4
    6238:	28c00017 	ldw	r3,0(r5)
    623c:	31bffc04 	addi	r6,r6,-16
    6240:	38c00015 	stw	r3,0(r7)
    6244:	28800117 	ldw	r2,4(r5)
    6248:	38800115 	stw	r2,4(r7)
    624c:	28c00217 	ldw	r3,8(r5)
    6250:	38c00215 	stw	r3,8(r7)
    6254:	28800317 	ldw	r2,12(r5)
    6258:	29400404 	addi	r5,r5,16
    625c:	38800315 	stw	r2,12(r7)
    6260:	39c00404 	addi	r7,r7,16
    6264:	41bff436 	bltu	r8,r6,6238 <memcpy+0x44>
    6268:	008000c4 	movi	r2,3
    626c:	1180072e 	bgeu	r2,r6,628c <memcpy+0x98>
    6270:	1007883a 	mov	r3,r2
    6274:	28800017 	ldw	r2,0(r5)
    6278:	31bfff04 	addi	r6,r6,-4
    627c:	29400104 	addi	r5,r5,4
    6280:	38800015 	stw	r2,0(r7)
    6284:	39c00104 	addi	r7,r7,4
    6288:	19bffa36 	bltu	r3,r6,6274 <memcpy+0x80>
    628c:	3807883a 	mov	r3,r7
    6290:	003fde06 	br	620c <memcpy+0x18>

00006294 <memmove>:
    6294:	2807883a 	mov	r3,r5
    6298:	2011883a 	mov	r8,r4
    629c:	29000c2e 	bgeu	r5,r4,62d0 <memmove+0x3c>
    62a0:	298f883a 	add	r7,r5,r6
    62a4:	21c00a2e 	bgeu	r4,r7,62d0 <memmove+0x3c>
    62a8:	30000726 	beq	r6,zero,62c8 <memmove+0x34>
    62ac:	2187883a 	add	r3,r4,r6
    62b0:	198dc83a 	sub	r6,r3,r6
    62b4:	39ffffc4 	addi	r7,r7,-1
    62b8:	38800003 	ldbu	r2,0(r7)
    62bc:	18ffffc4 	addi	r3,r3,-1
    62c0:	18800005 	stb	r2,0(r3)
    62c4:	19bffb1e 	bne	r3,r6,62b4 <memmove+0x20>
    62c8:	2005883a 	mov	r2,r4
    62cc:	f800283a 	ret
    62d0:	01c003c4 	movi	r7,15
    62d4:	39800a36 	bltu	r7,r6,6300 <memmove+0x6c>
    62d8:	303ffb26 	beq	r6,zero,62c8 <memmove+0x34>
    62dc:	400f883a 	mov	r7,r8
    62e0:	320d883a 	add	r6,r6,r8
    62e4:	28800003 	ldbu	r2,0(r5)
    62e8:	29400044 	addi	r5,r5,1
    62ec:	38800005 	stb	r2,0(r7)
    62f0:	39c00044 	addi	r7,r7,1
    62f4:	39bffb1e 	bne	r7,r6,62e4 <memmove+0x50>
    62f8:	2005883a 	mov	r2,r4
    62fc:	f800283a 	ret
    6300:	1904b03a 	or	r2,r3,r4
    6304:	108000cc 	andi	r2,r2,3
    6308:	103ff31e 	bne	r2,zero,62d8 <memmove+0x44>
    630c:	3811883a 	mov	r8,r7
    6310:	180b883a 	mov	r5,r3
    6314:	200f883a 	mov	r7,r4
    6318:	28c00017 	ldw	r3,0(r5)
    631c:	31bffc04 	addi	r6,r6,-16
    6320:	38c00015 	stw	r3,0(r7)
    6324:	28800117 	ldw	r2,4(r5)
    6328:	38800115 	stw	r2,4(r7)
    632c:	28c00217 	ldw	r3,8(r5)
    6330:	38c00215 	stw	r3,8(r7)
    6334:	28800317 	ldw	r2,12(r5)
    6338:	29400404 	addi	r5,r5,16
    633c:	38800315 	stw	r2,12(r7)
    6340:	39c00404 	addi	r7,r7,16
    6344:	41bff436 	bltu	r8,r6,6318 <memmove+0x84>
    6348:	008000c4 	movi	r2,3
    634c:	1180072e 	bgeu	r2,r6,636c <memmove+0xd8>
    6350:	1007883a 	mov	r3,r2
    6354:	28800017 	ldw	r2,0(r5)
    6358:	31bfff04 	addi	r6,r6,-4
    635c:	29400104 	addi	r5,r5,4
    6360:	38800015 	stw	r2,0(r7)
    6364:	39c00104 	addi	r7,r7,4
    6368:	19bffa36 	bltu	r3,r6,6354 <memmove+0xc0>
    636c:	3811883a 	mov	r8,r7
    6370:	003fd906 	br	62d8 <memmove+0x44>

00006374 <memset>:
    6374:	008000c4 	movi	r2,3
    6378:	29403fcc 	andi	r5,r5,255
    637c:	2007883a 	mov	r3,r4
    6380:	1180022e 	bgeu	r2,r6,638c <memset+0x18>
    6384:	2084703a 	and	r2,r4,r2
    6388:	10000826 	beq	r2,zero,63ac <memset+0x38>
    638c:	30000526 	beq	r6,zero,63a4 <memset+0x30>
    6390:	2805883a 	mov	r2,r5
    6394:	30cd883a 	add	r6,r6,r3
    6398:	18800005 	stb	r2,0(r3)
    639c:	18c00044 	addi	r3,r3,1
    63a0:	19bffd1e 	bne	r3,r6,6398 <memset+0x24>
    63a4:	2005883a 	mov	r2,r4
    63a8:	f800283a 	ret
    63ac:	2804923a 	slli	r2,r5,8
    63b0:	020003c4 	movi	r8,15
    63b4:	200f883a 	mov	r7,r4
    63b8:	2884b03a 	or	r2,r5,r2
    63bc:	1006943a 	slli	r3,r2,16
    63c0:	10c6b03a 	or	r3,r2,r3
    63c4:	41800a2e 	bgeu	r8,r6,63f0 <memset+0x7c>
    63c8:	4005883a 	mov	r2,r8
    63cc:	31bffc04 	addi	r6,r6,-16
    63d0:	38c00015 	stw	r3,0(r7)
    63d4:	38c00115 	stw	r3,4(r7)
    63d8:	38c00215 	stw	r3,8(r7)
    63dc:	38c00315 	stw	r3,12(r7)
    63e0:	39c00404 	addi	r7,r7,16
    63e4:	11bff936 	bltu	r2,r6,63cc <memset+0x58>
    63e8:	008000c4 	movi	r2,3
    63ec:	1180052e 	bgeu	r2,r6,6404 <memset+0x90>
    63f0:	31bfff04 	addi	r6,r6,-4
    63f4:	008000c4 	movi	r2,3
    63f8:	38c00015 	stw	r3,0(r7)
    63fc:	39c00104 	addi	r7,r7,4
    6400:	11bffb36 	bltu	r2,r6,63f0 <memset+0x7c>
    6404:	3807883a 	mov	r3,r7
    6408:	003fe006 	br	638c <memset+0x18>

0000640c <_Bfree>:
    640c:	28000826 	beq	r5,zero,6430 <_Bfree+0x24>
    6410:	28800117 	ldw	r2,4(r5)
    6414:	21001317 	ldw	r4,76(r4)
    6418:	1085883a 	add	r2,r2,r2
    641c:	1085883a 	add	r2,r2,r2
    6420:	1105883a 	add	r2,r2,r4
    6424:	10c00017 	ldw	r3,0(r2)
    6428:	28c00015 	stw	r3,0(r5)
    642c:	11400015 	stw	r5,0(r2)
    6430:	f800283a 	ret

00006434 <__hi0bits>:
    6434:	20bfffec 	andhi	r2,r4,65535
    6438:	10001426 	beq	r2,zero,648c <__hi0bits+0x58>
    643c:	0007883a 	mov	r3,zero
    6440:	20bfc02c 	andhi	r2,r4,65280
    6444:	1000021e 	bne	r2,zero,6450 <__hi0bits+0x1c>
    6448:	2008923a 	slli	r4,r4,8
    644c:	18c00204 	addi	r3,r3,8
    6450:	20bc002c 	andhi	r2,r4,61440
    6454:	1000021e 	bne	r2,zero,6460 <__hi0bits+0x2c>
    6458:	2008913a 	slli	r4,r4,4
    645c:	18c00104 	addi	r3,r3,4
    6460:	20b0002c 	andhi	r2,r4,49152
    6464:	1000031e 	bne	r2,zero,6474 <__hi0bits+0x40>
    6468:	2105883a 	add	r2,r4,r4
    646c:	18c00084 	addi	r3,r3,2
    6470:	1089883a 	add	r4,r2,r2
    6474:	20000316 	blt	r4,zero,6484 <__hi0bits+0x50>
    6478:	2090002c 	andhi	r2,r4,16384
    647c:	10000626 	beq	r2,zero,6498 <__hi0bits+0x64>
    6480:	18c00044 	addi	r3,r3,1
    6484:	1805883a 	mov	r2,r3
    6488:	f800283a 	ret
    648c:	2008943a 	slli	r4,r4,16
    6490:	00c00404 	movi	r3,16
    6494:	003fea06 	br	6440 <__hi0bits+0xc>
    6498:	00c00804 	movi	r3,32
    649c:	1805883a 	mov	r2,r3
    64a0:	f800283a 	ret

000064a4 <__lo0bits>:
    64a4:	20c00017 	ldw	r3,0(r4)
    64a8:	188001cc 	andi	r2,r3,7
    64ac:	10000a26 	beq	r2,zero,64d8 <__lo0bits+0x34>
    64b0:	1880004c 	andi	r2,r3,1
    64b4:	1005003a 	cmpeq	r2,r2,zero
    64b8:	10002126 	beq	r2,zero,6540 <__lo0bits+0x9c>
    64bc:	1880008c 	andi	r2,r3,2
    64c0:	1000251e 	bne	r2,zero,6558 <__lo0bits+0xb4>
    64c4:	1804d0ba 	srli	r2,r3,2
    64c8:	01400084 	movi	r5,2
    64cc:	20800015 	stw	r2,0(r4)
    64d0:	2805883a 	mov	r2,r5
    64d4:	f800283a 	ret
    64d8:	18bfffcc 	andi	r2,r3,65535
    64dc:	10001526 	beq	r2,zero,6534 <__lo0bits+0x90>
    64e0:	000b883a 	mov	r5,zero
    64e4:	18803fcc 	andi	r2,r3,255
    64e8:	1000021e 	bne	r2,zero,64f4 <__lo0bits+0x50>
    64ec:	1806d23a 	srli	r3,r3,8
    64f0:	29400204 	addi	r5,r5,8
    64f4:	188003cc 	andi	r2,r3,15
    64f8:	1000021e 	bne	r2,zero,6504 <__lo0bits+0x60>
    64fc:	1806d13a 	srli	r3,r3,4
    6500:	29400104 	addi	r5,r5,4
    6504:	188000cc 	andi	r2,r3,3
    6508:	1000021e 	bne	r2,zero,6514 <__lo0bits+0x70>
    650c:	1806d0ba 	srli	r3,r3,2
    6510:	29400084 	addi	r5,r5,2
    6514:	1880004c 	andi	r2,r3,1
    6518:	1000031e 	bne	r2,zero,6528 <__lo0bits+0x84>
    651c:	1806d07a 	srli	r3,r3,1
    6520:	18000a26 	beq	r3,zero,654c <__lo0bits+0xa8>
    6524:	29400044 	addi	r5,r5,1
    6528:	2805883a 	mov	r2,r5
    652c:	20c00015 	stw	r3,0(r4)
    6530:	f800283a 	ret
    6534:	1806d43a 	srli	r3,r3,16
    6538:	01400404 	movi	r5,16
    653c:	003fe906 	br	64e4 <__lo0bits+0x40>
    6540:	000b883a 	mov	r5,zero
    6544:	2805883a 	mov	r2,r5
    6548:	f800283a 	ret
    654c:	01400804 	movi	r5,32
    6550:	2805883a 	mov	r2,r5
    6554:	f800283a 	ret
    6558:	1804d07a 	srli	r2,r3,1
    655c:	01400044 	movi	r5,1
    6560:	20800015 	stw	r2,0(r4)
    6564:	003fda06 	br	64d0 <__lo0bits+0x2c>

00006568 <__mcmp>:
    6568:	20800417 	ldw	r2,16(r4)
    656c:	28c00417 	ldw	r3,16(r5)
    6570:	10cfc83a 	sub	r7,r2,r3
    6574:	38000c1e 	bne	r7,zero,65a8 <__mcmp+0x40>
    6578:	18c5883a 	add	r2,r3,r3
    657c:	1085883a 	add	r2,r2,r2
    6580:	10c00504 	addi	r3,r2,20
    6584:	21000504 	addi	r4,r4,20
    6588:	28cb883a 	add	r5,r5,r3
    658c:	2085883a 	add	r2,r4,r2
    6590:	10bfff04 	addi	r2,r2,-4
    6594:	297fff04 	addi	r5,r5,-4
    6598:	11800017 	ldw	r6,0(r2)
    659c:	28c00017 	ldw	r3,0(r5)
    65a0:	30c0031e 	bne	r6,r3,65b0 <__mcmp+0x48>
    65a4:	20bffa36 	bltu	r4,r2,6590 <__mcmp+0x28>
    65a8:	3805883a 	mov	r2,r7
    65ac:	f800283a 	ret
    65b0:	30c00336 	bltu	r6,r3,65c0 <__mcmp+0x58>
    65b4:	01c00044 	movi	r7,1
    65b8:	3805883a 	mov	r2,r7
    65bc:	f800283a 	ret
    65c0:	01ffffc4 	movi	r7,-1
    65c4:	003ff806 	br	65a8 <__mcmp+0x40>

000065c8 <__ulp>:
    65c8:	295ffc2c 	andhi	r5,r5,32752
    65cc:	013f3034 	movhi	r4,64704
    65d0:	290b883a 	add	r5,r5,r4
    65d4:	0145c83a 	sub	r2,zero,r5
    65d8:	1007d53a 	srai	r3,r2,20
    65dc:	000d883a 	mov	r6,zero
    65e0:	0140040e 	bge	zero,r5,65f4 <__ulp+0x2c>
    65e4:	280f883a 	mov	r7,r5
    65e8:	3807883a 	mov	r3,r7
    65ec:	3005883a 	mov	r2,r6
    65f0:	f800283a 	ret
    65f4:	008004c4 	movi	r2,19
    65f8:	193ffb04 	addi	r4,r3,-20
    65fc:	10c00c0e 	bge	r2,r3,6630 <__ulp+0x68>
    6600:	008007c4 	movi	r2,31
    6604:	1107c83a 	sub	r3,r2,r4
    6608:	00800784 	movi	r2,30
    660c:	01400044 	movi	r5,1
    6610:	11000216 	blt	r2,r4,661c <__ulp+0x54>
    6614:	00800044 	movi	r2,1
    6618:	10ca983a 	sll	r5,r2,r3
    661c:	000f883a 	mov	r7,zero
    6620:	280d883a 	mov	r6,r5
    6624:	3807883a 	mov	r3,r7
    6628:	3005883a 	mov	r2,r6
    662c:	f800283a 	ret
    6630:	00800234 	movhi	r2,8
    6634:	10cfd83a 	sra	r7,r2,r3
    6638:	000d883a 	mov	r6,zero
    663c:	3005883a 	mov	r2,r6
    6640:	3807883a 	mov	r3,r7
    6644:	f800283a 	ret

00006648 <__b2d>:
    6648:	20800417 	ldw	r2,16(r4)
    664c:	defff904 	addi	sp,sp,-28
    6650:	dd000415 	stw	r20,16(sp)
    6654:	1085883a 	add	r2,r2,r2
    6658:	25000504 	addi	r20,r4,20
    665c:	1085883a 	add	r2,r2,r2
    6660:	dc000015 	stw	r16,0(sp)
    6664:	a0a1883a 	add	r16,r20,r2
    6668:	dd400515 	stw	r21,20(sp)
    666c:	857fff17 	ldw	r21,-4(r16)
    6670:	dc400115 	stw	r17,4(sp)
    6674:	dfc00615 	stw	ra,24(sp)
    6678:	a809883a 	mov	r4,r21
    667c:	2823883a 	mov	r17,r5
    6680:	dcc00315 	stw	r19,12(sp)
    6684:	dc800215 	stw	r18,8(sp)
    6688:	00064340 	call	6434 <__hi0bits>
    668c:	100b883a 	mov	r5,r2
    6690:	00800804 	movi	r2,32
    6694:	1145c83a 	sub	r2,r2,r5
    6698:	88800015 	stw	r2,0(r17)
    669c:	00800284 	movi	r2,10
    66a0:	80ffff04 	addi	r3,r16,-4
    66a4:	11401416 	blt	r2,r5,66f8 <__b2d+0xb0>
    66a8:	008002c4 	movi	r2,11
    66ac:	1149c83a 	sub	r4,r2,r5
    66b0:	a0c02736 	bltu	r20,r3,6750 <__b2d+0x108>
    66b4:	000d883a 	mov	r6,zero
    66b8:	28800544 	addi	r2,r5,21
    66bc:	a906d83a 	srl	r3,r21,r4
    66c0:	a884983a 	sll	r2,r21,r2
    66c4:	1ccffc34 	orhi	r19,r3,16368
    66c8:	11a4b03a 	or	r18,r2,r6
    66cc:	9005883a 	mov	r2,r18
    66d0:	9807883a 	mov	r3,r19
    66d4:	dfc00617 	ldw	ra,24(sp)
    66d8:	dd400517 	ldw	r21,20(sp)
    66dc:	dd000417 	ldw	r20,16(sp)
    66e0:	dcc00317 	ldw	r19,12(sp)
    66e4:	dc800217 	ldw	r18,8(sp)
    66e8:	dc400117 	ldw	r17,4(sp)
    66ec:	dc000017 	ldw	r16,0(sp)
    66f0:	dec00704 	addi	sp,sp,28
    66f4:	f800283a 	ret
    66f8:	a0c00e36 	bltu	r20,r3,6734 <__b2d+0xec>
    66fc:	293ffd44 	addi	r4,r5,-11
    6700:	000d883a 	mov	r6,zero
    6704:	20000f26 	beq	r4,zero,6744 <__b2d+0xfc>
    6708:	00800804 	movi	r2,32
    670c:	110bc83a 	sub	r5,r2,r4
    6710:	a0c01236 	bltu	r20,r3,675c <__b2d+0x114>
    6714:	000f883a 	mov	r7,zero
    6718:	a904983a 	sll	r2,r21,r4
    671c:	3146d83a 	srl	r3,r6,r5
    6720:	3108983a 	sll	r4,r6,r4
    6724:	108ffc34 	orhi	r2,r2,16368
    6728:	18a6b03a 	or	r19,r3,r2
    672c:	3924b03a 	or	r18,r7,r4
    6730:	003fe606 	br	66cc <__b2d+0x84>
    6734:	293ffd44 	addi	r4,r5,-11
    6738:	81bffe17 	ldw	r6,-8(r16)
    673c:	80fffe04 	addi	r3,r16,-8
    6740:	203ff11e 	bne	r4,zero,6708 <__b2d+0xc0>
    6744:	accffc34 	orhi	r19,r21,16368
    6748:	3025883a 	mov	r18,r6
    674c:	003fdf06 	br	66cc <__b2d+0x84>
    6750:	18bfff17 	ldw	r2,-4(r3)
    6754:	110cd83a 	srl	r6,r2,r4
    6758:	003fd706 	br	66b8 <__b2d+0x70>
    675c:	18bfff17 	ldw	r2,-4(r3)
    6760:	114ed83a 	srl	r7,r2,r5
    6764:	003fec06 	br	6718 <__b2d+0xd0>

00006768 <__ratio>:
    6768:	defff904 	addi	sp,sp,-28
    676c:	dc400215 	stw	r17,8(sp)
    6770:	2823883a 	mov	r17,r5
    6774:	d80b883a 	mov	r5,sp
    6778:	dfc00615 	stw	ra,24(sp)
    677c:	dd000515 	stw	r20,20(sp)
    6780:	dcc00415 	stw	r19,16(sp)
    6784:	dc800315 	stw	r18,12(sp)
    6788:	2025883a 	mov	r18,r4
    678c:	00066480 	call	6648 <__b2d>
    6790:	8809883a 	mov	r4,r17
    6794:	d9400104 	addi	r5,sp,4
    6798:	1027883a 	mov	r19,r2
    679c:	1829883a 	mov	r20,r3
    67a0:	00066480 	call	6648 <__b2d>
    67a4:	89000417 	ldw	r4,16(r17)
    67a8:	91c00417 	ldw	r7,16(r18)
    67ac:	d9800117 	ldw	r6,4(sp)
    67b0:	180b883a 	mov	r5,r3
    67b4:	390fc83a 	sub	r7,r7,r4
    67b8:	1009883a 	mov	r4,r2
    67bc:	d8800017 	ldw	r2,0(sp)
    67c0:	380e917a 	slli	r7,r7,5
    67c4:	2011883a 	mov	r8,r4
    67c8:	1185c83a 	sub	r2,r2,r6
    67cc:	11c5883a 	add	r2,r2,r7
    67d0:	1006953a 	slli	r3,r2,20
    67d4:	2813883a 	mov	r9,r5
    67d8:	00800d0e 	bge	zero,r2,6810 <__ratio+0xa8>
    67dc:	1d29883a 	add	r20,r3,r20
    67e0:	a00b883a 	mov	r5,r20
    67e4:	480f883a 	mov	r7,r9
    67e8:	9809883a 	mov	r4,r19
    67ec:	400d883a 	mov	r6,r8
    67f0:	00097400 	call	9740 <__divdf3>
    67f4:	dfc00617 	ldw	ra,24(sp)
    67f8:	dd000517 	ldw	r20,20(sp)
    67fc:	dcc00417 	ldw	r19,16(sp)
    6800:	dc800317 	ldw	r18,12(sp)
    6804:	dc400217 	ldw	r17,8(sp)
    6808:	dec00704 	addi	sp,sp,28
    680c:	f800283a 	ret
    6810:	28d3c83a 	sub	r9,r5,r3
    6814:	003ff206 	br	67e0 <__ratio+0x78>

00006818 <_mprec_log10>:
    6818:	defffe04 	addi	sp,sp,-8
    681c:	008005c4 	movi	r2,23
    6820:	dc000015 	stw	r16,0(sp)
    6824:	dfc00115 	stw	ra,4(sp)
    6828:	2021883a 	mov	r16,r4
    682c:	11000c16 	blt	r2,r4,6860 <_mprec_log10+0x48>
    6830:	200490fa 	slli	r2,r4,3
    6834:	00c00074 	movhi	r3,1
    6838:	18f60a04 	addi	r3,r3,-10200
    683c:	10c5883a 	add	r2,r2,r3
    6840:	12400117 	ldw	r9,4(r2)
    6844:	12000017 	ldw	r8,0(r2)
    6848:	4807883a 	mov	r3,r9
    684c:	4005883a 	mov	r2,r8
    6850:	dfc00117 	ldw	ra,4(sp)
    6854:	dc000017 	ldw	r16,0(sp)
    6858:	dec00204 	addi	sp,sp,8
    685c:	f800283a 	ret
    6860:	0011883a 	mov	r8,zero
    6864:	024ffc34 	movhi	r9,16368
    6868:	0005883a 	mov	r2,zero
    686c:	00d00934 	movhi	r3,16420
    6870:	480b883a 	mov	r5,r9
    6874:	4009883a 	mov	r4,r8
    6878:	180f883a 	mov	r7,r3
    687c:	100d883a 	mov	r6,r2
    6880:	000937c0 	call	937c <__muldf3>
    6884:	843fffc4 	addi	r16,r16,-1
    6888:	1011883a 	mov	r8,r2
    688c:	1813883a 	mov	r9,r3
    6890:	803ff51e 	bne	r16,zero,6868 <_mprec_log10+0x50>
    6894:	4005883a 	mov	r2,r8
    6898:	4807883a 	mov	r3,r9
    689c:	dfc00117 	ldw	ra,4(sp)
    68a0:	dc000017 	ldw	r16,0(sp)
    68a4:	dec00204 	addi	sp,sp,8
    68a8:	f800283a 	ret

000068ac <__copybits>:
    68ac:	297fffc4 	addi	r5,r5,-1
    68b0:	30800417 	ldw	r2,16(r6)
    68b4:	280bd17a 	srai	r5,r5,5
    68b8:	31800504 	addi	r6,r6,20
    68bc:	1085883a 	add	r2,r2,r2
    68c0:	294b883a 	add	r5,r5,r5
    68c4:	294b883a 	add	r5,r5,r5
    68c8:	1085883a 	add	r2,r2,r2
    68cc:	290b883a 	add	r5,r5,r4
    68d0:	3087883a 	add	r3,r6,r2
    68d4:	29400104 	addi	r5,r5,4
    68d8:	30c0052e 	bgeu	r6,r3,68f0 <__copybits+0x44>
    68dc:	30800017 	ldw	r2,0(r6)
    68e0:	31800104 	addi	r6,r6,4
    68e4:	20800015 	stw	r2,0(r4)
    68e8:	21000104 	addi	r4,r4,4
    68ec:	30fffb36 	bltu	r6,r3,68dc <__copybits+0x30>
    68f0:	2140032e 	bgeu	r4,r5,6900 <__copybits+0x54>
    68f4:	20000015 	stw	zero,0(r4)
    68f8:	21000104 	addi	r4,r4,4
    68fc:	217ffd36 	bltu	r4,r5,68f4 <__copybits+0x48>
    6900:	f800283a 	ret

00006904 <__any_on>:
    6904:	20800417 	ldw	r2,16(r4)
    6908:	2807d17a 	srai	r3,r5,5
    690c:	21000504 	addi	r4,r4,20
    6910:	10c00d0e 	bge	r2,r3,6948 <__any_on+0x44>
    6914:	1085883a 	add	r2,r2,r2
    6918:	1085883a 	add	r2,r2,r2
    691c:	208d883a 	add	r6,r4,r2
    6920:	2180182e 	bgeu	r4,r6,6984 <__any_on+0x80>
    6924:	30bfff17 	ldw	r2,-4(r6)
    6928:	30ffff04 	addi	r3,r6,-4
    692c:	1000041e 	bne	r2,zero,6940 <__any_on+0x3c>
    6930:	20c0142e 	bgeu	r4,r3,6984 <__any_on+0x80>
    6934:	18ffff04 	addi	r3,r3,-4
    6938:	18800017 	ldw	r2,0(r3)
    693c:	103ffc26 	beq	r2,zero,6930 <__any_on+0x2c>
    6940:	00800044 	movi	r2,1
    6944:	f800283a 	ret
    6948:	18800a0e 	bge	r3,r2,6974 <__any_on+0x70>
    694c:	294007cc 	andi	r5,r5,31
    6950:	28000826 	beq	r5,zero,6974 <__any_on+0x70>
    6954:	18c5883a 	add	r2,r3,r3
    6958:	1085883a 	add	r2,r2,r2
    695c:	208d883a 	add	r6,r4,r2
    6960:	30c00017 	ldw	r3,0(r6)
    6964:	1944d83a 	srl	r2,r3,r5
    6968:	1144983a 	sll	r2,r2,r5
    696c:	18bff41e 	bne	r3,r2,6940 <__any_on+0x3c>
    6970:	003feb06 	br	6920 <__any_on+0x1c>
    6974:	18c5883a 	add	r2,r3,r3
    6978:	1085883a 	add	r2,r2,r2
    697c:	208d883a 	add	r6,r4,r2
    6980:	003fe706 	br	6920 <__any_on+0x1c>
    6984:	0005883a 	mov	r2,zero
    6988:	f800283a 	ret

0000698c <_Balloc>:
    698c:	20c01317 	ldw	r3,76(r4)
    6990:	defffb04 	addi	sp,sp,-20
    6994:	dcc00315 	stw	r19,12(sp)
    6998:	dc800215 	stw	r18,8(sp)
    699c:	dfc00415 	stw	ra,16(sp)
    69a0:	2825883a 	mov	r18,r5
    69a4:	dc400115 	stw	r17,4(sp)
    69a8:	dc000015 	stw	r16,0(sp)
    69ac:	2027883a 	mov	r19,r4
    69b0:	01800404 	movi	r6,16
    69b4:	01400104 	movi	r5,4
    69b8:	18001726 	beq	r3,zero,6a18 <_Balloc+0x8c>
    69bc:	01400044 	movi	r5,1
    69c0:	9485883a 	add	r2,r18,r18
    69c4:	2ca2983a 	sll	r17,r5,r18
    69c8:	1085883a 	add	r2,r2,r2
    69cc:	10c7883a 	add	r3,r2,r3
    69d0:	1c000017 	ldw	r16,0(r3)
    69d4:	8c4d883a 	add	r6,r17,r17
    69d8:	318d883a 	add	r6,r6,r6
    69dc:	9809883a 	mov	r4,r19
    69e0:	31800504 	addi	r6,r6,20
    69e4:	80001226 	beq	r16,zero,6a30 <_Balloc+0xa4>
    69e8:	80800017 	ldw	r2,0(r16)
    69ec:	18800015 	stw	r2,0(r3)
    69f0:	80000415 	stw	zero,16(r16)
    69f4:	80000315 	stw	zero,12(r16)
    69f8:	8005883a 	mov	r2,r16
    69fc:	dfc00417 	ldw	ra,16(sp)
    6a00:	dcc00317 	ldw	r19,12(sp)
    6a04:	dc800217 	ldw	r18,8(sp)
    6a08:	dc400117 	ldw	r17,4(sp)
    6a0c:	dc000017 	ldw	r16,0(sp)
    6a10:	dec00504 	addi	sp,sp,20
    6a14:	f800283a 	ret
    6a18:	0007d7c0 	call	7d7c <_calloc_r>
    6a1c:	1007883a 	mov	r3,r2
    6a20:	0021883a 	mov	r16,zero
    6a24:	98801315 	stw	r2,76(r19)
    6a28:	103fe41e 	bne	r2,zero,69bc <_Balloc+0x30>
    6a2c:	003ff206 	br	69f8 <_Balloc+0x6c>
    6a30:	0007d7c0 	call	7d7c <_calloc_r>
    6a34:	103ff026 	beq	r2,zero,69f8 <_Balloc+0x6c>
    6a38:	1021883a 	mov	r16,r2
    6a3c:	14800115 	stw	r18,4(r2)
    6a40:	14400215 	stw	r17,8(r2)
    6a44:	003fea06 	br	69f0 <_Balloc+0x64>

00006a48 <__d2b>:
    6a48:	defff504 	addi	sp,sp,-44
    6a4c:	dcc00515 	stw	r19,20(sp)
    6a50:	04c00044 	movi	r19,1
    6a54:	dc000215 	stw	r16,8(sp)
    6a58:	2821883a 	mov	r16,r5
    6a5c:	980b883a 	mov	r5,r19
    6a60:	ddc00915 	stw	r23,36(sp)
    6a64:	dd800815 	stw	r22,32(sp)
    6a68:	dd400715 	stw	r21,28(sp)
    6a6c:	dd000615 	stw	r20,24(sp)
    6a70:	dc800415 	stw	r18,16(sp)
    6a74:	dc400315 	stw	r17,12(sp)
    6a78:	dfc00a15 	stw	ra,40(sp)
    6a7c:	3023883a 	mov	r17,r6
    6a80:	382d883a 	mov	r22,r7
    6a84:	ddc00b17 	ldw	r23,44(sp)
    6a88:	000698c0 	call	698c <_Balloc>
    6a8c:	1025883a 	mov	r18,r2
    6a90:	00a00034 	movhi	r2,32768
    6a94:	10bfffc4 	addi	r2,r2,-1
    6a98:	8888703a 	and	r4,r17,r2
    6a9c:	202ad53a 	srli	r21,r4,20
    6aa0:	00800434 	movhi	r2,16
    6aa4:	10bfffc4 	addi	r2,r2,-1
    6aa8:	8886703a 	and	r3,r17,r2
    6aac:	a829003a 	cmpeq	r20,r21,zero
    6ab0:	800b883a 	mov	r5,r16
    6ab4:	d8c00115 	stw	r3,4(sp)
    6ab8:	94000504 	addi	r16,r18,20
    6abc:	a000021e 	bne	r20,zero,6ac8 <__d2b+0x80>
    6ac0:	18c00434 	orhi	r3,r3,16
    6ac4:	d8c00115 	stw	r3,4(sp)
    6ac8:	28002726 	beq	r5,zero,6b68 <__d2b+0x120>
    6acc:	d809883a 	mov	r4,sp
    6ad0:	d9400015 	stw	r5,0(sp)
    6ad4:	00064a40 	call	64a4 <__lo0bits>
    6ad8:	100d883a 	mov	r6,r2
    6adc:	10003526 	beq	r2,zero,6bb4 <__d2b+0x16c>
    6ae0:	d8c00117 	ldw	r3,4(sp)
    6ae4:	00800804 	movi	r2,32
    6ae8:	1185c83a 	sub	r2,r2,r6
    6aec:	d9000017 	ldw	r4,0(sp)
    6af0:	1886983a 	sll	r3,r3,r2
    6af4:	1906b03a 	or	r3,r3,r4
    6af8:	90c00515 	stw	r3,20(r18)
    6afc:	d8c00117 	ldw	r3,4(sp)
    6b00:	1986d83a 	srl	r3,r3,r6
    6b04:	d8c00115 	stw	r3,4(sp)
    6b08:	180b003a 	cmpeq	r5,r3,zero
    6b0c:	00800084 	movi	r2,2
    6b10:	114bc83a 	sub	r5,r2,r5
    6b14:	80c00115 	stw	r3,4(r16)
    6b18:	91400415 	stw	r5,16(r18)
    6b1c:	a0001a1e 	bne	r20,zero,6b88 <__d2b+0x140>
    6b20:	3545883a 	add	r2,r6,r21
    6b24:	10bef344 	addi	r2,r2,-1075
    6b28:	00c00d44 	movi	r3,53
    6b2c:	b0800015 	stw	r2,0(r22)
    6b30:	1987c83a 	sub	r3,r3,r6
    6b34:	b8c00015 	stw	r3,0(r23)
    6b38:	9005883a 	mov	r2,r18
    6b3c:	dfc00a17 	ldw	ra,40(sp)
    6b40:	ddc00917 	ldw	r23,36(sp)
    6b44:	dd800817 	ldw	r22,32(sp)
    6b48:	dd400717 	ldw	r21,28(sp)
    6b4c:	dd000617 	ldw	r20,24(sp)
    6b50:	dcc00517 	ldw	r19,20(sp)
    6b54:	dc800417 	ldw	r18,16(sp)
    6b58:	dc400317 	ldw	r17,12(sp)
    6b5c:	dc000217 	ldw	r16,8(sp)
    6b60:	dec00b04 	addi	sp,sp,44
    6b64:	f800283a 	ret
    6b68:	d9000104 	addi	r4,sp,4
    6b6c:	00064a40 	call	64a4 <__lo0bits>
    6b70:	11800804 	addi	r6,r2,32
    6b74:	d8800117 	ldw	r2,4(sp)
    6b78:	94c00415 	stw	r19,16(r18)
    6b7c:	980b883a 	mov	r5,r19
    6b80:	90800515 	stw	r2,20(r18)
    6b84:	a03fe626 	beq	r20,zero,6b20 <__d2b+0xd8>
    6b88:	2945883a 	add	r2,r5,r5
    6b8c:	1085883a 	add	r2,r2,r2
    6b90:	1405883a 	add	r2,r2,r16
    6b94:	113fff17 	ldw	r4,-4(r2)
    6b98:	30fef384 	addi	r3,r6,-1074
    6b9c:	2820917a 	slli	r16,r5,5
    6ba0:	b0c00015 	stw	r3,0(r22)
    6ba4:	00064340 	call	6434 <__hi0bits>
    6ba8:	80a1c83a 	sub	r16,r16,r2
    6bac:	bc000015 	stw	r16,0(r23)
    6bb0:	003fe106 	br	6b38 <__d2b+0xf0>
    6bb4:	d8800017 	ldw	r2,0(sp)
    6bb8:	90800515 	stw	r2,20(r18)
    6bbc:	d8c00117 	ldw	r3,4(sp)
    6bc0:	003fd106 	br	6b08 <__d2b+0xc0>

00006bc4 <__mdiff>:
    6bc4:	defffb04 	addi	sp,sp,-20
    6bc8:	dc000015 	stw	r16,0(sp)
    6bcc:	2821883a 	mov	r16,r5
    6bd0:	dc800215 	stw	r18,8(sp)
    6bd4:	300b883a 	mov	r5,r6
    6bd8:	2025883a 	mov	r18,r4
    6bdc:	8009883a 	mov	r4,r16
    6be0:	dc400115 	stw	r17,4(sp)
    6be4:	dfc00415 	stw	ra,16(sp)
    6be8:	dcc00315 	stw	r19,12(sp)
    6bec:	3023883a 	mov	r17,r6
    6bf0:	00065680 	call	6568 <__mcmp>
    6bf4:	10004226 	beq	r2,zero,6d00 <__mdiff+0x13c>
    6bf8:	10005016 	blt	r2,zero,6d3c <__mdiff+0x178>
    6bfc:	0027883a 	mov	r19,zero
    6c00:	81400117 	ldw	r5,4(r16)
    6c04:	9009883a 	mov	r4,r18
    6c08:	000698c0 	call	698c <_Balloc>
    6c0c:	1019883a 	mov	r12,r2
    6c10:	82800417 	ldw	r10,16(r16)
    6c14:	88800417 	ldw	r2,16(r17)
    6c18:	81800504 	addi	r6,r16,20
    6c1c:	5287883a 	add	r3,r10,r10
    6c20:	1085883a 	add	r2,r2,r2
    6c24:	18c7883a 	add	r3,r3,r3
    6c28:	1085883a 	add	r2,r2,r2
    6c2c:	8a000504 	addi	r8,r17,20
    6c30:	64c00315 	stw	r19,12(r12)
    6c34:	30db883a 	add	r13,r6,r3
    6c38:	4097883a 	add	r11,r8,r2
    6c3c:	61c00504 	addi	r7,r12,20
    6c40:	0013883a 	mov	r9,zero
    6c44:	31000017 	ldw	r4,0(r6)
    6c48:	41400017 	ldw	r5,0(r8)
    6c4c:	42000104 	addi	r8,r8,4
    6c50:	20bfffcc 	andi	r2,r4,65535
    6c54:	28ffffcc 	andi	r3,r5,65535
    6c58:	10c5c83a 	sub	r2,r2,r3
    6c5c:	1245883a 	add	r2,r2,r9
    6c60:	2008d43a 	srli	r4,r4,16
    6c64:	280ad43a 	srli	r5,r5,16
    6c68:	1007d43a 	srai	r3,r2,16
    6c6c:	3880000d 	sth	r2,0(r7)
    6c70:	2149c83a 	sub	r4,r4,r5
    6c74:	20c9883a 	add	r4,r4,r3
    6c78:	3900008d 	sth	r4,2(r7)
    6c7c:	31800104 	addi	r6,r6,4
    6c80:	39c00104 	addi	r7,r7,4
    6c84:	2013d43a 	srai	r9,r4,16
    6c88:	42ffee36 	bltu	r8,r11,6c44 <__mdiff+0x80>
    6c8c:	33400c2e 	bgeu	r6,r13,6cc0 <__mdiff+0xfc>
    6c90:	30800017 	ldw	r2,0(r6)
    6c94:	31800104 	addi	r6,r6,4
    6c98:	10ffffcc 	andi	r3,r2,65535
    6c9c:	1a47883a 	add	r3,r3,r9
    6ca0:	1004d43a 	srli	r2,r2,16
    6ca4:	1809d43a 	srai	r4,r3,16
    6ca8:	38c0000d 	sth	r3,0(r7)
    6cac:	1105883a 	add	r2,r2,r4
    6cb0:	3880008d 	sth	r2,2(r7)
    6cb4:	1013d43a 	srai	r9,r2,16
    6cb8:	39c00104 	addi	r7,r7,4
    6cbc:	337ff436 	bltu	r6,r13,6c90 <__mdiff+0xcc>
    6cc0:	38bfff17 	ldw	r2,-4(r7)
    6cc4:	38ffff04 	addi	r3,r7,-4
    6cc8:	1000041e 	bne	r2,zero,6cdc <__mdiff+0x118>
    6ccc:	18ffff04 	addi	r3,r3,-4
    6cd0:	18800017 	ldw	r2,0(r3)
    6cd4:	52bfffc4 	addi	r10,r10,-1
    6cd8:	103ffc26 	beq	r2,zero,6ccc <__mdiff+0x108>
    6cdc:	6005883a 	mov	r2,r12
    6ce0:	62800415 	stw	r10,16(r12)
    6ce4:	dfc00417 	ldw	ra,16(sp)
    6ce8:	dcc00317 	ldw	r19,12(sp)
    6cec:	dc800217 	ldw	r18,8(sp)
    6cf0:	dc400117 	ldw	r17,4(sp)
    6cf4:	dc000017 	ldw	r16,0(sp)
    6cf8:	dec00504 	addi	sp,sp,20
    6cfc:	f800283a 	ret
    6d00:	9009883a 	mov	r4,r18
    6d04:	000b883a 	mov	r5,zero
    6d08:	000698c0 	call	698c <_Balloc>
    6d0c:	1019883a 	mov	r12,r2
    6d10:	00800044 	movi	r2,1
    6d14:	60800415 	stw	r2,16(r12)
    6d18:	6005883a 	mov	r2,r12
    6d1c:	60000515 	stw	zero,20(r12)
    6d20:	dfc00417 	ldw	ra,16(sp)
    6d24:	dcc00317 	ldw	r19,12(sp)
    6d28:	dc800217 	ldw	r18,8(sp)
    6d2c:	dc400117 	ldw	r17,4(sp)
    6d30:	dc000017 	ldw	r16,0(sp)
    6d34:	dec00504 	addi	sp,sp,20
    6d38:	f800283a 	ret
    6d3c:	880d883a 	mov	r6,r17
    6d40:	04c00044 	movi	r19,1
    6d44:	8023883a 	mov	r17,r16
    6d48:	3021883a 	mov	r16,r6
    6d4c:	003fac06 	br	6c00 <__mdiff+0x3c>

00006d50 <__lshift>:
    6d50:	defff904 	addi	sp,sp,-28
    6d54:	28800417 	ldw	r2,16(r5)
    6d58:	dc000015 	stw	r16,0(sp)
    6d5c:	3021d17a 	srai	r16,r6,5
    6d60:	28c00217 	ldw	r3,8(r5)
    6d64:	10800044 	addi	r2,r2,1
    6d68:	dc400115 	stw	r17,4(sp)
    6d6c:	80a3883a 	add	r17,r16,r2
    6d70:	dd400515 	stw	r21,20(sp)
    6d74:	dd000415 	stw	r20,16(sp)
    6d78:	dc800215 	stw	r18,8(sp)
    6d7c:	dfc00615 	stw	ra,24(sp)
    6d80:	2825883a 	mov	r18,r5
    6d84:	dcc00315 	stw	r19,12(sp)
    6d88:	3029883a 	mov	r20,r6
    6d8c:	202b883a 	mov	r21,r4
    6d90:	29400117 	ldw	r5,4(r5)
    6d94:	1c40030e 	bge	r3,r17,6da4 <__lshift+0x54>
    6d98:	18c7883a 	add	r3,r3,r3
    6d9c:	29400044 	addi	r5,r5,1
    6da0:	1c7ffd16 	blt	r3,r17,6d98 <__lshift+0x48>
    6da4:	a809883a 	mov	r4,r21
    6da8:	000698c0 	call	698c <_Balloc>
    6dac:	1027883a 	mov	r19,r2
    6db0:	11400504 	addi	r5,r2,20
    6db4:	0400090e 	bge	zero,r16,6ddc <__lshift+0x8c>
    6db8:	2805883a 	mov	r2,r5
    6dbc:	0007883a 	mov	r3,zero
    6dc0:	18c00044 	addi	r3,r3,1
    6dc4:	10000015 	stw	zero,0(r2)
    6dc8:	10800104 	addi	r2,r2,4
    6dcc:	80fffc1e 	bne	r16,r3,6dc0 <__lshift+0x70>
    6dd0:	8405883a 	add	r2,r16,r16
    6dd4:	1085883a 	add	r2,r2,r2
    6dd8:	288b883a 	add	r5,r5,r2
    6ddc:	90800417 	ldw	r2,16(r18)
    6de0:	91000504 	addi	r4,r18,20
    6de4:	a18007cc 	andi	r6,r20,31
    6de8:	1085883a 	add	r2,r2,r2
    6dec:	1085883a 	add	r2,r2,r2
    6df0:	208f883a 	add	r7,r4,r2
    6df4:	30001e26 	beq	r6,zero,6e70 <__lshift+0x120>
    6df8:	00800804 	movi	r2,32
    6dfc:	1191c83a 	sub	r8,r2,r6
    6e00:	0007883a 	mov	r3,zero
    6e04:	20800017 	ldw	r2,0(r4)
    6e08:	1184983a 	sll	r2,r2,r6
    6e0c:	1884b03a 	or	r2,r3,r2
    6e10:	28800015 	stw	r2,0(r5)
    6e14:	20c00017 	ldw	r3,0(r4)
    6e18:	21000104 	addi	r4,r4,4
    6e1c:	29400104 	addi	r5,r5,4
    6e20:	1a06d83a 	srl	r3,r3,r8
    6e24:	21fff736 	bltu	r4,r7,6e04 <__lshift+0xb4>
    6e28:	28c00015 	stw	r3,0(r5)
    6e2c:	18000126 	beq	r3,zero,6e34 <__lshift+0xe4>
    6e30:	8c400044 	addi	r17,r17,1
    6e34:	88bfffc4 	addi	r2,r17,-1
    6e38:	98800415 	stw	r2,16(r19)
    6e3c:	a809883a 	mov	r4,r21
    6e40:	900b883a 	mov	r5,r18
    6e44:	000640c0 	call	640c <_Bfree>
    6e48:	9805883a 	mov	r2,r19
    6e4c:	dfc00617 	ldw	ra,24(sp)
    6e50:	dd400517 	ldw	r21,20(sp)
    6e54:	dd000417 	ldw	r20,16(sp)
    6e58:	dcc00317 	ldw	r19,12(sp)
    6e5c:	dc800217 	ldw	r18,8(sp)
    6e60:	dc400117 	ldw	r17,4(sp)
    6e64:	dc000017 	ldw	r16,0(sp)
    6e68:	dec00704 	addi	sp,sp,28
    6e6c:	f800283a 	ret
    6e70:	20800017 	ldw	r2,0(r4)
    6e74:	21000104 	addi	r4,r4,4
    6e78:	28800015 	stw	r2,0(r5)
    6e7c:	29400104 	addi	r5,r5,4
    6e80:	21ffec2e 	bgeu	r4,r7,6e34 <__lshift+0xe4>
    6e84:	20800017 	ldw	r2,0(r4)
    6e88:	21000104 	addi	r4,r4,4
    6e8c:	28800015 	stw	r2,0(r5)
    6e90:	29400104 	addi	r5,r5,4
    6e94:	21fff636 	bltu	r4,r7,6e70 <__lshift+0x120>
    6e98:	003fe606 	br	6e34 <__lshift+0xe4>

00006e9c <__multiply>:
    6e9c:	defff004 	addi	sp,sp,-64
    6ea0:	dc800815 	stw	r18,32(sp)
    6ea4:	dc400715 	stw	r17,28(sp)
    6ea8:	2c800417 	ldw	r18,16(r5)
    6eac:	34400417 	ldw	r17,16(r6)
    6eb0:	dcc00915 	stw	r19,36(sp)
    6eb4:	dc000615 	stw	r16,24(sp)
    6eb8:	dfc00f15 	stw	ra,60(sp)
    6ebc:	df000e15 	stw	fp,56(sp)
    6ec0:	ddc00d15 	stw	r23,52(sp)
    6ec4:	dd800c15 	stw	r22,48(sp)
    6ec8:	dd400b15 	stw	r21,44(sp)
    6ecc:	dd000a15 	stw	r20,40(sp)
    6ed0:	2821883a 	mov	r16,r5
    6ed4:	3027883a 	mov	r19,r6
    6ed8:	9440040e 	bge	r18,r17,6eec <__multiply+0x50>
    6edc:	8825883a 	mov	r18,r17
    6ee0:	2c400417 	ldw	r17,16(r5)
    6ee4:	2827883a 	mov	r19,r5
    6ee8:	3021883a 	mov	r16,r6
    6eec:	80800217 	ldw	r2,8(r16)
    6ef0:	9447883a 	add	r3,r18,r17
    6ef4:	d8c00415 	stw	r3,16(sp)
    6ef8:	81400117 	ldw	r5,4(r16)
    6efc:	10c0010e 	bge	r2,r3,6f04 <__multiply+0x68>
    6f00:	29400044 	addi	r5,r5,1
    6f04:	000698c0 	call	698c <_Balloc>
    6f08:	d8800515 	stw	r2,20(sp)
    6f0c:	d9000417 	ldw	r4,16(sp)
    6f10:	d8c00517 	ldw	r3,20(sp)
    6f14:	2105883a 	add	r2,r4,r4
    6f18:	1085883a 	add	r2,r2,r2
    6f1c:	19000504 	addi	r4,r3,20
    6f20:	2085883a 	add	r2,r4,r2
    6f24:	d8800315 	stw	r2,12(sp)
    6f28:	2080052e 	bgeu	r4,r2,6f40 <__multiply+0xa4>
    6f2c:	2005883a 	mov	r2,r4
    6f30:	d8c00317 	ldw	r3,12(sp)
    6f34:	10000015 	stw	zero,0(r2)
    6f38:	10800104 	addi	r2,r2,4
    6f3c:	10fffc36 	bltu	r2,r3,6f30 <__multiply+0x94>
    6f40:	8c45883a 	add	r2,r17,r17
    6f44:	9487883a 	add	r3,r18,r18
    6f48:	9dc00504 	addi	r23,r19,20
    6f4c:	1085883a 	add	r2,r2,r2
    6f50:	84000504 	addi	r16,r16,20
    6f54:	18c7883a 	add	r3,r3,r3
    6f58:	b885883a 	add	r2,r23,r2
    6f5c:	dc000015 	stw	r16,0(sp)
    6f60:	d8800215 	stw	r2,8(sp)
    6f64:	80f9883a 	add	fp,r16,r3
    6f68:	b880432e 	bgeu	r23,r2,7078 <__multiply+0x1dc>
    6f6c:	d9000115 	stw	r4,4(sp)
    6f70:	b9000017 	ldw	r4,0(r23)
    6f74:	253fffcc 	andi	r20,r4,65535
    6f78:	a0001a26 	beq	r20,zero,6fe4 <__multiply+0x148>
    6f7c:	dcc00017 	ldw	r19,0(sp)
    6f80:	dc800117 	ldw	r18,4(sp)
    6f84:	002b883a 	mov	r21,zero
    6f88:	9c400017 	ldw	r17,0(r19)
    6f8c:	94000017 	ldw	r16,0(r18)
    6f90:	a009883a 	mov	r4,r20
    6f94:	897fffcc 	andi	r5,r17,65535
    6f98:	0000d140 	call	d14 <__mulsi3>
    6f9c:	880ad43a 	srli	r5,r17,16
    6fa0:	80ffffcc 	andi	r3,r16,65535
    6fa4:	a8c7883a 	add	r3,r21,r3
    6fa8:	a009883a 	mov	r4,r20
    6fac:	10e3883a 	add	r17,r2,r3
    6fb0:	8020d43a 	srli	r16,r16,16
    6fb4:	0000d140 	call	d14 <__mulsi3>
    6fb8:	8806d43a 	srli	r3,r17,16
    6fbc:	1405883a 	add	r2,r2,r16
    6fc0:	9cc00104 	addi	r19,r19,4
    6fc4:	1887883a 	add	r3,r3,r2
    6fc8:	90c0008d 	sth	r3,2(r18)
    6fcc:	9440000d 	sth	r17,0(r18)
    6fd0:	182ad43a 	srli	r21,r3,16
    6fd4:	94800104 	addi	r18,r18,4
    6fd8:	9f3feb36 	bltu	r19,fp,6f88 <__multiply+0xec>
    6fdc:	95400015 	stw	r21,0(r18)
    6fe0:	b9000017 	ldw	r4,0(r23)
    6fe4:	202ad43a 	srli	r21,r4,16
    6fe8:	a8001c26 	beq	r21,zero,705c <__multiply+0x1c0>
    6fec:	d9000117 	ldw	r4,4(sp)
    6ff0:	dd000017 	ldw	r20,0(sp)
    6ff4:	002d883a 	mov	r22,zero
    6ff8:	24c00017 	ldw	r19,0(r4)
    6ffc:	2025883a 	mov	r18,r4
    7000:	9823883a 	mov	r17,r19
    7004:	a4000017 	ldw	r16,0(r20)
    7008:	a809883a 	mov	r4,r21
    700c:	a5000104 	addi	r20,r20,4
    7010:	817fffcc 	andi	r5,r16,65535
    7014:	0000d140 	call	d14 <__mulsi3>
    7018:	8806d43a 	srli	r3,r17,16
    701c:	800ad43a 	srli	r5,r16,16
    7020:	94c0000d 	sth	r19,0(r18)
    7024:	b0c7883a 	add	r3,r22,r3
    7028:	10e1883a 	add	r16,r2,r3
    702c:	9400008d 	sth	r16,2(r18)
    7030:	a809883a 	mov	r4,r21
    7034:	94800104 	addi	r18,r18,4
    7038:	0000d140 	call	d14 <__mulsi3>
    703c:	94400017 	ldw	r17,0(r18)
    7040:	8020d43a 	srli	r16,r16,16
    7044:	88ffffcc 	andi	r3,r17,65535
    7048:	10c5883a 	add	r2,r2,r3
    704c:	80a7883a 	add	r19,r16,r2
    7050:	982cd43a 	srli	r22,r19,16
    7054:	a73feb36 	bltu	r20,fp,7004 <__multiply+0x168>
    7058:	94c00015 	stw	r19,0(r18)
    705c:	d8800217 	ldw	r2,8(sp)
    7060:	bdc00104 	addi	r23,r23,4
    7064:	b880042e 	bgeu	r23,r2,7078 <__multiply+0x1dc>
    7068:	d8c00117 	ldw	r3,4(sp)
    706c:	18c00104 	addi	r3,r3,4
    7070:	d8c00115 	stw	r3,4(sp)
    7074:	003fbe06 	br	6f70 <__multiply+0xd4>
    7078:	d9000417 	ldw	r4,16(sp)
    707c:	01000c0e 	bge	zero,r4,70b0 <__multiply+0x214>
    7080:	d8c00317 	ldw	r3,12(sp)
    7084:	18bfff17 	ldw	r2,-4(r3)
    7088:	18ffff04 	addi	r3,r3,-4
    708c:	10000326 	beq	r2,zero,709c <__multiply+0x200>
    7090:	00000706 	br	70b0 <__multiply+0x214>
    7094:	18800017 	ldw	r2,0(r3)
    7098:	1000051e 	bne	r2,zero,70b0 <__multiply+0x214>
    709c:	d9000417 	ldw	r4,16(sp)
    70a0:	18ffff04 	addi	r3,r3,-4
    70a4:	213fffc4 	addi	r4,r4,-1
    70a8:	d9000415 	stw	r4,16(sp)
    70ac:	203ff91e 	bne	r4,zero,7094 <__multiply+0x1f8>
    70b0:	d8800417 	ldw	r2,16(sp)
    70b4:	d8c00517 	ldw	r3,20(sp)
    70b8:	18800415 	stw	r2,16(r3)
    70bc:	1805883a 	mov	r2,r3
    70c0:	dfc00f17 	ldw	ra,60(sp)
    70c4:	df000e17 	ldw	fp,56(sp)
    70c8:	ddc00d17 	ldw	r23,52(sp)
    70cc:	dd800c17 	ldw	r22,48(sp)
    70d0:	dd400b17 	ldw	r21,44(sp)
    70d4:	dd000a17 	ldw	r20,40(sp)
    70d8:	dcc00917 	ldw	r19,36(sp)
    70dc:	dc800817 	ldw	r18,32(sp)
    70e0:	dc400717 	ldw	r17,28(sp)
    70e4:	dc000617 	ldw	r16,24(sp)
    70e8:	dec01004 	addi	sp,sp,64
    70ec:	f800283a 	ret

000070f0 <__i2b>:
    70f0:	defffd04 	addi	sp,sp,-12
    70f4:	dc000015 	stw	r16,0(sp)
    70f8:	04000044 	movi	r16,1
    70fc:	dc800115 	stw	r18,4(sp)
    7100:	2825883a 	mov	r18,r5
    7104:	800b883a 	mov	r5,r16
    7108:	dfc00215 	stw	ra,8(sp)
    710c:	000698c0 	call	698c <_Balloc>
    7110:	14000415 	stw	r16,16(r2)
    7114:	14800515 	stw	r18,20(r2)
    7118:	dfc00217 	ldw	ra,8(sp)
    711c:	dc800117 	ldw	r18,4(sp)
    7120:	dc000017 	ldw	r16,0(sp)
    7124:	dec00304 	addi	sp,sp,12
    7128:	f800283a 	ret

0000712c <__multadd>:
    712c:	defff604 	addi	sp,sp,-40
    7130:	dd800615 	stw	r22,24(sp)
    7134:	2d800417 	ldw	r22,16(r5)
    7138:	df000815 	stw	fp,32(sp)
    713c:	ddc00715 	stw	r23,28(sp)
    7140:	dd400515 	stw	r21,20(sp)
    7144:	dd000415 	stw	r20,16(sp)
    7148:	dcc00315 	stw	r19,12(sp)
    714c:	dc800215 	stw	r18,8(sp)
    7150:	dfc00915 	stw	ra,36(sp)
    7154:	dc400115 	stw	r17,4(sp)
    7158:	dc000015 	stw	r16,0(sp)
    715c:	282f883a 	mov	r23,r5
    7160:	2039883a 	mov	fp,r4
    7164:	302b883a 	mov	r21,r6
    7168:	3829883a 	mov	r20,r7
    716c:	2c800504 	addi	r18,r5,20
    7170:	0027883a 	mov	r19,zero
    7174:	94400017 	ldw	r17,0(r18)
    7178:	a80b883a 	mov	r5,r21
    717c:	9cc00044 	addi	r19,r19,1
    7180:	893fffcc 	andi	r4,r17,65535
    7184:	0000d140 	call	d14 <__mulsi3>
    7188:	8808d43a 	srli	r4,r17,16
    718c:	1521883a 	add	r16,r2,r20
    7190:	a80b883a 	mov	r5,r21
    7194:	0000d140 	call	d14 <__mulsi3>
    7198:	8008d43a 	srli	r4,r16,16
    719c:	843fffcc 	andi	r16,r16,65535
    71a0:	1105883a 	add	r2,r2,r4
    71a4:	1006943a 	slli	r3,r2,16
    71a8:	1028d43a 	srli	r20,r2,16
    71ac:	1c07883a 	add	r3,r3,r16
    71b0:	90c00015 	stw	r3,0(r18)
    71b4:	94800104 	addi	r18,r18,4
    71b8:	9dbfee16 	blt	r19,r22,7174 <__multadd+0x48>
    71bc:	a0000826 	beq	r20,zero,71e0 <__multadd+0xb4>
    71c0:	b8800217 	ldw	r2,8(r23)
    71c4:	b080130e 	bge	r22,r2,7214 <__multadd+0xe8>
    71c8:	b585883a 	add	r2,r22,r22
    71cc:	1085883a 	add	r2,r2,r2
    71d0:	15c5883a 	add	r2,r2,r23
    71d4:	b0c00044 	addi	r3,r22,1
    71d8:	15000515 	stw	r20,20(r2)
    71dc:	b8c00415 	stw	r3,16(r23)
    71e0:	b805883a 	mov	r2,r23
    71e4:	dfc00917 	ldw	ra,36(sp)
    71e8:	df000817 	ldw	fp,32(sp)
    71ec:	ddc00717 	ldw	r23,28(sp)
    71f0:	dd800617 	ldw	r22,24(sp)
    71f4:	dd400517 	ldw	r21,20(sp)
    71f8:	dd000417 	ldw	r20,16(sp)
    71fc:	dcc00317 	ldw	r19,12(sp)
    7200:	dc800217 	ldw	r18,8(sp)
    7204:	dc400117 	ldw	r17,4(sp)
    7208:	dc000017 	ldw	r16,0(sp)
    720c:	dec00a04 	addi	sp,sp,40
    7210:	f800283a 	ret
    7214:	b9400117 	ldw	r5,4(r23)
    7218:	e009883a 	mov	r4,fp
    721c:	29400044 	addi	r5,r5,1
    7220:	000698c0 	call	698c <_Balloc>
    7224:	b9800417 	ldw	r6,16(r23)
    7228:	b9400304 	addi	r5,r23,12
    722c:	11000304 	addi	r4,r2,12
    7230:	318d883a 	add	r6,r6,r6
    7234:	318d883a 	add	r6,r6,r6
    7238:	31800204 	addi	r6,r6,8
    723c:	1023883a 	mov	r17,r2
    7240:	00061f40 	call	61f4 <memcpy>
    7244:	b80b883a 	mov	r5,r23
    7248:	e009883a 	mov	r4,fp
    724c:	000640c0 	call	640c <_Bfree>
    7250:	882f883a 	mov	r23,r17
    7254:	003fdc06 	br	71c8 <__multadd+0x9c>

00007258 <__pow5mult>:
    7258:	defffa04 	addi	sp,sp,-24
    725c:	308000cc 	andi	r2,r6,3
    7260:	dd000415 	stw	r20,16(sp)
    7264:	dcc00315 	stw	r19,12(sp)
    7268:	dc000015 	stw	r16,0(sp)
    726c:	dfc00515 	stw	ra,20(sp)
    7270:	dc800215 	stw	r18,8(sp)
    7274:	dc400115 	stw	r17,4(sp)
    7278:	3021883a 	mov	r16,r6
    727c:	2027883a 	mov	r19,r4
    7280:	2829883a 	mov	r20,r5
    7284:	10002b1e 	bne	r2,zero,7334 <__pow5mult+0xdc>
    7288:	8025d0ba 	srai	r18,r16,2
    728c:	90001b26 	beq	r18,zero,72fc <__pow5mult+0xa4>
    7290:	9c001217 	ldw	r16,72(r19)
    7294:	8000081e 	bne	r16,zero,72b8 <__pow5mult+0x60>
    7298:	00003006 	br	735c <__pow5mult+0x104>
    729c:	800b883a 	mov	r5,r16
    72a0:	800d883a 	mov	r6,r16
    72a4:	9809883a 	mov	r4,r19
    72a8:	90001426 	beq	r18,zero,72fc <__pow5mult+0xa4>
    72ac:	80800017 	ldw	r2,0(r16)
    72b0:	10001b26 	beq	r2,zero,7320 <__pow5mult+0xc8>
    72b4:	1021883a 	mov	r16,r2
    72b8:	9080004c 	andi	r2,r18,1
    72bc:	1005003a 	cmpeq	r2,r2,zero
    72c0:	9025d07a 	srai	r18,r18,1
    72c4:	800d883a 	mov	r6,r16
    72c8:	9809883a 	mov	r4,r19
    72cc:	a00b883a 	mov	r5,r20
    72d0:	103ff21e 	bne	r2,zero,729c <__pow5mult+0x44>
    72d4:	0006e9c0 	call	6e9c <__multiply>
    72d8:	a00b883a 	mov	r5,r20
    72dc:	9809883a 	mov	r4,r19
    72e0:	1023883a 	mov	r17,r2
    72e4:	000640c0 	call	640c <_Bfree>
    72e8:	8829883a 	mov	r20,r17
    72ec:	800b883a 	mov	r5,r16
    72f0:	800d883a 	mov	r6,r16
    72f4:	9809883a 	mov	r4,r19
    72f8:	903fec1e 	bne	r18,zero,72ac <__pow5mult+0x54>
    72fc:	a005883a 	mov	r2,r20
    7300:	dfc00517 	ldw	ra,20(sp)
    7304:	dd000417 	ldw	r20,16(sp)
    7308:	dcc00317 	ldw	r19,12(sp)
    730c:	dc800217 	ldw	r18,8(sp)
    7310:	dc400117 	ldw	r17,4(sp)
    7314:	dc000017 	ldw	r16,0(sp)
    7318:	dec00604 	addi	sp,sp,24
    731c:	f800283a 	ret
    7320:	0006e9c0 	call	6e9c <__multiply>
    7324:	80800015 	stw	r2,0(r16)
    7328:	1021883a 	mov	r16,r2
    732c:	10000015 	stw	zero,0(r2)
    7330:	003fe106 	br	72b8 <__pow5mult+0x60>
    7334:	1085883a 	add	r2,r2,r2
    7338:	00c00074 	movhi	r3,1
    733c:	18f65004 	addi	r3,r3,-9920
    7340:	1085883a 	add	r2,r2,r2
    7344:	10c5883a 	add	r2,r2,r3
    7348:	11bfff17 	ldw	r6,-4(r2)
    734c:	000f883a 	mov	r7,zero
    7350:	000712c0 	call	712c <__multadd>
    7354:	1029883a 	mov	r20,r2
    7358:	003fcb06 	br	7288 <__pow5mult+0x30>
    735c:	9809883a 	mov	r4,r19
    7360:	01409c44 	movi	r5,625
    7364:	00070f00 	call	70f0 <__i2b>
    7368:	98801215 	stw	r2,72(r19)
    736c:	1021883a 	mov	r16,r2
    7370:	10000015 	stw	zero,0(r2)
    7374:	003fd006 	br	72b8 <__pow5mult+0x60>

00007378 <__s2b>:
    7378:	defff904 	addi	sp,sp,-28
    737c:	dcc00315 	stw	r19,12(sp)
    7380:	dc800215 	stw	r18,8(sp)
    7384:	2827883a 	mov	r19,r5
    7388:	2025883a 	mov	r18,r4
    738c:	01400244 	movi	r5,9
    7390:	39000204 	addi	r4,r7,8
    7394:	dd000415 	stw	r20,16(sp)
    7398:	dc400115 	stw	r17,4(sp)
    739c:	dfc00615 	stw	ra,24(sp)
    73a0:	dd400515 	stw	r21,20(sp)
    73a4:	dc000015 	stw	r16,0(sp)
    73a8:	3829883a 	mov	r20,r7
    73ac:	3023883a 	mov	r17,r6
    73b0:	0000c440 	call	c44 <__divsi3>
    73b4:	00c00044 	movi	r3,1
    73b8:	1880350e 	bge	r3,r2,7490 <__s2b+0x118>
    73bc:	000b883a 	mov	r5,zero
    73c0:	18c7883a 	add	r3,r3,r3
    73c4:	29400044 	addi	r5,r5,1
    73c8:	18bffd16 	blt	r3,r2,73c0 <__s2b+0x48>
    73cc:	9009883a 	mov	r4,r18
    73d0:	000698c0 	call	698c <_Balloc>
    73d4:	1011883a 	mov	r8,r2
    73d8:	d8800717 	ldw	r2,28(sp)
    73dc:	00c00044 	movi	r3,1
    73e0:	01800244 	movi	r6,9
    73e4:	40800515 	stw	r2,20(r8)
    73e8:	40c00415 	stw	r3,16(r8)
    73ec:	3440260e 	bge	r6,r17,7488 <__s2b+0x110>
    73f0:	3021883a 	mov	r16,r6
    73f4:	99ab883a 	add	r21,r19,r6
    73f8:	9c05883a 	add	r2,r19,r16
    73fc:	11c00007 	ldb	r7,0(r2)
    7400:	400b883a 	mov	r5,r8
    7404:	9009883a 	mov	r4,r18
    7408:	39fff404 	addi	r7,r7,-48
    740c:	01800284 	movi	r6,10
    7410:	000712c0 	call	712c <__multadd>
    7414:	84000044 	addi	r16,r16,1
    7418:	1011883a 	mov	r8,r2
    741c:	8c3ff61e 	bne	r17,r16,73f8 <__s2b+0x80>
    7420:	ac45883a 	add	r2,r21,r17
    7424:	117ffe04 	addi	r5,r2,-8
    7428:	880d883a 	mov	r6,r17
    742c:	35000c0e 	bge	r6,r20,7460 <__s2b+0xe8>
    7430:	a185c83a 	sub	r2,r20,r6
    7434:	2821883a 	mov	r16,r5
    7438:	28a3883a 	add	r17,r5,r2
    743c:	81c00007 	ldb	r7,0(r16)
    7440:	400b883a 	mov	r5,r8
    7444:	9009883a 	mov	r4,r18
    7448:	39fff404 	addi	r7,r7,-48
    744c:	01800284 	movi	r6,10
    7450:	000712c0 	call	712c <__multadd>
    7454:	84000044 	addi	r16,r16,1
    7458:	1011883a 	mov	r8,r2
    745c:	847ff71e 	bne	r16,r17,743c <__s2b+0xc4>
    7460:	4005883a 	mov	r2,r8
    7464:	dfc00617 	ldw	ra,24(sp)
    7468:	dd400517 	ldw	r21,20(sp)
    746c:	dd000417 	ldw	r20,16(sp)
    7470:	dcc00317 	ldw	r19,12(sp)
    7474:	dc800217 	ldw	r18,8(sp)
    7478:	dc400117 	ldw	r17,4(sp)
    747c:	dc000017 	ldw	r16,0(sp)
    7480:	dec00704 	addi	sp,sp,28
    7484:	f800283a 	ret
    7488:	99400284 	addi	r5,r19,10
    748c:	003fe706 	br	742c <__s2b+0xb4>
    7490:	000b883a 	mov	r5,zero
    7494:	003fcd06 	br	73cc <__s2b+0x54>

00007498 <_realloc_r>:
    7498:	defff404 	addi	sp,sp,-48
    749c:	dd800815 	stw	r22,32(sp)
    74a0:	dc800415 	stw	r18,16(sp)
    74a4:	dc400315 	stw	r17,12(sp)
    74a8:	dfc00b15 	stw	ra,44(sp)
    74ac:	df000a15 	stw	fp,40(sp)
    74b0:	ddc00915 	stw	r23,36(sp)
    74b4:	dd400715 	stw	r21,28(sp)
    74b8:	dd000615 	stw	r20,24(sp)
    74bc:	dcc00515 	stw	r19,20(sp)
    74c0:	dc000215 	stw	r16,8(sp)
    74c4:	2825883a 	mov	r18,r5
    74c8:	3023883a 	mov	r17,r6
    74cc:	202d883a 	mov	r22,r4
    74d0:	2800c926 	beq	r5,zero,77f8 <_realloc_r+0x360>
    74d4:	000ae440 	call	ae44 <__malloc_lock>
    74d8:	943ffe04 	addi	r16,r18,-8
    74dc:	88c002c4 	addi	r3,r17,11
    74e0:	00800584 	movi	r2,22
    74e4:	82000117 	ldw	r8,4(r16)
    74e8:	10c01b2e 	bgeu	r2,r3,7558 <_realloc_r+0xc0>
    74ec:	00bffe04 	movi	r2,-8
    74f0:	188e703a 	and	r7,r3,r2
    74f4:	3839883a 	mov	fp,r7
    74f8:	38001a16 	blt	r7,zero,7564 <_realloc_r+0xcc>
    74fc:	e4401936 	bltu	fp,r17,7564 <_realloc_r+0xcc>
    7500:	013fff04 	movi	r4,-4
    7504:	4126703a 	and	r19,r8,r4
    7508:	99c02616 	blt	r19,r7,75a4 <_realloc_r+0x10c>
    750c:	802b883a 	mov	r21,r16
    7510:	9829883a 	mov	r20,r19
    7514:	84000204 	addi	r16,r16,8
    7518:	a80f883a 	mov	r7,r21
    751c:	a70dc83a 	sub	r6,r20,fp
    7520:	008003c4 	movi	r2,15
    7524:	1180c136 	bltu	r2,r6,782c <_realloc_r+0x394>
    7528:	38800117 	ldw	r2,4(r7)
    752c:	a549883a 	add	r4,r20,r21
    7530:	1080004c 	andi	r2,r2,1
    7534:	a084b03a 	or	r2,r20,r2
    7538:	38800115 	stw	r2,4(r7)
    753c:	20c00117 	ldw	r3,4(r4)
    7540:	18c00054 	ori	r3,r3,1
    7544:	20c00115 	stw	r3,4(r4)
    7548:	b009883a 	mov	r4,r22
    754c:	000ae640 	call	ae64 <__malloc_unlock>
    7550:	8023883a 	mov	r17,r16
    7554:	00000606 	br	7570 <_realloc_r+0xd8>
    7558:	01c00404 	movi	r7,16
    755c:	3839883a 	mov	fp,r7
    7560:	e47fe72e 	bgeu	fp,r17,7500 <_realloc_r+0x68>
    7564:	00800304 	movi	r2,12
    7568:	0023883a 	mov	r17,zero
    756c:	b0800015 	stw	r2,0(r22)
    7570:	8805883a 	mov	r2,r17
    7574:	dfc00b17 	ldw	ra,44(sp)
    7578:	df000a17 	ldw	fp,40(sp)
    757c:	ddc00917 	ldw	r23,36(sp)
    7580:	dd800817 	ldw	r22,32(sp)
    7584:	dd400717 	ldw	r21,28(sp)
    7588:	dd000617 	ldw	r20,24(sp)
    758c:	dcc00517 	ldw	r19,20(sp)
    7590:	dc800417 	ldw	r18,16(sp)
    7594:	dc400317 	ldw	r17,12(sp)
    7598:	dc000217 	ldw	r16,8(sp)
    759c:	dec00c04 	addi	sp,sp,48
    75a0:	f800283a 	ret
    75a4:	00800074 	movhi	r2,1
    75a8:	10b6a304 	addi	r2,r2,-9588
    75ac:	12400217 	ldw	r9,8(r2)
    75b0:	84cd883a 	add	r6,r16,r19
    75b4:	802b883a 	mov	r21,r16
    75b8:	3240b926 	beq	r6,r9,78a0 <_realloc_r+0x408>
    75bc:	31400117 	ldw	r5,4(r6)
    75c0:	00bfff84 	movi	r2,-2
    75c4:	2884703a 	and	r2,r5,r2
    75c8:	1185883a 	add	r2,r2,r6
    75cc:	10c00117 	ldw	r3,4(r2)
    75d0:	18c0004c 	andi	r3,r3,1
    75d4:	1807003a 	cmpeq	r3,r3,zero
    75d8:	1800a326 	beq	r3,zero,7868 <_realloc_r+0x3d0>
    75dc:	2908703a 	and	r4,r5,r4
    75e0:	9929883a 	add	r20,r19,r4
    75e4:	a1c0a30e 	bge	r20,r7,7874 <_realloc_r+0x3dc>
    75e8:	4080004c 	andi	r2,r8,1
    75ec:	1000551e 	bne	r2,zero,7744 <_realloc_r+0x2ac>
    75f0:	80800017 	ldw	r2,0(r16)
    75f4:	80afc83a 	sub	r23,r16,r2
    75f8:	b8c00117 	ldw	r3,4(r23)
    75fc:	00bfff04 	movi	r2,-4
    7600:	1884703a 	and	r2,r3,r2
    7604:	30002e26 	beq	r6,zero,76c0 <_realloc_r+0x228>
    7608:	3240b926 	beq	r6,r9,78f0 <_realloc_r+0x458>
    760c:	98a9883a 	add	r20,r19,r2
    7610:	2509883a 	add	r4,r4,r20
    7614:	d9000015 	stw	r4,0(sp)
    7618:	21c02a16 	blt	r4,r7,76c4 <_realloc_r+0x22c>
    761c:	30800317 	ldw	r2,12(r6)
    7620:	30c00217 	ldw	r3,8(r6)
    7624:	01400904 	movi	r5,36
    7628:	99bfff04 	addi	r6,r19,-4
    762c:	18800315 	stw	r2,12(r3)
    7630:	10c00215 	stw	r3,8(r2)
    7634:	b9000317 	ldw	r4,12(r23)
    7638:	b8800217 	ldw	r2,8(r23)
    763c:	b82b883a 	mov	r21,r23
    7640:	bc000204 	addi	r16,r23,8
    7644:	20800215 	stw	r2,8(r4)
    7648:	11000315 	stw	r4,12(r2)
    764c:	2980e436 	bltu	r5,r6,79e0 <_realloc_r+0x548>
    7650:	008004c4 	movi	r2,19
    7654:	9009883a 	mov	r4,r18
    7658:	8011883a 	mov	r8,r16
    765c:	11800f2e 	bgeu	r2,r6,769c <_realloc_r+0x204>
    7660:	90800017 	ldw	r2,0(r18)
    7664:	ba000404 	addi	r8,r23,16
    7668:	91000204 	addi	r4,r18,8
    766c:	b8800215 	stw	r2,8(r23)
    7670:	90c00117 	ldw	r3,4(r18)
    7674:	008006c4 	movi	r2,27
    7678:	b8c00315 	stw	r3,12(r23)
    767c:	1180072e 	bgeu	r2,r6,769c <_realloc_r+0x204>
    7680:	90c00217 	ldw	r3,8(r18)
    7684:	ba000604 	addi	r8,r23,24
    7688:	91000404 	addi	r4,r18,16
    768c:	b8c00415 	stw	r3,16(r23)
    7690:	90800317 	ldw	r2,12(r18)
    7694:	b8800515 	stw	r2,20(r23)
    7698:	3140e726 	beq	r6,r5,7a38 <_realloc_r+0x5a0>
    769c:	20800017 	ldw	r2,0(r4)
    76a0:	dd000017 	ldw	r20,0(sp)
    76a4:	b80f883a 	mov	r7,r23
    76a8:	40800015 	stw	r2,0(r8)
    76ac:	20c00117 	ldw	r3,4(r4)
    76b0:	40c00115 	stw	r3,4(r8)
    76b4:	20800217 	ldw	r2,8(r4)
    76b8:	40800215 	stw	r2,8(r8)
    76bc:	003f9706 	br	751c <_realloc_r+0x84>
    76c0:	98a9883a 	add	r20,r19,r2
    76c4:	a1c01f16 	blt	r20,r7,7744 <_realloc_r+0x2ac>
    76c8:	b8c00317 	ldw	r3,12(r23)
    76cc:	b8800217 	ldw	r2,8(r23)
    76d0:	99bfff04 	addi	r6,r19,-4
    76d4:	01400904 	movi	r5,36
    76d8:	b82b883a 	mov	r21,r23
    76dc:	18800215 	stw	r2,8(r3)
    76e0:	10c00315 	stw	r3,12(r2)
    76e4:	bc000204 	addi	r16,r23,8
    76e8:	2980c336 	bltu	r5,r6,79f8 <_realloc_r+0x560>
    76ec:	008004c4 	movi	r2,19
    76f0:	9009883a 	mov	r4,r18
    76f4:	8011883a 	mov	r8,r16
    76f8:	11800f2e 	bgeu	r2,r6,7738 <_realloc_r+0x2a0>
    76fc:	90800017 	ldw	r2,0(r18)
    7700:	ba000404 	addi	r8,r23,16
    7704:	91000204 	addi	r4,r18,8
    7708:	b8800215 	stw	r2,8(r23)
    770c:	90c00117 	ldw	r3,4(r18)
    7710:	008006c4 	movi	r2,27
    7714:	b8c00315 	stw	r3,12(r23)
    7718:	1180072e 	bgeu	r2,r6,7738 <_realloc_r+0x2a0>
    771c:	90c00217 	ldw	r3,8(r18)
    7720:	ba000604 	addi	r8,r23,24
    7724:	91000404 	addi	r4,r18,16
    7728:	b8c00415 	stw	r3,16(r23)
    772c:	90800317 	ldw	r2,12(r18)
    7730:	b8800515 	stw	r2,20(r23)
    7734:	3140c726 	beq	r6,r5,7a54 <_realloc_r+0x5bc>
    7738:	20800017 	ldw	r2,0(r4)
    773c:	b80f883a 	mov	r7,r23
    7740:	003fd906 	br	76a8 <_realloc_r+0x210>
    7744:	880b883a 	mov	r5,r17
    7748:	b009883a 	mov	r4,r22
    774c:	0000d740 	call	d74 <_malloc_r>
    7750:	1023883a 	mov	r17,r2
    7754:	10002526 	beq	r2,zero,77ec <_realloc_r+0x354>
    7758:	80800117 	ldw	r2,4(r16)
    775c:	00ffff84 	movi	r3,-2
    7760:	893ffe04 	addi	r4,r17,-8
    7764:	10c4703a 	and	r2,r2,r3
    7768:	8085883a 	add	r2,r16,r2
    776c:	20809526 	beq	r4,r2,79c4 <_realloc_r+0x52c>
    7770:	99bfff04 	addi	r6,r19,-4
    7774:	01c00904 	movi	r7,36
    7778:	39804536 	bltu	r7,r6,7890 <_realloc_r+0x3f8>
    777c:	008004c4 	movi	r2,19
    7780:	9009883a 	mov	r4,r18
    7784:	880b883a 	mov	r5,r17
    7788:	11800f2e 	bgeu	r2,r6,77c8 <_realloc_r+0x330>
    778c:	90800017 	ldw	r2,0(r18)
    7790:	89400204 	addi	r5,r17,8
    7794:	91000204 	addi	r4,r18,8
    7798:	88800015 	stw	r2,0(r17)
    779c:	90c00117 	ldw	r3,4(r18)
    77a0:	008006c4 	movi	r2,27
    77a4:	88c00115 	stw	r3,4(r17)
    77a8:	1180072e 	bgeu	r2,r6,77c8 <_realloc_r+0x330>
    77ac:	90c00217 	ldw	r3,8(r18)
    77b0:	89400404 	addi	r5,r17,16
    77b4:	91000404 	addi	r4,r18,16
    77b8:	88c00215 	stw	r3,8(r17)
    77bc:	90800317 	ldw	r2,12(r18)
    77c0:	88800315 	stw	r2,12(r17)
    77c4:	31c09126 	beq	r6,r7,7a0c <_realloc_r+0x574>
    77c8:	20800017 	ldw	r2,0(r4)
    77cc:	28800015 	stw	r2,0(r5)
    77d0:	20c00117 	ldw	r3,4(r4)
    77d4:	28c00115 	stw	r3,4(r5)
    77d8:	20800217 	ldw	r2,8(r4)
    77dc:	28800215 	stw	r2,8(r5)
    77e0:	900b883a 	mov	r5,r18
    77e4:	b009883a 	mov	r4,r22
    77e8:	00055880 	call	5588 <_free_r>
    77ec:	b009883a 	mov	r4,r22
    77f0:	000ae640 	call	ae64 <__malloc_unlock>
    77f4:	003f5e06 	br	7570 <_realloc_r+0xd8>
    77f8:	300b883a 	mov	r5,r6
    77fc:	dfc00b17 	ldw	ra,44(sp)
    7800:	df000a17 	ldw	fp,40(sp)
    7804:	ddc00917 	ldw	r23,36(sp)
    7808:	dd800817 	ldw	r22,32(sp)
    780c:	dd400717 	ldw	r21,28(sp)
    7810:	dd000617 	ldw	r20,24(sp)
    7814:	dcc00517 	ldw	r19,20(sp)
    7818:	dc800417 	ldw	r18,16(sp)
    781c:	dc400317 	ldw	r17,12(sp)
    7820:	dc000217 	ldw	r16,8(sp)
    7824:	dec00c04 	addi	sp,sp,48
    7828:	0000d741 	jmpi	d74 <_malloc_r>
    782c:	38800117 	ldw	r2,4(r7)
    7830:	e54b883a 	add	r5,fp,r21
    7834:	31000054 	ori	r4,r6,1
    7838:	1080004c 	andi	r2,r2,1
    783c:	1704b03a 	or	r2,r2,fp
    7840:	38800115 	stw	r2,4(r7)
    7844:	29000115 	stw	r4,4(r5)
    7848:	2987883a 	add	r3,r5,r6
    784c:	18800117 	ldw	r2,4(r3)
    7850:	29400204 	addi	r5,r5,8
    7854:	b009883a 	mov	r4,r22
    7858:	10800054 	ori	r2,r2,1
    785c:	18800115 	stw	r2,4(r3)
    7860:	00055880 	call	5588 <_free_r>
    7864:	003f3806 	br	7548 <_realloc_r+0xb0>
    7868:	000d883a 	mov	r6,zero
    786c:	0009883a 	mov	r4,zero
    7870:	003f5d06 	br	75e8 <_realloc_r+0x150>
    7874:	30c00217 	ldw	r3,8(r6)
    7878:	30800317 	ldw	r2,12(r6)
    787c:	800f883a 	mov	r7,r16
    7880:	84000204 	addi	r16,r16,8
    7884:	10c00215 	stw	r3,8(r2)
    7888:	18800315 	stw	r2,12(r3)
    788c:	003f2306 	br	751c <_realloc_r+0x84>
    7890:	8809883a 	mov	r4,r17
    7894:	900b883a 	mov	r5,r18
    7898:	00062940 	call	6294 <memmove>
    789c:	003fd006 	br	77e0 <_realloc_r+0x348>
    78a0:	30800117 	ldw	r2,4(r6)
    78a4:	e0c00404 	addi	r3,fp,16
    78a8:	1108703a 	and	r4,r2,r4
    78ac:	9905883a 	add	r2,r19,r4
    78b0:	10ff4d16 	blt	r2,r3,75e8 <_realloc_r+0x150>
    78b4:	1705c83a 	sub	r2,r2,fp
    78b8:	870b883a 	add	r5,r16,fp
    78bc:	10800054 	ori	r2,r2,1
    78c0:	28800115 	stw	r2,4(r5)
    78c4:	80c00117 	ldw	r3,4(r16)
    78c8:	00800074 	movhi	r2,1
    78cc:	10b6a304 	addi	r2,r2,-9588
    78d0:	b009883a 	mov	r4,r22
    78d4:	18c0004c 	andi	r3,r3,1
    78d8:	e0c6b03a 	or	r3,fp,r3
    78dc:	11400215 	stw	r5,8(r2)
    78e0:	80c00115 	stw	r3,4(r16)
    78e4:	000ae640 	call	ae64 <__malloc_unlock>
    78e8:	84400204 	addi	r17,r16,8
    78ec:	003f2006 	br	7570 <_realloc_r+0xd8>
    78f0:	98a9883a 	add	r20,r19,r2
    78f4:	2509883a 	add	r4,r4,r20
    78f8:	e0800404 	addi	r2,fp,16
    78fc:	d9000115 	stw	r4,4(sp)
    7900:	20bf7016 	blt	r4,r2,76c4 <_realloc_r+0x22c>
    7904:	b8c00317 	ldw	r3,12(r23)
    7908:	b8800217 	ldw	r2,8(r23)
    790c:	99bfff04 	addi	r6,r19,-4
    7910:	01400904 	movi	r5,36
    7914:	18800215 	stw	r2,8(r3)
    7918:	10c00315 	stw	r3,12(r2)
    791c:	bc400204 	addi	r17,r23,8
    7920:	29804136 	bltu	r5,r6,7a28 <_realloc_r+0x590>
    7924:	008004c4 	movi	r2,19
    7928:	9009883a 	mov	r4,r18
    792c:	880f883a 	mov	r7,r17
    7930:	11800f2e 	bgeu	r2,r6,7970 <_realloc_r+0x4d8>
    7934:	90800017 	ldw	r2,0(r18)
    7938:	b9c00404 	addi	r7,r23,16
    793c:	91000204 	addi	r4,r18,8
    7940:	b8800215 	stw	r2,8(r23)
    7944:	90c00117 	ldw	r3,4(r18)
    7948:	008006c4 	movi	r2,27
    794c:	b8c00315 	stw	r3,12(r23)
    7950:	1180072e 	bgeu	r2,r6,7970 <_realloc_r+0x4d8>
    7954:	90c00217 	ldw	r3,8(r18)
    7958:	b9c00604 	addi	r7,r23,24
    795c:	91000404 	addi	r4,r18,16
    7960:	b8c00415 	stw	r3,16(r23)
    7964:	90800317 	ldw	r2,12(r18)
    7968:	b8800515 	stw	r2,20(r23)
    796c:	31404026 	beq	r6,r5,7a70 <_realloc_r+0x5d8>
    7970:	20800017 	ldw	r2,0(r4)
    7974:	38800015 	stw	r2,0(r7)
    7978:	20c00117 	ldw	r3,4(r4)
    797c:	38c00115 	stw	r3,4(r7)
    7980:	20800217 	ldw	r2,8(r4)
    7984:	38800215 	stw	r2,8(r7)
    7988:	d8c00117 	ldw	r3,4(sp)
    798c:	bf0b883a 	add	r5,r23,fp
    7990:	b009883a 	mov	r4,r22
    7994:	1f05c83a 	sub	r2,r3,fp
    7998:	10800054 	ori	r2,r2,1
    799c:	28800115 	stw	r2,4(r5)
    79a0:	b8c00117 	ldw	r3,4(r23)
    79a4:	00800074 	movhi	r2,1
    79a8:	10b6a304 	addi	r2,r2,-9588
    79ac:	11400215 	stw	r5,8(r2)
    79b0:	18c0004c 	andi	r3,r3,1
    79b4:	e0c6b03a 	or	r3,fp,r3
    79b8:	b8c00115 	stw	r3,4(r23)
    79bc:	000ae640 	call	ae64 <__malloc_unlock>
    79c0:	003eeb06 	br	7570 <_realloc_r+0xd8>
    79c4:	20800117 	ldw	r2,4(r4)
    79c8:	00ffff04 	movi	r3,-4
    79cc:	800f883a 	mov	r7,r16
    79d0:	10c4703a 	and	r2,r2,r3
    79d4:	98a9883a 	add	r20,r19,r2
    79d8:	84000204 	addi	r16,r16,8
    79dc:	003ecf06 	br	751c <_realloc_r+0x84>
    79e0:	900b883a 	mov	r5,r18
    79e4:	8009883a 	mov	r4,r16
    79e8:	00062940 	call	6294 <memmove>
    79ec:	dd000017 	ldw	r20,0(sp)
    79f0:	b80f883a 	mov	r7,r23
    79f4:	003ec906 	br	751c <_realloc_r+0x84>
    79f8:	900b883a 	mov	r5,r18
    79fc:	8009883a 	mov	r4,r16
    7a00:	00062940 	call	6294 <memmove>
    7a04:	b80f883a 	mov	r7,r23
    7a08:	003ec406 	br	751c <_realloc_r+0x84>
    7a0c:	90c00417 	ldw	r3,16(r18)
    7a10:	89400604 	addi	r5,r17,24
    7a14:	91000604 	addi	r4,r18,24
    7a18:	88c00415 	stw	r3,16(r17)
    7a1c:	90800517 	ldw	r2,20(r18)
    7a20:	88800515 	stw	r2,20(r17)
    7a24:	003f6806 	br	77c8 <_realloc_r+0x330>
    7a28:	900b883a 	mov	r5,r18
    7a2c:	8809883a 	mov	r4,r17
    7a30:	00062940 	call	6294 <memmove>
    7a34:	003fd406 	br	7988 <_realloc_r+0x4f0>
    7a38:	90c00417 	ldw	r3,16(r18)
    7a3c:	91000604 	addi	r4,r18,24
    7a40:	ba000804 	addi	r8,r23,32
    7a44:	b8c00615 	stw	r3,24(r23)
    7a48:	90800517 	ldw	r2,20(r18)
    7a4c:	b8800715 	stw	r2,28(r23)
    7a50:	003f1206 	br	769c <_realloc_r+0x204>
    7a54:	90c00417 	ldw	r3,16(r18)
    7a58:	91000604 	addi	r4,r18,24
    7a5c:	ba000804 	addi	r8,r23,32
    7a60:	b8c00615 	stw	r3,24(r23)
    7a64:	90800517 	ldw	r2,20(r18)
    7a68:	b8800715 	stw	r2,28(r23)
    7a6c:	003f3206 	br	7738 <_realloc_r+0x2a0>
    7a70:	90c00417 	ldw	r3,16(r18)
    7a74:	91000604 	addi	r4,r18,24
    7a78:	b9c00804 	addi	r7,r23,32
    7a7c:	b8c00615 	stw	r3,24(r23)
    7a80:	90800517 	ldw	r2,20(r18)
    7a84:	b8800715 	stw	r2,28(r23)
    7a88:	003fb906 	br	7970 <_realloc_r+0x4d8>

00007a8c <__isinfd>:
    7a8c:	200d883a 	mov	r6,r4
    7a90:	0109c83a 	sub	r4,zero,r4
    7a94:	2188b03a 	or	r4,r4,r6
    7a98:	2008d7fa 	srli	r4,r4,31
    7a9c:	00a00034 	movhi	r2,32768
    7aa0:	10bfffc4 	addi	r2,r2,-1
    7aa4:	1144703a 	and	r2,r2,r5
    7aa8:	2088b03a 	or	r4,r4,r2
    7aac:	009ffc34 	movhi	r2,32752
    7ab0:	1105c83a 	sub	r2,r2,r4
    7ab4:	0087c83a 	sub	r3,zero,r2
    7ab8:	10c4b03a 	or	r2,r2,r3
    7abc:	1004d7fa 	srli	r2,r2,31
    7ac0:	00c00044 	movi	r3,1
    7ac4:	1885c83a 	sub	r2,r3,r2
    7ac8:	f800283a 	ret

00007acc <__isnand>:
    7acc:	200d883a 	mov	r6,r4
    7ad0:	0109c83a 	sub	r4,zero,r4
    7ad4:	2188b03a 	or	r4,r4,r6
    7ad8:	2008d7fa 	srli	r4,r4,31
    7adc:	00a00034 	movhi	r2,32768
    7ae0:	10bfffc4 	addi	r2,r2,-1
    7ae4:	1144703a 	and	r2,r2,r5
    7ae8:	2088b03a 	or	r4,r4,r2
    7aec:	009ffc34 	movhi	r2,32752
    7af0:	1105c83a 	sub	r2,r2,r4
    7af4:	1004d7fa 	srli	r2,r2,31
    7af8:	f800283a 	ret

00007afc <__sclose>:
    7afc:	2940038f 	ldh	r5,14(r5)
    7b00:	0007e441 	jmpi	7e44 <_close_r>

00007b04 <__sseek>:
    7b04:	defffe04 	addi	sp,sp,-8
    7b08:	dc000015 	stw	r16,0(sp)
    7b0c:	2821883a 	mov	r16,r5
    7b10:	2940038f 	ldh	r5,14(r5)
    7b14:	dfc00115 	stw	ra,4(sp)
    7b18:	00080bc0 	call	80bc <_lseek_r>
    7b1c:	1007883a 	mov	r3,r2
    7b20:	00bfffc4 	movi	r2,-1
    7b24:	18800926 	beq	r3,r2,7b4c <__sseek+0x48>
    7b28:	8080030b 	ldhu	r2,12(r16)
    7b2c:	80c01415 	stw	r3,80(r16)
    7b30:	10840014 	ori	r2,r2,4096
    7b34:	8080030d 	sth	r2,12(r16)
    7b38:	1805883a 	mov	r2,r3
    7b3c:	dfc00117 	ldw	ra,4(sp)
    7b40:	dc000017 	ldw	r16,0(sp)
    7b44:	dec00204 	addi	sp,sp,8
    7b48:	f800283a 	ret
    7b4c:	8080030b 	ldhu	r2,12(r16)
    7b50:	10bbffcc 	andi	r2,r2,61439
    7b54:	8080030d 	sth	r2,12(r16)
    7b58:	1805883a 	mov	r2,r3
    7b5c:	dfc00117 	ldw	ra,4(sp)
    7b60:	dc000017 	ldw	r16,0(sp)
    7b64:	dec00204 	addi	sp,sp,8
    7b68:	f800283a 	ret

00007b6c <__swrite>:
    7b6c:	2880030b 	ldhu	r2,12(r5)
    7b70:	defffb04 	addi	sp,sp,-20
    7b74:	dcc00315 	stw	r19,12(sp)
    7b78:	1080400c 	andi	r2,r2,256
    7b7c:	dc800215 	stw	r18,8(sp)
    7b80:	dc400115 	stw	r17,4(sp)
    7b84:	dc000015 	stw	r16,0(sp)
    7b88:	3027883a 	mov	r19,r6
    7b8c:	3825883a 	mov	r18,r7
    7b90:	dfc00415 	stw	ra,16(sp)
    7b94:	2821883a 	mov	r16,r5
    7b98:	000d883a 	mov	r6,zero
    7b9c:	01c00084 	movi	r7,2
    7ba0:	2023883a 	mov	r17,r4
    7ba4:	10000226 	beq	r2,zero,7bb0 <__swrite+0x44>
    7ba8:	2940038f 	ldh	r5,14(r5)
    7bac:	00080bc0 	call	80bc <_lseek_r>
    7bb0:	8080030b 	ldhu	r2,12(r16)
    7bb4:	8140038f 	ldh	r5,14(r16)
    7bb8:	8809883a 	mov	r4,r17
    7bbc:	10bbffcc 	andi	r2,r2,61439
    7bc0:	980d883a 	mov	r6,r19
    7bc4:	900f883a 	mov	r7,r18
    7bc8:	8080030d 	sth	r2,12(r16)
    7bcc:	dfc00417 	ldw	ra,16(sp)
    7bd0:	dcc00317 	ldw	r19,12(sp)
    7bd4:	dc800217 	ldw	r18,8(sp)
    7bd8:	dc400117 	ldw	r17,4(sp)
    7bdc:	dc000017 	ldw	r16,0(sp)
    7be0:	dec00504 	addi	sp,sp,20
    7be4:	0007d041 	jmpi	7d04 <_write_r>

00007be8 <__sread>:
    7be8:	defffe04 	addi	sp,sp,-8
    7bec:	dc000015 	stw	r16,0(sp)
    7bf0:	2821883a 	mov	r16,r5
    7bf4:	2940038f 	ldh	r5,14(r5)
    7bf8:	dfc00115 	stw	ra,4(sp)
    7bfc:	00081340 	call	8134 <_read_r>
    7c00:	1007883a 	mov	r3,r2
    7c04:	10000816 	blt	r2,zero,7c28 <__sread+0x40>
    7c08:	80801417 	ldw	r2,80(r16)
    7c0c:	10c5883a 	add	r2,r2,r3
    7c10:	80801415 	stw	r2,80(r16)
    7c14:	1805883a 	mov	r2,r3
    7c18:	dfc00117 	ldw	ra,4(sp)
    7c1c:	dc000017 	ldw	r16,0(sp)
    7c20:	dec00204 	addi	sp,sp,8
    7c24:	f800283a 	ret
    7c28:	8080030b 	ldhu	r2,12(r16)
    7c2c:	10bbffcc 	andi	r2,r2,61439
    7c30:	8080030d 	sth	r2,12(r16)
    7c34:	1805883a 	mov	r2,r3
    7c38:	dfc00117 	ldw	ra,4(sp)
    7c3c:	dc000017 	ldw	r16,0(sp)
    7c40:	dec00204 	addi	sp,sp,8
    7c44:	f800283a 	ret

00007c48 <strcmp>:
    7c48:	2144b03a 	or	r2,r4,r5
    7c4c:	108000cc 	andi	r2,r2,3
    7c50:	10001d1e 	bne	r2,zero,7cc8 <strcmp+0x80>
    7c54:	200f883a 	mov	r7,r4
    7c58:	28800017 	ldw	r2,0(r5)
    7c5c:	21000017 	ldw	r4,0(r4)
    7c60:	280d883a 	mov	r6,r5
    7c64:	2080161e 	bne	r4,r2,7cc0 <strcmp+0x78>
    7c68:	023fbff4 	movhi	r8,65279
    7c6c:	423fbfc4 	addi	r8,r8,-257
    7c70:	2207883a 	add	r3,r4,r8
    7c74:	01602074 	movhi	r5,32897
    7c78:	29602004 	addi	r5,r5,-32640
    7c7c:	1946703a 	and	r3,r3,r5
    7c80:	0104303a 	nor	r2,zero,r4
    7c84:	10c4703a 	and	r2,r2,r3
    7c88:	10001c1e 	bne	r2,zero,7cfc <strcmp+0xb4>
    7c8c:	4013883a 	mov	r9,r8
    7c90:	2811883a 	mov	r8,r5
    7c94:	00000106 	br	7c9c <strcmp+0x54>
    7c98:	1800181e 	bne	r3,zero,7cfc <strcmp+0xb4>
    7c9c:	39c00104 	addi	r7,r7,4
    7ca0:	39000017 	ldw	r4,0(r7)
    7ca4:	31800104 	addi	r6,r6,4
    7ca8:	31400017 	ldw	r5,0(r6)
    7cac:	2245883a 	add	r2,r4,r9
    7cb0:	1204703a 	and	r2,r2,r8
    7cb4:	0106303a 	nor	r3,zero,r4
    7cb8:	1886703a 	and	r3,r3,r2
    7cbc:	217ff626 	beq	r4,r5,7c98 <strcmp+0x50>
    7cc0:	3809883a 	mov	r4,r7
    7cc4:	300b883a 	mov	r5,r6
    7cc8:	20c00007 	ldb	r3,0(r4)
    7ccc:	1800051e 	bne	r3,zero,7ce4 <strcmp+0x9c>
    7cd0:	00000606 	br	7cec <strcmp+0xa4>
    7cd4:	21000044 	addi	r4,r4,1
    7cd8:	20c00007 	ldb	r3,0(r4)
    7cdc:	29400044 	addi	r5,r5,1
    7ce0:	18000226 	beq	r3,zero,7cec <strcmp+0xa4>
    7ce4:	28800007 	ldb	r2,0(r5)
    7ce8:	18bffa26 	beq	r3,r2,7cd4 <strcmp+0x8c>
    7cec:	20c00003 	ldbu	r3,0(r4)
    7cf0:	28800003 	ldbu	r2,0(r5)
    7cf4:	1885c83a 	sub	r2,r3,r2
    7cf8:	f800283a 	ret
    7cfc:	0005883a 	mov	r2,zero
    7d00:	f800283a 	ret

00007d04 <_write_r>:
    7d04:	defffd04 	addi	sp,sp,-12
    7d08:	dc000015 	stw	r16,0(sp)
    7d0c:	04000074 	movhi	r16,1
    7d10:	8403d904 	addi	r16,r16,3940
    7d14:	dc400115 	stw	r17,4(sp)
    7d18:	80000015 	stw	zero,0(r16)
    7d1c:	2023883a 	mov	r17,r4
    7d20:	2809883a 	mov	r4,r5
    7d24:	300b883a 	mov	r5,r6
    7d28:	380d883a 	mov	r6,r7
    7d2c:	dfc00215 	stw	ra,8(sp)
    7d30:	000b5780 	call	b578 <write>
    7d34:	1007883a 	mov	r3,r2
    7d38:	00bfffc4 	movi	r2,-1
    7d3c:	18800626 	beq	r3,r2,7d58 <_write_r+0x54>
    7d40:	1805883a 	mov	r2,r3
    7d44:	dfc00217 	ldw	ra,8(sp)
    7d48:	dc400117 	ldw	r17,4(sp)
    7d4c:	dc000017 	ldw	r16,0(sp)
    7d50:	dec00304 	addi	sp,sp,12
    7d54:	f800283a 	ret
    7d58:	80800017 	ldw	r2,0(r16)
    7d5c:	103ff826 	beq	r2,zero,7d40 <_write_r+0x3c>
    7d60:	88800015 	stw	r2,0(r17)
    7d64:	1805883a 	mov	r2,r3
    7d68:	dfc00217 	ldw	ra,8(sp)
    7d6c:	dc400117 	ldw	r17,4(sp)
    7d70:	dc000017 	ldw	r16,0(sp)
    7d74:	dec00304 	addi	sp,sp,12
    7d78:	f800283a 	ret

00007d7c <_calloc_r>:
    7d7c:	defffe04 	addi	sp,sp,-8
    7d80:	dc400015 	stw	r17,0(sp)
    7d84:	2023883a 	mov	r17,r4
    7d88:	2809883a 	mov	r4,r5
    7d8c:	300b883a 	mov	r5,r6
    7d90:	dfc00115 	stw	ra,4(sp)
    7d94:	0000d140 	call	d14 <__mulsi3>
    7d98:	100b883a 	mov	r5,r2
    7d9c:	8809883a 	mov	r4,r17
    7da0:	0000d740 	call	d74 <_malloc_r>
    7da4:	1023883a 	mov	r17,r2
    7da8:	01c00904 	movi	r7,36
    7dac:	10000d26 	beq	r2,zero,7de4 <_calloc_r+0x68>
    7db0:	10ffff17 	ldw	r3,-4(r2)
    7db4:	1009883a 	mov	r4,r2
    7db8:	00bfff04 	movi	r2,-4
    7dbc:	1886703a 	and	r3,r3,r2
    7dc0:	1887883a 	add	r3,r3,r2
    7dc4:	180d883a 	mov	r6,r3
    7dc8:	000b883a 	mov	r5,zero
    7dcc:	38c01736 	bltu	r7,r3,7e2c <_calloc_r+0xb0>
    7dd0:	008004c4 	movi	r2,19
    7dd4:	10c00836 	bltu	r2,r3,7df8 <_calloc_r+0x7c>
    7dd8:	20000215 	stw	zero,8(r4)
    7ddc:	20000015 	stw	zero,0(r4)
    7de0:	20000115 	stw	zero,4(r4)
    7de4:	8805883a 	mov	r2,r17
    7de8:	dfc00117 	ldw	ra,4(sp)
    7dec:	dc400017 	ldw	r17,0(sp)
    7df0:	dec00204 	addi	sp,sp,8
    7df4:	f800283a 	ret
    7df8:	008006c4 	movi	r2,27
    7dfc:	88000015 	stw	zero,0(r17)
    7e00:	88000115 	stw	zero,4(r17)
    7e04:	89000204 	addi	r4,r17,8
    7e08:	10fff32e 	bgeu	r2,r3,7dd8 <_calloc_r+0x5c>
    7e0c:	88000215 	stw	zero,8(r17)
    7e10:	88000315 	stw	zero,12(r17)
    7e14:	89000404 	addi	r4,r17,16
    7e18:	19ffef1e 	bne	r3,r7,7dd8 <_calloc_r+0x5c>
    7e1c:	89000604 	addi	r4,r17,24
    7e20:	88000415 	stw	zero,16(r17)
    7e24:	88000515 	stw	zero,20(r17)
    7e28:	003feb06 	br	7dd8 <_calloc_r+0x5c>
    7e2c:	00063740 	call	6374 <memset>
    7e30:	8805883a 	mov	r2,r17
    7e34:	dfc00117 	ldw	ra,4(sp)
    7e38:	dc400017 	ldw	r17,0(sp)
    7e3c:	dec00204 	addi	sp,sp,8
    7e40:	f800283a 	ret

00007e44 <_close_r>:
    7e44:	defffd04 	addi	sp,sp,-12
    7e48:	dc000015 	stw	r16,0(sp)
    7e4c:	04000074 	movhi	r16,1
    7e50:	8403d904 	addi	r16,r16,3940
    7e54:	dc400115 	stw	r17,4(sp)
    7e58:	80000015 	stw	zero,0(r16)
    7e5c:	2023883a 	mov	r17,r4
    7e60:	2809883a 	mov	r4,r5
    7e64:	dfc00215 	stw	ra,8(sp)
    7e68:	000a7b00 	call	a7b0 <close>
    7e6c:	1007883a 	mov	r3,r2
    7e70:	00bfffc4 	movi	r2,-1
    7e74:	18800626 	beq	r3,r2,7e90 <_close_r+0x4c>
    7e78:	1805883a 	mov	r2,r3
    7e7c:	dfc00217 	ldw	ra,8(sp)
    7e80:	dc400117 	ldw	r17,4(sp)
    7e84:	dc000017 	ldw	r16,0(sp)
    7e88:	dec00304 	addi	sp,sp,12
    7e8c:	f800283a 	ret
    7e90:	80800017 	ldw	r2,0(r16)
    7e94:	103ff826 	beq	r2,zero,7e78 <_close_r+0x34>
    7e98:	88800015 	stw	r2,0(r17)
    7e9c:	1805883a 	mov	r2,r3
    7ea0:	dfc00217 	ldw	ra,8(sp)
    7ea4:	dc400117 	ldw	r17,4(sp)
    7ea8:	dc000017 	ldw	r16,0(sp)
    7eac:	dec00304 	addi	sp,sp,12
    7eb0:	f800283a 	ret

00007eb4 <_fclose_r>:
    7eb4:	defffc04 	addi	sp,sp,-16
    7eb8:	dc400115 	stw	r17,4(sp)
    7ebc:	dc000015 	stw	r16,0(sp)
    7ec0:	dfc00315 	stw	ra,12(sp)
    7ec4:	dc800215 	stw	r18,8(sp)
    7ec8:	2821883a 	mov	r16,r5
    7ecc:	2023883a 	mov	r17,r4
    7ed0:	28002926 	beq	r5,zero,7f78 <_fclose_r+0xc4>
    7ed4:	00051c00 	call	51c0 <__sfp_lock_acquire>
    7ed8:	88000226 	beq	r17,zero,7ee4 <_fclose_r+0x30>
    7edc:	88800e17 	ldw	r2,56(r17)
    7ee0:	10002d26 	beq	r2,zero,7f98 <_fclose_r+0xe4>
    7ee4:	8080030f 	ldh	r2,12(r16)
    7ee8:	10002226 	beq	r2,zero,7f74 <_fclose_r+0xc0>
    7eec:	8809883a 	mov	r4,r17
    7ef0:	800b883a 	mov	r5,r16
    7ef4:	0004f380 	call	4f38 <_fflush_r>
    7ef8:	1025883a 	mov	r18,r2
    7efc:	80800b17 	ldw	r2,44(r16)
    7f00:	10000426 	beq	r2,zero,7f14 <_fclose_r+0x60>
    7f04:	81400717 	ldw	r5,28(r16)
    7f08:	8809883a 	mov	r4,r17
    7f0c:	103ee83a 	callr	r2
    7f10:	10002a16 	blt	r2,zero,7fbc <_fclose_r+0x108>
    7f14:	8080030b 	ldhu	r2,12(r16)
    7f18:	1080200c 	andi	r2,r2,128
    7f1c:	1000231e 	bne	r2,zero,7fac <_fclose_r+0xf8>
    7f20:	81400c17 	ldw	r5,48(r16)
    7f24:	28000526 	beq	r5,zero,7f3c <_fclose_r+0x88>
    7f28:	80801004 	addi	r2,r16,64
    7f2c:	28800226 	beq	r5,r2,7f38 <_fclose_r+0x84>
    7f30:	8809883a 	mov	r4,r17
    7f34:	00055880 	call	5588 <_free_r>
    7f38:	80000c15 	stw	zero,48(r16)
    7f3c:	81401117 	ldw	r5,68(r16)
    7f40:	28000326 	beq	r5,zero,7f50 <_fclose_r+0x9c>
    7f44:	8809883a 	mov	r4,r17
    7f48:	00055880 	call	5588 <_free_r>
    7f4c:	80001115 	stw	zero,68(r16)
    7f50:	8000030d 	sth	zero,12(r16)
    7f54:	00051c40 	call	51c4 <__sfp_lock_release>
    7f58:	9005883a 	mov	r2,r18
    7f5c:	dfc00317 	ldw	ra,12(sp)
    7f60:	dc800217 	ldw	r18,8(sp)
    7f64:	dc400117 	ldw	r17,4(sp)
    7f68:	dc000017 	ldw	r16,0(sp)
    7f6c:	dec00404 	addi	sp,sp,16
    7f70:	f800283a 	ret
    7f74:	00051c40 	call	51c4 <__sfp_lock_release>
    7f78:	0025883a 	mov	r18,zero
    7f7c:	9005883a 	mov	r2,r18
    7f80:	dfc00317 	ldw	ra,12(sp)
    7f84:	dc800217 	ldw	r18,8(sp)
    7f88:	dc400117 	ldw	r17,4(sp)
    7f8c:	dc000017 	ldw	r16,0(sp)
    7f90:	dec00404 	addi	sp,sp,16
    7f94:	f800283a 	ret
    7f98:	8809883a 	mov	r4,r17
    7f9c:	00051d00 	call	51d0 <__sinit>
    7fa0:	8080030f 	ldh	r2,12(r16)
    7fa4:	103fd11e 	bne	r2,zero,7eec <_fclose_r+0x38>
    7fa8:	003ff206 	br	7f74 <_fclose_r+0xc0>
    7fac:	81400417 	ldw	r5,16(r16)
    7fb0:	8809883a 	mov	r4,r17
    7fb4:	00055880 	call	5588 <_free_r>
    7fb8:	003fd906 	br	7f20 <_fclose_r+0x6c>
    7fbc:	04bfffc4 	movi	r18,-1
    7fc0:	003fd406 	br	7f14 <_fclose_r+0x60>

00007fc4 <fclose>:
    7fc4:	00800074 	movhi	r2,1
    7fc8:	10bd2d04 	addi	r2,r2,-2892
    7fcc:	200b883a 	mov	r5,r4
    7fd0:	11000017 	ldw	r4,0(r2)
    7fd4:	0007eb41 	jmpi	7eb4 <_fclose_r>

00007fd8 <_fstat_r>:
    7fd8:	defffd04 	addi	sp,sp,-12
    7fdc:	dc000015 	stw	r16,0(sp)
    7fe0:	04000074 	movhi	r16,1
    7fe4:	8403d904 	addi	r16,r16,3940
    7fe8:	dc400115 	stw	r17,4(sp)
    7fec:	80000015 	stw	zero,0(r16)
    7ff0:	2023883a 	mov	r17,r4
    7ff4:	2809883a 	mov	r4,r5
    7ff8:	300b883a 	mov	r5,r6
    7ffc:	dfc00215 	stw	ra,8(sp)
    8000:	000a93c0 	call	a93c <fstat>
    8004:	1007883a 	mov	r3,r2
    8008:	00bfffc4 	movi	r2,-1
    800c:	18800626 	beq	r3,r2,8028 <_fstat_r+0x50>
    8010:	1805883a 	mov	r2,r3
    8014:	dfc00217 	ldw	ra,8(sp)
    8018:	dc400117 	ldw	r17,4(sp)
    801c:	dc000017 	ldw	r16,0(sp)
    8020:	dec00304 	addi	sp,sp,12
    8024:	f800283a 	ret
    8028:	80800017 	ldw	r2,0(r16)
    802c:	103ff826 	beq	r2,zero,8010 <_fstat_r+0x38>
    8030:	88800015 	stw	r2,0(r17)
    8034:	1805883a 	mov	r2,r3
    8038:	dfc00217 	ldw	ra,8(sp)
    803c:	dc400117 	ldw	r17,4(sp)
    8040:	dc000017 	ldw	r16,0(sp)
    8044:	dec00304 	addi	sp,sp,12
    8048:	f800283a 	ret

0000804c <_isatty_r>:
    804c:	defffd04 	addi	sp,sp,-12
    8050:	dc000015 	stw	r16,0(sp)
    8054:	04000074 	movhi	r16,1
    8058:	8403d904 	addi	r16,r16,3940
    805c:	dc400115 	stw	r17,4(sp)
    8060:	80000015 	stw	zero,0(r16)
    8064:	2023883a 	mov	r17,r4
    8068:	2809883a 	mov	r4,r5
    806c:	dfc00215 	stw	ra,8(sp)
    8070:	000aa740 	call	aa74 <isatty>
    8074:	1007883a 	mov	r3,r2
    8078:	00bfffc4 	movi	r2,-1
    807c:	18800626 	beq	r3,r2,8098 <_isatty_r+0x4c>
    8080:	1805883a 	mov	r2,r3
    8084:	dfc00217 	ldw	ra,8(sp)
    8088:	dc400117 	ldw	r17,4(sp)
    808c:	dc000017 	ldw	r16,0(sp)
    8090:	dec00304 	addi	sp,sp,12
    8094:	f800283a 	ret
    8098:	80800017 	ldw	r2,0(r16)
    809c:	103ff826 	beq	r2,zero,8080 <_isatty_r+0x34>
    80a0:	88800015 	stw	r2,0(r17)
    80a4:	1805883a 	mov	r2,r3
    80a8:	dfc00217 	ldw	ra,8(sp)
    80ac:	dc400117 	ldw	r17,4(sp)
    80b0:	dc000017 	ldw	r16,0(sp)
    80b4:	dec00304 	addi	sp,sp,12
    80b8:	f800283a 	ret

000080bc <_lseek_r>:
    80bc:	defffd04 	addi	sp,sp,-12
    80c0:	dc000015 	stw	r16,0(sp)
    80c4:	04000074 	movhi	r16,1
    80c8:	8403d904 	addi	r16,r16,3940
    80cc:	dc400115 	stw	r17,4(sp)
    80d0:	80000015 	stw	zero,0(r16)
    80d4:	2023883a 	mov	r17,r4
    80d8:	2809883a 	mov	r4,r5
    80dc:	300b883a 	mov	r5,r6
    80e0:	380d883a 	mov	r6,r7
    80e4:	dfc00215 	stw	ra,8(sp)
    80e8:	000ac840 	call	ac84 <lseek>
    80ec:	1007883a 	mov	r3,r2
    80f0:	00bfffc4 	movi	r2,-1
    80f4:	18800626 	beq	r3,r2,8110 <_lseek_r+0x54>
    80f8:	1805883a 	mov	r2,r3
    80fc:	dfc00217 	ldw	ra,8(sp)
    8100:	dc400117 	ldw	r17,4(sp)
    8104:	dc000017 	ldw	r16,0(sp)
    8108:	dec00304 	addi	sp,sp,12
    810c:	f800283a 	ret
    8110:	80800017 	ldw	r2,0(r16)
    8114:	103ff826 	beq	r2,zero,80f8 <_lseek_r+0x3c>
    8118:	88800015 	stw	r2,0(r17)
    811c:	1805883a 	mov	r2,r3
    8120:	dfc00217 	ldw	ra,8(sp)
    8124:	dc400117 	ldw	r17,4(sp)
    8128:	dc000017 	ldw	r16,0(sp)
    812c:	dec00304 	addi	sp,sp,12
    8130:	f800283a 	ret

00008134 <_read_r>:
    8134:	defffd04 	addi	sp,sp,-12
    8138:	dc000015 	stw	r16,0(sp)
    813c:	04000074 	movhi	r16,1
    8140:	8403d904 	addi	r16,r16,3940
    8144:	dc400115 	stw	r17,4(sp)
    8148:	80000015 	stw	zero,0(r16)
    814c:	2023883a 	mov	r17,r4
    8150:	2809883a 	mov	r4,r5
    8154:	300b883a 	mov	r5,r6
    8158:	380d883a 	mov	r6,r7
    815c:	dfc00215 	stw	ra,8(sp)
    8160:	000b11c0 	call	b11c <read>
    8164:	1007883a 	mov	r3,r2
    8168:	00bfffc4 	movi	r2,-1
    816c:	18800626 	beq	r3,r2,8188 <_read_r+0x54>
    8170:	1805883a 	mov	r2,r3
    8174:	dfc00217 	ldw	ra,8(sp)
    8178:	dc400117 	ldw	r17,4(sp)
    817c:	dc000017 	ldw	r16,0(sp)
    8180:	dec00304 	addi	sp,sp,12
    8184:	f800283a 	ret
    8188:	80800017 	ldw	r2,0(r16)
    818c:	103ff826 	beq	r2,zero,8170 <_read_r+0x3c>
    8190:	88800015 	stw	r2,0(r17)
    8194:	1805883a 	mov	r2,r3
    8198:	dfc00217 	ldw	ra,8(sp)
    819c:	dc400117 	ldw	r17,4(sp)
    81a0:	dc000017 	ldw	r16,0(sp)
    81a4:	dec00304 	addi	sp,sp,12
    81a8:	f800283a 	ret

000081ac <__udivdi3>:
    81ac:	defff104 	addi	sp,sp,-60
    81b0:	0015883a 	mov	r10,zero
    81b4:	2005883a 	mov	r2,r4
    81b8:	3011883a 	mov	r8,r6
    81bc:	df000d15 	stw	fp,52(sp)
    81c0:	dd400a15 	stw	r21,40(sp)
    81c4:	dcc00815 	stw	r19,32(sp)
    81c8:	dfc00e15 	stw	ra,56(sp)
    81cc:	ddc00c15 	stw	r23,48(sp)
    81d0:	dd800b15 	stw	r22,44(sp)
    81d4:	dd000915 	stw	r20,36(sp)
    81d8:	dc800715 	stw	r18,28(sp)
    81dc:	dc400615 	stw	r17,24(sp)
    81e0:	dc000515 	stw	r16,20(sp)
    81e4:	da800315 	stw	r10,12(sp)
    81e8:	4027883a 	mov	r19,r8
    81ec:	1039883a 	mov	fp,r2
    81f0:	282b883a 	mov	r21,r5
    81f4:	da800415 	stw	r10,16(sp)
    81f8:	3800401e 	bne	r7,zero,82fc <__udivdi3+0x150>
    81fc:	2a006536 	bltu	r5,r8,8394 <__udivdi3+0x1e8>
    8200:	4000b526 	beq	r8,zero,84d8 <__udivdi3+0x32c>
    8204:	00bfffd4 	movui	r2,65535
    8208:	14c0ad36 	bltu	r2,r19,84c0 <__udivdi3+0x314>
    820c:	00803fc4 	movi	r2,255
    8210:	14c15e36 	bltu	r2,r19,878c <__udivdi3+0x5e0>
    8214:	000b883a 	mov	r5,zero
    8218:	0005883a 	mov	r2,zero
    821c:	9884d83a 	srl	r2,r19,r2
    8220:	01000074 	movhi	r4,1
    8224:	21365804 	addi	r4,r4,-9888
    8228:	01800804 	movi	r6,32
    822c:	1105883a 	add	r2,r2,r4
    8230:	10c00003 	ldbu	r3,0(r2)
    8234:	28c7883a 	add	r3,r5,r3
    8238:	30e9c83a 	sub	r20,r6,r3
    823c:	a0010a1e 	bne	r20,zero,8668 <__udivdi3+0x4bc>
    8240:	982ed43a 	srli	r23,r19,16
    8244:	acebc83a 	sub	r21,r21,r19
    8248:	9dbfffcc 	andi	r22,r19,65535
    824c:	05000044 	movi	r20,1
    8250:	a809883a 	mov	r4,r21
    8254:	b80b883a 	mov	r5,r23
    8258:	0000d040 	call	d04 <__udivsi3>
    825c:	100b883a 	mov	r5,r2
    8260:	b009883a 	mov	r4,r22
    8264:	1021883a 	mov	r16,r2
    8268:	0000d140 	call	d14 <__mulsi3>
    826c:	a809883a 	mov	r4,r21
    8270:	b80b883a 	mov	r5,r23
    8274:	1023883a 	mov	r17,r2
    8278:	0000d0c0 	call	d0c <__umodsi3>
    827c:	1004943a 	slli	r2,r2,16
    8280:	e006d43a 	srli	r3,fp,16
    8284:	10c4b03a 	or	r2,r2,r3
    8288:	1440042e 	bgeu	r2,r17,829c <__udivdi3+0xf0>
    828c:	14c5883a 	add	r2,r2,r19
    8290:	843fffc4 	addi	r16,r16,-1
    8294:	14c00136 	bltu	r2,r19,829c <__udivdi3+0xf0>
    8298:	14415c36 	bltu	r2,r17,880c <__udivdi3+0x660>
    829c:	1463c83a 	sub	r17,r2,r17
    82a0:	8809883a 	mov	r4,r17
    82a4:	b80b883a 	mov	r5,r23
    82a8:	0000d040 	call	d04 <__udivsi3>
    82ac:	100b883a 	mov	r5,r2
    82b0:	b009883a 	mov	r4,r22
    82b4:	102b883a 	mov	r21,r2
    82b8:	0000d140 	call	d14 <__mulsi3>
    82bc:	8809883a 	mov	r4,r17
    82c0:	b80b883a 	mov	r5,r23
    82c4:	1025883a 	mov	r18,r2
    82c8:	0000d0c0 	call	d0c <__umodsi3>
    82cc:	1004943a 	slli	r2,r2,16
    82d0:	e0ffffcc 	andi	r3,fp,65535
    82d4:	10c4b03a 	or	r2,r2,r3
    82d8:	1480042e 	bgeu	r2,r18,82ec <__udivdi3+0x140>
    82dc:	9885883a 	add	r2,r19,r2
    82e0:	ad7fffc4 	addi	r21,r21,-1
    82e4:	14c00136 	bltu	r2,r19,82ec <__udivdi3+0x140>
    82e8:	14813c36 	bltu	r2,r18,87dc <__udivdi3+0x630>
    82ec:	8004943a 	slli	r2,r16,16
    82f0:	a009883a 	mov	r4,r20
    82f4:	a884b03a 	or	r2,r21,r2
    82f8:	00001506 	br	8350 <__udivdi3+0x1a4>
    82fc:	380d883a 	mov	r6,r7
    8300:	29c06c36 	bltu	r5,r7,84b4 <__udivdi3+0x308>
    8304:	00bfffd4 	movui	r2,65535
    8308:	11c06436 	bltu	r2,r7,849c <__udivdi3+0x2f0>
    830c:	00803fc4 	movi	r2,255
    8310:	11c11836 	bltu	r2,r7,8774 <__udivdi3+0x5c8>
    8314:	000b883a 	mov	r5,zero
    8318:	0005883a 	mov	r2,zero
    831c:	3084d83a 	srl	r2,r6,r2
    8320:	01000074 	movhi	r4,1
    8324:	21365804 	addi	r4,r4,-9888
    8328:	01c00804 	movi	r7,32
    832c:	1105883a 	add	r2,r2,r4
    8330:	10c00003 	ldbu	r3,0(r2)
    8334:	28c7883a 	add	r3,r5,r3
    8338:	38edc83a 	sub	r22,r7,r3
    833c:	b000731e 	bne	r22,zero,850c <__udivdi3+0x360>
    8340:	35400136 	bltu	r6,r21,8348 <__udivdi3+0x19c>
    8344:	e4c05b36 	bltu	fp,r19,84b4 <__udivdi3+0x308>
    8348:	00800044 	movi	r2,1
    834c:	0009883a 	mov	r4,zero
    8350:	d8800315 	stw	r2,12(sp)
    8354:	d9400317 	ldw	r5,12(sp)
    8358:	2007883a 	mov	r3,r4
    835c:	d9000415 	stw	r4,16(sp)
    8360:	2805883a 	mov	r2,r5
    8364:	dfc00e17 	ldw	ra,56(sp)
    8368:	df000d17 	ldw	fp,52(sp)
    836c:	ddc00c17 	ldw	r23,48(sp)
    8370:	dd800b17 	ldw	r22,44(sp)
    8374:	dd400a17 	ldw	r21,40(sp)
    8378:	dd000917 	ldw	r20,36(sp)
    837c:	dcc00817 	ldw	r19,32(sp)
    8380:	dc800717 	ldw	r18,28(sp)
    8384:	dc400617 	ldw	r17,24(sp)
    8388:	dc000517 	ldw	r16,20(sp)
    838c:	dec00f04 	addi	sp,sp,60
    8390:	f800283a 	ret
    8394:	00bfffd4 	movui	r2,65535
    8398:	12005636 	bltu	r2,r8,84f4 <__udivdi3+0x348>
    839c:	00803fc4 	movi	r2,255
    83a0:	12010036 	bltu	r2,r8,87a4 <__udivdi3+0x5f8>
    83a4:	000b883a 	mov	r5,zero
    83a8:	0005883a 	mov	r2,zero
    83ac:	9884d83a 	srl	r2,r19,r2
    83b0:	01000074 	movhi	r4,1
    83b4:	21365804 	addi	r4,r4,-9888
    83b8:	01800804 	movi	r6,32
    83bc:	1105883a 	add	r2,r2,r4
    83c0:	10c00003 	ldbu	r3,0(r2)
    83c4:	28c7883a 	add	r3,r5,r3
    83c8:	30cbc83a 	sub	r5,r6,r3
    83cc:	28000626 	beq	r5,zero,83e8 <__udivdi3+0x23c>
    83d0:	3145c83a 	sub	r2,r6,r5
    83d4:	e084d83a 	srl	r2,fp,r2
    83d8:	a946983a 	sll	r3,r21,r5
    83dc:	e178983a 	sll	fp,fp,r5
    83e0:	9966983a 	sll	r19,r19,r5
    83e4:	18aab03a 	or	r21,r3,r2
    83e8:	982ed43a 	srli	r23,r19,16
    83ec:	a809883a 	mov	r4,r21
    83f0:	9cbfffcc 	andi	r18,r19,65535
    83f4:	b80b883a 	mov	r5,r23
    83f8:	0000d040 	call	d04 <__udivsi3>
    83fc:	100b883a 	mov	r5,r2
    8400:	9009883a 	mov	r4,r18
    8404:	1021883a 	mov	r16,r2
    8408:	0000d140 	call	d14 <__mulsi3>
    840c:	a809883a 	mov	r4,r21
    8410:	b80b883a 	mov	r5,r23
    8414:	1023883a 	mov	r17,r2
    8418:	0000d0c0 	call	d0c <__umodsi3>
    841c:	1004943a 	slli	r2,r2,16
    8420:	e006d43a 	srli	r3,fp,16
    8424:	10c4b03a 	or	r2,r2,r3
    8428:	1440042e 	bgeu	r2,r17,843c <__udivdi3+0x290>
    842c:	14c5883a 	add	r2,r2,r19
    8430:	843fffc4 	addi	r16,r16,-1
    8434:	14c00136 	bltu	r2,r19,843c <__udivdi3+0x290>
    8438:	1440ea36 	bltu	r2,r17,87e4 <__udivdi3+0x638>
    843c:	1463c83a 	sub	r17,r2,r17
    8440:	8809883a 	mov	r4,r17
    8444:	b80b883a 	mov	r5,r23
    8448:	0000d040 	call	d04 <__udivsi3>
    844c:	100b883a 	mov	r5,r2
    8450:	9009883a 	mov	r4,r18
    8454:	102b883a 	mov	r21,r2
    8458:	0000d140 	call	d14 <__mulsi3>
    845c:	8809883a 	mov	r4,r17
    8460:	b80b883a 	mov	r5,r23
    8464:	1025883a 	mov	r18,r2
    8468:	0000d0c0 	call	d0c <__umodsi3>
    846c:	1004943a 	slli	r2,r2,16
    8470:	e0ffffcc 	andi	r3,fp,65535
    8474:	10c4b03a 	or	r2,r2,r3
    8478:	1480042e 	bgeu	r2,r18,848c <__udivdi3+0x2e0>
    847c:	9885883a 	add	r2,r19,r2
    8480:	ad7fffc4 	addi	r21,r21,-1
    8484:	14c00136 	bltu	r2,r19,848c <__udivdi3+0x2e0>
    8488:	1480d936 	bltu	r2,r18,87f0 <__udivdi3+0x644>
    848c:	8004943a 	slli	r2,r16,16
    8490:	0009883a 	mov	r4,zero
    8494:	a884b03a 	or	r2,r21,r2
    8498:	003fad06 	br	8350 <__udivdi3+0x1a4>
    849c:	00804034 	movhi	r2,256
    84a0:	10bfffc4 	addi	r2,r2,-1
    84a4:	11c0b636 	bltu	r2,r7,8780 <__udivdi3+0x5d4>
    84a8:	01400404 	movi	r5,16
    84ac:	2805883a 	mov	r2,r5
    84b0:	003f9a06 	br	831c <__udivdi3+0x170>
    84b4:	0005883a 	mov	r2,zero
    84b8:	0009883a 	mov	r4,zero
    84bc:	003fa406 	br	8350 <__udivdi3+0x1a4>
    84c0:	00804034 	movhi	r2,256
    84c4:	10bfffc4 	addi	r2,r2,-1
    84c8:	14c0b336 	bltu	r2,r19,8798 <__udivdi3+0x5ec>
    84cc:	01400404 	movi	r5,16
    84d0:	2805883a 	mov	r2,r5
    84d4:	003f5106 	br	821c <__udivdi3+0x70>
    84d8:	01000044 	movi	r4,1
    84dc:	000b883a 	mov	r5,zero
    84e0:	0000d040 	call	d04 <__udivsi3>
    84e4:	1027883a 	mov	r19,r2
    84e8:	00bfffd4 	movui	r2,65535
    84ec:	14fff436 	bltu	r2,r19,84c0 <__udivdi3+0x314>
    84f0:	003f4606 	br	820c <__udivdi3+0x60>
    84f4:	00804034 	movhi	r2,256
    84f8:	10bfffc4 	addi	r2,r2,-1
    84fc:	1200ac36 	bltu	r2,r8,87b0 <__udivdi3+0x604>
    8500:	01400404 	movi	r5,16
    8504:	2805883a 	mov	r2,r5
    8508:	003fa806 	br	83ac <__udivdi3+0x200>
    850c:	3d85c83a 	sub	r2,r7,r22
    8510:	3588983a 	sll	r4,r6,r22
    8514:	9886d83a 	srl	r3,r19,r2
    8518:	a8a2d83a 	srl	r17,r21,r2
    851c:	e084d83a 	srl	r2,fp,r2
    8520:	20eeb03a 	or	r23,r4,r3
    8524:	b824d43a 	srli	r18,r23,16
    8528:	ad86983a 	sll	r3,r21,r22
    852c:	8809883a 	mov	r4,r17
    8530:	900b883a 	mov	r5,r18
    8534:	1886b03a 	or	r3,r3,r2
    8538:	d8c00115 	stw	r3,4(sp)
    853c:	bc3fffcc 	andi	r16,r23,65535
    8540:	0000d040 	call	d04 <__udivsi3>
    8544:	100b883a 	mov	r5,r2
    8548:	8009883a 	mov	r4,r16
    854c:	1029883a 	mov	r20,r2
    8550:	0000d140 	call	d14 <__mulsi3>
    8554:	900b883a 	mov	r5,r18
    8558:	8809883a 	mov	r4,r17
    855c:	102b883a 	mov	r21,r2
    8560:	0000d0c0 	call	d0c <__umodsi3>
    8564:	d9400117 	ldw	r5,4(sp)
    8568:	1004943a 	slli	r2,r2,16
    856c:	9da6983a 	sll	r19,r19,r22
    8570:	2806d43a 	srli	r3,r5,16
    8574:	10c4b03a 	or	r2,r2,r3
    8578:	1540032e 	bgeu	r2,r21,8588 <__udivdi3+0x3dc>
    857c:	15c5883a 	add	r2,r2,r23
    8580:	a53fffc4 	addi	r20,r20,-1
    8584:	15c0912e 	bgeu	r2,r23,87cc <__udivdi3+0x620>
    8588:	1563c83a 	sub	r17,r2,r21
    858c:	8809883a 	mov	r4,r17
    8590:	900b883a 	mov	r5,r18
    8594:	0000d040 	call	d04 <__udivsi3>
    8598:	100b883a 	mov	r5,r2
    859c:	8009883a 	mov	r4,r16
    85a0:	102b883a 	mov	r21,r2
    85a4:	0000d140 	call	d14 <__mulsi3>
    85a8:	8809883a 	mov	r4,r17
    85ac:	900b883a 	mov	r5,r18
    85b0:	1021883a 	mov	r16,r2
    85b4:	0000d0c0 	call	d0c <__umodsi3>
    85b8:	da800117 	ldw	r10,4(sp)
    85bc:	1004943a 	slli	r2,r2,16
    85c0:	50ffffcc 	andi	r3,r10,65535
    85c4:	10c6b03a 	or	r3,r2,r3
    85c8:	1c00032e 	bgeu	r3,r16,85d8 <__udivdi3+0x42c>
    85cc:	1dc7883a 	add	r3,r3,r23
    85d0:	ad7fffc4 	addi	r21,r21,-1
    85d4:	1dc0792e 	bgeu	r3,r23,87bc <__udivdi3+0x610>
    85d8:	a004943a 	slli	r2,r20,16
    85dc:	982ed43a 	srli	r23,r19,16
    85e0:	9cffffcc 	andi	r19,r19,65535
    85e4:	a8a4b03a 	or	r18,r21,r2
    85e8:	947fffcc 	andi	r17,r18,65535
    85ec:	902ad43a 	srli	r21,r18,16
    85f0:	8809883a 	mov	r4,r17
    85f4:	980b883a 	mov	r5,r19
    85f8:	1c21c83a 	sub	r16,r3,r16
    85fc:	0000d140 	call	d14 <__mulsi3>
    8600:	8809883a 	mov	r4,r17
    8604:	b80b883a 	mov	r5,r23
    8608:	1029883a 	mov	r20,r2
    860c:	0000d140 	call	d14 <__mulsi3>
    8610:	980b883a 	mov	r5,r19
    8614:	a809883a 	mov	r4,r21
    8618:	1023883a 	mov	r17,r2
    861c:	0000d140 	call	d14 <__mulsi3>
    8620:	a809883a 	mov	r4,r21
    8624:	b80b883a 	mov	r5,r23
    8628:	1027883a 	mov	r19,r2
    862c:	0000d140 	call	d14 <__mulsi3>
    8630:	1009883a 	mov	r4,r2
    8634:	a004d43a 	srli	r2,r20,16
    8638:	8ce3883a 	add	r17,r17,r19
    863c:	1447883a 	add	r3,r2,r17
    8640:	1cc0022e 	bgeu	r3,r19,864c <__udivdi3+0x4a0>
    8644:	00800074 	movhi	r2,1
    8648:	2089883a 	add	r4,r4,r2
    864c:	1804d43a 	srli	r2,r3,16
    8650:	2085883a 	add	r2,r4,r2
    8654:	80804436 	bltu	r16,r2,8768 <__udivdi3+0x5bc>
    8658:	80803e26 	beq	r16,r2,8754 <__udivdi3+0x5a8>
    865c:	9005883a 	mov	r2,r18
    8660:	0009883a 	mov	r4,zero
    8664:	003f3a06 	br	8350 <__udivdi3+0x1a4>
    8668:	9d26983a 	sll	r19,r19,r20
    866c:	3505c83a 	sub	r2,r6,r20
    8670:	a8a2d83a 	srl	r17,r21,r2
    8674:	982ed43a 	srli	r23,r19,16
    8678:	e084d83a 	srl	r2,fp,r2
    867c:	ad06983a 	sll	r3,r21,r20
    8680:	8809883a 	mov	r4,r17
    8684:	b80b883a 	mov	r5,r23
    8688:	1886b03a 	or	r3,r3,r2
    868c:	d8c00015 	stw	r3,0(sp)
    8690:	9dbfffcc 	andi	r22,r19,65535
    8694:	0000d040 	call	d04 <__udivsi3>
    8698:	100b883a 	mov	r5,r2
    869c:	b009883a 	mov	r4,r22
    86a0:	d8800215 	stw	r2,8(sp)
    86a4:	0000d140 	call	d14 <__mulsi3>
    86a8:	8809883a 	mov	r4,r17
    86ac:	b80b883a 	mov	r5,r23
    86b0:	102b883a 	mov	r21,r2
    86b4:	0000d0c0 	call	d0c <__umodsi3>
    86b8:	d9000017 	ldw	r4,0(sp)
    86bc:	1004943a 	slli	r2,r2,16
    86c0:	2006d43a 	srli	r3,r4,16
    86c4:	10c4b03a 	or	r2,r2,r3
    86c8:	1540052e 	bgeu	r2,r21,86e0 <__udivdi3+0x534>
    86cc:	d9400217 	ldw	r5,8(sp)
    86d0:	14c5883a 	add	r2,r2,r19
    86d4:	297fffc4 	addi	r5,r5,-1
    86d8:	d9400215 	stw	r5,8(sp)
    86dc:	14c0462e 	bgeu	r2,r19,87f8 <__udivdi3+0x64c>
    86e0:	1563c83a 	sub	r17,r2,r21
    86e4:	8809883a 	mov	r4,r17
    86e8:	b80b883a 	mov	r5,r23
    86ec:	0000d040 	call	d04 <__udivsi3>
    86f0:	100b883a 	mov	r5,r2
    86f4:	b009883a 	mov	r4,r22
    86f8:	1025883a 	mov	r18,r2
    86fc:	0000d140 	call	d14 <__mulsi3>
    8700:	8809883a 	mov	r4,r17
    8704:	b80b883a 	mov	r5,r23
    8708:	1021883a 	mov	r16,r2
    870c:	0000d0c0 	call	d0c <__umodsi3>
    8710:	da800017 	ldw	r10,0(sp)
    8714:	1004943a 	slli	r2,r2,16
    8718:	50ffffcc 	andi	r3,r10,65535
    871c:	10c6b03a 	or	r3,r2,r3
    8720:	1c00062e 	bgeu	r3,r16,873c <__udivdi3+0x590>
    8724:	1cc7883a 	add	r3,r3,r19
    8728:	94bfffc4 	addi	r18,r18,-1
    872c:	1cc00336 	bltu	r3,r19,873c <__udivdi3+0x590>
    8730:	1c00022e 	bgeu	r3,r16,873c <__udivdi3+0x590>
    8734:	94bfffc4 	addi	r18,r18,-1
    8738:	1cc7883a 	add	r3,r3,r19
    873c:	d9000217 	ldw	r4,8(sp)
    8740:	e538983a 	sll	fp,fp,r20
    8744:	1c2bc83a 	sub	r21,r3,r16
    8748:	2004943a 	slli	r2,r4,16
    874c:	90a8b03a 	or	r20,r18,r2
    8750:	003ebf06 	br	8250 <__udivdi3+0xa4>
    8754:	1804943a 	slli	r2,r3,16
    8758:	e588983a 	sll	r4,fp,r22
    875c:	a0ffffcc 	andi	r3,r20,65535
    8760:	10c5883a 	add	r2,r2,r3
    8764:	20bfbd2e 	bgeu	r4,r2,865c <__udivdi3+0x4b0>
    8768:	90bfffc4 	addi	r2,r18,-1
    876c:	0009883a 	mov	r4,zero
    8770:	003ef706 	br	8350 <__udivdi3+0x1a4>
    8774:	01400204 	movi	r5,8
    8778:	2805883a 	mov	r2,r5
    877c:	003ee706 	br	831c <__udivdi3+0x170>
    8780:	01400604 	movi	r5,24
    8784:	2805883a 	mov	r2,r5
    8788:	003ee406 	br	831c <__udivdi3+0x170>
    878c:	01400204 	movi	r5,8
    8790:	2805883a 	mov	r2,r5
    8794:	003ea106 	br	821c <__udivdi3+0x70>
    8798:	01400604 	movi	r5,24
    879c:	2805883a 	mov	r2,r5
    87a0:	003e9e06 	br	821c <__udivdi3+0x70>
    87a4:	01400204 	movi	r5,8
    87a8:	2805883a 	mov	r2,r5
    87ac:	003eff06 	br	83ac <__udivdi3+0x200>
    87b0:	01400604 	movi	r5,24
    87b4:	2805883a 	mov	r2,r5
    87b8:	003efc06 	br	83ac <__udivdi3+0x200>
    87bc:	1c3f862e 	bgeu	r3,r16,85d8 <__udivdi3+0x42c>
    87c0:	1dc7883a 	add	r3,r3,r23
    87c4:	ad7fffc4 	addi	r21,r21,-1
    87c8:	003f8306 	br	85d8 <__udivdi3+0x42c>
    87cc:	157f6e2e 	bgeu	r2,r21,8588 <__udivdi3+0x3dc>
    87d0:	a53fffc4 	addi	r20,r20,-1
    87d4:	15c5883a 	add	r2,r2,r23
    87d8:	003f6b06 	br	8588 <__udivdi3+0x3dc>
    87dc:	ad7fffc4 	addi	r21,r21,-1
    87e0:	003ec206 	br	82ec <__udivdi3+0x140>
    87e4:	843fffc4 	addi	r16,r16,-1
    87e8:	14c5883a 	add	r2,r2,r19
    87ec:	003f1306 	br	843c <__udivdi3+0x290>
    87f0:	ad7fffc4 	addi	r21,r21,-1
    87f4:	003f2506 	br	848c <__udivdi3+0x2e0>
    87f8:	157fb92e 	bgeu	r2,r21,86e0 <__udivdi3+0x534>
    87fc:	297fffc4 	addi	r5,r5,-1
    8800:	14c5883a 	add	r2,r2,r19
    8804:	d9400215 	stw	r5,8(sp)
    8808:	003fb506 	br	86e0 <__udivdi3+0x534>
    880c:	843fffc4 	addi	r16,r16,-1
    8810:	14c5883a 	add	r2,r2,r19
    8814:	003ea106 	br	829c <__udivdi3+0xf0>

00008818 <__umoddi3>:
    8818:	defff004 	addi	sp,sp,-64
    881c:	3011883a 	mov	r8,r6
    8820:	000d883a 	mov	r6,zero
    8824:	dd400b15 	stw	r21,44(sp)
    8828:	dcc00915 	stw	r19,36(sp)
    882c:	dc000615 	stw	r16,24(sp)
    8830:	dfc00f15 	stw	ra,60(sp)
    8834:	df000e15 	stw	fp,56(sp)
    8838:	ddc00d15 	stw	r23,52(sp)
    883c:	dd800c15 	stw	r22,48(sp)
    8840:	dd000a15 	stw	r20,40(sp)
    8844:	dc800815 	stw	r18,32(sp)
    8848:	dc400715 	stw	r17,28(sp)
    884c:	2817883a 	mov	r11,r5
    8850:	d9800415 	stw	r6,16(sp)
    8854:	4027883a 	mov	r19,r8
    8858:	d9800515 	stw	r6,20(sp)
    885c:	2021883a 	mov	r16,r4
    8860:	282b883a 	mov	r21,r5
    8864:	38002c1e 	bne	r7,zero,8918 <__umoddi3+0x100>
    8868:	2a005636 	bltu	r5,r8,89c4 <__umoddi3+0x1ac>
    886c:	40009a26 	beq	r8,zero,8ad8 <__umoddi3+0x2c0>
    8870:	00bfffd4 	movui	r2,65535
    8874:	14c09236 	bltu	r2,r19,8ac0 <__umoddi3+0x2a8>
    8878:	00803fc4 	movi	r2,255
    887c:	14c15c36 	bltu	r2,r19,8df0 <__umoddi3+0x5d8>
    8880:	000b883a 	mov	r5,zero
    8884:	0005883a 	mov	r2,zero
    8888:	9884d83a 	srl	r2,r19,r2
    888c:	01000074 	movhi	r4,1
    8890:	21365804 	addi	r4,r4,-9888
    8894:	01800804 	movi	r6,32
    8898:	1105883a 	add	r2,r2,r4
    889c:	10c00003 	ldbu	r3,0(r2)
    88a0:	28c7883a 	add	r3,r5,r3
    88a4:	30e5c83a 	sub	r18,r6,r3
    88a8:	9000a41e 	bne	r18,zero,8b3c <__umoddi3+0x324>
    88ac:	982ed43a 	srli	r23,r19,16
    88b0:	acebc83a 	sub	r21,r21,r19
    88b4:	9d3fffcc 	andi	r20,r19,65535
    88b8:	002d883a 	mov	r22,zero
    88bc:	a809883a 	mov	r4,r21
    88c0:	b80b883a 	mov	r5,r23
    88c4:	0000d040 	call	d04 <__udivsi3>
    88c8:	100b883a 	mov	r5,r2
    88cc:	a009883a 	mov	r4,r20
    88d0:	0000d140 	call	d14 <__mulsi3>
    88d4:	a809883a 	mov	r4,r21
    88d8:	b80b883a 	mov	r5,r23
    88dc:	1023883a 	mov	r17,r2
    88e0:	0000d0c0 	call	d0c <__umodsi3>
    88e4:	1004943a 	slli	r2,r2,16
    88e8:	8006d43a 	srli	r3,r16,16
    88ec:	10c4b03a 	or	r2,r2,r3
    88f0:	1440032e 	bgeu	r2,r17,8900 <__umoddi3+0xe8>
    88f4:	14c5883a 	add	r2,r2,r19
    88f8:	14c00136 	bltu	r2,r19,8900 <__umoddi3+0xe8>
    88fc:	14415836 	bltu	r2,r17,8e60 <__umoddi3+0x648>
    8900:	1463c83a 	sub	r17,r2,r17
    8904:	8809883a 	mov	r4,r17
    8908:	b80b883a 	mov	r5,r23
    890c:	0000d040 	call	d04 <__udivsi3>
    8910:	a009883a 	mov	r4,r20
    8914:	00005306 	br	8a64 <__umoddi3+0x24c>
    8918:	380d883a 	mov	r6,r7
    891c:	29c0132e 	bgeu	r5,r7,896c <__umoddi3+0x154>
    8920:	d9000415 	stw	r4,16(sp)
    8924:	d9400515 	stw	r5,20(sp)
    8928:	d9400417 	ldw	r5,16(sp)
    892c:	5813883a 	mov	r9,r11
    8930:	2811883a 	mov	r8,r5
    8934:	4005883a 	mov	r2,r8
    8938:	4807883a 	mov	r3,r9
    893c:	dfc00f17 	ldw	ra,60(sp)
    8940:	df000e17 	ldw	fp,56(sp)
    8944:	ddc00d17 	ldw	r23,52(sp)
    8948:	dd800c17 	ldw	r22,48(sp)
    894c:	dd400b17 	ldw	r21,44(sp)
    8950:	dd000a17 	ldw	r20,40(sp)
    8954:	dcc00917 	ldw	r19,36(sp)
    8958:	dc800817 	ldw	r18,32(sp)
    895c:	dc400717 	ldw	r17,28(sp)
    8960:	dc000617 	ldw	r16,24(sp)
    8964:	dec01004 	addi	sp,sp,64
    8968:	f800283a 	ret
    896c:	00bfffd4 	movui	r2,65535
    8970:	11c06636 	bltu	r2,r7,8b0c <__umoddi3+0x2f4>
    8974:	00803fc4 	movi	r2,255
    8978:	11c12036 	bltu	r2,r7,8dfc <__umoddi3+0x5e4>
    897c:	000b883a 	mov	r5,zero
    8980:	0005883a 	mov	r2,zero
    8984:	3084d83a 	srl	r2,r6,r2
    8988:	01000074 	movhi	r4,1
    898c:	21365804 	addi	r4,r4,-9888
    8990:	01c00804 	movi	r7,32
    8994:	1105883a 	add	r2,r2,r4
    8998:	10c00003 	ldbu	r3,0(r2)
    899c:	28c7883a 	add	r3,r5,r3
    89a0:	38e5c83a 	sub	r18,r7,r3
    89a4:	9000941e 	bne	r18,zero,8bf8 <__umoddi3+0x3e0>
    89a8:	35405e36 	bltu	r6,r21,8b24 <__umoddi3+0x30c>
    89ac:	84c05d2e 	bgeu	r16,r19,8b24 <__umoddi3+0x30c>
    89b0:	8011883a 	mov	r8,r16
    89b4:	a813883a 	mov	r9,r21
    89b8:	dc000415 	stw	r16,16(sp)
    89bc:	dd400515 	stw	r21,20(sp)
    89c0:	003fdc06 	br	8934 <__umoddi3+0x11c>
    89c4:	00bfffd4 	movui	r2,65535
    89c8:	12004a36 	bltu	r2,r8,8af4 <__umoddi3+0x2dc>
    89cc:	00803fc4 	movi	r2,255
    89d0:	12010d36 	bltu	r2,r8,8e08 <__umoddi3+0x5f0>
    89d4:	000b883a 	mov	r5,zero
    89d8:	0005883a 	mov	r2,zero
    89dc:	9884d83a 	srl	r2,r19,r2
    89e0:	01000074 	movhi	r4,1
    89e4:	21365804 	addi	r4,r4,-9888
    89e8:	01800804 	movi	r6,32
    89ec:	1105883a 	add	r2,r2,r4
    89f0:	10c00003 	ldbu	r3,0(r2)
    89f4:	28c7883a 	add	r3,r5,r3
    89f8:	30c7c83a 	sub	r3,r6,r3
    89fc:	1800dc1e 	bne	r3,zero,8d70 <__umoddi3+0x558>
    8a00:	002d883a 	mov	r22,zero
    8a04:	982ed43a 	srli	r23,r19,16
    8a08:	a809883a 	mov	r4,r21
    8a0c:	9cbfffcc 	andi	r18,r19,65535
    8a10:	b80b883a 	mov	r5,r23
    8a14:	0000d040 	call	d04 <__udivsi3>
    8a18:	100b883a 	mov	r5,r2
    8a1c:	9009883a 	mov	r4,r18
    8a20:	0000d140 	call	d14 <__mulsi3>
    8a24:	a809883a 	mov	r4,r21
    8a28:	b80b883a 	mov	r5,r23
    8a2c:	1023883a 	mov	r17,r2
    8a30:	0000d0c0 	call	d0c <__umodsi3>
    8a34:	1004943a 	slli	r2,r2,16
    8a38:	8006d43a 	srli	r3,r16,16
    8a3c:	10c4b03a 	or	r2,r2,r3
    8a40:	1440032e 	bgeu	r2,r17,8a50 <__umoddi3+0x238>
    8a44:	14c5883a 	add	r2,r2,r19
    8a48:	14c00136 	bltu	r2,r19,8a50 <__umoddi3+0x238>
    8a4c:	14410236 	bltu	r2,r17,8e58 <__umoddi3+0x640>
    8a50:	1463c83a 	sub	r17,r2,r17
    8a54:	8809883a 	mov	r4,r17
    8a58:	b80b883a 	mov	r5,r23
    8a5c:	0000d040 	call	d04 <__udivsi3>
    8a60:	9009883a 	mov	r4,r18
    8a64:	100b883a 	mov	r5,r2
    8a68:	0000d140 	call	d14 <__mulsi3>
    8a6c:	8809883a 	mov	r4,r17
    8a70:	b80b883a 	mov	r5,r23
    8a74:	102b883a 	mov	r21,r2
    8a78:	0000d0c0 	call	d0c <__umodsi3>
    8a7c:	1004943a 	slli	r2,r2,16
    8a80:	80ffffcc 	andi	r3,r16,65535
    8a84:	10c4b03a 	or	r2,r2,r3
    8a88:	1540042e 	bgeu	r2,r21,8a9c <__umoddi3+0x284>
    8a8c:	14c5883a 	add	r2,r2,r19
    8a90:	14c00236 	bltu	r2,r19,8a9c <__umoddi3+0x284>
    8a94:	1540012e 	bgeu	r2,r21,8a9c <__umoddi3+0x284>
    8a98:	14c5883a 	add	r2,r2,r19
    8a9c:	1545c83a 	sub	r2,r2,r21
    8aa0:	1584d83a 	srl	r2,r2,r22
    8aa4:	0013883a 	mov	r9,zero
    8aa8:	d8800415 	stw	r2,16(sp)
    8aac:	d8c00417 	ldw	r3,16(sp)
    8ab0:	0005883a 	mov	r2,zero
    8ab4:	d8800515 	stw	r2,20(sp)
    8ab8:	1811883a 	mov	r8,r3
    8abc:	003f9d06 	br	8934 <__umoddi3+0x11c>
    8ac0:	00804034 	movhi	r2,256
    8ac4:	10bfffc4 	addi	r2,r2,-1
    8ac8:	14c0c636 	bltu	r2,r19,8de4 <__umoddi3+0x5cc>
    8acc:	01400404 	movi	r5,16
    8ad0:	2805883a 	mov	r2,r5
    8ad4:	003f6c06 	br	8888 <__umoddi3+0x70>
    8ad8:	01000044 	movi	r4,1
    8adc:	000b883a 	mov	r5,zero
    8ae0:	0000d040 	call	d04 <__udivsi3>
    8ae4:	1027883a 	mov	r19,r2
    8ae8:	00bfffd4 	movui	r2,65535
    8aec:	14fff436 	bltu	r2,r19,8ac0 <__umoddi3+0x2a8>
    8af0:	003f6106 	br	8878 <__umoddi3+0x60>
    8af4:	00804034 	movhi	r2,256
    8af8:	10bfffc4 	addi	r2,r2,-1
    8afc:	1200c536 	bltu	r2,r8,8e14 <__umoddi3+0x5fc>
    8b00:	01400404 	movi	r5,16
    8b04:	2805883a 	mov	r2,r5
    8b08:	003fb406 	br	89dc <__umoddi3+0x1c4>
    8b0c:	00804034 	movhi	r2,256
    8b10:	10bfffc4 	addi	r2,r2,-1
    8b14:	11c0c236 	bltu	r2,r7,8e20 <__umoddi3+0x608>
    8b18:	01400404 	movi	r5,16
    8b1c:	2805883a 	mov	r2,r5
    8b20:	003f9806 	br	8984 <__umoddi3+0x16c>
    8b24:	84c9c83a 	sub	r4,r16,r19
    8b28:	8105803a 	cmpltu	r2,r16,r4
    8b2c:	a987c83a 	sub	r3,r21,r6
    8b30:	18abc83a 	sub	r21,r3,r2
    8b34:	2021883a 	mov	r16,r4
    8b38:	003f9d06 	br	89b0 <__umoddi3+0x198>
    8b3c:	9ca6983a 	sll	r19,r19,r18
    8b40:	3485c83a 	sub	r2,r6,r18
    8b44:	a8a2d83a 	srl	r17,r21,r2
    8b48:	982ed43a 	srli	r23,r19,16
    8b4c:	ac86983a 	sll	r3,r21,r18
    8b50:	8084d83a 	srl	r2,r16,r2
    8b54:	8809883a 	mov	r4,r17
    8b58:	b80b883a 	mov	r5,r23
    8b5c:	18b8b03a 	or	fp,r3,r2
    8b60:	9d3fffcc 	andi	r20,r19,65535
    8b64:	0000d040 	call	d04 <__udivsi3>
    8b68:	100b883a 	mov	r5,r2
    8b6c:	a009883a 	mov	r4,r20
    8b70:	0000d140 	call	d14 <__mulsi3>
    8b74:	8809883a 	mov	r4,r17
    8b78:	b80b883a 	mov	r5,r23
    8b7c:	102b883a 	mov	r21,r2
    8b80:	0000d0c0 	call	d0c <__umodsi3>
    8b84:	1004943a 	slli	r2,r2,16
    8b88:	e006d43a 	srli	r3,fp,16
    8b8c:	902d883a 	mov	r22,r18
    8b90:	10c4b03a 	or	r2,r2,r3
    8b94:	1540022e 	bgeu	r2,r21,8ba0 <__umoddi3+0x388>
    8b98:	14c5883a 	add	r2,r2,r19
    8b9c:	14c0ab2e 	bgeu	r2,r19,8e4c <__umoddi3+0x634>
    8ba0:	1563c83a 	sub	r17,r2,r21
    8ba4:	8809883a 	mov	r4,r17
    8ba8:	b80b883a 	mov	r5,r23
    8bac:	0000d040 	call	d04 <__udivsi3>
    8bb0:	100b883a 	mov	r5,r2
    8bb4:	a009883a 	mov	r4,r20
    8bb8:	0000d140 	call	d14 <__mulsi3>
    8bbc:	8809883a 	mov	r4,r17
    8bc0:	b80b883a 	mov	r5,r23
    8bc4:	102b883a 	mov	r21,r2
    8bc8:	0000d0c0 	call	d0c <__umodsi3>
    8bcc:	1004943a 	slli	r2,r2,16
    8bd0:	e0ffffcc 	andi	r3,fp,65535
    8bd4:	10c4b03a 	or	r2,r2,r3
    8bd8:	1540042e 	bgeu	r2,r21,8bec <__umoddi3+0x3d4>
    8bdc:	14c5883a 	add	r2,r2,r19
    8be0:	14c00236 	bltu	r2,r19,8bec <__umoddi3+0x3d4>
    8be4:	1540012e 	bgeu	r2,r21,8bec <__umoddi3+0x3d4>
    8be8:	14c5883a 	add	r2,r2,r19
    8bec:	84a0983a 	sll	r16,r16,r18
    8bf0:	156bc83a 	sub	r21,r2,r21
    8bf4:	003f3106 	br	88bc <__umoddi3+0xa4>
    8bf8:	3c8fc83a 	sub	r7,r7,r18
    8bfc:	3486983a 	sll	r3,r6,r18
    8c00:	99c4d83a 	srl	r2,r19,r7
    8c04:	a9e2d83a 	srl	r17,r21,r7
    8c08:	ac8c983a 	sll	r6,r21,r18
    8c0c:	18acb03a 	or	r22,r3,r2
    8c10:	b02ed43a 	srli	r23,r22,16
    8c14:	81c4d83a 	srl	r2,r16,r7
    8c18:	8809883a 	mov	r4,r17
    8c1c:	b80b883a 	mov	r5,r23
    8c20:	308cb03a 	or	r6,r6,r2
    8c24:	d9c00315 	stw	r7,12(sp)
    8c28:	d9800215 	stw	r6,8(sp)
    8c2c:	b53fffcc 	andi	r20,r22,65535
    8c30:	0000d040 	call	d04 <__udivsi3>
    8c34:	100b883a 	mov	r5,r2
    8c38:	a009883a 	mov	r4,r20
    8c3c:	1039883a 	mov	fp,r2
    8c40:	0000d140 	call	d14 <__mulsi3>
    8c44:	8809883a 	mov	r4,r17
    8c48:	b80b883a 	mov	r5,r23
    8c4c:	102b883a 	mov	r21,r2
    8c50:	0000d0c0 	call	d0c <__umodsi3>
    8c54:	d9000217 	ldw	r4,8(sp)
    8c58:	1004943a 	slli	r2,r2,16
    8c5c:	9ca6983a 	sll	r19,r19,r18
    8c60:	2006d43a 	srli	r3,r4,16
    8c64:	84a0983a 	sll	r16,r16,r18
    8c68:	dcc00015 	stw	r19,0(sp)
    8c6c:	10c4b03a 	or	r2,r2,r3
    8c70:	dc000115 	stw	r16,4(sp)
    8c74:	1540032e 	bgeu	r2,r21,8c84 <__umoddi3+0x46c>
    8c78:	1585883a 	add	r2,r2,r22
    8c7c:	e73fffc4 	addi	fp,fp,-1
    8c80:	15806e2e 	bgeu	r2,r22,8e3c <__umoddi3+0x624>
    8c84:	1563c83a 	sub	r17,r2,r21
    8c88:	8809883a 	mov	r4,r17
    8c8c:	b80b883a 	mov	r5,r23
    8c90:	0000d040 	call	d04 <__udivsi3>
    8c94:	100b883a 	mov	r5,r2
    8c98:	a009883a 	mov	r4,r20
    8c9c:	1021883a 	mov	r16,r2
    8ca0:	0000d140 	call	d14 <__mulsi3>
    8ca4:	b80b883a 	mov	r5,r23
    8ca8:	8809883a 	mov	r4,r17
    8cac:	1029883a 	mov	r20,r2
    8cb0:	0000d0c0 	call	d0c <__umodsi3>
    8cb4:	d9400217 	ldw	r5,8(sp)
    8cb8:	1004943a 	slli	r2,r2,16
    8cbc:	28ffffcc 	andi	r3,r5,65535
    8cc0:	10c4b03a 	or	r2,r2,r3
    8cc4:	1500032e 	bgeu	r2,r20,8cd4 <__umoddi3+0x4bc>
    8cc8:	1585883a 	add	r2,r2,r22
    8ccc:	843fffc4 	addi	r16,r16,-1
    8cd0:	1580562e 	bgeu	r2,r22,8e2c <__umoddi3+0x614>
    8cd4:	d9800017 	ldw	r6,0(sp)
    8cd8:	e022943a 	slli	r17,fp,16
    8cdc:	302ed43a 	srli	r23,r6,16
    8ce0:	8462b03a 	or	r17,r16,r17
    8ce4:	34ffffcc 	andi	r19,r6,65535
    8ce8:	882ad43a 	srli	r21,r17,16
    8cec:	8c7fffcc 	andi	r17,r17,65535
    8cf0:	8809883a 	mov	r4,r17
    8cf4:	980b883a 	mov	r5,r19
    8cf8:	1521c83a 	sub	r16,r2,r20
    8cfc:	0000d140 	call	d14 <__mulsi3>
    8d00:	8809883a 	mov	r4,r17
    8d04:	b80b883a 	mov	r5,r23
    8d08:	1029883a 	mov	r20,r2
    8d0c:	0000d140 	call	d14 <__mulsi3>
    8d10:	980b883a 	mov	r5,r19
    8d14:	a809883a 	mov	r4,r21
    8d18:	1023883a 	mov	r17,r2
    8d1c:	0000d140 	call	d14 <__mulsi3>
    8d20:	a809883a 	mov	r4,r21
    8d24:	b80b883a 	mov	r5,r23
    8d28:	1027883a 	mov	r19,r2
    8d2c:	0000d140 	call	d14 <__mulsi3>
    8d30:	100b883a 	mov	r5,r2
    8d34:	a004d43a 	srli	r2,r20,16
    8d38:	8ce3883a 	add	r17,r17,r19
    8d3c:	1449883a 	add	r4,r2,r17
    8d40:	24c0022e 	bgeu	r4,r19,8d4c <__umoddi3+0x534>
    8d44:	00800074 	movhi	r2,1
    8d48:	288b883a 	add	r5,r5,r2
    8d4c:	2004d43a 	srli	r2,r4,16
    8d50:	2008943a 	slli	r4,r4,16
    8d54:	a0ffffcc 	andi	r3,r20,65535
    8d58:	288d883a 	add	r6,r5,r2
    8d5c:	20c9883a 	add	r4,r4,r3
    8d60:	81800b36 	bltu	r16,r6,8d90 <__umoddi3+0x578>
    8d64:	81804026 	beq	r16,r6,8e68 <__umoddi3+0x650>
    8d68:	818dc83a 	sub	r6,r16,r6
    8d6c:	00000f06 	br	8dac <__umoddi3+0x594>
    8d70:	30c5c83a 	sub	r2,r6,r3
    8d74:	182d883a 	mov	r22,r3
    8d78:	8084d83a 	srl	r2,r16,r2
    8d7c:	a8c6983a 	sll	r3,r21,r3
    8d80:	9da6983a 	sll	r19,r19,r22
    8d84:	85a0983a 	sll	r16,r16,r22
    8d88:	18aab03a 	or	r21,r3,r2
    8d8c:	003f1d06 	br	8a04 <__umoddi3+0x1ec>
    8d90:	d8c00017 	ldw	r3,0(sp)
    8d94:	20c5c83a 	sub	r2,r4,r3
    8d98:	2089803a 	cmpltu	r4,r4,r2
    8d9c:	3587c83a 	sub	r3,r6,r22
    8da0:	1907c83a 	sub	r3,r3,r4
    8da4:	80cdc83a 	sub	r6,r16,r3
    8da8:	1009883a 	mov	r4,r2
    8dac:	d9400117 	ldw	r5,4(sp)
    8db0:	2905c83a 	sub	r2,r5,r4
    8db4:	2887803a 	cmpltu	r3,r5,r2
    8db8:	30c7c83a 	sub	r3,r6,r3
    8dbc:	d9800317 	ldw	r6,12(sp)
    8dc0:	1484d83a 	srl	r2,r2,r18
    8dc4:	1988983a 	sll	r4,r3,r6
    8dc8:	1c86d83a 	srl	r3,r3,r18
    8dcc:	2088b03a 	or	r4,r4,r2
    8dd0:	2011883a 	mov	r8,r4
    8dd4:	1813883a 	mov	r9,r3
    8dd8:	d9000415 	stw	r4,16(sp)
    8ddc:	d8c00515 	stw	r3,20(sp)
    8de0:	003ed406 	br	8934 <__umoddi3+0x11c>
    8de4:	01400604 	movi	r5,24
    8de8:	2805883a 	mov	r2,r5
    8dec:	003ea606 	br	8888 <__umoddi3+0x70>
    8df0:	01400204 	movi	r5,8
    8df4:	2805883a 	mov	r2,r5
    8df8:	003ea306 	br	8888 <__umoddi3+0x70>
    8dfc:	01400204 	movi	r5,8
    8e00:	2805883a 	mov	r2,r5
    8e04:	003edf06 	br	8984 <__umoddi3+0x16c>
    8e08:	01400204 	movi	r5,8
    8e0c:	2805883a 	mov	r2,r5
    8e10:	003ef206 	br	89dc <__umoddi3+0x1c4>
    8e14:	01400604 	movi	r5,24
    8e18:	2805883a 	mov	r2,r5
    8e1c:	003eef06 	br	89dc <__umoddi3+0x1c4>
    8e20:	01400604 	movi	r5,24
    8e24:	2805883a 	mov	r2,r5
    8e28:	003ed606 	br	8984 <__umoddi3+0x16c>
    8e2c:	153fa92e 	bgeu	r2,r20,8cd4 <__umoddi3+0x4bc>
    8e30:	843fffc4 	addi	r16,r16,-1
    8e34:	1585883a 	add	r2,r2,r22
    8e38:	003fa606 	br	8cd4 <__umoddi3+0x4bc>
    8e3c:	157f912e 	bgeu	r2,r21,8c84 <__umoddi3+0x46c>
    8e40:	e73fffc4 	addi	fp,fp,-1
    8e44:	1585883a 	add	r2,r2,r22
    8e48:	003f8e06 	br	8c84 <__umoddi3+0x46c>
    8e4c:	157f542e 	bgeu	r2,r21,8ba0 <__umoddi3+0x388>
    8e50:	14c5883a 	add	r2,r2,r19
    8e54:	003f5206 	br	8ba0 <__umoddi3+0x388>
    8e58:	14c5883a 	add	r2,r2,r19
    8e5c:	003efc06 	br	8a50 <__umoddi3+0x238>
    8e60:	14c5883a 	add	r2,r2,r19
    8e64:	003ea606 	br	8900 <__umoddi3+0xe8>
    8e68:	d8800117 	ldw	r2,4(sp)
    8e6c:	113fc836 	bltu	r2,r4,8d90 <__umoddi3+0x578>
    8e70:	000d883a 	mov	r6,zero
    8e74:	003fcd06 	br	8dac <__umoddi3+0x594>

00008e78 <_fpadd_parts>:
    8e78:	defff804 	addi	sp,sp,-32
    8e7c:	dcc00315 	stw	r19,12(sp)
    8e80:	2027883a 	mov	r19,r4
    8e84:	21000017 	ldw	r4,0(r4)
    8e88:	00c00044 	movi	r3,1
    8e8c:	dd400515 	stw	r21,20(sp)
    8e90:	dd000415 	stw	r20,16(sp)
    8e94:	ddc00715 	stw	r23,28(sp)
    8e98:	dd800615 	stw	r22,24(sp)
    8e9c:	dc800215 	stw	r18,8(sp)
    8ea0:	dc400115 	stw	r17,4(sp)
    8ea4:	dc000015 	stw	r16,0(sp)
    8ea8:	282b883a 	mov	r21,r5
    8eac:	3029883a 	mov	r20,r6
    8eb0:	1900632e 	bgeu	r3,r4,9040 <_fpadd_parts+0x1c8>
    8eb4:	28800017 	ldw	r2,0(r5)
    8eb8:	1880812e 	bgeu	r3,r2,90c0 <_fpadd_parts+0x248>
    8ebc:	00c00104 	movi	r3,4
    8ec0:	20c0dc26 	beq	r4,r3,9234 <_fpadd_parts+0x3bc>
    8ec4:	10c07e26 	beq	r2,r3,90c0 <_fpadd_parts+0x248>
    8ec8:	00c00084 	movi	r3,2
    8ecc:	10c06726 	beq	r2,r3,906c <_fpadd_parts+0x1f4>
    8ed0:	20c07b26 	beq	r4,r3,90c0 <_fpadd_parts+0x248>
    8ed4:	9dc00217 	ldw	r23,8(r19)
    8ed8:	28c00217 	ldw	r3,8(r5)
    8edc:	9c400317 	ldw	r17,12(r19)
    8ee0:	2bc00317 	ldw	r15,12(r5)
    8ee4:	b8cdc83a 	sub	r6,r23,r3
    8ee8:	9c800417 	ldw	r18,16(r19)
    8eec:	2c000417 	ldw	r16,16(r5)
    8ef0:	3009883a 	mov	r4,r6
    8ef4:	30009716 	blt	r6,zero,9154 <_fpadd_parts+0x2dc>
    8ef8:	00800fc4 	movi	r2,63
    8efc:	11806b16 	blt	r2,r6,90ac <_fpadd_parts+0x234>
    8f00:	0100a40e 	bge	zero,r4,9194 <_fpadd_parts+0x31c>
    8f04:	35bff804 	addi	r22,r6,-32
    8f08:	b000bc16 	blt	r22,zero,91fc <_fpadd_parts+0x384>
    8f0c:	8596d83a 	srl	r11,r16,r22
    8f10:	0019883a 	mov	r12,zero
    8f14:	0013883a 	mov	r9,zero
    8f18:	01000044 	movi	r4,1
    8f1c:	0015883a 	mov	r10,zero
    8f20:	b000be16 	blt	r22,zero,921c <_fpadd_parts+0x3a4>
    8f24:	2590983a 	sll	r8,r4,r22
    8f28:	000f883a 	mov	r7,zero
    8f2c:	00bfffc4 	movi	r2,-1
    8f30:	3889883a 	add	r4,r7,r2
    8f34:	408b883a 	add	r5,r8,r2
    8f38:	21cd803a 	cmpltu	r6,r4,r7
    8f3c:	314b883a 	add	r5,r6,r5
    8f40:	7904703a 	and	r2,r15,r4
    8f44:	8146703a 	and	r3,r16,r5
    8f48:	10c4b03a 	or	r2,r2,r3
    8f4c:	10000226 	beq	r2,zero,8f58 <_fpadd_parts+0xe0>
    8f50:	02400044 	movi	r9,1
    8f54:	0015883a 	mov	r10,zero
    8f58:	5a5eb03a 	or	r15,r11,r9
    8f5c:	62a0b03a 	or	r16,r12,r10
    8f60:	99400117 	ldw	r5,4(r19)
    8f64:	a8800117 	ldw	r2,4(r21)
    8f68:	28806e26 	beq	r5,r2,9124 <_fpadd_parts+0x2ac>
    8f6c:	28006626 	beq	r5,zero,9108 <_fpadd_parts+0x290>
    8f70:	7c45c83a 	sub	r2,r15,r17
    8f74:	7889803a 	cmpltu	r4,r15,r2
    8f78:	8487c83a 	sub	r3,r16,r18
    8f7c:	1909c83a 	sub	r4,r3,r4
    8f80:	100d883a 	mov	r6,r2
    8f84:	200f883a 	mov	r7,r4
    8f88:	38007716 	blt	r7,zero,9168 <_fpadd_parts+0x2f0>
    8f8c:	a5c00215 	stw	r23,8(r20)
    8f90:	a1c00415 	stw	r7,16(r20)
    8f94:	a0000115 	stw	zero,4(r20)
    8f98:	a1800315 	stw	r6,12(r20)
    8f9c:	a2000317 	ldw	r8,12(r20)
    8fa0:	a2400417 	ldw	r9,16(r20)
    8fa4:	00bfffc4 	movi	r2,-1
    8fa8:	408b883a 	add	r5,r8,r2
    8fac:	2a09803a 	cmpltu	r4,r5,r8
    8fb0:	488d883a 	add	r6,r9,r2
    8fb4:	01c40034 	movhi	r7,4096
    8fb8:	39ffffc4 	addi	r7,r7,-1
    8fbc:	218d883a 	add	r6,r4,r6
    8fc0:	39801736 	bltu	r7,r6,9020 <_fpadd_parts+0x1a8>
    8fc4:	31c06526 	beq	r6,r7,915c <_fpadd_parts+0x2e4>
    8fc8:	a3000217 	ldw	r12,8(r20)
    8fcc:	4209883a 	add	r4,r8,r8
    8fd0:	00bfffc4 	movi	r2,-1
    8fd4:	220f803a 	cmpltu	r7,r4,r8
    8fd8:	4a4b883a 	add	r5,r9,r9
    8fdc:	394f883a 	add	r7,r7,r5
    8fe0:	2095883a 	add	r10,r4,r2
    8fe4:	3897883a 	add	r11,r7,r2
    8fe8:	510d803a 	cmpltu	r6,r10,r4
    8fec:	6099883a 	add	r12,r12,r2
    8ff0:	32d7883a 	add	r11,r6,r11
    8ff4:	00840034 	movhi	r2,4096
    8ff8:	10bfffc4 	addi	r2,r2,-1
    8ffc:	2011883a 	mov	r8,r4
    9000:	3813883a 	mov	r9,r7
    9004:	a1000315 	stw	r4,12(r20)
    9008:	a1c00415 	stw	r7,16(r20)
    900c:	a3000215 	stw	r12,8(r20)
    9010:	12c00336 	bltu	r2,r11,9020 <_fpadd_parts+0x1a8>
    9014:	58bfed1e 	bne	r11,r2,8fcc <_fpadd_parts+0x154>
    9018:	00bfff84 	movi	r2,-2
    901c:	12bfeb2e 	bgeu	r2,r10,8fcc <_fpadd_parts+0x154>
    9020:	a2800417 	ldw	r10,16(r20)
    9024:	008000c4 	movi	r2,3
    9028:	00c80034 	movhi	r3,8192
    902c:	18ffffc4 	addi	r3,r3,-1
    9030:	a2400317 	ldw	r9,12(r20)
    9034:	a0800015 	stw	r2,0(r20)
    9038:	1a802336 	bltu	r3,r10,90c8 <_fpadd_parts+0x250>
    903c:	a027883a 	mov	r19,r20
    9040:	9805883a 	mov	r2,r19
    9044:	ddc00717 	ldw	r23,28(sp)
    9048:	dd800617 	ldw	r22,24(sp)
    904c:	dd400517 	ldw	r21,20(sp)
    9050:	dd000417 	ldw	r20,16(sp)
    9054:	dcc00317 	ldw	r19,12(sp)
    9058:	dc800217 	ldw	r18,8(sp)
    905c:	dc400117 	ldw	r17,4(sp)
    9060:	dc000017 	ldw	r16,0(sp)
    9064:	dec00804 	addi	sp,sp,32
    9068:	f800283a 	ret
    906c:	20fff41e 	bne	r4,r3,9040 <_fpadd_parts+0x1c8>
    9070:	31000015 	stw	r4,0(r6)
    9074:	98800117 	ldw	r2,4(r19)
    9078:	30800115 	stw	r2,4(r6)
    907c:	98c00217 	ldw	r3,8(r19)
    9080:	30c00215 	stw	r3,8(r6)
    9084:	98800317 	ldw	r2,12(r19)
    9088:	30800315 	stw	r2,12(r6)
    908c:	98c00417 	ldw	r3,16(r19)
    9090:	30c00415 	stw	r3,16(r6)
    9094:	98800117 	ldw	r2,4(r19)
    9098:	28c00117 	ldw	r3,4(r5)
    909c:	3027883a 	mov	r19,r6
    90a0:	10c4703a 	and	r2,r2,r3
    90a4:	30800115 	stw	r2,4(r6)
    90a8:	003fe506 	br	9040 <_fpadd_parts+0x1c8>
    90ac:	1dc02616 	blt	r3,r23,9148 <_fpadd_parts+0x2d0>
    90b0:	0023883a 	mov	r17,zero
    90b4:	182f883a 	mov	r23,r3
    90b8:	0025883a 	mov	r18,zero
    90bc:	003fa806 	br	8f60 <_fpadd_parts+0xe8>
    90c0:	a827883a 	mov	r19,r21
    90c4:	003fde06 	br	9040 <_fpadd_parts+0x1c8>
    90c8:	01800044 	movi	r6,1
    90cc:	500497fa 	slli	r2,r10,31
    90d0:	4808d07a 	srli	r4,r9,1
    90d4:	518ad83a 	srl	r5,r10,r6
    90d8:	a2000217 	ldw	r8,8(r20)
    90dc:	1108b03a 	or	r4,r2,r4
    90e0:	0007883a 	mov	r3,zero
    90e4:	4984703a 	and	r2,r9,r6
    90e8:	208cb03a 	or	r6,r4,r2
    90ec:	28ceb03a 	or	r7,r5,r3
    90f0:	42000044 	addi	r8,r8,1
    90f4:	a027883a 	mov	r19,r20
    90f8:	a1c00415 	stw	r7,16(r20)
    90fc:	a2000215 	stw	r8,8(r20)
    9100:	a1800315 	stw	r6,12(r20)
    9104:	003fce06 	br	9040 <_fpadd_parts+0x1c8>
    9108:	8bc5c83a 	sub	r2,r17,r15
    910c:	8889803a 	cmpltu	r4,r17,r2
    9110:	9407c83a 	sub	r3,r18,r16
    9114:	1909c83a 	sub	r4,r3,r4
    9118:	100d883a 	mov	r6,r2
    911c:	200f883a 	mov	r7,r4
    9120:	003f9906 	br	8f88 <_fpadd_parts+0x110>
    9124:	7c45883a 	add	r2,r15,r17
    9128:	13c9803a 	cmpltu	r4,r2,r15
    912c:	8487883a 	add	r3,r16,r18
    9130:	20c9883a 	add	r4,r4,r3
    9134:	a1400115 	stw	r5,4(r20)
    9138:	a5c00215 	stw	r23,8(r20)
    913c:	a0800315 	stw	r2,12(r20)
    9140:	a1000415 	stw	r4,16(r20)
    9144:	003fb606 	br	9020 <_fpadd_parts+0x1a8>
    9148:	001f883a 	mov	r15,zero
    914c:	0021883a 	mov	r16,zero
    9150:	003f8306 	br	8f60 <_fpadd_parts+0xe8>
    9154:	018dc83a 	sub	r6,zero,r6
    9158:	003f6706 	br	8ef8 <_fpadd_parts+0x80>
    915c:	00bfff84 	movi	r2,-2
    9160:	117faf36 	bltu	r2,r5,9020 <_fpadd_parts+0x1a8>
    9164:	003f9806 	br	8fc8 <_fpadd_parts+0x150>
    9168:	0005883a 	mov	r2,zero
    916c:	1189c83a 	sub	r4,r2,r6
    9170:	1105803a 	cmpltu	r2,r2,r4
    9174:	01cbc83a 	sub	r5,zero,r7
    9178:	2885c83a 	sub	r2,r5,r2
    917c:	01800044 	movi	r6,1
    9180:	a1800115 	stw	r6,4(r20)
    9184:	a5c00215 	stw	r23,8(r20)
    9188:	a1000315 	stw	r4,12(r20)
    918c:	a0800415 	stw	r2,16(r20)
    9190:	003f8206 	br	8f9c <_fpadd_parts+0x124>
    9194:	203f7226 	beq	r4,zero,8f60 <_fpadd_parts+0xe8>
    9198:	35bff804 	addi	r22,r6,-32
    919c:	b9af883a 	add	r23,r23,r6
    91a0:	b0003116 	blt	r22,zero,9268 <_fpadd_parts+0x3f0>
    91a4:	959ad83a 	srl	r13,r18,r22
    91a8:	001d883a 	mov	r14,zero
    91ac:	000f883a 	mov	r7,zero
    91b0:	01000044 	movi	r4,1
    91b4:	0011883a 	mov	r8,zero
    91b8:	b0002516 	blt	r22,zero,9250 <_fpadd_parts+0x3d8>
    91bc:	2594983a 	sll	r10,r4,r22
    91c0:	0013883a 	mov	r9,zero
    91c4:	00bfffc4 	movi	r2,-1
    91c8:	4889883a 	add	r4,r9,r2
    91cc:	508b883a 	add	r5,r10,r2
    91d0:	224d803a 	cmpltu	r6,r4,r9
    91d4:	314b883a 	add	r5,r6,r5
    91d8:	8904703a 	and	r2,r17,r4
    91dc:	9146703a 	and	r3,r18,r5
    91e0:	10c4b03a 	or	r2,r2,r3
    91e4:	10000226 	beq	r2,zero,91f0 <_fpadd_parts+0x378>
    91e8:	01c00044 	movi	r7,1
    91ec:	0011883a 	mov	r8,zero
    91f0:	69e2b03a 	or	r17,r13,r7
    91f4:	7224b03a 	or	r18,r14,r8
    91f8:	003f5906 	br	8f60 <_fpadd_parts+0xe8>
    91fc:	8407883a 	add	r3,r16,r16
    9200:	008007c4 	movi	r2,31
    9204:	1185c83a 	sub	r2,r2,r6
    9208:	1886983a 	sll	r3,r3,r2
    920c:	7996d83a 	srl	r11,r15,r6
    9210:	8198d83a 	srl	r12,r16,r6
    9214:	1ad6b03a 	or	r11,r3,r11
    9218:	003f3e06 	br	8f14 <_fpadd_parts+0x9c>
    921c:	2006d07a 	srli	r3,r4,1
    9220:	008007c4 	movi	r2,31
    9224:	1185c83a 	sub	r2,r2,r6
    9228:	1890d83a 	srl	r8,r3,r2
    922c:	218e983a 	sll	r7,r4,r6
    9230:	003f3e06 	br	8f2c <_fpadd_parts+0xb4>
    9234:	113f821e 	bne	r2,r4,9040 <_fpadd_parts+0x1c8>
    9238:	28c00117 	ldw	r3,4(r5)
    923c:	98800117 	ldw	r2,4(r19)
    9240:	10ff7f26 	beq	r2,r3,9040 <_fpadd_parts+0x1c8>
    9244:	04c00074 	movhi	r19,1
    9248:	9cf65304 	addi	r19,r19,-9908
    924c:	003f7c06 	br	9040 <_fpadd_parts+0x1c8>
    9250:	2006d07a 	srli	r3,r4,1
    9254:	008007c4 	movi	r2,31
    9258:	1185c83a 	sub	r2,r2,r6
    925c:	1894d83a 	srl	r10,r3,r2
    9260:	2192983a 	sll	r9,r4,r6
    9264:	003fd706 	br	91c4 <_fpadd_parts+0x34c>
    9268:	9487883a 	add	r3,r18,r18
    926c:	008007c4 	movi	r2,31
    9270:	1185c83a 	sub	r2,r2,r6
    9274:	1886983a 	sll	r3,r3,r2
    9278:	899ad83a 	srl	r13,r17,r6
    927c:	919cd83a 	srl	r14,r18,r6
    9280:	1b5ab03a 	or	r13,r3,r13
    9284:	003fc906 	br	91ac <_fpadd_parts+0x334>

00009288 <__subdf3>:
    9288:	deffea04 	addi	sp,sp,-88
    928c:	dcc01415 	stw	r19,80(sp)
    9290:	dcc00404 	addi	r19,sp,16
    9294:	2011883a 	mov	r8,r4
    9298:	2813883a 	mov	r9,r5
    929c:	dc401315 	stw	r17,76(sp)
    92a0:	d809883a 	mov	r4,sp
    92a4:	980b883a 	mov	r5,r19
    92a8:	dc400904 	addi	r17,sp,36
    92ac:	dfc01515 	stw	ra,84(sp)
    92b0:	da400115 	stw	r9,4(sp)
    92b4:	d9c00315 	stw	r7,12(sp)
    92b8:	da000015 	stw	r8,0(sp)
    92bc:	d9800215 	stw	r6,8(sp)
    92c0:	000a45c0 	call	a45c <__unpack_d>
    92c4:	d9000204 	addi	r4,sp,8
    92c8:	880b883a 	mov	r5,r17
    92cc:	000a45c0 	call	a45c <__unpack_d>
    92d0:	d8800a17 	ldw	r2,40(sp)
    92d4:	880b883a 	mov	r5,r17
    92d8:	9809883a 	mov	r4,r19
    92dc:	d9800e04 	addi	r6,sp,56
    92e0:	1080005c 	xori	r2,r2,1
    92e4:	d8800a15 	stw	r2,40(sp)
    92e8:	0008e780 	call	8e78 <_fpadd_parts>
    92ec:	1009883a 	mov	r4,r2
    92f0:	000a1480 	call	a148 <__pack_d>
    92f4:	dfc01517 	ldw	ra,84(sp)
    92f8:	dcc01417 	ldw	r19,80(sp)
    92fc:	dc401317 	ldw	r17,76(sp)
    9300:	dec01604 	addi	sp,sp,88
    9304:	f800283a 	ret

00009308 <__adddf3>:
    9308:	deffea04 	addi	sp,sp,-88
    930c:	dcc01415 	stw	r19,80(sp)
    9310:	dcc00404 	addi	r19,sp,16
    9314:	2011883a 	mov	r8,r4
    9318:	2813883a 	mov	r9,r5
    931c:	dc401315 	stw	r17,76(sp)
    9320:	d809883a 	mov	r4,sp
    9324:	980b883a 	mov	r5,r19
    9328:	dc400904 	addi	r17,sp,36
    932c:	dfc01515 	stw	ra,84(sp)
    9330:	da400115 	stw	r9,4(sp)
    9334:	d9c00315 	stw	r7,12(sp)
    9338:	da000015 	stw	r8,0(sp)
    933c:	d9800215 	stw	r6,8(sp)
    9340:	000a45c0 	call	a45c <__unpack_d>
    9344:	d9000204 	addi	r4,sp,8
    9348:	880b883a 	mov	r5,r17
    934c:	000a45c0 	call	a45c <__unpack_d>
    9350:	d9800e04 	addi	r6,sp,56
    9354:	9809883a 	mov	r4,r19
    9358:	880b883a 	mov	r5,r17
    935c:	0008e780 	call	8e78 <_fpadd_parts>
    9360:	1009883a 	mov	r4,r2
    9364:	000a1480 	call	a148 <__pack_d>
    9368:	dfc01517 	ldw	ra,84(sp)
    936c:	dcc01417 	ldw	r19,80(sp)
    9370:	dc401317 	ldw	r17,76(sp)
    9374:	dec01604 	addi	sp,sp,88
    9378:	f800283a 	ret

0000937c <__muldf3>:
    937c:	deffe004 	addi	sp,sp,-128
    9380:	dc401815 	stw	r17,96(sp)
    9384:	dc400404 	addi	r17,sp,16
    9388:	2011883a 	mov	r8,r4
    938c:	2813883a 	mov	r9,r5
    9390:	dc001715 	stw	r16,92(sp)
    9394:	d809883a 	mov	r4,sp
    9398:	880b883a 	mov	r5,r17
    939c:	dc000904 	addi	r16,sp,36
    93a0:	dfc01f15 	stw	ra,124(sp)
    93a4:	da400115 	stw	r9,4(sp)
    93a8:	d9c00315 	stw	r7,12(sp)
    93ac:	da000015 	stw	r8,0(sp)
    93b0:	d9800215 	stw	r6,8(sp)
    93b4:	ddc01e15 	stw	r23,120(sp)
    93b8:	dd801d15 	stw	r22,116(sp)
    93bc:	dd401c15 	stw	r21,112(sp)
    93c0:	dd001b15 	stw	r20,108(sp)
    93c4:	dcc01a15 	stw	r19,104(sp)
    93c8:	dc801915 	stw	r18,100(sp)
    93cc:	000a45c0 	call	a45c <__unpack_d>
    93d0:	d9000204 	addi	r4,sp,8
    93d4:	800b883a 	mov	r5,r16
    93d8:	000a45c0 	call	a45c <__unpack_d>
    93dc:	d9000417 	ldw	r4,16(sp)
    93e0:	00800044 	movi	r2,1
    93e4:	1100102e 	bgeu	r2,r4,9428 <__muldf3+0xac>
    93e8:	d8c00917 	ldw	r3,36(sp)
    93ec:	10c0062e 	bgeu	r2,r3,9408 <__muldf3+0x8c>
    93f0:	00800104 	movi	r2,4
    93f4:	20800a26 	beq	r4,r2,9420 <__muldf3+0xa4>
    93f8:	1880cc26 	beq	r3,r2,972c <__muldf3+0x3b0>
    93fc:	00800084 	movi	r2,2
    9400:	20800926 	beq	r4,r2,9428 <__muldf3+0xac>
    9404:	1880191e 	bne	r3,r2,946c <__muldf3+0xf0>
    9408:	d8c00a17 	ldw	r3,40(sp)
    940c:	d8800517 	ldw	r2,20(sp)
    9410:	8009883a 	mov	r4,r16
    9414:	10c4c03a 	cmpne	r2,r2,r3
    9418:	d8800a15 	stw	r2,40(sp)
    941c:	00000706 	br	943c <__muldf3+0xc0>
    9420:	00800084 	movi	r2,2
    9424:	1880c326 	beq	r3,r2,9734 <__muldf3+0x3b8>
    9428:	d8800517 	ldw	r2,20(sp)
    942c:	d8c00a17 	ldw	r3,40(sp)
    9430:	8809883a 	mov	r4,r17
    9434:	10c4c03a 	cmpne	r2,r2,r3
    9438:	d8800515 	stw	r2,20(sp)
    943c:	000a1480 	call	a148 <__pack_d>
    9440:	dfc01f17 	ldw	ra,124(sp)
    9444:	ddc01e17 	ldw	r23,120(sp)
    9448:	dd801d17 	ldw	r22,116(sp)
    944c:	dd401c17 	ldw	r21,112(sp)
    9450:	dd001b17 	ldw	r20,108(sp)
    9454:	dcc01a17 	ldw	r19,104(sp)
    9458:	dc801917 	ldw	r18,100(sp)
    945c:	dc401817 	ldw	r17,96(sp)
    9460:	dc001717 	ldw	r16,92(sp)
    9464:	dec02004 	addi	sp,sp,128
    9468:	f800283a 	ret
    946c:	dd800717 	ldw	r22,28(sp)
    9470:	dc800c17 	ldw	r18,48(sp)
    9474:	002b883a 	mov	r21,zero
    9478:	0023883a 	mov	r17,zero
    947c:	a80b883a 	mov	r5,r21
    9480:	b00d883a 	mov	r6,r22
    9484:	880f883a 	mov	r7,r17
    9488:	ddc00817 	ldw	r23,32(sp)
    948c:	dcc00d17 	ldw	r19,52(sp)
    9490:	9009883a 	mov	r4,r18
    9494:	0009fa40 	call	9fa4 <__muldi3>
    9498:	001b883a 	mov	r13,zero
    949c:	680f883a 	mov	r7,r13
    94a0:	b009883a 	mov	r4,r22
    94a4:	000b883a 	mov	r5,zero
    94a8:	980d883a 	mov	r6,r19
    94ac:	b82d883a 	mov	r22,r23
    94b0:	002f883a 	mov	r23,zero
    94b4:	db401615 	stw	r13,88(sp)
    94b8:	d8801315 	stw	r2,76(sp)
    94bc:	d8c01415 	stw	r3,80(sp)
    94c0:	dcc01515 	stw	r19,84(sp)
    94c4:	0009fa40 	call	9fa4 <__muldi3>
    94c8:	b00d883a 	mov	r6,r22
    94cc:	000b883a 	mov	r5,zero
    94d0:	9009883a 	mov	r4,r18
    94d4:	b80f883a 	mov	r7,r23
    94d8:	1021883a 	mov	r16,r2
    94dc:	1823883a 	mov	r17,r3
    94e0:	0009fa40 	call	9fa4 <__muldi3>
    94e4:	8085883a 	add	r2,r16,r2
    94e8:	140d803a 	cmpltu	r6,r2,r16
    94ec:	88c7883a 	add	r3,r17,r3
    94f0:	30cd883a 	add	r6,r6,r3
    94f4:	1029883a 	mov	r20,r2
    94f8:	302b883a 	mov	r21,r6
    94fc:	da801317 	ldw	r10,76(sp)
    9500:	dac01417 	ldw	r11,80(sp)
    9504:	db001517 	ldw	r12,84(sp)
    9508:	db401617 	ldw	r13,88(sp)
    950c:	3440612e 	bgeu	r6,r17,9694 <__muldf3+0x318>
    9510:	0009883a 	mov	r4,zero
    9514:	5105883a 	add	r2,r10,r4
    9518:	128d803a 	cmpltu	r6,r2,r10
    951c:	5d07883a 	add	r3,r11,r20
    9520:	30cd883a 	add	r6,r6,r3
    9524:	0021883a 	mov	r16,zero
    9528:	04400044 	movi	r17,1
    952c:	1025883a 	mov	r18,r2
    9530:	3027883a 	mov	r19,r6
    9534:	32c06236 	bltu	r6,r11,96c0 <__muldf3+0x344>
    9538:	59807a26 	beq	r11,r6,9724 <__muldf3+0x3a8>
    953c:	680b883a 	mov	r5,r13
    9540:	b80f883a 	mov	r7,r23
    9544:	6009883a 	mov	r4,r12
    9548:	b00d883a 	mov	r6,r22
    954c:	0009fa40 	call	9fa4 <__muldi3>
    9550:	1009883a 	mov	r4,r2
    9554:	000f883a 	mov	r7,zero
    9558:	1545883a 	add	r2,r2,r21
    955c:	1111803a 	cmpltu	r8,r2,r4
    9560:	19c7883a 	add	r3,r3,r7
    9564:	40c7883a 	add	r3,r8,r3
    9568:	88cb883a 	add	r5,r17,r3
    956c:	d8c00617 	ldw	r3,24(sp)
    9570:	8089883a 	add	r4,r16,r2
    9574:	d8800b17 	ldw	r2,44(sp)
    9578:	18c00104 	addi	r3,r3,4
    957c:	240d803a 	cmpltu	r6,r4,r16
    9580:	10c7883a 	add	r3,r2,r3
    9584:	2013883a 	mov	r9,r4
    9588:	d8800a17 	ldw	r2,40(sp)
    958c:	d9000517 	ldw	r4,20(sp)
    9590:	314d883a 	add	r6,r6,r5
    9594:	3015883a 	mov	r10,r6
    9598:	2088c03a 	cmpne	r4,r4,r2
    959c:	00880034 	movhi	r2,8192
    95a0:	10bfffc4 	addi	r2,r2,-1
    95a4:	d9000f15 	stw	r4,60(sp)
    95a8:	d8c01015 	stw	r3,64(sp)
    95ac:	1180162e 	bgeu	r2,r6,9608 <__muldf3+0x28c>
    95b0:	1811883a 	mov	r8,r3
    95b4:	101f883a 	mov	r15,r2
    95b8:	980497fa 	slli	r2,r19,31
    95bc:	9016d07a 	srli	r11,r18,1
    95c0:	500697fa 	slli	r3,r10,31
    95c4:	480cd07a 	srli	r6,r9,1
    95c8:	500ed07a 	srli	r7,r10,1
    95cc:	12d6b03a 	or	r11,r2,r11
    95d0:	00800044 	movi	r2,1
    95d4:	198cb03a 	or	r6,r3,r6
    95d8:	4888703a 	and	r4,r9,r2
    95dc:	9818d07a 	srli	r12,r19,1
    95e0:	001b883a 	mov	r13,zero
    95e4:	03a00034 	movhi	r14,32768
    95e8:	3013883a 	mov	r9,r6
    95ec:	3815883a 	mov	r10,r7
    95f0:	4091883a 	add	r8,r8,r2
    95f4:	20000226 	beq	r4,zero,9600 <__muldf3+0x284>
    95f8:	5b64b03a 	or	r18,r11,r13
    95fc:	63a6b03a 	or	r19,r12,r14
    9600:	7abfed36 	bltu	r15,r10,95b8 <__muldf3+0x23c>
    9604:	da001015 	stw	r8,64(sp)
    9608:	00840034 	movhi	r2,4096
    960c:	10bfffc4 	addi	r2,r2,-1
    9610:	12801436 	bltu	r2,r10,9664 <__muldf3+0x2e8>
    9614:	da001017 	ldw	r8,64(sp)
    9618:	101f883a 	mov	r15,r2
    961c:	4a45883a 	add	r2,r9,r9
    9620:	124d803a 	cmpltu	r6,r2,r9
    9624:	5287883a 	add	r3,r10,r10
    9628:	9497883a 	add	r11,r18,r18
    962c:	5c8f803a 	cmpltu	r7,r11,r18
    9630:	9cd9883a 	add	r12,r19,r19
    9634:	01000044 	movi	r4,1
    9638:	30cd883a 	add	r6,r6,r3
    963c:	3b0f883a 	add	r7,r7,r12
    9640:	423fffc4 	addi	r8,r8,-1
    9644:	1013883a 	mov	r9,r2
    9648:	3015883a 	mov	r10,r6
    964c:	111ab03a 	or	r13,r2,r4
    9650:	98003016 	blt	r19,zero,9714 <__muldf3+0x398>
    9654:	5825883a 	mov	r18,r11
    9658:	3827883a 	mov	r19,r7
    965c:	7abfef2e 	bgeu	r15,r10,961c <__muldf3+0x2a0>
    9660:	da001015 	stw	r8,64(sp)
    9664:	00803fc4 	movi	r2,255
    9668:	488e703a 	and	r7,r9,r2
    966c:	00802004 	movi	r2,128
    9670:	0007883a 	mov	r3,zero
    9674:	0011883a 	mov	r8,zero
    9678:	38801826 	beq	r7,r2,96dc <__muldf3+0x360>
    967c:	008000c4 	movi	r2,3
    9680:	d9000e04 	addi	r4,sp,56
    9684:	da801215 	stw	r10,72(sp)
    9688:	d8800e15 	stw	r2,56(sp)
    968c:	da401115 	stw	r9,68(sp)
    9690:	003f6a06 	br	943c <__muldf3+0xc0>
    9694:	89802126 	beq	r17,r6,971c <__muldf3+0x3a0>
    9698:	0009883a 	mov	r4,zero
    969c:	5105883a 	add	r2,r10,r4
    96a0:	128d803a 	cmpltu	r6,r2,r10
    96a4:	5d07883a 	add	r3,r11,r20
    96a8:	30cd883a 	add	r6,r6,r3
    96ac:	0021883a 	mov	r16,zero
    96b0:	0023883a 	mov	r17,zero
    96b4:	1025883a 	mov	r18,r2
    96b8:	3027883a 	mov	r19,r6
    96bc:	32ff9e2e 	bgeu	r6,r11,9538 <__muldf3+0x1bc>
    96c0:	00800044 	movi	r2,1
    96c4:	8089883a 	add	r4,r16,r2
    96c8:	240d803a 	cmpltu	r6,r4,r16
    96cc:	344d883a 	add	r6,r6,r17
    96d0:	2021883a 	mov	r16,r4
    96d4:	3023883a 	mov	r17,r6
    96d8:	003f9806 	br	953c <__muldf3+0x1c0>
    96dc:	403fe71e 	bne	r8,zero,967c <__muldf3+0x300>
    96e0:	01004004 	movi	r4,256
    96e4:	4904703a 	and	r2,r9,r4
    96e8:	10c4b03a 	or	r2,r2,r3
    96ec:	103fe31e 	bne	r2,zero,967c <__muldf3+0x300>
    96f0:	94c4b03a 	or	r2,r18,r19
    96f4:	103fe126 	beq	r2,zero,967c <__muldf3+0x300>
    96f8:	49c5883a 	add	r2,r9,r7
    96fc:	1251803a 	cmpltu	r8,r2,r9
    9700:	4291883a 	add	r8,r8,r10
    9704:	013fc004 	movi	r4,-256
    9708:	1112703a 	and	r9,r2,r4
    970c:	4015883a 	mov	r10,r8
    9710:	003fda06 	br	967c <__muldf3+0x300>
    9714:	6813883a 	mov	r9,r13
    9718:	003fce06 	br	9654 <__muldf3+0x2d8>
    971c:	143f7c36 	bltu	r2,r16,9510 <__muldf3+0x194>
    9720:	003fdd06 	br	9698 <__muldf3+0x31c>
    9724:	12bf852e 	bgeu	r2,r10,953c <__muldf3+0x1c0>
    9728:	003fe506 	br	96c0 <__muldf3+0x344>
    972c:	00800084 	movi	r2,2
    9730:	20bf351e 	bne	r4,r2,9408 <__muldf3+0x8c>
    9734:	01000074 	movhi	r4,1
    9738:	21365304 	addi	r4,r4,-9908
    973c:	003f3f06 	br	943c <__muldf3+0xc0>

00009740 <__divdf3>:
    9740:	deffed04 	addi	sp,sp,-76
    9744:	dcc01115 	stw	r19,68(sp)
    9748:	dcc00404 	addi	r19,sp,16
    974c:	2011883a 	mov	r8,r4
    9750:	2813883a 	mov	r9,r5
    9754:	dc000e15 	stw	r16,56(sp)
    9758:	d809883a 	mov	r4,sp
    975c:	980b883a 	mov	r5,r19
    9760:	dc000904 	addi	r16,sp,36
    9764:	dfc01215 	stw	ra,72(sp)
    9768:	da400115 	stw	r9,4(sp)
    976c:	d9c00315 	stw	r7,12(sp)
    9770:	da000015 	stw	r8,0(sp)
    9774:	d9800215 	stw	r6,8(sp)
    9778:	dc801015 	stw	r18,64(sp)
    977c:	dc400f15 	stw	r17,60(sp)
    9780:	000a45c0 	call	a45c <__unpack_d>
    9784:	d9000204 	addi	r4,sp,8
    9788:	800b883a 	mov	r5,r16
    978c:	000a45c0 	call	a45c <__unpack_d>
    9790:	d9000417 	ldw	r4,16(sp)
    9794:	00800044 	movi	r2,1
    9798:	11000b2e 	bgeu	r2,r4,97c8 <__divdf3+0x88>
    979c:	d9400917 	ldw	r5,36(sp)
    97a0:	1140762e 	bgeu	r2,r5,997c <__divdf3+0x23c>
    97a4:	d8800517 	ldw	r2,20(sp)
    97a8:	d8c00a17 	ldw	r3,40(sp)
    97ac:	01800104 	movi	r6,4
    97b0:	10c4f03a 	xor	r2,r2,r3
    97b4:	d8800515 	stw	r2,20(sp)
    97b8:	21800226 	beq	r4,r6,97c4 <__divdf3+0x84>
    97bc:	00800084 	movi	r2,2
    97c0:	2080141e 	bne	r4,r2,9814 <__divdf3+0xd4>
    97c4:	29000926 	beq	r5,r4,97ec <__divdf3+0xac>
    97c8:	9809883a 	mov	r4,r19
    97cc:	000a1480 	call	a148 <__pack_d>
    97d0:	dfc01217 	ldw	ra,72(sp)
    97d4:	dcc01117 	ldw	r19,68(sp)
    97d8:	dc801017 	ldw	r18,64(sp)
    97dc:	dc400f17 	ldw	r17,60(sp)
    97e0:	dc000e17 	ldw	r16,56(sp)
    97e4:	dec01304 	addi	sp,sp,76
    97e8:	f800283a 	ret
    97ec:	01000074 	movhi	r4,1
    97f0:	21365304 	addi	r4,r4,-9908
    97f4:	000a1480 	call	a148 <__pack_d>
    97f8:	dfc01217 	ldw	ra,72(sp)
    97fc:	dcc01117 	ldw	r19,68(sp)
    9800:	dc801017 	ldw	r18,64(sp)
    9804:	dc400f17 	ldw	r17,60(sp)
    9808:	dc000e17 	ldw	r16,56(sp)
    980c:	dec01304 	addi	sp,sp,76
    9810:	f800283a 	ret
    9814:	29805b26 	beq	r5,r6,9984 <__divdf3+0x244>
    9818:	28802d26 	beq	r5,r2,98d0 <__divdf3+0x190>
    981c:	d8c00617 	ldw	r3,24(sp)
    9820:	d8800b17 	ldw	r2,44(sp)
    9824:	d9c00817 	ldw	r7,32(sp)
    9828:	dc400d17 	ldw	r17,52(sp)
    982c:	188bc83a 	sub	r5,r3,r2
    9830:	d9800717 	ldw	r6,28(sp)
    9834:	dc000c17 	ldw	r16,48(sp)
    9838:	d9400615 	stw	r5,24(sp)
    983c:	3c403836 	bltu	r7,r17,9920 <__divdf3+0x1e0>
    9840:	89c03626 	beq	r17,r7,991c <__divdf3+0x1dc>
    9844:	0015883a 	mov	r10,zero
    9848:	001d883a 	mov	r14,zero
    984c:	02c40034 	movhi	r11,4096
    9850:	001f883a 	mov	r15,zero
    9854:	003f883a 	mov	ra,zero
    9858:	04800f44 	movi	r18,61
    985c:	00000f06 	br	989c <__divdf3+0x15c>
    9860:	601d883a 	mov	r14,r12
    9864:	681f883a 	mov	r15,r13
    9868:	400d883a 	mov	r6,r8
    986c:	100f883a 	mov	r7,r2
    9870:	3191883a 	add	r8,r6,r6
    9874:	5808d07a 	srli	r4,r11,1
    9878:	4185803a 	cmpltu	r2,r8,r6
    987c:	39d3883a 	add	r9,r7,r7
    9880:	28c6b03a 	or	r3,r5,r3
    9884:	1245883a 	add	r2,r2,r9
    9888:	1815883a 	mov	r10,r3
    988c:	2017883a 	mov	r11,r4
    9890:	400d883a 	mov	r6,r8
    9894:	100f883a 	mov	r7,r2
    9898:	fc801726 	beq	ra,r18,98f8 <__divdf3+0x1b8>
    989c:	580a97fa 	slli	r5,r11,31
    98a0:	5006d07a 	srli	r3,r10,1
    98a4:	ffc00044 	addi	ra,ra,1
    98a8:	3c7ff136 	bltu	r7,r17,9870 <__divdf3+0x130>
    98ac:	3411c83a 	sub	r8,r6,r16
    98b0:	3205803a 	cmpltu	r2,r6,r8
    98b4:	3c53c83a 	sub	r9,r7,r17
    98b8:	7298b03a 	or	r12,r14,r10
    98bc:	7adab03a 	or	r13,r15,r11
    98c0:	4885c83a 	sub	r2,r9,r2
    98c4:	89ffe61e 	bne	r17,r7,9860 <__divdf3+0x120>
    98c8:	343fe936 	bltu	r6,r16,9870 <__divdf3+0x130>
    98cc:	003fe406 	br	9860 <__divdf3+0x120>
    98d0:	9809883a 	mov	r4,r19
    98d4:	d9800415 	stw	r6,16(sp)
    98d8:	000a1480 	call	a148 <__pack_d>
    98dc:	dfc01217 	ldw	ra,72(sp)
    98e0:	dcc01117 	ldw	r19,68(sp)
    98e4:	dc801017 	ldw	r18,64(sp)
    98e8:	dc400f17 	ldw	r17,60(sp)
    98ec:	dc000e17 	ldw	r16,56(sp)
    98f0:	dec01304 	addi	sp,sp,76
    98f4:	f800283a 	ret
    98f8:	00803fc4 	movi	r2,255
    98fc:	7090703a 	and	r8,r14,r2
    9900:	00802004 	movi	r2,128
    9904:	0007883a 	mov	r3,zero
    9908:	0013883a 	mov	r9,zero
    990c:	40800d26 	beq	r8,r2,9944 <__divdf3+0x204>
    9910:	dbc00815 	stw	r15,32(sp)
    9914:	db800715 	stw	r14,28(sp)
    9918:	003fab06 	br	97c8 <__divdf3+0x88>
    991c:	343fc92e 	bgeu	r6,r16,9844 <__divdf3+0x104>
    9920:	3185883a 	add	r2,r6,r6
    9924:	1189803a 	cmpltu	r4,r2,r6
    9928:	39c7883a 	add	r3,r7,r7
    992c:	20c9883a 	add	r4,r4,r3
    9930:	297fffc4 	addi	r5,r5,-1
    9934:	100d883a 	mov	r6,r2
    9938:	200f883a 	mov	r7,r4
    993c:	d9400615 	stw	r5,24(sp)
    9940:	003fc006 	br	9844 <__divdf3+0x104>
    9944:	483ff21e 	bne	r9,zero,9910 <__divdf3+0x1d0>
    9948:	01004004 	movi	r4,256
    994c:	7104703a 	and	r2,r14,r4
    9950:	10c4b03a 	or	r2,r2,r3
    9954:	103fee1e 	bne	r2,zero,9910 <__divdf3+0x1d0>
    9958:	31c4b03a 	or	r2,r6,r7
    995c:	103fec26 	beq	r2,zero,9910 <__divdf3+0x1d0>
    9960:	7205883a 	add	r2,r14,r8
    9964:	1391803a 	cmpltu	r8,r2,r14
    9968:	43d1883a 	add	r8,r8,r15
    996c:	013fc004 	movi	r4,-256
    9970:	111c703a 	and	r14,r2,r4
    9974:	401f883a 	mov	r15,r8
    9978:	003fe506 	br	9910 <__divdf3+0x1d0>
    997c:	8009883a 	mov	r4,r16
    9980:	003f9206 	br	97cc <__divdf3+0x8c>
    9984:	9809883a 	mov	r4,r19
    9988:	d8000715 	stw	zero,28(sp)
    998c:	d8000815 	stw	zero,32(sp)
    9990:	d8000615 	stw	zero,24(sp)
    9994:	003f8d06 	br	97cc <__divdf3+0x8c>

00009998 <__eqdf2>:
    9998:	deffef04 	addi	sp,sp,-68
    999c:	dc400f15 	stw	r17,60(sp)
    99a0:	dc400404 	addi	r17,sp,16
    99a4:	2005883a 	mov	r2,r4
    99a8:	2807883a 	mov	r3,r5
    99ac:	dc000e15 	stw	r16,56(sp)
    99b0:	d809883a 	mov	r4,sp
    99b4:	880b883a 	mov	r5,r17
    99b8:	dc000904 	addi	r16,sp,36
    99bc:	d8c00115 	stw	r3,4(sp)
    99c0:	d8800015 	stw	r2,0(sp)
    99c4:	d9800215 	stw	r6,8(sp)
    99c8:	dfc01015 	stw	ra,64(sp)
    99cc:	d9c00315 	stw	r7,12(sp)
    99d0:	000a45c0 	call	a45c <__unpack_d>
    99d4:	d9000204 	addi	r4,sp,8
    99d8:	800b883a 	mov	r5,r16
    99dc:	000a45c0 	call	a45c <__unpack_d>
    99e0:	d8800417 	ldw	r2,16(sp)
    99e4:	00c00044 	movi	r3,1
    99e8:	180d883a 	mov	r6,r3
    99ec:	1880062e 	bgeu	r3,r2,9a08 <__eqdf2+0x70>
    99f0:	d8800917 	ldw	r2,36(sp)
    99f4:	8809883a 	mov	r4,r17
    99f8:	800b883a 	mov	r5,r16
    99fc:	1880022e 	bgeu	r3,r2,9a08 <__eqdf2+0x70>
    9a00:	000a5940 	call	a594 <__fpcmp_parts_d>
    9a04:	100d883a 	mov	r6,r2
    9a08:	3005883a 	mov	r2,r6
    9a0c:	dfc01017 	ldw	ra,64(sp)
    9a10:	dc400f17 	ldw	r17,60(sp)
    9a14:	dc000e17 	ldw	r16,56(sp)
    9a18:	dec01104 	addi	sp,sp,68
    9a1c:	f800283a 	ret

00009a20 <__nedf2>:
    9a20:	deffef04 	addi	sp,sp,-68
    9a24:	dc400f15 	stw	r17,60(sp)
    9a28:	dc400404 	addi	r17,sp,16
    9a2c:	2005883a 	mov	r2,r4
    9a30:	2807883a 	mov	r3,r5
    9a34:	dc000e15 	stw	r16,56(sp)
    9a38:	d809883a 	mov	r4,sp
    9a3c:	880b883a 	mov	r5,r17
    9a40:	dc000904 	addi	r16,sp,36
    9a44:	d8c00115 	stw	r3,4(sp)
    9a48:	d8800015 	stw	r2,0(sp)
    9a4c:	d9800215 	stw	r6,8(sp)
    9a50:	dfc01015 	stw	ra,64(sp)
    9a54:	d9c00315 	stw	r7,12(sp)
    9a58:	000a45c0 	call	a45c <__unpack_d>
    9a5c:	d9000204 	addi	r4,sp,8
    9a60:	800b883a 	mov	r5,r16
    9a64:	000a45c0 	call	a45c <__unpack_d>
    9a68:	d8800417 	ldw	r2,16(sp)
    9a6c:	00c00044 	movi	r3,1
    9a70:	180d883a 	mov	r6,r3
    9a74:	1880062e 	bgeu	r3,r2,9a90 <__nedf2+0x70>
    9a78:	d8800917 	ldw	r2,36(sp)
    9a7c:	8809883a 	mov	r4,r17
    9a80:	800b883a 	mov	r5,r16
    9a84:	1880022e 	bgeu	r3,r2,9a90 <__nedf2+0x70>
    9a88:	000a5940 	call	a594 <__fpcmp_parts_d>
    9a8c:	100d883a 	mov	r6,r2
    9a90:	3005883a 	mov	r2,r6
    9a94:	dfc01017 	ldw	ra,64(sp)
    9a98:	dc400f17 	ldw	r17,60(sp)
    9a9c:	dc000e17 	ldw	r16,56(sp)
    9aa0:	dec01104 	addi	sp,sp,68
    9aa4:	f800283a 	ret

00009aa8 <__gtdf2>:
    9aa8:	deffef04 	addi	sp,sp,-68
    9aac:	dc400f15 	stw	r17,60(sp)
    9ab0:	dc400404 	addi	r17,sp,16
    9ab4:	2005883a 	mov	r2,r4
    9ab8:	2807883a 	mov	r3,r5
    9abc:	dc000e15 	stw	r16,56(sp)
    9ac0:	d809883a 	mov	r4,sp
    9ac4:	880b883a 	mov	r5,r17
    9ac8:	dc000904 	addi	r16,sp,36
    9acc:	d8c00115 	stw	r3,4(sp)
    9ad0:	d8800015 	stw	r2,0(sp)
    9ad4:	d9800215 	stw	r6,8(sp)
    9ad8:	dfc01015 	stw	ra,64(sp)
    9adc:	d9c00315 	stw	r7,12(sp)
    9ae0:	000a45c0 	call	a45c <__unpack_d>
    9ae4:	d9000204 	addi	r4,sp,8
    9ae8:	800b883a 	mov	r5,r16
    9aec:	000a45c0 	call	a45c <__unpack_d>
    9af0:	d8800417 	ldw	r2,16(sp)
    9af4:	00c00044 	movi	r3,1
    9af8:	01bfffc4 	movi	r6,-1
    9afc:	1880062e 	bgeu	r3,r2,9b18 <__gtdf2+0x70>
    9b00:	d8800917 	ldw	r2,36(sp)
    9b04:	8809883a 	mov	r4,r17
    9b08:	800b883a 	mov	r5,r16
    9b0c:	1880022e 	bgeu	r3,r2,9b18 <__gtdf2+0x70>
    9b10:	000a5940 	call	a594 <__fpcmp_parts_d>
    9b14:	100d883a 	mov	r6,r2
    9b18:	3005883a 	mov	r2,r6
    9b1c:	dfc01017 	ldw	ra,64(sp)
    9b20:	dc400f17 	ldw	r17,60(sp)
    9b24:	dc000e17 	ldw	r16,56(sp)
    9b28:	dec01104 	addi	sp,sp,68
    9b2c:	f800283a 	ret

00009b30 <__gedf2>:
    9b30:	deffef04 	addi	sp,sp,-68
    9b34:	dc400f15 	stw	r17,60(sp)
    9b38:	dc400404 	addi	r17,sp,16
    9b3c:	2005883a 	mov	r2,r4
    9b40:	2807883a 	mov	r3,r5
    9b44:	dc000e15 	stw	r16,56(sp)
    9b48:	d809883a 	mov	r4,sp
    9b4c:	880b883a 	mov	r5,r17
    9b50:	dc000904 	addi	r16,sp,36
    9b54:	d8c00115 	stw	r3,4(sp)
    9b58:	d8800015 	stw	r2,0(sp)
    9b5c:	d9800215 	stw	r6,8(sp)
    9b60:	dfc01015 	stw	ra,64(sp)
    9b64:	d9c00315 	stw	r7,12(sp)
    9b68:	000a45c0 	call	a45c <__unpack_d>
    9b6c:	d9000204 	addi	r4,sp,8
    9b70:	800b883a 	mov	r5,r16
    9b74:	000a45c0 	call	a45c <__unpack_d>
    9b78:	d8800417 	ldw	r2,16(sp)
    9b7c:	00c00044 	movi	r3,1
    9b80:	01bfffc4 	movi	r6,-1
    9b84:	1880062e 	bgeu	r3,r2,9ba0 <__gedf2+0x70>
    9b88:	d8800917 	ldw	r2,36(sp)
    9b8c:	8809883a 	mov	r4,r17
    9b90:	800b883a 	mov	r5,r16
    9b94:	1880022e 	bgeu	r3,r2,9ba0 <__gedf2+0x70>
    9b98:	000a5940 	call	a594 <__fpcmp_parts_d>
    9b9c:	100d883a 	mov	r6,r2
    9ba0:	3005883a 	mov	r2,r6
    9ba4:	dfc01017 	ldw	ra,64(sp)
    9ba8:	dc400f17 	ldw	r17,60(sp)
    9bac:	dc000e17 	ldw	r16,56(sp)
    9bb0:	dec01104 	addi	sp,sp,68
    9bb4:	f800283a 	ret

00009bb8 <__ltdf2>:
    9bb8:	deffef04 	addi	sp,sp,-68
    9bbc:	dc400f15 	stw	r17,60(sp)
    9bc0:	dc400404 	addi	r17,sp,16
    9bc4:	2005883a 	mov	r2,r4
    9bc8:	2807883a 	mov	r3,r5
    9bcc:	dc000e15 	stw	r16,56(sp)
    9bd0:	d809883a 	mov	r4,sp
    9bd4:	880b883a 	mov	r5,r17
    9bd8:	dc000904 	addi	r16,sp,36
    9bdc:	d8c00115 	stw	r3,4(sp)
    9be0:	d8800015 	stw	r2,0(sp)
    9be4:	d9800215 	stw	r6,8(sp)
    9be8:	dfc01015 	stw	ra,64(sp)
    9bec:	d9c00315 	stw	r7,12(sp)
    9bf0:	000a45c0 	call	a45c <__unpack_d>
    9bf4:	d9000204 	addi	r4,sp,8
    9bf8:	800b883a 	mov	r5,r16
    9bfc:	000a45c0 	call	a45c <__unpack_d>
    9c00:	d8800417 	ldw	r2,16(sp)
    9c04:	00c00044 	movi	r3,1
    9c08:	180d883a 	mov	r6,r3
    9c0c:	1880062e 	bgeu	r3,r2,9c28 <__ltdf2+0x70>
    9c10:	d8800917 	ldw	r2,36(sp)
    9c14:	8809883a 	mov	r4,r17
    9c18:	800b883a 	mov	r5,r16
    9c1c:	1880022e 	bgeu	r3,r2,9c28 <__ltdf2+0x70>
    9c20:	000a5940 	call	a594 <__fpcmp_parts_d>
    9c24:	100d883a 	mov	r6,r2
    9c28:	3005883a 	mov	r2,r6
    9c2c:	dfc01017 	ldw	ra,64(sp)
    9c30:	dc400f17 	ldw	r17,60(sp)
    9c34:	dc000e17 	ldw	r16,56(sp)
    9c38:	dec01104 	addi	sp,sp,68
    9c3c:	f800283a 	ret

00009c40 <__floatsidf>:
    9c40:	2006d7fa 	srli	r3,r4,31
    9c44:	defff604 	addi	sp,sp,-40
    9c48:	008000c4 	movi	r2,3
    9c4c:	dfc00915 	stw	ra,36(sp)
    9c50:	dcc00815 	stw	r19,32(sp)
    9c54:	dc800715 	stw	r18,28(sp)
    9c58:	dc400615 	stw	r17,24(sp)
    9c5c:	dc000515 	stw	r16,20(sp)
    9c60:	d8800015 	stw	r2,0(sp)
    9c64:	d8c00115 	stw	r3,4(sp)
    9c68:	20000f1e 	bne	r4,zero,9ca8 <__floatsidf+0x68>
    9c6c:	00800084 	movi	r2,2
    9c70:	d8800015 	stw	r2,0(sp)
    9c74:	d809883a 	mov	r4,sp
    9c78:	000a1480 	call	a148 <__pack_d>
    9c7c:	1009883a 	mov	r4,r2
    9c80:	180b883a 	mov	r5,r3
    9c84:	2005883a 	mov	r2,r4
    9c88:	2807883a 	mov	r3,r5
    9c8c:	dfc00917 	ldw	ra,36(sp)
    9c90:	dcc00817 	ldw	r19,32(sp)
    9c94:	dc800717 	ldw	r18,28(sp)
    9c98:	dc400617 	ldw	r17,24(sp)
    9c9c:	dc000517 	ldw	r16,20(sp)
    9ca0:	dec00a04 	addi	sp,sp,40
    9ca4:	f800283a 	ret
    9ca8:	00800f04 	movi	r2,60
    9cac:	1807003a 	cmpeq	r3,r3,zero
    9cb0:	d8800215 	stw	r2,8(sp)
    9cb4:	18001126 	beq	r3,zero,9cfc <__floatsidf+0xbc>
    9cb8:	0027883a 	mov	r19,zero
    9cbc:	2025883a 	mov	r18,r4
    9cc0:	d9000315 	stw	r4,12(sp)
    9cc4:	dcc00415 	stw	r19,16(sp)
    9cc8:	000a0c80 	call	a0c8 <__clzsi2>
    9ccc:	11000744 	addi	r4,r2,29
    9cd0:	013fe80e 	bge	zero,r4,9c74 <__floatsidf+0x34>
    9cd4:	10bfff44 	addi	r2,r2,-3
    9cd8:	10000c16 	blt	r2,zero,9d0c <__floatsidf+0xcc>
    9cdc:	90a2983a 	sll	r17,r18,r2
    9ce0:	0021883a 	mov	r16,zero
    9ce4:	d8800217 	ldw	r2,8(sp)
    9ce8:	dc400415 	stw	r17,16(sp)
    9cec:	dc000315 	stw	r16,12(sp)
    9cf0:	1105c83a 	sub	r2,r2,r4
    9cf4:	d8800215 	stw	r2,8(sp)
    9cf8:	003fde06 	br	9c74 <__floatsidf+0x34>
    9cfc:	00a00034 	movhi	r2,32768
    9d00:	20800a26 	beq	r4,r2,9d2c <__floatsidf+0xec>
    9d04:	0109c83a 	sub	r4,zero,r4
    9d08:	003feb06 	br	9cb8 <__floatsidf+0x78>
    9d0c:	9006d07a 	srli	r3,r18,1
    9d10:	008007c4 	movi	r2,31
    9d14:	1105c83a 	sub	r2,r2,r4
    9d18:	1886d83a 	srl	r3,r3,r2
    9d1c:	9922983a 	sll	r17,r19,r4
    9d20:	9120983a 	sll	r16,r18,r4
    9d24:	1c62b03a 	or	r17,r3,r17
    9d28:	003fee06 	br	9ce4 <__floatsidf+0xa4>
    9d2c:	0009883a 	mov	r4,zero
    9d30:	01707834 	movhi	r5,49632
    9d34:	003fd306 	br	9c84 <__floatsidf+0x44>

00009d38 <__fixdfsi>:
    9d38:	defff804 	addi	sp,sp,-32
    9d3c:	2005883a 	mov	r2,r4
    9d40:	2807883a 	mov	r3,r5
    9d44:	d809883a 	mov	r4,sp
    9d48:	d9400204 	addi	r5,sp,8
    9d4c:	d8c00115 	stw	r3,4(sp)
    9d50:	d8800015 	stw	r2,0(sp)
    9d54:	dfc00715 	stw	ra,28(sp)
    9d58:	000a45c0 	call	a45c <__unpack_d>
    9d5c:	d8c00217 	ldw	r3,8(sp)
    9d60:	00800084 	movi	r2,2
    9d64:	1880051e 	bne	r3,r2,9d7c <__fixdfsi+0x44>
    9d68:	0007883a 	mov	r3,zero
    9d6c:	1805883a 	mov	r2,r3
    9d70:	dfc00717 	ldw	ra,28(sp)
    9d74:	dec00804 	addi	sp,sp,32
    9d78:	f800283a 	ret
    9d7c:	00800044 	movi	r2,1
    9d80:	10fff92e 	bgeu	r2,r3,9d68 <__fixdfsi+0x30>
    9d84:	00800104 	movi	r2,4
    9d88:	18800426 	beq	r3,r2,9d9c <__fixdfsi+0x64>
    9d8c:	d8c00417 	ldw	r3,16(sp)
    9d90:	183ff516 	blt	r3,zero,9d68 <__fixdfsi+0x30>
    9d94:	00800784 	movi	r2,30
    9d98:	10c0080e 	bge	r2,r3,9dbc <__fixdfsi+0x84>
    9d9c:	d8800317 	ldw	r2,12(sp)
    9da0:	1000121e 	bne	r2,zero,9dec <__fixdfsi+0xb4>
    9da4:	00e00034 	movhi	r3,32768
    9da8:	18ffffc4 	addi	r3,r3,-1
    9dac:	1805883a 	mov	r2,r3
    9db0:	dfc00717 	ldw	ra,28(sp)
    9db4:	dec00804 	addi	sp,sp,32
    9db8:	f800283a 	ret
    9dbc:	00800f04 	movi	r2,60
    9dc0:	10d1c83a 	sub	r8,r2,r3
    9dc4:	40bff804 	addi	r2,r8,-32
    9dc8:	d9800517 	ldw	r6,20(sp)
    9dcc:	d9c00617 	ldw	r7,24(sp)
    9dd0:	10000816 	blt	r2,zero,9df4 <__fixdfsi+0xbc>
    9dd4:	3888d83a 	srl	r4,r7,r2
    9dd8:	d8800317 	ldw	r2,12(sp)
    9ddc:	2007883a 	mov	r3,r4
    9de0:	103fe226 	beq	r2,zero,9d6c <__fixdfsi+0x34>
    9de4:	0107c83a 	sub	r3,zero,r4
    9de8:	003fe006 	br	9d6c <__fixdfsi+0x34>
    9dec:	00e00034 	movhi	r3,32768
    9df0:	003fde06 	br	9d6c <__fixdfsi+0x34>
    9df4:	39c7883a 	add	r3,r7,r7
    9df8:	008007c4 	movi	r2,31
    9dfc:	1205c83a 	sub	r2,r2,r8
    9e00:	1886983a 	sll	r3,r3,r2
    9e04:	3208d83a 	srl	r4,r6,r8
    9e08:	1908b03a 	or	r4,r3,r4
    9e0c:	003ff206 	br	9dd8 <__fixdfsi+0xa0>

00009e10 <__floatunsidf>:
    9e10:	defff204 	addi	sp,sp,-56
    9e14:	dfc00d15 	stw	ra,52(sp)
    9e18:	ddc00c15 	stw	r23,48(sp)
    9e1c:	dd800b15 	stw	r22,44(sp)
    9e20:	dd400a15 	stw	r21,40(sp)
    9e24:	dd000915 	stw	r20,36(sp)
    9e28:	dcc00815 	stw	r19,32(sp)
    9e2c:	dc800715 	stw	r18,28(sp)
    9e30:	dc400615 	stw	r17,24(sp)
    9e34:	dc000515 	stw	r16,20(sp)
    9e38:	d8000115 	stw	zero,4(sp)
    9e3c:	20000f1e 	bne	r4,zero,9e7c <__floatunsidf+0x6c>
    9e40:	00800084 	movi	r2,2
    9e44:	d8800015 	stw	r2,0(sp)
    9e48:	d809883a 	mov	r4,sp
    9e4c:	000a1480 	call	a148 <__pack_d>
    9e50:	dfc00d17 	ldw	ra,52(sp)
    9e54:	ddc00c17 	ldw	r23,48(sp)
    9e58:	dd800b17 	ldw	r22,44(sp)
    9e5c:	dd400a17 	ldw	r21,40(sp)
    9e60:	dd000917 	ldw	r20,36(sp)
    9e64:	dcc00817 	ldw	r19,32(sp)
    9e68:	dc800717 	ldw	r18,28(sp)
    9e6c:	dc400617 	ldw	r17,24(sp)
    9e70:	dc000517 	ldw	r16,20(sp)
    9e74:	dec00e04 	addi	sp,sp,56
    9e78:	f800283a 	ret
    9e7c:	008000c4 	movi	r2,3
    9e80:	00c00f04 	movi	r3,60
    9e84:	002f883a 	mov	r23,zero
    9e88:	202d883a 	mov	r22,r4
    9e8c:	d8800015 	stw	r2,0(sp)
    9e90:	d8c00215 	stw	r3,8(sp)
    9e94:	d9000315 	stw	r4,12(sp)
    9e98:	ddc00415 	stw	r23,16(sp)
    9e9c:	000a0c80 	call	a0c8 <__clzsi2>
    9ea0:	12400744 	addi	r9,r2,29
    9ea4:	48000b16 	blt	r9,zero,9ed4 <__floatunsidf+0xc4>
    9ea8:	483fe726 	beq	r9,zero,9e48 <__floatunsidf+0x38>
    9eac:	10bfff44 	addi	r2,r2,-3
    9eb0:	10002e16 	blt	r2,zero,9f6c <__floatunsidf+0x15c>
    9eb4:	b0a2983a 	sll	r17,r22,r2
    9eb8:	0021883a 	mov	r16,zero
    9ebc:	d8800217 	ldw	r2,8(sp)
    9ec0:	dc400415 	stw	r17,16(sp)
    9ec4:	dc000315 	stw	r16,12(sp)
    9ec8:	1245c83a 	sub	r2,r2,r9
    9ecc:	d8800215 	stw	r2,8(sp)
    9ed0:	003fdd06 	br	9e48 <__floatunsidf+0x38>
    9ed4:	0255c83a 	sub	r10,zero,r9
    9ed8:	51bff804 	addi	r6,r10,-32
    9edc:	30001b16 	blt	r6,zero,9f4c <__floatunsidf+0x13c>
    9ee0:	b9a8d83a 	srl	r20,r23,r6
    9ee4:	002b883a 	mov	r21,zero
    9ee8:	000f883a 	mov	r7,zero
    9eec:	01000044 	movi	r4,1
    9ef0:	0011883a 	mov	r8,zero
    9ef4:	30002516 	blt	r6,zero,9f8c <__floatunsidf+0x17c>
    9ef8:	21a6983a 	sll	r19,r4,r6
    9efc:	0025883a 	mov	r18,zero
    9f00:	00bfffc4 	movi	r2,-1
    9f04:	9089883a 	add	r4,r18,r2
    9f08:	988b883a 	add	r5,r19,r2
    9f0c:	248d803a 	cmpltu	r6,r4,r18
    9f10:	314b883a 	add	r5,r6,r5
    9f14:	b104703a 	and	r2,r22,r4
    9f18:	b946703a 	and	r3,r23,r5
    9f1c:	10c4b03a 	or	r2,r2,r3
    9f20:	10000226 	beq	r2,zero,9f2c <__floatunsidf+0x11c>
    9f24:	01c00044 	movi	r7,1
    9f28:	0011883a 	mov	r8,zero
    9f2c:	d9000217 	ldw	r4,8(sp)
    9f30:	a1c4b03a 	or	r2,r20,r7
    9f34:	aa06b03a 	or	r3,r21,r8
    9f38:	2249c83a 	sub	r4,r4,r9
    9f3c:	d8c00415 	stw	r3,16(sp)
    9f40:	d9000215 	stw	r4,8(sp)
    9f44:	d8800315 	stw	r2,12(sp)
    9f48:	003fbf06 	br	9e48 <__floatunsidf+0x38>
    9f4c:	bdc7883a 	add	r3,r23,r23
    9f50:	008007c4 	movi	r2,31
    9f54:	1285c83a 	sub	r2,r2,r10
    9f58:	1886983a 	sll	r3,r3,r2
    9f5c:	b2a8d83a 	srl	r20,r22,r10
    9f60:	baaad83a 	srl	r21,r23,r10
    9f64:	1d28b03a 	or	r20,r3,r20
    9f68:	003fdf06 	br	9ee8 <__floatunsidf+0xd8>
    9f6c:	b006d07a 	srli	r3,r22,1
    9f70:	008007c4 	movi	r2,31
    9f74:	1245c83a 	sub	r2,r2,r9
    9f78:	1886d83a 	srl	r3,r3,r2
    9f7c:	ba62983a 	sll	r17,r23,r9
    9f80:	b260983a 	sll	r16,r22,r9
    9f84:	1c62b03a 	or	r17,r3,r17
    9f88:	003fcc06 	br	9ebc <__floatunsidf+0xac>
    9f8c:	2006d07a 	srli	r3,r4,1
    9f90:	008007c4 	movi	r2,31
    9f94:	1285c83a 	sub	r2,r2,r10
    9f98:	18a6d83a 	srl	r19,r3,r2
    9f9c:	22a4983a 	sll	r18,r4,r10
    9fa0:	003fd706 	br	9f00 <__floatunsidf+0xf0>

00009fa4 <__muldi3>:
    9fa4:	defff204 	addi	sp,sp,-56
    9fa8:	df000c15 	stw	fp,48(sp)
    9fac:	3038d43a 	srli	fp,r6,16
    9fb0:	dd000815 	stw	r20,32(sp)
    9fb4:	dc400515 	stw	r17,20(sp)
    9fb8:	2028d43a 	srli	r20,r4,16
    9fbc:	247fffcc 	andi	r17,r4,65535
    9fc0:	dc000415 	stw	r16,16(sp)
    9fc4:	343fffcc 	andi	r16,r6,65535
    9fc8:	dcc00715 	stw	r19,28(sp)
    9fcc:	d9000015 	stw	r4,0(sp)
    9fd0:	2827883a 	mov	r19,r5
    9fd4:	8809883a 	mov	r4,r17
    9fd8:	d9400115 	stw	r5,4(sp)
    9fdc:	800b883a 	mov	r5,r16
    9fe0:	d9800215 	stw	r6,8(sp)
    9fe4:	dfc00d15 	stw	ra,52(sp)
    9fe8:	d9c00315 	stw	r7,12(sp)
    9fec:	dd800a15 	stw	r22,40(sp)
    9ff0:	dd400915 	stw	r21,36(sp)
    9ff4:	302d883a 	mov	r22,r6
    9ff8:	ddc00b15 	stw	r23,44(sp)
    9ffc:	dc800615 	stw	r18,24(sp)
    a000:	0000d140 	call	d14 <__mulsi3>
    a004:	8809883a 	mov	r4,r17
    a008:	e00b883a 	mov	r5,fp
    a00c:	102b883a 	mov	r21,r2
    a010:	0000d140 	call	d14 <__mulsi3>
    a014:	800b883a 	mov	r5,r16
    a018:	a009883a 	mov	r4,r20
    a01c:	1023883a 	mov	r17,r2
    a020:	0000d140 	call	d14 <__mulsi3>
    a024:	a009883a 	mov	r4,r20
    a028:	e00b883a 	mov	r5,fp
    a02c:	1021883a 	mov	r16,r2
    a030:	0000d140 	call	d14 <__mulsi3>
    a034:	a8ffffcc 	andi	r3,r21,65535
    a038:	a82ad43a 	srli	r21,r21,16
    a03c:	8c23883a 	add	r17,r17,r16
    a040:	1011883a 	mov	r8,r2
    a044:	ac6b883a 	add	r21,r21,r17
    a048:	a804943a 	slli	r2,r21,16
    a04c:	b009883a 	mov	r4,r22
    a050:	980b883a 	mov	r5,r19
    a054:	10c7883a 	add	r3,r2,r3
    a058:	a812d43a 	srli	r9,r21,16
    a05c:	180d883a 	mov	r6,r3
    a060:	ac00022e 	bgeu	r21,r16,a06c <__muldi3+0xc8>
    a064:	00800074 	movhi	r2,1
    a068:	4091883a 	add	r8,r8,r2
    a06c:	4267883a 	add	r19,r8,r9
    a070:	302d883a 	mov	r22,r6
    a074:	0000d140 	call	d14 <__mulsi3>
    a078:	d9400317 	ldw	r5,12(sp)
    a07c:	d9000017 	ldw	r4,0(sp)
    a080:	1023883a 	mov	r17,r2
    a084:	0000d140 	call	d14 <__mulsi3>
    a088:	14cb883a 	add	r5,r2,r19
    a08c:	894b883a 	add	r5,r17,r5
    a090:	b005883a 	mov	r2,r22
    a094:	2807883a 	mov	r3,r5
    a098:	dfc00d17 	ldw	ra,52(sp)
    a09c:	df000c17 	ldw	fp,48(sp)
    a0a0:	ddc00b17 	ldw	r23,44(sp)
    a0a4:	dd800a17 	ldw	r22,40(sp)
    a0a8:	dd400917 	ldw	r21,36(sp)
    a0ac:	dd000817 	ldw	r20,32(sp)
    a0b0:	dcc00717 	ldw	r19,28(sp)
    a0b4:	dc800617 	ldw	r18,24(sp)
    a0b8:	dc400517 	ldw	r17,20(sp)
    a0bc:	dc000417 	ldw	r16,16(sp)
    a0c0:	dec00e04 	addi	sp,sp,56
    a0c4:	f800283a 	ret

0000a0c8 <__clzsi2>:
    a0c8:	00bfffd4 	movui	r2,65535
    a0cc:	11000e36 	bltu	r2,r4,a108 <__clzsi2+0x40>
    a0d0:	00803fc4 	movi	r2,255
    a0d4:	01400204 	movi	r5,8
    a0d8:	0007883a 	mov	r3,zero
    a0dc:	11001036 	bltu	r2,r4,a120 <__clzsi2+0x58>
    a0e0:	000b883a 	mov	r5,zero
    a0e4:	20c6d83a 	srl	r3,r4,r3
    a0e8:	00800074 	movhi	r2,1
    a0ec:	10b65804 	addi	r2,r2,-9888
    a0f0:	1887883a 	add	r3,r3,r2
    a0f4:	18800003 	ldbu	r2,0(r3)
    a0f8:	00c00804 	movi	r3,32
    a0fc:	2885883a 	add	r2,r5,r2
    a100:	1885c83a 	sub	r2,r3,r2
    a104:	f800283a 	ret
    a108:	01400404 	movi	r5,16
    a10c:	00804034 	movhi	r2,256
    a110:	10bfffc4 	addi	r2,r2,-1
    a114:	2807883a 	mov	r3,r5
    a118:	113ff22e 	bgeu	r2,r4,a0e4 <__clzsi2+0x1c>
    a11c:	01400604 	movi	r5,24
    a120:	2807883a 	mov	r3,r5
    a124:	20c6d83a 	srl	r3,r4,r3
    a128:	00800074 	movhi	r2,1
    a12c:	10b65804 	addi	r2,r2,-9888
    a130:	1887883a 	add	r3,r3,r2
    a134:	18800003 	ldbu	r2,0(r3)
    a138:	00c00804 	movi	r3,32
    a13c:	2885883a 	add	r2,r5,r2
    a140:	1885c83a 	sub	r2,r3,r2
    a144:	f800283a 	ret

0000a148 <__pack_d>:
    a148:	20c00017 	ldw	r3,0(r4)
    a14c:	defffd04 	addi	sp,sp,-12
    a150:	dc000015 	stw	r16,0(sp)
    a154:	dc800215 	stw	r18,8(sp)
    a158:	dc400115 	stw	r17,4(sp)
    a15c:	00800044 	movi	r2,1
    a160:	22000317 	ldw	r8,12(r4)
    a164:	001f883a 	mov	r15,zero
    a168:	22400417 	ldw	r9,16(r4)
    a16c:	24000117 	ldw	r16,4(r4)
    a170:	10c0552e 	bgeu	r2,r3,a2c8 <__pack_d+0x180>
    a174:	00800104 	movi	r2,4
    a178:	18804f26 	beq	r3,r2,a2b8 <__pack_d+0x170>
    a17c:	00800084 	movi	r2,2
    a180:	18800226 	beq	r3,r2,a18c <__pack_d+0x44>
    a184:	4244b03a 	or	r2,r8,r9
    a188:	10001a1e 	bne	r2,zero,a1f4 <__pack_d+0xac>
    a18c:	000d883a 	mov	r6,zero
    a190:	000f883a 	mov	r7,zero
    a194:	0011883a 	mov	r8,zero
    a198:	00800434 	movhi	r2,16
    a19c:	10bfffc4 	addi	r2,r2,-1
    a1a0:	301d883a 	mov	r14,r6
    a1a4:	3884703a 	and	r2,r7,r2
    a1a8:	400a953a 	slli	r5,r8,20
    a1ac:	79bffc2c 	andhi	r6,r15,65520
    a1b0:	308cb03a 	or	r6,r6,r2
    a1b4:	00e00434 	movhi	r3,32784
    a1b8:	18ffffc4 	addi	r3,r3,-1
    a1bc:	800497fa 	slli	r2,r16,31
    a1c0:	30c6703a 	and	r3,r6,r3
    a1c4:	1946b03a 	or	r3,r3,r5
    a1c8:	01600034 	movhi	r5,32768
    a1cc:	297fffc4 	addi	r5,r5,-1
    a1d0:	194a703a 	and	r5,r3,r5
    a1d4:	288ab03a 	or	r5,r5,r2
    a1d8:	2807883a 	mov	r3,r5
    a1dc:	7005883a 	mov	r2,r14
    a1e0:	dc800217 	ldw	r18,8(sp)
    a1e4:	dc400117 	ldw	r17,4(sp)
    a1e8:	dc000017 	ldw	r16,0(sp)
    a1ec:	dec00304 	addi	sp,sp,12
    a1f0:	f800283a 	ret
    a1f4:	21000217 	ldw	r4,8(r4)
    a1f8:	00bf0084 	movi	r2,-1022
    a1fc:	20803f16 	blt	r4,r2,a2fc <__pack_d+0x1b4>
    a200:	0080ffc4 	movi	r2,1023
    a204:	11002c16 	blt	r2,r4,a2b8 <__pack_d+0x170>
    a208:	00803fc4 	movi	r2,255
    a20c:	408c703a 	and	r6,r8,r2
    a210:	00802004 	movi	r2,128
    a214:	0007883a 	mov	r3,zero
    a218:	000f883a 	mov	r7,zero
    a21c:	2280ffc4 	addi	r10,r4,1023
    a220:	30801e26 	beq	r6,r2,a29c <__pack_d+0x154>
    a224:	00801fc4 	movi	r2,127
    a228:	4089883a 	add	r4,r8,r2
    a22c:	220d803a 	cmpltu	r6,r4,r8
    a230:	324d883a 	add	r6,r6,r9
    a234:	2011883a 	mov	r8,r4
    a238:	3013883a 	mov	r9,r6
    a23c:	00880034 	movhi	r2,8192
    a240:	10bfffc4 	addi	r2,r2,-1
    a244:	12400d36 	bltu	r2,r9,a27c <__pack_d+0x134>
    a248:	4804963a 	slli	r2,r9,24
    a24c:	400cd23a 	srli	r6,r8,8
    a250:	480ed23a 	srli	r7,r9,8
    a254:	013fffc4 	movi	r4,-1
    a258:	118cb03a 	or	r6,r2,r6
    a25c:	01400434 	movhi	r5,16
    a260:	297fffc4 	addi	r5,r5,-1
    a264:	3104703a 	and	r2,r6,r4
    a268:	3946703a 	and	r3,r7,r5
    a26c:	5201ffcc 	andi	r8,r10,2047
    a270:	100d883a 	mov	r6,r2
    a274:	180f883a 	mov	r7,r3
    a278:	003fc706 	br	a198 <__pack_d+0x50>
    a27c:	480897fa 	slli	r4,r9,31
    a280:	4004d07a 	srli	r2,r8,1
    a284:	4806d07a 	srli	r3,r9,1
    a288:	52800044 	addi	r10,r10,1
    a28c:	2084b03a 	or	r2,r4,r2
    a290:	1011883a 	mov	r8,r2
    a294:	1813883a 	mov	r9,r3
    a298:	003feb06 	br	a248 <__pack_d+0x100>
    a29c:	383fe11e 	bne	r7,zero,a224 <__pack_d+0xdc>
    a2a0:	01004004 	movi	r4,256
    a2a4:	4104703a 	and	r2,r8,r4
    a2a8:	10c4b03a 	or	r2,r2,r3
    a2ac:	103fe326 	beq	r2,zero,a23c <__pack_d+0xf4>
    a2b0:	3005883a 	mov	r2,r6
    a2b4:	003fdc06 	br	a228 <__pack_d+0xe0>
    a2b8:	000d883a 	mov	r6,zero
    a2bc:	000f883a 	mov	r7,zero
    a2c0:	0201ffc4 	movi	r8,2047
    a2c4:	003fb406 	br	a198 <__pack_d+0x50>
    a2c8:	0005883a 	mov	r2,zero
    a2cc:	00c00234 	movhi	r3,8
    a2d0:	408cb03a 	or	r6,r8,r2
    a2d4:	48ceb03a 	or	r7,r9,r3
    a2d8:	013fffc4 	movi	r4,-1
    a2dc:	01400434 	movhi	r5,16
    a2e0:	297fffc4 	addi	r5,r5,-1
    a2e4:	3104703a 	and	r2,r6,r4
    a2e8:	3946703a 	and	r3,r7,r5
    a2ec:	100d883a 	mov	r6,r2
    a2f0:	180f883a 	mov	r7,r3
    a2f4:	0201ffc4 	movi	r8,2047
    a2f8:	003fa706 	br	a198 <__pack_d+0x50>
    a2fc:	1109c83a 	sub	r4,r2,r4
    a300:	00800e04 	movi	r2,56
    a304:	11004316 	blt	r2,r4,a414 <__pack_d+0x2cc>
    a308:	21fff804 	addi	r7,r4,-32
    a30c:	38004516 	blt	r7,zero,a424 <__pack_d+0x2dc>
    a310:	49d8d83a 	srl	r12,r9,r7
    a314:	001b883a 	mov	r13,zero
    a318:	0023883a 	mov	r17,zero
    a31c:	01400044 	movi	r5,1
    a320:	0025883a 	mov	r18,zero
    a324:	38004716 	blt	r7,zero,a444 <__pack_d+0x2fc>
    a328:	29d6983a 	sll	r11,r5,r7
    a32c:	0015883a 	mov	r10,zero
    a330:	00bfffc4 	movi	r2,-1
    a334:	5089883a 	add	r4,r10,r2
    a338:	588b883a 	add	r5,r11,r2
    a33c:	228d803a 	cmpltu	r6,r4,r10
    a340:	314b883a 	add	r5,r6,r5
    a344:	4104703a 	and	r2,r8,r4
    a348:	4946703a 	and	r3,r9,r5
    a34c:	10c4b03a 	or	r2,r2,r3
    a350:	10000226 	beq	r2,zero,a35c <__pack_d+0x214>
    a354:	04400044 	movi	r17,1
    a358:	0025883a 	mov	r18,zero
    a35c:	00803fc4 	movi	r2,255
    a360:	644eb03a 	or	r7,r12,r17
    a364:	3892703a 	and	r9,r7,r2
    a368:	00802004 	movi	r2,128
    a36c:	6c90b03a 	or	r8,r13,r18
    a370:	0015883a 	mov	r10,zero
    a374:	48801626 	beq	r9,r2,a3d0 <__pack_d+0x288>
    a378:	01001fc4 	movi	r4,127
    a37c:	3905883a 	add	r2,r7,r4
    a380:	11cd803a 	cmpltu	r6,r2,r7
    a384:	320d883a 	add	r6,r6,r8
    a388:	100f883a 	mov	r7,r2
    a38c:	00840034 	movhi	r2,4096
    a390:	10bfffc4 	addi	r2,r2,-1
    a394:	3011883a 	mov	r8,r6
    a398:	0007883a 	mov	r3,zero
    a39c:	11801b36 	bltu	r2,r6,a40c <__pack_d+0x2c4>
    a3a0:	4004963a 	slli	r2,r8,24
    a3a4:	3808d23a 	srli	r4,r7,8
    a3a8:	400ad23a 	srli	r5,r8,8
    a3ac:	1813883a 	mov	r9,r3
    a3b0:	1108b03a 	or	r4,r2,r4
    a3b4:	00bfffc4 	movi	r2,-1
    a3b8:	00c00434 	movhi	r3,16
    a3bc:	18ffffc4 	addi	r3,r3,-1
    a3c0:	208c703a 	and	r6,r4,r2
    a3c4:	28ce703a 	and	r7,r5,r3
    a3c8:	4a01ffcc 	andi	r8,r9,2047
    a3cc:	003f7206 	br	a198 <__pack_d+0x50>
    a3d0:	503fe91e 	bne	r10,zero,a378 <__pack_d+0x230>
    a3d4:	01004004 	movi	r4,256
    a3d8:	3904703a 	and	r2,r7,r4
    a3dc:	0007883a 	mov	r3,zero
    a3e0:	10c4b03a 	or	r2,r2,r3
    a3e4:	10000626 	beq	r2,zero,a400 <__pack_d+0x2b8>
    a3e8:	3a45883a 	add	r2,r7,r9
    a3ec:	11cd803a 	cmpltu	r6,r2,r7
    a3f0:	320d883a 	add	r6,r6,r8
    a3f4:	100f883a 	mov	r7,r2
    a3f8:	3011883a 	mov	r8,r6
    a3fc:	0007883a 	mov	r3,zero
    a400:	00840034 	movhi	r2,4096
    a404:	10bfffc4 	addi	r2,r2,-1
    a408:	123fe52e 	bgeu	r2,r8,a3a0 <__pack_d+0x258>
    a40c:	00c00044 	movi	r3,1
    a410:	003fe306 	br	a3a0 <__pack_d+0x258>
    a414:	0009883a 	mov	r4,zero
    a418:	0013883a 	mov	r9,zero
    a41c:	000b883a 	mov	r5,zero
    a420:	003fe406 	br	a3b4 <__pack_d+0x26c>
    a424:	4a47883a 	add	r3,r9,r9
    a428:	008007c4 	movi	r2,31
    a42c:	1105c83a 	sub	r2,r2,r4
    a430:	1886983a 	sll	r3,r3,r2
    a434:	4118d83a 	srl	r12,r8,r4
    a438:	491ad83a 	srl	r13,r9,r4
    a43c:	1b18b03a 	or	r12,r3,r12
    a440:	003fb506 	br	a318 <__pack_d+0x1d0>
    a444:	2806d07a 	srli	r3,r5,1
    a448:	008007c4 	movi	r2,31
    a44c:	1105c83a 	sub	r2,r2,r4
    a450:	1896d83a 	srl	r11,r3,r2
    a454:	2914983a 	sll	r10,r5,r4
    a458:	003fb506 	br	a330 <__pack_d+0x1e8>

0000a45c <__unpack_d>:
    a45c:	20c00117 	ldw	r3,4(r4)
    a460:	22400017 	ldw	r9,0(r4)
    a464:	00800434 	movhi	r2,16
    a468:	10bfffc4 	addi	r2,r2,-1
    a46c:	1808d53a 	srli	r4,r3,20
    a470:	180cd7fa 	srli	r6,r3,31
    a474:	1894703a 	and	r10,r3,r2
    a478:	2201ffcc 	andi	r8,r4,2047
    a47c:	281b883a 	mov	r13,r5
    a480:	4817883a 	mov	r11,r9
    a484:	29800115 	stw	r6,4(r5)
    a488:	5019883a 	mov	r12,r10
    a48c:	40001e1e 	bne	r8,zero,a508 <__unpack_d+0xac>
    a490:	4a84b03a 	or	r2,r9,r10
    a494:	10001926 	beq	r2,zero,a4fc <__unpack_d+0xa0>
    a498:	4804d63a 	srli	r2,r9,24
    a49c:	500c923a 	slli	r6,r10,8
    a4a0:	013f0084 	movi	r4,-1022
    a4a4:	00c40034 	movhi	r3,4096
    a4a8:	18ffffc4 	addi	r3,r3,-1
    a4ac:	118cb03a 	or	r6,r2,r6
    a4b0:	008000c4 	movi	r2,3
    a4b4:	480a923a 	slli	r5,r9,8
    a4b8:	68800015 	stw	r2,0(r13)
    a4bc:	69000215 	stw	r4,8(r13)
    a4c0:	19800b36 	bltu	r3,r6,a4f0 <__unpack_d+0x94>
    a4c4:	200f883a 	mov	r7,r4
    a4c8:	1811883a 	mov	r8,r3
    a4cc:	2945883a 	add	r2,r5,r5
    a4d0:	1149803a 	cmpltu	r4,r2,r5
    a4d4:	3187883a 	add	r3,r6,r6
    a4d8:	20c9883a 	add	r4,r4,r3
    a4dc:	100b883a 	mov	r5,r2
    a4e0:	200d883a 	mov	r6,r4
    a4e4:	39ffffc4 	addi	r7,r7,-1
    a4e8:	413ff82e 	bgeu	r8,r4,a4cc <__unpack_d+0x70>
    a4ec:	69c00215 	stw	r7,8(r13)
    a4f0:	69800415 	stw	r6,16(r13)
    a4f4:	69400315 	stw	r5,12(r13)
    a4f8:	f800283a 	ret
    a4fc:	00800084 	movi	r2,2
    a500:	28800015 	stw	r2,0(r5)
    a504:	f800283a 	ret
    a508:	0081ffc4 	movi	r2,2047
    a50c:	40800f26 	beq	r8,r2,a54c <__unpack_d+0xf0>
    a510:	480cd63a 	srli	r6,r9,24
    a514:	5006923a 	slli	r3,r10,8
    a518:	4804923a 	slli	r2,r9,8
    a51c:	0009883a 	mov	r4,zero
    a520:	30c6b03a 	or	r3,r6,r3
    a524:	01440034 	movhi	r5,4096
    a528:	110cb03a 	or	r6,r2,r4
    a52c:	423f0044 	addi	r8,r8,-1023
    a530:	194eb03a 	or	r7,r3,r5
    a534:	008000c4 	movi	r2,3
    a538:	69c00415 	stw	r7,16(r13)
    a53c:	6a000215 	stw	r8,8(r13)
    a540:	68800015 	stw	r2,0(r13)
    a544:	69800315 	stw	r6,12(r13)
    a548:	f800283a 	ret
    a54c:	4a84b03a 	or	r2,r9,r10
    a550:	1000031e 	bne	r2,zero,a560 <__unpack_d+0x104>
    a554:	00800104 	movi	r2,4
    a558:	28800015 	stw	r2,0(r5)
    a55c:	f800283a 	ret
    a560:	0009883a 	mov	r4,zero
    a564:	01400234 	movhi	r5,8
    a568:	4904703a 	and	r2,r9,r4
    a56c:	5146703a 	and	r3,r10,r5
    a570:	10c4b03a 	or	r2,r2,r3
    a574:	10000526 	beq	r2,zero,a58c <__unpack_d+0x130>
    a578:	00800044 	movi	r2,1
    a57c:	68800015 	stw	r2,0(r13)
    a580:	6b000415 	stw	r12,16(r13)
    a584:	6ac00315 	stw	r11,12(r13)
    a588:	f800283a 	ret
    a58c:	68000015 	stw	zero,0(r13)
    a590:	003ffb06 	br	a580 <__unpack_d+0x124>

0000a594 <__fpcmp_parts_d>:
    a594:	21800017 	ldw	r6,0(r4)
    a598:	00c00044 	movi	r3,1
    a59c:	19800a2e 	bgeu	r3,r6,a5c8 <__fpcmp_parts_d+0x34>
    a5a0:	28800017 	ldw	r2,0(r5)
    a5a4:	1880082e 	bgeu	r3,r2,a5c8 <__fpcmp_parts_d+0x34>
    a5a8:	00c00104 	movi	r3,4
    a5ac:	30c02626 	beq	r6,r3,a648 <__fpcmp_parts_d+0xb4>
    a5b0:	10c02226 	beq	r2,r3,a63c <__fpcmp_parts_d+0xa8>
    a5b4:	00c00084 	movi	r3,2
    a5b8:	30c00526 	beq	r6,r3,a5d0 <__fpcmp_parts_d+0x3c>
    a5bc:	10c0071e 	bne	r2,r3,a5dc <__fpcmp_parts_d+0x48>
    a5c0:	20800117 	ldw	r2,4(r4)
    a5c4:	1000091e 	bne	r2,zero,a5ec <__fpcmp_parts_d+0x58>
    a5c8:	00800044 	movi	r2,1
    a5cc:	f800283a 	ret
    a5d0:	10c01a1e 	bne	r2,r3,a63c <__fpcmp_parts_d+0xa8>
    a5d4:	0005883a 	mov	r2,zero
    a5d8:	f800283a 	ret
    a5dc:	22000117 	ldw	r8,4(r4)
    a5e0:	28800117 	ldw	r2,4(r5)
    a5e4:	40800326 	beq	r8,r2,a5f4 <__fpcmp_parts_d+0x60>
    a5e8:	403ff726 	beq	r8,zero,a5c8 <__fpcmp_parts_d+0x34>
    a5ec:	00bfffc4 	movi	r2,-1
    a5f0:	f800283a 	ret
    a5f4:	20c00217 	ldw	r3,8(r4)
    a5f8:	28800217 	ldw	r2,8(r5)
    a5fc:	10fffa16 	blt	r2,r3,a5e8 <__fpcmp_parts_d+0x54>
    a600:	18800916 	blt	r3,r2,a628 <__fpcmp_parts_d+0x94>
    a604:	21c00417 	ldw	r7,16(r4)
    a608:	28c00417 	ldw	r3,16(r5)
    a60c:	21800317 	ldw	r6,12(r4)
    a610:	28800317 	ldw	r2,12(r5)
    a614:	19fff436 	bltu	r3,r7,a5e8 <__fpcmp_parts_d+0x54>
    a618:	38c00526 	beq	r7,r3,a630 <__fpcmp_parts_d+0x9c>
    a61c:	38c00236 	bltu	r7,r3,a628 <__fpcmp_parts_d+0x94>
    a620:	19ffec1e 	bne	r3,r7,a5d4 <__fpcmp_parts_d+0x40>
    a624:	30bfeb2e 	bgeu	r6,r2,a5d4 <__fpcmp_parts_d+0x40>
    a628:	403fe71e 	bne	r8,zero,a5c8 <__fpcmp_parts_d+0x34>
    a62c:	003fef06 	br	a5ec <__fpcmp_parts_d+0x58>
    a630:	11bffa2e 	bgeu	r2,r6,a61c <__fpcmp_parts_d+0x88>
    a634:	403fe426 	beq	r8,zero,a5c8 <__fpcmp_parts_d+0x34>
    a638:	003fec06 	br	a5ec <__fpcmp_parts_d+0x58>
    a63c:	28800117 	ldw	r2,4(r5)
    a640:	103fe11e 	bne	r2,zero,a5c8 <__fpcmp_parts_d+0x34>
    a644:	003fe906 	br	a5ec <__fpcmp_parts_d+0x58>
    a648:	11bfdd1e 	bne	r2,r6,a5c0 <__fpcmp_parts_d+0x2c>
    a64c:	28c00117 	ldw	r3,4(r5)
    a650:	20800117 	ldw	r2,4(r4)
    a654:	1885c83a 	sub	r2,r3,r2
    a658:	f800283a 	ret

0000a65c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    a65c:	defff404 	addi	sp,sp,-48
    a660:	df000b15 	stw	fp,44(sp)
    a664:	df000b04 	addi	fp,sp,44
    a668:	e13ffb15 	stw	r4,-20(fp)
    a66c:	e17ffc15 	stw	r5,-16(fp)
    a670:	e1bffd15 	stw	r6,-12(fp)
    a674:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    a678:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    a67c:	00800074 	movhi	r2,1
    a680:	1083e004 	addi	r2,r2,3968
    a684:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    a688:	1005003a 	cmpeq	r2,r2,zero
    a68c:	1000411e 	bne	r2,zero,a794 <alt_alarm_start+0x138>
  {
    if (alarm)
    a690:	e0bffb17 	ldw	r2,-20(fp)
    a694:	1005003a 	cmpeq	r2,r2,zero
    a698:	10003b1e 	bne	r2,zero,a788 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    a69c:	e0fffb17 	ldw	r3,-20(fp)
    a6a0:	e0bffd17 	ldw	r2,-12(fp)
    a6a4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    a6a8:	e0fffb17 	ldw	r3,-20(fp)
    a6ac:	e0bffe17 	ldw	r2,-8(fp)
    a6b0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6b4:	0005303a 	rdctl	r2,status
    a6b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a6bc:	e0fff817 	ldw	r3,-32(fp)
    a6c0:	00bfff84 	movi	r2,-2
    a6c4:	1884703a 	and	r2,r3,r2
    a6c8:	1001703a 	wrctl	status,r2
  
  return context;
    a6cc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    a6d0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    a6d4:	00800074 	movhi	r2,1
    a6d8:	1083e104 	addi	r2,r2,3972
    a6dc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    a6e0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    a6e4:	e0fffc17 	ldw	r3,-16(fp)
    a6e8:	e0bff917 	ldw	r2,-28(fp)
    a6ec:	1885883a 	add	r2,r3,r2
    a6f0:	10c00044 	addi	r3,r2,1
    a6f4:	e0bffb17 	ldw	r2,-20(fp)
    a6f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    a6fc:	e0bffb17 	ldw	r2,-20(fp)
    a700:	10c00217 	ldw	r3,8(r2)
    a704:	e0bff917 	ldw	r2,-28(fp)
    a708:	1880042e 	bgeu	r3,r2,a71c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    a70c:	e0fffb17 	ldw	r3,-20(fp)
    a710:	00800044 	movi	r2,1
    a714:	18800405 	stb	r2,16(r3)
    a718:	00000206 	br	a724 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    a71c:	e0bffb17 	ldw	r2,-20(fp)
    a720:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    a724:	e0fffb17 	ldw	r3,-20(fp)
    a728:	00800074 	movhi	r2,1
    a72c:	10bd3804 	addi	r2,r2,-2848
    a730:	e0bff615 	stw	r2,-40(fp)
    a734:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a738:	e0fff717 	ldw	r3,-36(fp)
    a73c:	e0bff617 	ldw	r2,-40(fp)
    a740:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    a744:	e0bff617 	ldw	r2,-40(fp)
    a748:	10c00017 	ldw	r3,0(r2)
    a74c:	e0bff717 	ldw	r2,-36(fp)
    a750:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    a754:	e0bff617 	ldw	r2,-40(fp)
    a758:	10c00017 	ldw	r3,0(r2)
    a75c:	e0bff717 	ldw	r2,-36(fp)
    a760:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    a764:	e0fff617 	ldw	r3,-40(fp)
    a768:	e0bff717 	ldw	r2,-36(fp)
    a76c:	18800015 	stw	r2,0(r3)
    a770:	e0bffa17 	ldw	r2,-24(fp)
    a774:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a778:	e0bff517 	ldw	r2,-44(fp)
    a77c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    a780:	e03fff15 	stw	zero,-4(fp)
    a784:	00000506 	br	a79c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    a788:	00bffa84 	movi	r2,-22
    a78c:	e0bfff15 	stw	r2,-4(fp)
    a790:	00000206 	br	a79c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    a794:	00bfde84 	movi	r2,-134
    a798:	e0bfff15 	stw	r2,-4(fp)
    a79c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    a7a0:	e037883a 	mov	sp,fp
    a7a4:	df000017 	ldw	fp,0(sp)
    a7a8:	dec00104 	addi	sp,sp,4
    a7ac:	f800283a 	ret

0000a7b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a7b0:	defff804 	addi	sp,sp,-32
    a7b4:	dfc00715 	stw	ra,28(sp)
    a7b8:	df000615 	stw	fp,24(sp)
    a7bc:	df000604 	addi	fp,sp,24
    a7c0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a7c4:	e0bffc17 	ldw	r2,-16(fp)
    a7c8:	1004803a 	cmplt	r2,r2,zero
    a7cc:	1000091e 	bne	r2,zero,a7f4 <close+0x44>
    a7d0:	e13ffc17 	ldw	r4,-16(fp)
    a7d4:	01400304 	movi	r5,12
    a7d8:	0000d140 	call	d14 <__mulsi3>
    a7dc:	1007883a 	mov	r3,r2
    a7e0:	00800074 	movhi	r2,1
    a7e4:	10b8b204 	addi	r2,r2,-7480
    a7e8:	1887883a 	add	r3,r3,r2
    a7ec:	e0ffff15 	stw	r3,-4(fp)
    a7f0:	00000106 	br	a7f8 <close+0x48>
    a7f4:	e03fff15 	stw	zero,-4(fp)
    a7f8:	e0bfff17 	ldw	r2,-4(fp)
    a7fc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    a800:	e0bffb17 	ldw	r2,-20(fp)
    a804:	1005003a 	cmpeq	r2,r2,zero
    a808:	10001d1e 	bne	r2,zero,a880 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a80c:	e0bffb17 	ldw	r2,-20(fp)
    a810:	10800017 	ldw	r2,0(r2)
    a814:	10800417 	ldw	r2,16(r2)
    a818:	1005003a 	cmpeq	r2,r2,zero
    a81c:	1000071e 	bne	r2,zero,a83c <close+0x8c>
    a820:	e0bffb17 	ldw	r2,-20(fp)
    a824:	10800017 	ldw	r2,0(r2)
    a828:	10800417 	ldw	r2,16(r2)
    a82c:	e13ffb17 	ldw	r4,-20(fp)
    a830:	103ee83a 	callr	r2
    a834:	e0bffe15 	stw	r2,-8(fp)
    a838:	00000106 	br	a840 <close+0x90>
    a83c:	e03ffe15 	stw	zero,-8(fp)
    a840:	e0bffe17 	ldw	r2,-8(fp)
    a844:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a848:	e13ffc17 	ldw	r4,-16(fp)
    a84c:	000b2a00 	call	b2a0 <alt_release_fd>
    if (rval < 0)
    a850:	e0bffa17 	ldw	r2,-24(fp)
    a854:	1004403a 	cmpge	r2,r2,zero
    a858:	1000071e 	bne	r2,zero,a878 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    a85c:	000a8b00 	call	a8b0 <alt_get_errno>
    a860:	e0fffa17 	ldw	r3,-24(fp)
    a864:	00c7c83a 	sub	r3,zero,r3
    a868:	10c00015 	stw	r3,0(r2)
      return -1;
    a86c:	00bfffc4 	movi	r2,-1
    a870:	e0bffd15 	stw	r2,-12(fp)
    a874:	00000806 	br	a898 <close+0xe8>
    }
    return 0;
    a878:	e03ffd15 	stw	zero,-12(fp)
    a87c:	00000606 	br	a898 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a880:	000a8b00 	call	a8b0 <alt_get_errno>
    a884:	1007883a 	mov	r3,r2
    a888:	00801444 	movi	r2,81
    a88c:	18800015 	stw	r2,0(r3)
    return -1;
    a890:	00bfffc4 	movi	r2,-1
    a894:	e0bffd15 	stw	r2,-12(fp)
    a898:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    a89c:	e037883a 	mov	sp,fp
    a8a0:	dfc00117 	ldw	ra,4(sp)
    a8a4:	df000017 	ldw	fp,0(sp)
    a8a8:	dec00204 	addi	sp,sp,8
    a8ac:	f800283a 	ret

0000a8b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a8b0:	defffd04 	addi	sp,sp,-12
    a8b4:	dfc00215 	stw	ra,8(sp)
    a8b8:	df000115 	stw	fp,4(sp)
    a8bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a8c0:	00800074 	movhi	r2,1
    a8c4:	10bd3604 	addi	r2,r2,-2856
    a8c8:	10800017 	ldw	r2,0(r2)
    a8cc:	1005003a 	cmpeq	r2,r2,zero
    a8d0:	1000061e 	bne	r2,zero,a8ec <alt_get_errno+0x3c>
    a8d4:	00800074 	movhi	r2,1
    a8d8:	10bd3604 	addi	r2,r2,-2856
    a8dc:	10800017 	ldw	r2,0(r2)
    a8e0:	103ee83a 	callr	r2
    a8e4:	e0bfff15 	stw	r2,-4(fp)
    a8e8:	00000306 	br	a8f8 <alt_get_errno+0x48>
    a8ec:	00800074 	movhi	r2,1
    a8f0:	1083d904 	addi	r2,r2,3940
    a8f4:	e0bfff15 	stw	r2,-4(fp)
    a8f8:	e0bfff17 	ldw	r2,-4(fp)
}
    a8fc:	e037883a 	mov	sp,fp
    a900:	dfc00117 	ldw	ra,4(sp)
    a904:	df000017 	ldw	fp,0(sp)
    a908:	dec00204 	addi	sp,sp,8
    a90c:	f800283a 	ret

0000a910 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a910:	defffc04 	addi	sp,sp,-16
    a914:	df000315 	stw	fp,12(sp)
    a918:	df000304 	addi	fp,sp,12
    a91c:	e13ffd15 	stw	r4,-12(fp)
    a920:	e17ffe15 	stw	r5,-8(fp)
    a924:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a928:	e0bfff17 	ldw	r2,-4(fp)
}
    a92c:	e037883a 	mov	sp,fp
    a930:	df000017 	ldw	fp,0(sp)
    a934:	dec00104 	addi	sp,sp,4
    a938:	f800283a 	ret

0000a93c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    a93c:	defff904 	addi	sp,sp,-28
    a940:	dfc00615 	stw	ra,24(sp)
    a944:	df000515 	stw	fp,20(sp)
    a948:	df000504 	addi	fp,sp,20
    a94c:	e13ffc15 	stw	r4,-16(fp)
    a950:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a954:	e0bffc17 	ldw	r2,-16(fp)
    a958:	1004803a 	cmplt	r2,r2,zero
    a95c:	1000091e 	bne	r2,zero,a984 <fstat+0x48>
    a960:	e13ffc17 	ldw	r4,-16(fp)
    a964:	01400304 	movi	r5,12
    a968:	0000d140 	call	d14 <__mulsi3>
    a96c:	1007883a 	mov	r3,r2
    a970:	00800074 	movhi	r2,1
    a974:	10b8b204 	addi	r2,r2,-7480
    a978:	1887883a 	add	r3,r3,r2
    a97c:	e0ffff15 	stw	r3,-4(fp)
    a980:	00000106 	br	a988 <fstat+0x4c>
    a984:	e03fff15 	stw	zero,-4(fp)
    a988:	e0bfff17 	ldw	r2,-4(fp)
    a98c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    a990:	e0bffb17 	ldw	r2,-20(fp)
    a994:	1005003a 	cmpeq	r2,r2,zero
    a998:	1000121e 	bne	r2,zero,a9e4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    a99c:	e0bffb17 	ldw	r2,-20(fp)
    a9a0:	10800017 	ldw	r2,0(r2)
    a9a4:	10800817 	ldw	r2,32(r2)
    a9a8:	1005003a 	cmpeq	r2,r2,zero
    a9ac:	1000081e 	bne	r2,zero,a9d0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    a9b0:	e0bffb17 	ldw	r2,-20(fp)
    a9b4:	10800017 	ldw	r2,0(r2)
    a9b8:	10800817 	ldw	r2,32(r2)
    a9bc:	e13ffb17 	ldw	r4,-20(fp)
    a9c0:	e17ffd17 	ldw	r5,-12(fp)
    a9c4:	103ee83a 	callr	r2
    a9c8:	e0bffe15 	stw	r2,-8(fp)
    a9cc:	00000b06 	br	a9fc <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    a9d0:	e0fffd17 	ldw	r3,-12(fp)
    a9d4:	00880004 	movi	r2,8192
    a9d8:	18800115 	stw	r2,4(r3)
      return 0;
    a9dc:	e03ffe15 	stw	zero,-8(fp)
    a9e0:	00000606 	br	a9fc <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a9e4:	000aa140 	call	aa14 <alt_get_errno>
    a9e8:	1007883a 	mov	r3,r2
    a9ec:	00801444 	movi	r2,81
    a9f0:	18800015 	stw	r2,0(r3)
    return -1;
    a9f4:	00bfffc4 	movi	r2,-1
    a9f8:	e0bffe15 	stw	r2,-8(fp)
    a9fc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    aa00:	e037883a 	mov	sp,fp
    aa04:	dfc00117 	ldw	ra,4(sp)
    aa08:	df000017 	ldw	fp,0(sp)
    aa0c:	dec00204 	addi	sp,sp,8
    aa10:	f800283a 	ret

0000aa14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aa14:	defffd04 	addi	sp,sp,-12
    aa18:	dfc00215 	stw	ra,8(sp)
    aa1c:	df000115 	stw	fp,4(sp)
    aa20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    aa24:	00800074 	movhi	r2,1
    aa28:	10bd3604 	addi	r2,r2,-2856
    aa2c:	10800017 	ldw	r2,0(r2)
    aa30:	1005003a 	cmpeq	r2,r2,zero
    aa34:	1000061e 	bne	r2,zero,aa50 <alt_get_errno+0x3c>
    aa38:	00800074 	movhi	r2,1
    aa3c:	10bd3604 	addi	r2,r2,-2856
    aa40:	10800017 	ldw	r2,0(r2)
    aa44:	103ee83a 	callr	r2
    aa48:	e0bfff15 	stw	r2,-4(fp)
    aa4c:	00000306 	br	aa5c <alt_get_errno+0x48>
    aa50:	00800074 	movhi	r2,1
    aa54:	1083d904 	addi	r2,r2,3940
    aa58:	e0bfff15 	stw	r2,-4(fp)
    aa5c:	e0bfff17 	ldw	r2,-4(fp)
}
    aa60:	e037883a 	mov	sp,fp
    aa64:	dfc00117 	ldw	ra,4(sp)
    aa68:	df000017 	ldw	fp,0(sp)
    aa6c:	dec00204 	addi	sp,sp,8
    aa70:	f800283a 	ret

0000aa74 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    aa74:	deffeb04 	addi	sp,sp,-84
    aa78:	dfc01415 	stw	ra,80(sp)
    aa7c:	df001315 	stw	fp,76(sp)
    aa80:	df001304 	addi	fp,sp,76
    aa84:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    aa88:	e0bffd17 	ldw	r2,-12(fp)
    aa8c:	1004803a 	cmplt	r2,r2,zero
    aa90:	1000091e 	bne	r2,zero,aab8 <isatty+0x44>
    aa94:	e13ffd17 	ldw	r4,-12(fp)
    aa98:	01400304 	movi	r5,12
    aa9c:	0000d140 	call	d14 <__mulsi3>
    aaa0:	1007883a 	mov	r3,r2
    aaa4:	00800074 	movhi	r2,1
    aaa8:	10b8b204 	addi	r2,r2,-7480
    aaac:	1887883a 	add	r3,r3,r2
    aab0:	e0ffff15 	stw	r3,-4(fp)
    aab4:	00000106 	br	aabc <isatty+0x48>
    aab8:	e03fff15 	stw	zero,-4(fp)
    aabc:	e0bfff17 	ldw	r2,-4(fp)
    aac0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    aac4:	e0bfed17 	ldw	r2,-76(fp)
    aac8:	1005003a 	cmpeq	r2,r2,zero
    aacc:	10000f1e 	bne	r2,zero,ab0c <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    aad0:	e0bfed17 	ldw	r2,-76(fp)
    aad4:	10800017 	ldw	r2,0(r2)
    aad8:	10800817 	ldw	r2,32(r2)
    aadc:	1004c03a 	cmpne	r2,r2,zero
    aae0:	1000031e 	bne	r2,zero,aaf0 <isatty+0x7c>
    {
      return 1;
    aae4:	00800044 	movi	r2,1
    aae8:	e0bffe15 	stw	r2,-8(fp)
    aaec:	00000c06 	br	ab20 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    aaf0:	e17fee04 	addi	r5,fp,-72
    aaf4:	e13ffd17 	ldw	r4,-12(fp)
    aaf8:	000a93c0 	call	a93c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    aafc:	e0bfef17 	ldw	r2,-68(fp)
    ab00:	10880020 	cmpeqi	r2,r2,8192
    ab04:	e0bffe15 	stw	r2,-8(fp)
    ab08:	00000506 	br	ab20 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ab0c:	000ab380 	call	ab38 <alt_get_errno>
    ab10:	1007883a 	mov	r3,r2
    ab14:	00801444 	movi	r2,81
    ab18:	18800015 	stw	r2,0(r3)
    return 0;
    ab1c:	e03ffe15 	stw	zero,-8(fp)
    ab20:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    ab24:	e037883a 	mov	sp,fp
    ab28:	dfc00117 	ldw	ra,4(sp)
    ab2c:	df000017 	ldw	fp,0(sp)
    ab30:	dec00204 	addi	sp,sp,8
    ab34:	f800283a 	ret

0000ab38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ab38:	defffd04 	addi	sp,sp,-12
    ab3c:	dfc00215 	stw	ra,8(sp)
    ab40:	df000115 	stw	fp,4(sp)
    ab44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ab48:	00800074 	movhi	r2,1
    ab4c:	10bd3604 	addi	r2,r2,-2856
    ab50:	10800017 	ldw	r2,0(r2)
    ab54:	1005003a 	cmpeq	r2,r2,zero
    ab58:	1000061e 	bne	r2,zero,ab74 <alt_get_errno+0x3c>
    ab5c:	00800074 	movhi	r2,1
    ab60:	10bd3604 	addi	r2,r2,-2856
    ab64:	10800017 	ldw	r2,0(r2)
    ab68:	103ee83a 	callr	r2
    ab6c:	e0bfff15 	stw	r2,-4(fp)
    ab70:	00000306 	br	ab80 <alt_get_errno+0x48>
    ab74:	00800074 	movhi	r2,1
    ab78:	1083d904 	addi	r2,r2,3940
    ab7c:	e0bfff15 	stw	r2,-4(fp)
    ab80:	e0bfff17 	ldw	r2,-4(fp)
}
    ab84:	e037883a 	mov	sp,fp
    ab88:	dfc00117 	ldw	ra,4(sp)
    ab8c:	df000017 	ldw	fp,0(sp)
    ab90:	dec00204 	addi	sp,sp,8
    ab94:	f800283a 	ret

0000ab98 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ab98:	defffe04 	addi	sp,sp,-8
    ab9c:	dfc00115 	stw	ra,4(sp)
    aba0:	df000015 	stw	fp,0(sp)
    aba4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    aba8:	01000074 	movhi	r4,1
    abac:	213d3b04 	addi	r4,r4,-2836
    abb0:	01400074 	movhi	r5,1
    abb4:	2976a304 	addi	r5,r5,-9588
    abb8:	01800074 	movhi	r6,1
    abbc:	31bd3b04 	addi	r6,r6,-2836
    abc0:	000ac180 	call	ac18 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    abc4:	01000034 	movhi	r4,0
    abc8:	21000804 	addi	r4,r4,32
    abcc:	01400034 	movhi	r5,0
    abd0:	29400804 	addi	r5,r5,32
    abd4:	01800034 	movhi	r6,0
    abd8:	31807404 	addi	r6,r6,464
    abdc:	000ac180 	call	ac18 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    abe0:	01000074 	movhi	r4,1
    abe4:	21359b04 	addi	r4,r4,-10644
    abe8:	01400074 	movhi	r5,1
    abec:	29759b04 	addi	r5,r5,-10644
    abf0:	01800074 	movhi	r6,1
    abf4:	31b6a304 	addi	r6,r6,-9588
    abf8:	000ac180 	call	ac18 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    abfc:	000c3700 	call	c370 <alt_dcache_flush_all>
  alt_icache_flush_all();
    ac00:	000c5680 	call	c568 <alt_icache_flush_all>
}
    ac04:	e037883a 	mov	sp,fp
    ac08:	dfc00117 	ldw	ra,4(sp)
    ac0c:	df000017 	ldw	fp,0(sp)
    ac10:	dec00204 	addi	sp,sp,8
    ac14:	f800283a 	ret

0000ac18 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ac18:	defffc04 	addi	sp,sp,-16
    ac1c:	df000315 	stw	fp,12(sp)
    ac20:	df000304 	addi	fp,sp,12
    ac24:	e13ffd15 	stw	r4,-12(fp)
    ac28:	e17ffe15 	stw	r5,-8(fp)
    ac2c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ac30:	e0fffe17 	ldw	r3,-8(fp)
    ac34:	e0bffd17 	ldw	r2,-12(fp)
    ac38:	18800e26 	beq	r3,r2,ac74 <alt_load_section+0x5c>
  {
    while( to != end )
    ac3c:	00000a06 	br	ac68 <alt_load_section+0x50>
    {
      *to++ = *from++;
    ac40:	e0bffd17 	ldw	r2,-12(fp)
    ac44:	10c00017 	ldw	r3,0(r2)
    ac48:	e0bffe17 	ldw	r2,-8(fp)
    ac4c:	10c00015 	stw	r3,0(r2)
    ac50:	e0bffe17 	ldw	r2,-8(fp)
    ac54:	10800104 	addi	r2,r2,4
    ac58:	e0bffe15 	stw	r2,-8(fp)
    ac5c:	e0bffd17 	ldw	r2,-12(fp)
    ac60:	10800104 	addi	r2,r2,4
    ac64:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ac68:	e0fffe17 	ldw	r3,-8(fp)
    ac6c:	e0bfff17 	ldw	r2,-4(fp)
    ac70:	18bff31e 	bne	r3,r2,ac40 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    ac74:	e037883a 	mov	sp,fp
    ac78:	df000017 	ldw	fp,0(sp)
    ac7c:	dec00104 	addi	sp,sp,4
    ac80:	f800283a 	ret

0000ac84 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    ac84:	defff804 	addi	sp,sp,-32
    ac88:	dfc00715 	stw	ra,28(sp)
    ac8c:	df000615 	stw	fp,24(sp)
    ac90:	df000604 	addi	fp,sp,24
    ac94:	e13ffc15 	stw	r4,-16(fp)
    ac98:	e17ffd15 	stw	r5,-12(fp)
    ac9c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    aca0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    aca4:	e0bffc17 	ldw	r2,-16(fp)
    aca8:	1004803a 	cmplt	r2,r2,zero
    acac:	1000091e 	bne	r2,zero,acd4 <lseek+0x50>
    acb0:	e13ffc17 	ldw	r4,-16(fp)
    acb4:	01400304 	movi	r5,12
    acb8:	0000d140 	call	d14 <__mulsi3>
    acbc:	1007883a 	mov	r3,r2
    acc0:	00800074 	movhi	r2,1
    acc4:	10b8b204 	addi	r2,r2,-7480
    acc8:	1887883a 	add	r3,r3,r2
    accc:	e0ffff15 	stw	r3,-4(fp)
    acd0:	00000106 	br	acd8 <lseek+0x54>
    acd4:	e03fff15 	stw	zero,-4(fp)
    acd8:	e0bfff17 	ldw	r2,-4(fp)
    acdc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    ace0:	e0bffb17 	ldw	r2,-20(fp)
    ace4:	1005003a 	cmpeq	r2,r2,zero
    ace8:	1000111e 	bne	r2,zero,ad30 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    acec:	e0bffb17 	ldw	r2,-20(fp)
    acf0:	10800017 	ldw	r2,0(r2)
    acf4:	10800717 	ldw	r2,28(r2)
    acf8:	1005003a 	cmpeq	r2,r2,zero
    acfc:	1000091e 	bne	r2,zero,ad24 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ad00:	e0bffb17 	ldw	r2,-20(fp)
    ad04:	10800017 	ldw	r2,0(r2)
    ad08:	10800717 	ldw	r2,28(r2)
    ad0c:	e13ffb17 	ldw	r4,-20(fp)
    ad10:	e17ffd17 	ldw	r5,-12(fp)
    ad14:	e1bffe17 	ldw	r6,-8(fp)
    ad18:	103ee83a 	callr	r2
    ad1c:	e0bffa15 	stw	r2,-24(fp)
    ad20:	00000506 	br	ad38 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ad24:	00bfde84 	movi	r2,-134
    ad28:	e0bffa15 	stw	r2,-24(fp)
    ad2c:	00000206 	br	ad38 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    ad30:	00bfebc4 	movi	r2,-81
    ad34:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    ad38:	e0bffa17 	ldw	r2,-24(fp)
    ad3c:	1004403a 	cmpge	r2,r2,zero
    ad40:	1000071e 	bne	r2,zero,ad60 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    ad44:	000ad780 	call	ad78 <alt_get_errno>
    ad48:	1007883a 	mov	r3,r2
    ad4c:	e0bffa17 	ldw	r2,-24(fp)
    ad50:	0085c83a 	sub	r2,zero,r2
    ad54:	18800015 	stw	r2,0(r3)
    rc = -1;
    ad58:	00bfffc4 	movi	r2,-1
    ad5c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    ad60:	e0bffa17 	ldw	r2,-24(fp)
}
    ad64:	e037883a 	mov	sp,fp
    ad68:	dfc00117 	ldw	ra,4(sp)
    ad6c:	df000017 	ldw	fp,0(sp)
    ad70:	dec00204 	addi	sp,sp,8
    ad74:	f800283a 	ret

0000ad78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ad78:	defffd04 	addi	sp,sp,-12
    ad7c:	dfc00215 	stw	ra,8(sp)
    ad80:	df000115 	stw	fp,4(sp)
    ad84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ad88:	00800074 	movhi	r2,1
    ad8c:	10bd3604 	addi	r2,r2,-2856
    ad90:	10800017 	ldw	r2,0(r2)
    ad94:	1005003a 	cmpeq	r2,r2,zero
    ad98:	1000061e 	bne	r2,zero,adb4 <alt_get_errno+0x3c>
    ad9c:	00800074 	movhi	r2,1
    ada0:	10bd3604 	addi	r2,r2,-2856
    ada4:	10800017 	ldw	r2,0(r2)
    ada8:	103ee83a 	callr	r2
    adac:	e0bfff15 	stw	r2,-4(fp)
    adb0:	00000306 	br	adc0 <alt_get_errno+0x48>
    adb4:	00800074 	movhi	r2,1
    adb8:	1083d904 	addi	r2,r2,3940
    adbc:	e0bfff15 	stw	r2,-4(fp)
    adc0:	e0bfff17 	ldw	r2,-4(fp)
}
    adc4:	e037883a 	mov	sp,fp
    adc8:	dfc00117 	ldw	ra,4(sp)
    adcc:	df000017 	ldw	fp,0(sp)
    add0:	dec00204 	addi	sp,sp,8
    add4:	f800283a 	ret

0000add8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    add8:	defffd04 	addi	sp,sp,-12
    addc:	dfc00215 	stw	ra,8(sp)
    ade0:	df000115 	stw	fp,4(sp)
    ade4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ade8:	0009883a 	mov	r4,zero
    adec:	000b6fc0 	call	b6fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    adf0:	000b7300 	call	b730 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    adf4:	01000074 	movhi	r4,1
    adf8:	21369b04 	addi	r4,r4,-9620
    adfc:	01400074 	movhi	r5,1
    ae00:	29769b04 	addi	r5,r5,-9620
    ae04:	01800074 	movhi	r6,1
    ae08:	31b69b04 	addi	r6,r6,-9620
    ae0c:	000c9280 	call	c928 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ae10:	000c4a00 	call	c4a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ae14:	01000074 	movhi	r4,1
    ae18:	21314104 	addi	r4,r4,-15100
    ae1c:	000cf280 	call	cf28 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ae20:	d126b317 	ldw	r4,-25908(gp)
    ae24:	d166b417 	ldw	r5,-25904(gp)
    ae28:	d1a6b517 	ldw	r6,-25900(gp)
    ae2c:	00003180 	call	318 <main>
    ae30:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ae34:	01000044 	movi	r4,1
    ae38:	000a7b00 	call	a7b0 <close>
  exit (result);
    ae3c:	e13fff17 	ldw	r4,-4(fp)
    ae40:	000cf3c0 	call	cf3c <exit>

0000ae44 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ae44:	defffe04 	addi	sp,sp,-8
    ae48:	df000115 	stw	fp,4(sp)
    ae4c:	df000104 	addi	fp,sp,4
    ae50:	e13fff15 	stw	r4,-4(fp)
}
    ae54:	e037883a 	mov	sp,fp
    ae58:	df000017 	ldw	fp,0(sp)
    ae5c:	dec00104 	addi	sp,sp,4
    ae60:	f800283a 	ret

0000ae64 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ae64:	defffe04 	addi	sp,sp,-8
    ae68:	df000115 	stw	fp,4(sp)
    ae6c:	df000104 	addi	fp,sp,4
    ae70:	e13fff15 	stw	r4,-4(fp)
}
    ae74:	e037883a 	mov	sp,fp
    ae78:	df000017 	ldw	fp,0(sp)
    ae7c:	dec00104 	addi	sp,sp,4
    ae80:	f800283a 	ret

0000ae84 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    ae84:	defff204 	addi	sp,sp,-56
    ae88:	dfc00a15 	stw	ra,40(sp)
    ae8c:	df000915 	stw	fp,36(sp)
    ae90:	df000904 	addi	fp,sp,36
    ae94:	e1400215 	stw	r5,8(fp)
    ae98:	e1800315 	stw	r6,12(fp)
    ae9c:	e1c00415 	stw	r7,16(fp)
    aea0:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    aea4:	e0800204 	addi	r2,fp,8
    aea8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    aeac:	e0bfff17 	ldw	r2,-4(fp)
    aeb0:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    aeb4:	00007806 	br	b098 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    aeb8:	e0bffc07 	ldb	r2,-16(fp)
    aebc:	10800960 	cmpeqi	r2,r2,37
    aec0:	1000031e 	bne	r2,zero,aed0 <alt_printf+0x4c>
        {
            alt_putchar(c);
    aec4:	e13ffc07 	ldb	r4,-16(fp)
    aec8:	000b0dc0 	call	b0dc <alt_putchar>
    aecc:	00007206 	br	b098 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    aed0:	e0bffd17 	ldw	r2,-12(fp)
    aed4:	10800003 	ldbu	r2,0(r2)
    aed8:	e0bffc05 	stb	r2,-16(fp)
    aedc:	e0bffc07 	ldb	r2,-16(fp)
    aee0:	1004c03a 	cmpne	r2,r2,zero
    aee4:	1007883a 	mov	r3,r2
    aee8:	e0bffd17 	ldw	r2,-12(fp)
    aeec:	10800044 	addi	r2,r2,1
    aef0:	e0bffd15 	stw	r2,-12(fp)
    aef4:	18803fcc 	andi	r2,r3,255
    aef8:	1005003a 	cmpeq	r2,r2,zero
    aefc:	1000721e 	bne	r2,zero,b0c8 <alt_printf+0x244>
            {
                if (c == '%')
    af00:	e0bffc07 	ldb	r2,-16(fp)
    af04:	10800958 	cmpnei	r2,r2,37
    af08:	1000031e 	bne	r2,zero,af18 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    af0c:	e13ffc07 	ldb	r4,-16(fp)
    af10:	000b0dc0 	call	b0dc <alt_putchar>
    af14:	00006006 	br	b098 <alt_printf+0x214>
                } 
                else if (c == 'c')
    af18:	e0bffc07 	ldb	r2,-16(fp)
    af1c:	108018d8 	cmpnei	r2,r2,99
    af20:	1000091e 	bne	r2,zero,af48 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    af24:	e0fffe17 	ldw	r3,-8(fp)
    af28:	18800104 	addi	r2,r3,4
    af2c:	e0bffe15 	stw	r2,-8(fp)
    af30:	1805883a 	mov	r2,r3
    af34:	10800017 	ldw	r2,0(r2)
    af38:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    af3c:	e13ffb17 	ldw	r4,-20(fp)
    af40:	000b0dc0 	call	b0dc <alt_putchar>
    af44:	00005406 	br	b098 <alt_printf+0x214>
                }
                else if (c == 'x')
    af48:	e0bffc07 	ldb	r2,-16(fp)
    af4c:	10801e18 	cmpnei	r2,r2,120
    af50:	1000371e 	bne	r2,zero,b030 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    af54:	e0fffe17 	ldw	r3,-8(fp)
    af58:	18800104 	addi	r2,r3,4
    af5c:	e0bffe15 	stw	r2,-8(fp)
    af60:	1805883a 	mov	r2,r3
    af64:	10800017 	ldw	r2,0(r2)
    af68:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    af6c:	e0bffa17 	ldw	r2,-24(fp)
    af70:	1004c03a 	cmpne	r2,r2,zero
    af74:	1000031e 	bne	r2,zero,af84 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    af78:	01000c04 	movi	r4,48
    af7c:	000b0dc0 	call	b0dc <alt_putchar>
                        continue;
    af80:	00004506 	br	b098 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    af84:	00800704 	movi	r2,28
    af88:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    af8c:	00000306 	br	af9c <alt_printf+0x118>
                        digit_shift -= 4;
    af90:	e0bff817 	ldw	r2,-32(fp)
    af94:	10bfff04 	addi	r2,r2,-4
    af98:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    af9c:	00c003c4 	movi	r3,15
    afa0:	e0bff817 	ldw	r2,-32(fp)
    afa4:	1884983a 	sll	r2,r3,r2
    afa8:	1007883a 	mov	r3,r2
    afac:	e0bffa17 	ldw	r2,-24(fp)
    afb0:	1884703a 	and	r2,r3,r2
    afb4:	1005003a 	cmpeq	r2,r2,zero
    afb8:	103ff51e 	bne	r2,zero,af90 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    afbc:	00001806 	br	b020 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    afc0:	00c003c4 	movi	r3,15
    afc4:	e0bff817 	ldw	r2,-32(fp)
    afc8:	1884983a 	sll	r2,r3,r2
    afcc:	1007883a 	mov	r3,r2
    afd0:	e0bffa17 	ldw	r2,-24(fp)
    afd4:	1886703a 	and	r3,r3,r2
    afd8:	e0bff817 	ldw	r2,-32(fp)
    afdc:	1884d83a 	srl	r2,r3,r2
    afe0:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    afe4:	e0bff917 	ldw	r2,-28(fp)
    afe8:	108002a8 	cmpgeui	r2,r2,10
    afec:	1000041e 	bne	r2,zero,b000 <alt_printf+0x17c>
                            c = '0' + digit;
    aff0:	e0bff917 	ldw	r2,-28(fp)
    aff4:	10800c04 	addi	r2,r2,48
    aff8:	e0bffc05 	stb	r2,-16(fp)
    affc:	00000306 	br	b00c <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    b000:	e0bff917 	ldw	r2,-28(fp)
    b004:	108015c4 	addi	r2,r2,87
    b008:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    b00c:	e13ffc07 	ldb	r4,-16(fp)
    b010:	000b0dc0 	call	b0dc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    b014:	e0bff817 	ldw	r2,-32(fp)
    b018:	10bfff04 	addi	r2,r2,-4
    b01c:	e0bff815 	stw	r2,-32(fp)
    b020:	e0bff817 	ldw	r2,-32(fp)
    b024:	1004403a 	cmpge	r2,r2,zero
    b028:	103fe51e 	bne	r2,zero,afc0 <alt_printf+0x13c>
    b02c:	00001a06 	br	b098 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    b030:	e0bffc07 	ldb	r2,-16(fp)
    b034:	10801cd8 	cmpnei	r2,r2,115
    b038:	1000171e 	bne	r2,zero,b098 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    b03c:	e0fffe17 	ldw	r3,-8(fp)
    b040:	18800104 	addi	r2,r3,4
    b044:	e0bffe15 	stw	r2,-8(fp)
    b048:	1805883a 	mov	r2,r3
    b04c:	10800017 	ldw	r2,0(r2)
    b050:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    b054:	00000906 	br	b07c <alt_printf+0x1f8>
                      alt_putchar(*s++);
    b058:	e0bff717 	ldw	r2,-36(fp)
    b05c:	10800003 	ldbu	r2,0(r2)
    b060:	11003fcc 	andi	r4,r2,255
    b064:	2100201c 	xori	r4,r4,128
    b068:	213fe004 	addi	r4,r4,-128
    b06c:	e0bff717 	ldw	r2,-36(fp)
    b070:	10800044 	addi	r2,r2,1
    b074:	e0bff715 	stw	r2,-36(fp)
    b078:	000b0dc0 	call	b0dc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    b07c:	e0bff717 	ldw	r2,-36(fp)
    b080:	10800003 	ldbu	r2,0(r2)
    b084:	10803fcc 	andi	r2,r2,255
    b088:	1080201c 	xori	r2,r2,128
    b08c:	10bfe004 	addi	r2,r2,-128
    b090:	1004c03a 	cmpne	r2,r2,zero
    b094:	103ff01e 	bne	r2,zero,b058 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    b098:	e0bffd17 	ldw	r2,-12(fp)
    b09c:	10800003 	ldbu	r2,0(r2)
    b0a0:	e0bffc05 	stb	r2,-16(fp)
    b0a4:	e0bffc07 	ldb	r2,-16(fp)
    b0a8:	1004c03a 	cmpne	r2,r2,zero
    b0ac:	1007883a 	mov	r3,r2
    b0b0:	e0bffd17 	ldw	r2,-12(fp)
    b0b4:	10800044 	addi	r2,r2,1
    b0b8:	e0bffd15 	stw	r2,-12(fp)
    b0bc:	18803fcc 	andi	r2,r3,255
    b0c0:	1004c03a 	cmpne	r2,r2,zero
    b0c4:	103f7c1e 	bne	r2,zero,aeb8 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    b0c8:	e037883a 	mov	sp,fp
    b0cc:	dfc00117 	ldw	ra,4(sp)
    b0d0:	df000017 	ldw	fp,0(sp)
    b0d4:	dec00504 	addi	sp,sp,20
    b0d8:	f800283a 	ret

0000b0dc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    b0dc:	defffd04 	addi	sp,sp,-12
    b0e0:	dfc00215 	stw	ra,8(sp)
    b0e4:	df000115 	stw	fp,4(sp)
    b0e8:	df000104 	addi	fp,sp,4
    b0ec:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    b0f0:	00800074 	movhi	r2,1
    b0f4:	10bd2d04 	addi	r2,r2,-2892
    b0f8:	10800017 	ldw	r2,0(r2)
    b0fc:	11400217 	ldw	r5,8(r2)
    b100:	e13fff17 	ldw	r4,-4(fp)
    b104:	000cfe80 	call	cfe8 <putc>
#endif
}
    b108:	e037883a 	mov	sp,fp
    b10c:	dfc00117 	ldw	ra,4(sp)
    b110:	df000017 	ldw	fp,0(sp)
    b114:	dec00204 	addi	sp,sp,8
    b118:	f800283a 	ret

0000b11c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b11c:	defff704 	addi	sp,sp,-36
    b120:	dfc00815 	stw	ra,32(sp)
    b124:	df000715 	stw	fp,28(sp)
    b128:	df000704 	addi	fp,sp,28
    b12c:	e13ffb15 	stw	r4,-20(fp)
    b130:	e17ffc15 	stw	r5,-16(fp)
    b134:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b138:	e0bffb17 	ldw	r2,-20(fp)
    b13c:	1004803a 	cmplt	r2,r2,zero
    b140:	1000091e 	bne	r2,zero,b168 <read+0x4c>
    b144:	e13ffb17 	ldw	r4,-20(fp)
    b148:	01400304 	movi	r5,12
    b14c:	0000d140 	call	d14 <__mulsi3>
    b150:	1007883a 	mov	r3,r2
    b154:	00800074 	movhi	r2,1
    b158:	10b8b204 	addi	r2,r2,-7480
    b15c:	1887883a 	add	r3,r3,r2
    b160:	e0ffff15 	stw	r3,-4(fp)
    b164:	00000106 	br	b16c <read+0x50>
    b168:	e03fff15 	stw	zero,-4(fp)
    b16c:	e0bfff17 	ldw	r2,-4(fp)
    b170:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b174:	e0bffa17 	ldw	r2,-24(fp)
    b178:	1005003a 	cmpeq	r2,r2,zero
    b17c:	1000241e 	bne	r2,zero,b210 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b180:	e0bffa17 	ldw	r2,-24(fp)
    b184:	10800217 	ldw	r2,8(r2)
    b188:	108000cc 	andi	r2,r2,3
    b18c:	10800060 	cmpeqi	r2,r2,1
    b190:	10001a1e 	bne	r2,zero,b1fc <read+0xe0>
    b194:	e0bffa17 	ldw	r2,-24(fp)
    b198:	10800017 	ldw	r2,0(r2)
    b19c:	10800517 	ldw	r2,20(r2)
    b1a0:	1005003a 	cmpeq	r2,r2,zero
    b1a4:	1000151e 	bne	r2,zero,b1fc <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b1a8:	e0bffa17 	ldw	r2,-24(fp)
    b1ac:	10800017 	ldw	r2,0(r2)
    b1b0:	10800517 	ldw	r2,20(r2)
    b1b4:	e17ffc17 	ldw	r5,-16(fp)
    b1b8:	e1bffd17 	ldw	r6,-12(fp)
    b1bc:	e13ffa17 	ldw	r4,-24(fp)
    b1c0:	103ee83a 	callr	r2
    b1c4:	e0bff915 	stw	r2,-28(fp)
    b1c8:	e0bff917 	ldw	r2,-28(fp)
    b1cc:	1004403a 	cmpge	r2,r2,zero
    b1d0:	1000071e 	bne	r2,zero,b1f0 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    b1d4:	000b2400 	call	b240 <alt_get_errno>
    b1d8:	e0fff917 	ldw	r3,-28(fp)
    b1dc:	00c7c83a 	sub	r3,zero,r3
    b1e0:	10c00015 	stw	r3,0(r2)
          return -1;
    b1e4:	00bfffc4 	movi	r2,-1
    b1e8:	e0bffe15 	stw	r2,-8(fp)
    b1ec:	00000e06 	br	b228 <read+0x10c>
        }
        return rval;
    b1f0:	e0bff917 	ldw	r2,-28(fp)
    b1f4:	e0bffe15 	stw	r2,-8(fp)
    b1f8:	00000b06 	br	b228 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b1fc:	000b2400 	call	b240 <alt_get_errno>
    b200:	1007883a 	mov	r3,r2
    b204:	00800344 	movi	r2,13
    b208:	18800015 	stw	r2,0(r3)
    b20c:	00000406 	br	b220 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b210:	000b2400 	call	b240 <alt_get_errno>
    b214:	1007883a 	mov	r3,r2
    b218:	00801444 	movi	r2,81
    b21c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b220:	00bfffc4 	movi	r2,-1
    b224:	e0bffe15 	stw	r2,-8(fp)
    b228:	e0bffe17 	ldw	r2,-8(fp)
}
    b22c:	e037883a 	mov	sp,fp
    b230:	dfc00117 	ldw	ra,4(sp)
    b234:	df000017 	ldw	fp,0(sp)
    b238:	dec00204 	addi	sp,sp,8
    b23c:	f800283a 	ret

0000b240 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b240:	defffd04 	addi	sp,sp,-12
    b244:	dfc00215 	stw	ra,8(sp)
    b248:	df000115 	stw	fp,4(sp)
    b24c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b250:	00800074 	movhi	r2,1
    b254:	10bd3604 	addi	r2,r2,-2856
    b258:	10800017 	ldw	r2,0(r2)
    b25c:	1005003a 	cmpeq	r2,r2,zero
    b260:	1000061e 	bne	r2,zero,b27c <alt_get_errno+0x3c>
    b264:	00800074 	movhi	r2,1
    b268:	10bd3604 	addi	r2,r2,-2856
    b26c:	10800017 	ldw	r2,0(r2)
    b270:	103ee83a 	callr	r2
    b274:	e0bfff15 	stw	r2,-4(fp)
    b278:	00000306 	br	b288 <alt_get_errno+0x48>
    b27c:	00800074 	movhi	r2,1
    b280:	1083d904 	addi	r2,r2,3940
    b284:	e0bfff15 	stw	r2,-4(fp)
    b288:	e0bfff17 	ldw	r2,-4(fp)
}
    b28c:	e037883a 	mov	sp,fp
    b290:	dfc00117 	ldw	ra,4(sp)
    b294:	df000017 	ldw	fp,0(sp)
    b298:	dec00204 	addi	sp,sp,8
    b29c:	f800283a 	ret

0000b2a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b2a0:	defffc04 	addi	sp,sp,-16
    b2a4:	dfc00315 	stw	ra,12(sp)
    b2a8:	df000215 	stw	fp,8(sp)
    b2ac:	dc000115 	stw	r16,4(sp)
    b2b0:	df000104 	addi	fp,sp,4
    b2b4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b2b8:	e0bfff17 	ldw	r2,-4(fp)
    b2bc:	108000d0 	cmplti	r2,r2,3
    b2c0:	10000f1e 	bne	r2,zero,b300 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    b2c4:	e13fff17 	ldw	r4,-4(fp)
    b2c8:	04000074 	movhi	r16,1
    b2cc:	8438b204 	addi	r16,r16,-7480
    b2d0:	01400304 	movi	r5,12
    b2d4:	0000d140 	call	d14 <__mulsi3>
    b2d8:	1405883a 	add	r2,r2,r16
    b2dc:	10800204 	addi	r2,r2,8
    b2e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b2e4:	e13fff17 	ldw	r4,-4(fp)
    b2e8:	04000074 	movhi	r16,1
    b2ec:	8438b204 	addi	r16,r16,-7480
    b2f0:	01400304 	movi	r5,12
    b2f4:	0000d140 	call	d14 <__mulsi3>
    b2f8:	1405883a 	add	r2,r2,r16
    b2fc:	10000015 	stw	zero,0(r2)
  }
}
    b300:	e037883a 	mov	sp,fp
    b304:	dfc00217 	ldw	ra,8(sp)
    b308:	df000117 	ldw	fp,4(sp)
    b30c:	dc000017 	ldw	r16,0(sp)
    b310:	dec00304 	addi	sp,sp,12
    b314:	f800283a 	ret

0000b318 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b318:	defff804 	addi	sp,sp,-32
    b31c:	df000715 	stw	fp,28(sp)
    b320:	df000704 	addi	fp,sp,28
    b324:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b328:	0005303a 	rdctl	r2,status
    b32c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b330:	e0fffb17 	ldw	r3,-20(fp)
    b334:	00bfff84 	movi	r2,-2
    b338:	1884703a 	and	r2,r3,r2
    b33c:	1001703a 	wrctl	status,r2
  
  return context;
    b340:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b344:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b348:	d0a00d17 	ldw	r2,-32716(gp)
    b34c:	10c000c4 	addi	r3,r2,3
    b350:	00bfff04 	movi	r2,-4
    b354:	1884703a 	and	r2,r3,r2
    b358:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b35c:	d0e00d17 	ldw	r3,-32716(gp)
    b360:	e0bffe17 	ldw	r2,-8(fp)
    b364:	1887883a 	add	r3,r3,r2
    b368:	00802034 	movhi	r2,128
    b36c:	10800004 	addi	r2,r2,0
    b370:	10c0072e 	bgeu	r2,r3,b390 <sbrk+0x78>
    b374:	e0bffd17 	ldw	r2,-12(fp)
    b378:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b37c:	e0bffa17 	ldw	r2,-24(fp)
    b380:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b384:	00bfffc4 	movi	r2,-1
    b388:	e0bfff15 	stw	r2,-4(fp)
    b38c:	00000c06 	br	b3c0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b390:	d0a00d17 	ldw	r2,-32716(gp)
    b394:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b398:	d0e00d17 	ldw	r3,-32716(gp)
    b39c:	e0bffe17 	ldw	r2,-8(fp)
    b3a0:	1885883a 	add	r2,r3,r2
    b3a4:	d0a00d15 	stw	r2,-32716(gp)
    b3a8:	e0bffd17 	ldw	r2,-12(fp)
    b3ac:	e0bff915 	stw	r2,-28(fp)
    b3b0:	e0bff917 	ldw	r2,-28(fp)
    b3b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b3b8:	e0bffc17 	ldw	r2,-16(fp)
    b3bc:	e0bfff15 	stw	r2,-4(fp)
    b3c0:	e0bfff17 	ldw	r2,-4(fp)
} 
    b3c4:	e037883a 	mov	sp,fp
    b3c8:	df000017 	ldw	fp,0(sp)
    b3cc:	dec00104 	addi	sp,sp,4
    b3d0:	f800283a 	ret

0000b3d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    b3d4:	defffa04 	addi	sp,sp,-24
    b3d8:	df000515 	stw	fp,20(sp)
    b3dc:	df000504 	addi	fp,sp,20
    b3e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b3e4:	0005303a 	rdctl	r2,status
    b3e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b3ec:	e0fffd17 	ldw	r3,-12(fp)
    b3f0:	00bfff84 	movi	r2,-2
    b3f4:	1884703a 	and	r2,r3,r2
    b3f8:	1001703a 	wrctl	status,r2
  
  return context;
    b3fc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    b400:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    b404:	e0bfff17 	ldw	r2,-4(fp)
    b408:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    b40c:	e0bffc17 	ldw	r2,-16(fp)
    b410:	10c00017 	ldw	r3,0(r2)
    b414:	e0bffc17 	ldw	r2,-16(fp)
    b418:	10800117 	ldw	r2,4(r2)
    b41c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    b420:	e0bffc17 	ldw	r2,-16(fp)
    b424:	10c00117 	ldw	r3,4(r2)
    b428:	e0bffc17 	ldw	r2,-16(fp)
    b42c:	10800017 	ldw	r2,0(r2)
    b430:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    b434:	e0fffc17 	ldw	r3,-16(fp)
    b438:	e0bffc17 	ldw	r2,-16(fp)
    b43c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    b440:	e0fffc17 	ldw	r3,-16(fp)
    b444:	e0bffc17 	ldw	r2,-16(fp)
    b448:	18800015 	stw	r2,0(r3)
    b44c:	e0bffe17 	ldw	r2,-8(fp)
    b450:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b454:	e0bffb17 	ldw	r2,-20(fp)
    b458:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    b45c:	e037883a 	mov	sp,fp
    b460:	df000017 	ldw	fp,0(sp)
    b464:	dec00104 	addi	sp,sp,4
    b468:	f800283a 	ret

0000b46c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    b46c:	defffb04 	addi	sp,sp,-20
    b470:	dfc00415 	stw	ra,16(sp)
    b474:	df000315 	stw	fp,12(sp)
    b478:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    b47c:	d0a00e17 	ldw	r2,-32712(gp)
    b480:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    b484:	d0a6b717 	ldw	r2,-25892(gp)
    b488:	10800044 	addi	r2,r2,1
    b48c:	d0a6b715 	stw	r2,-25892(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b490:	00003106 	br	b558 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    b494:	e0bffe17 	ldw	r2,-8(fp)
    b498:	10800017 	ldw	r2,0(r2)
    b49c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    b4a0:	e0bffe17 	ldw	r2,-8(fp)
    b4a4:	10800403 	ldbu	r2,16(r2)
    b4a8:	10803fcc 	andi	r2,r2,255
    b4ac:	1005003a 	cmpeq	r2,r2,zero
    b4b0:	1000051e 	bne	r2,zero,b4c8 <alt_tick+0x5c>
    b4b4:	d0a6b717 	ldw	r2,-25892(gp)
    b4b8:	1004c03a 	cmpne	r2,r2,zero
    b4bc:	1000021e 	bne	r2,zero,b4c8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    b4c0:	e0bffe17 	ldw	r2,-8(fp)
    b4c4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    b4c8:	e0bffe17 	ldw	r2,-8(fp)
    b4cc:	10c00217 	ldw	r3,8(r2)
    b4d0:	d0a6b717 	ldw	r2,-25892(gp)
    b4d4:	10c01e36 	bltu	r2,r3,b550 <alt_tick+0xe4>
    b4d8:	e0bffe17 	ldw	r2,-8(fp)
    b4dc:	10800403 	ldbu	r2,16(r2)
    b4e0:	10803fcc 	andi	r2,r2,255
    b4e4:	1004c03a 	cmpne	r2,r2,zero
    b4e8:	1000191e 	bne	r2,zero,b550 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    b4ec:	e0bffe17 	ldw	r2,-8(fp)
    b4f0:	10c00317 	ldw	r3,12(r2)
    b4f4:	e0bffe17 	ldw	r2,-8(fp)
    b4f8:	11000517 	ldw	r4,20(r2)
    b4fc:	183ee83a 	callr	r3
    b500:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    b504:	e0bffd17 	ldw	r2,-12(fp)
    b508:	1004c03a 	cmpne	r2,r2,zero
    b50c:	1000031e 	bne	r2,zero,b51c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    b510:	e13ffe17 	ldw	r4,-8(fp)
    b514:	000b3d40 	call	b3d4 <alt_alarm_stop>
    b518:	00000d06 	br	b550 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    b51c:	e0bffe17 	ldw	r2,-8(fp)
    b520:	10c00217 	ldw	r3,8(r2)
    b524:	e0bffd17 	ldw	r2,-12(fp)
    b528:	1887883a 	add	r3,r3,r2
    b52c:	e0bffe17 	ldw	r2,-8(fp)
    b530:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    b534:	e0bffe17 	ldw	r2,-8(fp)
    b538:	10c00217 	ldw	r3,8(r2)
    b53c:	d0a6b717 	ldw	r2,-25892(gp)
    b540:	1880032e 	bgeu	r3,r2,b550 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    b544:	e0fffe17 	ldw	r3,-8(fp)
    b548:	00800044 	movi	r2,1
    b54c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    b550:	e0bfff17 	ldw	r2,-4(fp)
    b554:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b558:	d0e00e04 	addi	r3,gp,-32712
    b55c:	e0bffe17 	ldw	r2,-8(fp)
    b560:	10ffcc1e 	bne	r2,r3,b494 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    b564:	e037883a 	mov	sp,fp
    b568:	dfc00117 	ldw	ra,4(sp)
    b56c:	df000017 	ldw	fp,0(sp)
    b570:	dec00204 	addi	sp,sp,8
    b574:	f800283a 	ret

0000b578 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b578:	defff704 	addi	sp,sp,-36
    b57c:	dfc00815 	stw	ra,32(sp)
    b580:	df000715 	stw	fp,28(sp)
    b584:	df000704 	addi	fp,sp,28
    b588:	e13ffb15 	stw	r4,-20(fp)
    b58c:	e17ffc15 	stw	r5,-16(fp)
    b590:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b594:	e0bffb17 	ldw	r2,-20(fp)
    b598:	1004803a 	cmplt	r2,r2,zero
    b59c:	1000091e 	bne	r2,zero,b5c4 <write+0x4c>
    b5a0:	e13ffb17 	ldw	r4,-20(fp)
    b5a4:	01400304 	movi	r5,12
    b5a8:	0000d140 	call	d14 <__mulsi3>
    b5ac:	1007883a 	mov	r3,r2
    b5b0:	00800074 	movhi	r2,1
    b5b4:	10b8b204 	addi	r2,r2,-7480
    b5b8:	1887883a 	add	r3,r3,r2
    b5bc:	e0ffff15 	stw	r3,-4(fp)
    b5c0:	00000106 	br	b5c8 <write+0x50>
    b5c4:	e03fff15 	stw	zero,-4(fp)
    b5c8:	e0bfff17 	ldw	r2,-4(fp)
    b5cc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b5d0:	e0bffa17 	ldw	r2,-24(fp)
    b5d4:	1005003a 	cmpeq	r2,r2,zero
    b5d8:	1000241e 	bne	r2,zero,b66c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b5dc:	e0bffa17 	ldw	r2,-24(fp)
    b5e0:	10800217 	ldw	r2,8(r2)
    b5e4:	108000cc 	andi	r2,r2,3
    b5e8:	1005003a 	cmpeq	r2,r2,zero
    b5ec:	10001a1e 	bne	r2,zero,b658 <write+0xe0>
    b5f0:	e0bffa17 	ldw	r2,-24(fp)
    b5f4:	10800017 	ldw	r2,0(r2)
    b5f8:	10800617 	ldw	r2,24(r2)
    b5fc:	1005003a 	cmpeq	r2,r2,zero
    b600:	1000151e 	bne	r2,zero,b658 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b604:	e0bffa17 	ldw	r2,-24(fp)
    b608:	10800017 	ldw	r2,0(r2)
    b60c:	10800617 	ldw	r2,24(r2)
    b610:	e17ffc17 	ldw	r5,-16(fp)
    b614:	e1bffd17 	ldw	r6,-12(fp)
    b618:	e13ffa17 	ldw	r4,-24(fp)
    b61c:	103ee83a 	callr	r2
    b620:	e0bff915 	stw	r2,-28(fp)
    b624:	e0bff917 	ldw	r2,-28(fp)
    b628:	1004403a 	cmpge	r2,r2,zero
    b62c:	1000071e 	bne	r2,zero,b64c <write+0xd4>
      {
        ALT_ERRNO = -rval;
    b630:	000b69c0 	call	b69c <alt_get_errno>
    b634:	e0fff917 	ldw	r3,-28(fp)
    b638:	00c7c83a 	sub	r3,zero,r3
    b63c:	10c00015 	stw	r3,0(r2)
        return -1;
    b640:	00bfffc4 	movi	r2,-1
    b644:	e0bffe15 	stw	r2,-8(fp)
    b648:	00000e06 	br	b684 <write+0x10c>
      }
      return rval;
    b64c:	e0bff917 	ldw	r2,-28(fp)
    b650:	e0bffe15 	stw	r2,-8(fp)
    b654:	00000b06 	br	b684 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b658:	000b69c0 	call	b69c <alt_get_errno>
    b65c:	1007883a 	mov	r3,r2
    b660:	00800344 	movi	r2,13
    b664:	18800015 	stw	r2,0(r3)
    b668:	00000406 	br	b67c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b66c:	000b69c0 	call	b69c <alt_get_errno>
    b670:	1007883a 	mov	r3,r2
    b674:	00801444 	movi	r2,81
    b678:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b67c:	00bfffc4 	movi	r2,-1
    b680:	e0bffe15 	stw	r2,-8(fp)
    b684:	e0bffe17 	ldw	r2,-8(fp)
}
    b688:	e037883a 	mov	sp,fp
    b68c:	dfc00117 	ldw	ra,4(sp)
    b690:	df000017 	ldw	fp,0(sp)
    b694:	dec00204 	addi	sp,sp,8
    b698:	f800283a 	ret

0000b69c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b69c:	defffd04 	addi	sp,sp,-12
    b6a0:	dfc00215 	stw	ra,8(sp)
    b6a4:	df000115 	stw	fp,4(sp)
    b6a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b6ac:	00800074 	movhi	r2,1
    b6b0:	10bd3604 	addi	r2,r2,-2856
    b6b4:	10800017 	ldw	r2,0(r2)
    b6b8:	1005003a 	cmpeq	r2,r2,zero
    b6bc:	1000061e 	bne	r2,zero,b6d8 <alt_get_errno+0x3c>
    b6c0:	00800074 	movhi	r2,1
    b6c4:	10bd3604 	addi	r2,r2,-2856
    b6c8:	10800017 	ldw	r2,0(r2)
    b6cc:	103ee83a 	callr	r2
    b6d0:	e0bfff15 	stw	r2,-4(fp)
    b6d4:	00000306 	br	b6e4 <alt_get_errno+0x48>
    b6d8:	00800074 	movhi	r2,1
    b6dc:	1083d904 	addi	r2,r2,3940
    b6e0:	e0bfff15 	stw	r2,-4(fp)
    b6e4:	e0bfff17 	ldw	r2,-4(fp)
}
    b6e8:	e037883a 	mov	sp,fp
    b6ec:	dfc00117 	ldw	ra,4(sp)
    b6f0:	df000017 	ldw	fp,0(sp)
    b6f4:	dec00204 	addi	sp,sp,8
    b6f8:	f800283a 	ret

0000b6fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b6fc:	defffd04 	addi	sp,sp,-12
    b700:	dfc00215 	stw	ra,8(sp)
    b704:	df000115 	stw	fp,4(sp)
    b708:	df000104 	addi	fp,sp,4
    b70c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    b710:	000cc840 	call	cc84 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b714:	00800044 	movi	r2,1
    b718:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b71c:	e037883a 	mov	sp,fp
    b720:	dfc00117 	ldw	ra,4(sp)
    b724:	df000017 	ldw	fp,0(sp)
    b728:	dec00204 	addi	sp,sp,8
    b72c:	f800283a 	ret

0000b730 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b730:	defffe04 	addi	sp,sp,-8
    b734:	dfc00115 	stw	ra,4(sp)
    b738:	df000015 	stw	fp,0(sp)
    b73c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    b740:	01040034 	movhi	r4,4096
    b744:	21080004 	addi	r4,r4,8192
    b748:	000b883a 	mov	r5,zero
    b74c:	000d883a 	mov	r6,zero
    b750:	01c00204 	movi	r7,8
    b754:	000c2e00 	call	c2e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    b758:	01000074 	movhi	r4,1
    b75c:	21391c04 	addi	r4,r4,-7056
    b760:	000b883a 	mov	r5,zero
    b764:	01800204 	movi	r6,8
    b768:	000b90c0 	call	b90c <altera_avalon_jtag_uart_init>
    b76c:	01000074 	movhi	r4,1
    b770:	21391204 	addi	r4,r4,-7096
    b774:	000b78c0 	call	b78c <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    b778:	e037883a 	mov	sp,fp
    b77c:	dfc00117 	ldw	ra,4(sp)
    b780:	df000017 	ldw	fp,0(sp)
    b784:	dec00204 	addi	sp,sp,8
    b788:	f800283a 	ret

0000b78c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b78c:	defffd04 	addi	sp,sp,-12
    b790:	dfc00215 	stw	ra,8(sp)
    b794:	df000115 	stw	fp,4(sp)
    b798:	df000104 	addi	fp,sp,4
    b79c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b7a0:	e13fff17 	ldw	r4,-4(fp)
    b7a4:	01400074 	movhi	r5,1
    b7a8:	297d3304 	addi	r5,r5,-2868
    b7ac:	000c38c0 	call	c38c <alt_dev_llist_insert>
}
    b7b0:	e037883a 	mov	sp,fp
    b7b4:	dfc00117 	ldw	ra,4(sp)
    b7b8:	df000017 	ldw	fp,0(sp)
    b7bc:	dec00204 	addi	sp,sp,8
    b7c0:	f800283a 	ret

0000b7c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b7c4:	defffa04 	addi	sp,sp,-24
    b7c8:	dfc00515 	stw	ra,20(sp)
    b7cc:	df000415 	stw	fp,16(sp)
    b7d0:	df000404 	addi	fp,sp,16
    b7d4:	e13ffd15 	stw	r4,-12(fp)
    b7d8:	e17ffe15 	stw	r5,-8(fp)
    b7dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b7e0:	e0bffd17 	ldw	r2,-12(fp)
    b7e4:	10800017 	ldw	r2,0(r2)
    b7e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b7ec:	e0bffc17 	ldw	r2,-16(fp)
    b7f0:	11000a04 	addi	r4,r2,40
    b7f4:	e0bffd17 	ldw	r2,-12(fp)
    b7f8:	11c00217 	ldw	r7,8(r2)
    b7fc:	e17ffe17 	ldw	r5,-8(fp)
    b800:	e1bfff17 	ldw	r6,-4(fp)
    b804:	000be0c0 	call	be0c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b808:	e037883a 	mov	sp,fp
    b80c:	dfc00117 	ldw	ra,4(sp)
    b810:	df000017 	ldw	fp,0(sp)
    b814:	dec00204 	addi	sp,sp,8
    b818:	f800283a 	ret

0000b81c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b81c:	defffa04 	addi	sp,sp,-24
    b820:	dfc00515 	stw	ra,20(sp)
    b824:	df000415 	stw	fp,16(sp)
    b828:	df000404 	addi	fp,sp,16
    b82c:	e13ffd15 	stw	r4,-12(fp)
    b830:	e17ffe15 	stw	r5,-8(fp)
    b834:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b838:	e0bffd17 	ldw	r2,-12(fp)
    b83c:	10800017 	ldw	r2,0(r2)
    b840:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b844:	e0bffc17 	ldw	r2,-16(fp)
    b848:	11000a04 	addi	r4,r2,40
    b84c:	e0bffd17 	ldw	r2,-12(fp)
    b850:	11c00217 	ldw	r7,8(r2)
    b854:	e17ffe17 	ldw	r5,-8(fp)
    b858:	e1bfff17 	ldw	r6,-4(fp)
    b85c:	000c0300 	call	c030 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b860:	e037883a 	mov	sp,fp
    b864:	dfc00117 	ldw	ra,4(sp)
    b868:	df000017 	ldw	fp,0(sp)
    b86c:	dec00204 	addi	sp,sp,8
    b870:	f800283a 	ret

0000b874 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b874:	defffc04 	addi	sp,sp,-16
    b878:	dfc00315 	stw	ra,12(sp)
    b87c:	df000215 	stw	fp,8(sp)
    b880:	df000204 	addi	fp,sp,8
    b884:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b888:	e0bfff17 	ldw	r2,-4(fp)
    b88c:	10800017 	ldw	r2,0(r2)
    b890:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b894:	e0bffe17 	ldw	r2,-8(fp)
    b898:	11000a04 	addi	r4,r2,40
    b89c:	e0bfff17 	ldw	r2,-4(fp)
    b8a0:	11400217 	ldw	r5,8(r2)
    b8a4:	000bca40 	call	bca4 <altera_avalon_jtag_uart_close>
}
    b8a8:	e037883a 	mov	sp,fp
    b8ac:	dfc00117 	ldw	ra,4(sp)
    b8b0:	df000017 	ldw	fp,0(sp)
    b8b4:	dec00204 	addi	sp,sp,8
    b8b8:	f800283a 	ret

0000b8bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b8bc:	defffa04 	addi	sp,sp,-24
    b8c0:	dfc00515 	stw	ra,20(sp)
    b8c4:	df000415 	stw	fp,16(sp)
    b8c8:	df000404 	addi	fp,sp,16
    b8cc:	e13ffd15 	stw	r4,-12(fp)
    b8d0:	e17ffe15 	stw	r5,-8(fp)
    b8d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b8d8:	e0bffd17 	ldw	r2,-12(fp)
    b8dc:	10800017 	ldw	r2,0(r2)
    b8e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b8e4:	e0bffc17 	ldw	r2,-16(fp)
    b8e8:	11000a04 	addi	r4,r2,40
    b8ec:	e17ffe17 	ldw	r5,-8(fp)
    b8f0:	e1bfff17 	ldw	r6,-4(fp)
    b8f4:	000bd180 	call	bd18 <altera_avalon_jtag_uart_ioctl>
}
    b8f8:	e037883a 	mov	sp,fp
    b8fc:	dfc00117 	ldw	ra,4(sp)
    b900:	df000017 	ldw	fp,0(sp)
    b904:	dec00204 	addi	sp,sp,8
    b908:	f800283a 	ret

0000b90c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b90c:	defffa04 	addi	sp,sp,-24
    b910:	dfc00515 	stw	ra,20(sp)
    b914:	df000415 	stw	fp,16(sp)
    b918:	df000404 	addi	fp,sp,16
    b91c:	e13ffd15 	stw	r4,-12(fp)
    b920:	e17ffe15 	stw	r5,-8(fp)
    b924:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b928:	e0fffd17 	ldw	r3,-12(fp)
    b92c:	00800044 	movi	r2,1
    b930:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b934:	e0bffd17 	ldw	r2,-12(fp)
    b938:	10800017 	ldw	r2,0(r2)
    b93c:	11000104 	addi	r4,r2,4
    b940:	e0bffd17 	ldw	r2,-12(fp)
    b944:	10800817 	ldw	r2,32(r2)
    b948:	1007883a 	mov	r3,r2
    b94c:	2005883a 	mov	r2,r4
    b950:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b954:	e13ffe17 	ldw	r4,-8(fp)
    b958:	e17fff17 	ldw	r5,-4(fp)
    b95c:	d8000015 	stw	zero,0(sp)
    b960:	01800074 	movhi	r6,1
    b964:	31ae7304 	addi	r6,r6,-17972
    b968:	e1fffd17 	ldw	r7,-12(fp)
    b96c:	000c5840 	call	c584 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b970:	e0bffd17 	ldw	r2,-12(fp)
    b974:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b978:	e0bffd17 	ldw	r2,-12(fp)
    b97c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b980:	00800074 	movhi	r2,1
    b984:	1083e004 	addi	r2,r2,3968
    b988:	10800017 	ldw	r2,0(r2)
    b98c:	100b883a 	mov	r5,r2
    b990:	01800074 	movhi	r6,1
    b994:	31aefd04 	addi	r6,r6,-17420
    b998:	e1fffd17 	ldw	r7,-12(fp)
    b99c:	000a65c0 	call	a65c <alt_alarm_start>
    b9a0:	1004403a 	cmpge	r2,r2,zero
    b9a4:	1000041e 	bne	r2,zero,b9b8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b9a8:	e0fffd17 	ldw	r3,-12(fp)
    b9ac:	00a00034 	movhi	r2,32768
    b9b0:	10bfffc4 	addi	r2,r2,-1
    b9b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b9b8:	e037883a 	mov	sp,fp
    b9bc:	dfc00117 	ldw	ra,4(sp)
    b9c0:	df000017 	ldw	fp,0(sp)
    b9c4:	dec00204 	addi	sp,sp,8
    b9c8:	f800283a 	ret

0000b9cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b9cc:	defff804 	addi	sp,sp,-32
    b9d0:	df000715 	stw	fp,28(sp)
    b9d4:	df000704 	addi	fp,sp,28
    b9d8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b9dc:	e0bfff17 	ldw	r2,-4(fp)
    b9e0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    b9e4:	e0bffe17 	ldw	r2,-8(fp)
    b9e8:	10800017 	ldw	r2,0(r2)
    b9ec:	e0bffd15 	stw	r2,-12(fp)
    b9f0:	00000006 	br	b9f4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b9f4:	e0bffd17 	ldw	r2,-12(fp)
    b9f8:	10800104 	addi	r2,r2,4
    b9fc:	10800037 	ldwio	r2,0(r2)
    ba00:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ba04:	e0bffc17 	ldw	r2,-16(fp)
    ba08:	1080c00c 	andi	r2,r2,768
    ba0c:	1005003a 	cmpeq	r2,r2,zero
    ba10:	1000741e 	bne	r2,zero,bbe4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ba14:	e0bffc17 	ldw	r2,-16(fp)
    ba18:	1080400c 	andi	r2,r2,256
    ba1c:	1005003a 	cmpeq	r2,r2,zero
    ba20:	1000351e 	bne	r2,zero,baf8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ba24:	00800074 	movhi	r2,1
    ba28:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ba2c:	e0bffe17 	ldw	r2,-8(fp)
    ba30:	10800a17 	ldw	r2,40(r2)
    ba34:	10800044 	addi	r2,r2,1
    ba38:	1081ffcc 	andi	r2,r2,2047
    ba3c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    ba40:	e0bffe17 	ldw	r2,-8(fp)
    ba44:	10c00b17 	ldw	r3,44(r2)
    ba48:	e0bffa17 	ldw	r2,-24(fp)
    ba4c:	18801626 	beq	r3,r2,baa8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ba50:	e0bffd17 	ldw	r2,-12(fp)
    ba54:	10800037 	ldwio	r2,0(r2)
    ba58:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ba5c:	e0bffb17 	ldw	r2,-20(fp)
    ba60:	10a0000c 	andi	r2,r2,32768
    ba64:	1005003a 	cmpeq	r2,r2,zero
    ba68:	10000f1e 	bne	r2,zero,baa8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ba6c:	e0bffe17 	ldw	r2,-8(fp)
    ba70:	10c00a17 	ldw	r3,40(r2)
    ba74:	e0bffb17 	ldw	r2,-20(fp)
    ba78:	1009883a 	mov	r4,r2
    ba7c:	e0bffe17 	ldw	r2,-8(fp)
    ba80:	1885883a 	add	r2,r3,r2
    ba84:	10800e04 	addi	r2,r2,56
    ba88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ba8c:	e0bffe17 	ldw	r2,-8(fp)
    ba90:	10800a17 	ldw	r2,40(r2)
    ba94:	10800044 	addi	r2,r2,1
    ba98:	10c1ffcc 	andi	r3,r2,2047
    ba9c:	e0bffe17 	ldw	r2,-8(fp)
    baa0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    baa4:	003fe106 	br	ba2c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    baa8:	e0bffb17 	ldw	r2,-20(fp)
    baac:	10bfffec 	andhi	r2,r2,65535
    bab0:	1005003a 	cmpeq	r2,r2,zero
    bab4:	1000101e 	bne	r2,zero,baf8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bab8:	e0bffe17 	ldw	r2,-8(fp)
    babc:	10c00817 	ldw	r3,32(r2)
    bac0:	00bfff84 	movi	r2,-2
    bac4:	1886703a 	and	r3,r3,r2
    bac8:	e0bffe17 	ldw	r2,-8(fp)
    bacc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    bad0:	e0bffd17 	ldw	r2,-12(fp)
    bad4:	11000104 	addi	r4,r2,4
    bad8:	e0bffe17 	ldw	r2,-8(fp)
    badc:	10800817 	ldw	r2,32(r2)
    bae0:	1007883a 	mov	r3,r2
    bae4:	2005883a 	mov	r2,r4
    bae8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    baec:	e0bffd17 	ldw	r2,-12(fp)
    baf0:	10800104 	addi	r2,r2,4
    baf4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    baf8:	e0bffc17 	ldw	r2,-16(fp)
    bafc:	1080800c 	andi	r2,r2,512
    bb00:	1005003a 	cmpeq	r2,r2,zero
    bb04:	103fbb1e 	bne	r2,zero,b9f4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    bb08:	e0bffc17 	ldw	r2,-16(fp)
    bb0c:	10bfffec 	andhi	r2,r2,65535
    bb10:	1004d43a 	srli	r2,r2,16
    bb14:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    bb18:	00001506 	br	bb70 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    bb1c:	e13ffd17 	ldw	r4,-12(fp)
    bb20:	e0bffe17 	ldw	r2,-8(fp)
    bb24:	10c00d17 	ldw	r3,52(r2)
    bb28:	e0bffe17 	ldw	r2,-8(fp)
    bb2c:	1885883a 	add	r2,r3,r2
    bb30:	10820e04 	addi	r2,r2,2104
    bb34:	10800003 	ldbu	r2,0(r2)
    bb38:	10c03fcc 	andi	r3,r2,255
    bb3c:	18c0201c 	xori	r3,r3,128
    bb40:	18ffe004 	addi	r3,r3,-128
    bb44:	2005883a 	mov	r2,r4
    bb48:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bb4c:	e0bffe17 	ldw	r2,-8(fp)
    bb50:	10800d17 	ldw	r2,52(r2)
    bb54:	10800044 	addi	r2,r2,1
    bb58:	10c1ffcc 	andi	r3,r2,2047
    bb5c:	e0bffe17 	ldw	r2,-8(fp)
    bb60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    bb64:	e0bff917 	ldw	r2,-28(fp)
    bb68:	10bfffc4 	addi	r2,r2,-1
    bb6c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    bb70:	e0bff917 	ldw	r2,-28(fp)
    bb74:	1005003a 	cmpeq	r2,r2,zero
    bb78:	1000051e 	bne	r2,zero,bb90 <altera_avalon_jtag_uart_irq+0x1c4>
    bb7c:	e0bffe17 	ldw	r2,-8(fp)
    bb80:	10c00d17 	ldw	r3,52(r2)
    bb84:	e0bffe17 	ldw	r2,-8(fp)
    bb88:	10800c17 	ldw	r2,48(r2)
    bb8c:	18bfe31e 	bne	r3,r2,bb1c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    bb90:	e0bff917 	ldw	r2,-28(fp)
    bb94:	1005003a 	cmpeq	r2,r2,zero
    bb98:	103f961e 	bne	r2,zero,b9f4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bb9c:	e0bffe17 	ldw	r2,-8(fp)
    bba0:	10c00817 	ldw	r3,32(r2)
    bba4:	00bfff44 	movi	r2,-3
    bba8:	1886703a 	and	r3,r3,r2
    bbac:	e0bffe17 	ldw	r2,-8(fp)
    bbb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bbb4:	e0bffe17 	ldw	r2,-8(fp)
    bbb8:	10800017 	ldw	r2,0(r2)
    bbbc:	11000104 	addi	r4,r2,4
    bbc0:	e0bffe17 	ldw	r2,-8(fp)
    bbc4:	10800817 	ldw	r2,32(r2)
    bbc8:	1007883a 	mov	r3,r2
    bbcc:	2005883a 	mov	r2,r4
    bbd0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bbd4:	e0bffd17 	ldw	r2,-12(fp)
    bbd8:	10800104 	addi	r2,r2,4
    bbdc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    bbe0:	003f8406 	br	b9f4 <altera_avalon_jtag_uart_irq+0x28>
}
    bbe4:	e037883a 	mov	sp,fp
    bbe8:	df000017 	ldw	fp,0(sp)
    bbec:	dec00104 	addi	sp,sp,4
    bbf0:	f800283a 	ret

0000bbf4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    bbf4:	defffc04 	addi	sp,sp,-16
    bbf8:	df000315 	stw	fp,12(sp)
    bbfc:	df000304 	addi	fp,sp,12
    bc00:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    bc04:	e0bfff17 	ldw	r2,-4(fp)
    bc08:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    bc0c:	e0bffe17 	ldw	r2,-8(fp)
    bc10:	10800017 	ldw	r2,0(r2)
    bc14:	10800104 	addi	r2,r2,4
    bc18:	10800037 	ldwio	r2,0(r2)
    bc1c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    bc20:	e0bffd17 	ldw	r2,-12(fp)
    bc24:	1081000c 	andi	r2,r2,1024
    bc28:	1005003a 	cmpeq	r2,r2,zero
    bc2c:	10000c1e 	bne	r2,zero,bc60 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    bc30:	e0bffe17 	ldw	r2,-8(fp)
    bc34:	10800017 	ldw	r2,0(r2)
    bc38:	11000104 	addi	r4,r2,4
    bc3c:	e0bffe17 	ldw	r2,-8(fp)
    bc40:	10800817 	ldw	r2,32(r2)
    bc44:	10810014 	ori	r2,r2,1024
    bc48:	1007883a 	mov	r3,r2
    bc4c:	2005883a 	mov	r2,r4
    bc50:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    bc54:	e0bffe17 	ldw	r2,-8(fp)
    bc58:	10000915 	stw	zero,36(r2)
    bc5c:	00000a06 	br	bc88 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    bc60:	e0bffe17 	ldw	r2,-8(fp)
    bc64:	10c00917 	ldw	r3,36(r2)
    bc68:	00a00034 	movhi	r2,32768
    bc6c:	10bfff04 	addi	r2,r2,-4
    bc70:	10c00536 	bltu	r2,r3,bc88 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    bc74:	e0bffe17 	ldw	r2,-8(fp)
    bc78:	10800917 	ldw	r2,36(r2)
    bc7c:	10c00044 	addi	r3,r2,1
    bc80:	e0bffe17 	ldw	r2,-8(fp)
    bc84:	10c00915 	stw	r3,36(r2)
    bc88:	00800074 	movhi	r2,1
    bc8c:	1083e004 	addi	r2,r2,3968
    bc90:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    bc94:	e037883a 	mov	sp,fp
    bc98:	df000017 	ldw	fp,0(sp)
    bc9c:	dec00104 	addi	sp,sp,4
    bca0:	f800283a 	ret

0000bca4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    bca4:	defffc04 	addi	sp,sp,-16
    bca8:	df000315 	stw	fp,12(sp)
    bcac:	df000304 	addi	fp,sp,12
    bcb0:	e13ffd15 	stw	r4,-12(fp)
    bcb4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    bcb8:	00000706 	br	bcd8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    bcbc:	e0bffe17 	ldw	r2,-8(fp)
    bcc0:	1090000c 	andi	r2,r2,16384
    bcc4:	1005003a 	cmpeq	r2,r2,zero
    bcc8:	1000031e 	bne	r2,zero,bcd8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    bccc:	00bffd44 	movi	r2,-11
    bcd0:	e0bfff15 	stw	r2,-4(fp)
    bcd4:	00000b06 	br	bd04 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    bcd8:	e0bffd17 	ldw	r2,-12(fp)
    bcdc:	10c00d17 	ldw	r3,52(r2)
    bce0:	e0bffd17 	ldw	r2,-12(fp)
    bce4:	10800c17 	ldw	r2,48(r2)
    bce8:	18800526 	beq	r3,r2,bd00 <altera_avalon_jtag_uart_close+0x5c>
    bcec:	e0bffd17 	ldw	r2,-12(fp)
    bcf0:	10c00917 	ldw	r3,36(r2)
    bcf4:	e0bffd17 	ldw	r2,-12(fp)
    bcf8:	10800117 	ldw	r2,4(r2)
    bcfc:	18bfef36 	bltu	r3,r2,bcbc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    bd00:	e03fff15 	stw	zero,-4(fp)
    bd04:	e0bfff17 	ldw	r2,-4(fp)
}
    bd08:	e037883a 	mov	sp,fp
    bd0c:	df000017 	ldw	fp,0(sp)
    bd10:	dec00104 	addi	sp,sp,4
    bd14:	f800283a 	ret

0000bd18 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    bd18:	defff804 	addi	sp,sp,-32
    bd1c:	df000715 	stw	fp,28(sp)
    bd20:	df000704 	addi	fp,sp,28
    bd24:	e13ffb15 	stw	r4,-20(fp)
    bd28:	e17ffc15 	stw	r5,-16(fp)
    bd2c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    bd30:	00bff9c4 	movi	r2,-25
    bd34:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    bd38:	e0bffc17 	ldw	r2,-16(fp)
    bd3c:	e0bfff15 	stw	r2,-4(fp)
    bd40:	e0ffff17 	ldw	r3,-4(fp)
    bd44:	189a8060 	cmpeqi	r2,r3,27137
    bd48:	1000041e 	bne	r2,zero,bd5c <altera_avalon_jtag_uart_ioctl+0x44>
    bd4c:	e0ffff17 	ldw	r3,-4(fp)
    bd50:	189a80a0 	cmpeqi	r2,r3,27138
    bd54:	10001b1e 	bne	r2,zero,bdc4 <altera_avalon_jtag_uart_ioctl+0xac>
    bd58:	00002706 	br	bdf8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    bd5c:	e0bffb17 	ldw	r2,-20(fp)
    bd60:	10c00117 	ldw	r3,4(r2)
    bd64:	00a00034 	movhi	r2,32768
    bd68:	10bfffc4 	addi	r2,r2,-1
    bd6c:	18802226 	beq	r3,r2,bdf8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    bd70:	e0bffd17 	ldw	r2,-12(fp)
    bd74:	10800017 	ldw	r2,0(r2)
    bd78:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    bd7c:	e0bff917 	ldw	r2,-28(fp)
    bd80:	10800090 	cmplti	r2,r2,2
    bd84:	1000071e 	bne	r2,zero,bda4 <altera_avalon_jtag_uart_ioctl+0x8c>
    bd88:	e0fff917 	ldw	r3,-28(fp)
    bd8c:	00a00034 	movhi	r2,32768
    bd90:	10bfffc4 	addi	r2,r2,-1
    bd94:	18800326 	beq	r3,r2,bda4 <altera_avalon_jtag_uart_ioctl+0x8c>
    bd98:	e0bff917 	ldw	r2,-28(fp)
    bd9c:	e0bffe15 	stw	r2,-8(fp)
    bda0:	00000306 	br	bdb0 <altera_avalon_jtag_uart_ioctl+0x98>
    bda4:	00e00034 	movhi	r3,32768
    bda8:	18ffff84 	addi	r3,r3,-2
    bdac:	e0fffe15 	stw	r3,-8(fp)
    bdb0:	e0bffb17 	ldw	r2,-20(fp)
    bdb4:	e0fffe17 	ldw	r3,-8(fp)
    bdb8:	10c00115 	stw	r3,4(r2)
      rc = 0;
    bdbc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    bdc0:	00000d06 	br	bdf8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    bdc4:	e0bffb17 	ldw	r2,-20(fp)
    bdc8:	10c00117 	ldw	r3,4(r2)
    bdcc:	00a00034 	movhi	r2,32768
    bdd0:	10bfffc4 	addi	r2,r2,-1
    bdd4:	18800826 	beq	r3,r2,bdf8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    bdd8:	e13ffd17 	ldw	r4,-12(fp)
    bddc:	e0bffb17 	ldw	r2,-20(fp)
    bde0:	10c00917 	ldw	r3,36(r2)
    bde4:	e0bffb17 	ldw	r2,-20(fp)
    bde8:	10800117 	ldw	r2,4(r2)
    bdec:	1885803a 	cmpltu	r2,r3,r2
    bdf0:	20800015 	stw	r2,0(r4)
      rc = 0;
    bdf4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    bdf8:	e0bffa17 	ldw	r2,-24(fp)
}
    bdfc:	e037883a 	mov	sp,fp
    be00:	df000017 	ldw	fp,0(sp)
    be04:	dec00104 	addi	sp,sp,4
    be08:	f800283a 	ret

0000be0c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    be0c:	defff204 	addi	sp,sp,-56
    be10:	dfc00d15 	stw	ra,52(sp)
    be14:	df000c15 	stw	fp,48(sp)
    be18:	df000c04 	addi	fp,sp,48
    be1c:	e13ffb15 	stw	r4,-20(fp)
    be20:	e17ffc15 	stw	r5,-16(fp)
    be24:	e1bffd15 	stw	r6,-12(fp)
    be28:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    be2c:	e0bffc17 	ldw	r2,-16(fp)
    be30:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    be34:	00004806 	br	bf58 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    be38:	e0bffb17 	ldw	r2,-20(fp)
    be3c:	10800a17 	ldw	r2,40(r2)
    be40:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    be44:	e0bffb17 	ldw	r2,-20(fp)
    be48:	10800b17 	ldw	r2,44(r2)
    be4c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    be50:	e0fff717 	ldw	r3,-36(fp)
    be54:	e0bff617 	ldw	r2,-40(fp)
    be58:	18800536 	bltu	r3,r2,be70 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    be5c:	e0bff717 	ldw	r2,-36(fp)
    be60:	e0fff617 	ldw	r3,-40(fp)
    be64:	10c5c83a 	sub	r2,r2,r3
    be68:	e0bff815 	stw	r2,-32(fp)
    be6c:	00000406 	br	be80 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    be70:	00820004 	movi	r2,2048
    be74:	e0fff617 	ldw	r3,-40(fp)
    be78:	10c5c83a 	sub	r2,r2,r3
    be7c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    be80:	e0bff817 	ldw	r2,-32(fp)
    be84:	1005003a 	cmpeq	r2,r2,zero
    be88:	10001f1e 	bne	r2,zero,bf08 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    be8c:	e0fffd17 	ldw	r3,-12(fp)
    be90:	e0bff817 	ldw	r2,-32(fp)
    be94:	1880022e 	bgeu	r3,r2,bea0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    be98:	e0bffd17 	ldw	r2,-12(fp)
    be9c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    bea0:	e0bffb17 	ldw	r2,-20(fp)
    bea4:	10c00e04 	addi	r3,r2,56
    bea8:	e0bff617 	ldw	r2,-40(fp)
    beac:	1887883a 	add	r3,r3,r2
    beb0:	e0bffa17 	ldw	r2,-24(fp)
    beb4:	1009883a 	mov	r4,r2
    beb8:	180b883a 	mov	r5,r3
    bebc:	e1bff817 	ldw	r6,-32(fp)
    bec0:	00061f40 	call	61f4 <memcpy>
      ptr   += n;
    bec4:	e0fff817 	ldw	r3,-32(fp)
    bec8:	e0bffa17 	ldw	r2,-24(fp)
    becc:	10c5883a 	add	r2,r2,r3
    bed0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    bed4:	e0fffd17 	ldw	r3,-12(fp)
    bed8:	e0bff817 	ldw	r2,-32(fp)
    bedc:	1885c83a 	sub	r2,r3,r2
    bee0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bee4:	e0fff617 	ldw	r3,-40(fp)
    bee8:	e0bff817 	ldw	r2,-32(fp)
    beec:	1885883a 	add	r2,r3,r2
    bef0:	10c1ffcc 	andi	r3,r2,2047
    bef4:	e0bffb17 	ldw	r2,-20(fp)
    bef8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    befc:	e0bffd17 	ldw	r2,-12(fp)
    bf00:	10800048 	cmpgei	r2,r2,1
    bf04:	103fcc1e 	bne	r2,zero,be38 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    bf08:	e0fffa17 	ldw	r3,-24(fp)
    bf0c:	e0bffc17 	ldw	r2,-16(fp)
    bf10:	1880141e 	bne	r3,r2,bf64 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    bf14:	e0bffe17 	ldw	r2,-8(fp)
    bf18:	1090000c 	andi	r2,r2,16384
    bf1c:	1004c03a 	cmpne	r2,r2,zero
    bf20:	1000101e 	bne	r2,zero,bf64 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    bf24:	e0bffb17 	ldw	r2,-20(fp)
    bf28:	10c00a17 	ldw	r3,40(r2)
    bf2c:	e0bff717 	ldw	r2,-36(fp)
    bf30:	1880051e 	bne	r3,r2,bf48 <altera_avalon_jtag_uart_read+0x13c>
    bf34:	e0bffb17 	ldw	r2,-20(fp)
    bf38:	10c00917 	ldw	r3,36(r2)
    bf3c:	e0bffb17 	ldw	r2,-20(fp)
    bf40:	10800117 	ldw	r2,4(r2)
    bf44:	18bff736 	bltu	r3,r2,bf24 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    bf48:	e0bffb17 	ldw	r2,-20(fp)
    bf4c:	10c00a17 	ldw	r3,40(r2)
    bf50:	e0bff717 	ldw	r2,-36(fp)
    bf54:	18800326 	beq	r3,r2,bf64 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bf58:	e0bffd17 	ldw	r2,-12(fp)
    bf5c:	10800048 	cmpgei	r2,r2,1
    bf60:	103fb51e 	bne	r2,zero,be38 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    bf64:	e0fffa17 	ldw	r3,-24(fp)
    bf68:	e0bffc17 	ldw	r2,-16(fp)
    bf6c:	18801926 	beq	r3,r2,bfd4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf70:	0005303a 	rdctl	r2,status
    bf74:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf78:	e0fff517 	ldw	r3,-44(fp)
    bf7c:	00bfff84 	movi	r2,-2
    bf80:	1884703a 	and	r2,r3,r2
    bf84:	1001703a 	wrctl	status,r2
  
  return context;
    bf88:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    bf8c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bf90:	e0bffb17 	ldw	r2,-20(fp)
    bf94:	10800817 	ldw	r2,32(r2)
    bf98:	10c00054 	ori	r3,r2,1
    bf9c:	e0bffb17 	ldw	r2,-20(fp)
    bfa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bfa4:	e0bffb17 	ldw	r2,-20(fp)
    bfa8:	10800017 	ldw	r2,0(r2)
    bfac:	11000104 	addi	r4,r2,4
    bfb0:	e0bffb17 	ldw	r2,-20(fp)
    bfb4:	10800817 	ldw	r2,32(r2)
    bfb8:	1007883a 	mov	r3,r2
    bfbc:	2005883a 	mov	r2,r4
    bfc0:	10c00035 	stwio	r3,0(r2)
    bfc4:	e0bff917 	ldw	r2,-28(fp)
    bfc8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bfcc:	e0bff417 	ldw	r2,-48(fp)
    bfd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    bfd4:	e0fffa17 	ldw	r3,-24(fp)
    bfd8:	e0bffc17 	ldw	r2,-16(fp)
    bfdc:	18800526 	beq	r3,r2,bff4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    bfe0:	e0fffa17 	ldw	r3,-24(fp)
    bfe4:	e0bffc17 	ldw	r2,-16(fp)
    bfe8:	1887c83a 	sub	r3,r3,r2
    bfec:	e0ffff15 	stw	r3,-4(fp)
    bff0:	00000906 	br	c018 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    bff4:	e0bffe17 	ldw	r2,-8(fp)
    bff8:	1090000c 	andi	r2,r2,16384
    bffc:	1005003a 	cmpeq	r2,r2,zero
    c000:	1000031e 	bne	r2,zero,c010 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    c004:	00bffd44 	movi	r2,-11
    c008:	e0bfff15 	stw	r2,-4(fp)
    c00c:	00000206 	br	c018 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    c010:	00bffec4 	movi	r2,-5
    c014:	e0bfff15 	stw	r2,-4(fp)
    c018:	e0bfff17 	ldw	r2,-4(fp)
}
    c01c:	e037883a 	mov	sp,fp
    c020:	dfc00117 	ldw	ra,4(sp)
    c024:	df000017 	ldw	fp,0(sp)
    c028:	dec00204 	addi	sp,sp,8
    c02c:	f800283a 	ret

0000c030 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c030:	defff204 	addi	sp,sp,-56
    c034:	dfc00d15 	stw	ra,52(sp)
    c038:	df000c15 	stw	fp,48(sp)
    c03c:	df000c04 	addi	fp,sp,48
    c040:	e13ffb15 	stw	r4,-20(fp)
    c044:	e17ffc15 	stw	r5,-16(fp)
    c048:	e1bffd15 	stw	r6,-12(fp)
    c04c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c050:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c054:	e0bffc17 	ldw	r2,-16(fp)
    c058:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c05c:	00003a06 	br	c148 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c060:	e0bffb17 	ldw	r2,-20(fp)
    c064:	10800c17 	ldw	r2,48(r2)
    c068:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    c06c:	e0bffb17 	ldw	r2,-20(fp)
    c070:	10800d17 	ldw	r2,52(r2)
    c074:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    c078:	e0fffa17 	ldw	r3,-24(fp)
    c07c:	e0bff917 	ldw	r2,-28(fp)
    c080:	1880062e 	bgeu	r3,r2,c09c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c084:	e0fff917 	ldw	r3,-28(fp)
    c088:	e0bffa17 	ldw	r2,-24(fp)
    c08c:	1885c83a 	sub	r2,r3,r2
    c090:	10bfffc4 	addi	r2,r2,-1
    c094:	e0bff815 	stw	r2,-32(fp)
    c098:	00000c06 	br	c0cc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    c09c:	e0bff917 	ldw	r2,-28(fp)
    c0a0:	1005003a 	cmpeq	r2,r2,zero
    c0a4:	1000051e 	bne	r2,zero,c0bc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c0a8:	00820004 	movi	r2,2048
    c0ac:	e0fffa17 	ldw	r3,-24(fp)
    c0b0:	10c5c83a 	sub	r2,r2,r3
    c0b4:	e0bff815 	stw	r2,-32(fp)
    c0b8:	00000406 	br	c0cc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c0bc:	0081ffc4 	movi	r2,2047
    c0c0:	e0fffa17 	ldw	r3,-24(fp)
    c0c4:	10c5c83a 	sub	r2,r2,r3
    c0c8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c0cc:	e0bff817 	ldw	r2,-32(fp)
    c0d0:	1005003a 	cmpeq	r2,r2,zero
    c0d4:	10001f1e 	bne	r2,zero,c154 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    c0d8:	e0fffd17 	ldw	r3,-12(fp)
    c0dc:	e0bff817 	ldw	r2,-32(fp)
    c0e0:	1880022e 	bgeu	r3,r2,c0ec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    c0e4:	e0bffd17 	ldw	r2,-12(fp)
    c0e8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c0ec:	e0bffb17 	ldw	r2,-20(fp)
    c0f0:	10c20e04 	addi	r3,r2,2104
    c0f4:	e0bffa17 	ldw	r2,-24(fp)
    c0f8:	1885883a 	add	r2,r3,r2
    c0fc:	e0fffc17 	ldw	r3,-16(fp)
    c100:	1009883a 	mov	r4,r2
    c104:	180b883a 	mov	r5,r3
    c108:	e1bff817 	ldw	r6,-32(fp)
    c10c:	00061f40 	call	61f4 <memcpy>
      ptr   += n;
    c110:	e0fff817 	ldw	r3,-32(fp)
    c114:	e0bffc17 	ldw	r2,-16(fp)
    c118:	10c5883a 	add	r2,r2,r3
    c11c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    c120:	e0fffd17 	ldw	r3,-12(fp)
    c124:	e0bff817 	ldw	r2,-32(fp)
    c128:	1885c83a 	sub	r2,r3,r2
    c12c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c130:	e0fffa17 	ldw	r3,-24(fp)
    c134:	e0bff817 	ldw	r2,-32(fp)
    c138:	1885883a 	add	r2,r3,r2
    c13c:	10c1ffcc 	andi	r3,r2,2047
    c140:	e0bffb17 	ldw	r2,-20(fp)
    c144:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c148:	e0bffd17 	ldw	r2,-12(fp)
    c14c:	10800048 	cmpgei	r2,r2,1
    c150:	103fc31e 	bne	r2,zero,c060 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c154:	0005303a 	rdctl	r2,status
    c158:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c15c:	e0fff517 	ldw	r3,-44(fp)
    c160:	00bfff84 	movi	r2,-2
    c164:	1884703a 	and	r2,r3,r2
    c168:	1001703a 	wrctl	status,r2
  
  return context;
    c16c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c170:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c174:	e0bffb17 	ldw	r2,-20(fp)
    c178:	10800817 	ldw	r2,32(r2)
    c17c:	10c00094 	ori	r3,r2,2
    c180:	e0bffb17 	ldw	r2,-20(fp)
    c184:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c188:	e0bffb17 	ldw	r2,-20(fp)
    c18c:	10800017 	ldw	r2,0(r2)
    c190:	11000104 	addi	r4,r2,4
    c194:	e0bffb17 	ldw	r2,-20(fp)
    c198:	10800817 	ldw	r2,32(r2)
    c19c:	1007883a 	mov	r3,r2
    c1a0:	2005883a 	mov	r2,r4
    c1a4:	10c00035 	stwio	r3,0(r2)
    c1a8:	e0bff717 	ldw	r2,-36(fp)
    c1ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c1b0:	e0bff417 	ldw	r2,-48(fp)
    c1b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c1b8:	e0bffd17 	ldw	r2,-12(fp)
    c1bc:	10800050 	cmplti	r2,r2,1
    c1c0:	1000111e 	bne	r2,zero,c208 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    c1c4:	e0bffe17 	ldw	r2,-8(fp)
    c1c8:	1090000c 	andi	r2,r2,16384
    c1cc:	1004c03a 	cmpne	r2,r2,zero
    c1d0:	1000101e 	bne	r2,zero,c214 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c1d4:	e0bffb17 	ldw	r2,-20(fp)
    c1d8:	10c00d17 	ldw	r3,52(r2)
    c1dc:	e0bff917 	ldw	r2,-28(fp)
    c1e0:	1880051e 	bne	r3,r2,c1f8 <altera_avalon_jtag_uart_write+0x1c8>
    c1e4:	e0bffb17 	ldw	r2,-20(fp)
    c1e8:	10c00917 	ldw	r3,36(r2)
    c1ec:	e0bffb17 	ldw	r2,-20(fp)
    c1f0:	10800117 	ldw	r2,4(r2)
    c1f4:	18bff736 	bltu	r3,r2,c1d4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c1f8:	e0bffb17 	ldw	r2,-20(fp)
    c1fc:	10c00d17 	ldw	r3,52(r2)
    c200:	e0bff917 	ldw	r2,-28(fp)
    c204:	18800326 	beq	r3,r2,c214 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    c208:	e0bffd17 	ldw	r2,-12(fp)
    c20c:	10800048 	cmpgei	r2,r2,1
    c210:	103fcd1e 	bne	r2,zero,c148 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c214:	e0fffc17 	ldw	r3,-16(fp)
    c218:	e0bff617 	ldw	r2,-40(fp)
    c21c:	18800526 	beq	r3,r2,c234 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    c220:	e0fffc17 	ldw	r3,-16(fp)
    c224:	e0bff617 	ldw	r2,-40(fp)
    c228:	1887c83a 	sub	r3,r3,r2
    c22c:	e0ffff15 	stw	r3,-4(fp)
    c230:	00000906 	br	c258 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    c234:	e0bffe17 	ldw	r2,-8(fp)
    c238:	1090000c 	andi	r2,r2,16384
    c23c:	1005003a 	cmpeq	r2,r2,zero
    c240:	1000031e 	bne	r2,zero,c250 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    c244:	00bffd44 	movi	r2,-11
    c248:	e0bfff15 	stw	r2,-4(fp)
    c24c:	00000206 	br	c258 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    c250:	00bffec4 	movi	r2,-5
    c254:	e0bfff15 	stw	r2,-4(fp)
    c258:	e0bfff17 	ldw	r2,-4(fp)
}
    c25c:	e037883a 	mov	sp,fp
    c260:	dfc00117 	ldw	ra,4(sp)
    c264:	df000017 	ldw	fp,0(sp)
    c268:	dec00204 	addi	sp,sp,8
    c26c:	f800283a 	ret

0000c270 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c270:	defffa04 	addi	sp,sp,-24
    c274:	dfc00515 	stw	ra,20(sp)
    c278:	df000415 	stw	fp,16(sp)
    c27c:	df000404 	addi	fp,sp,16
    c280:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c284:	e0bfff17 	ldw	r2,-4(fp)
    c288:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c28c:	e0bfff17 	ldw	r2,-4(fp)
    c290:	10800104 	addi	r2,r2,4
    c294:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c298:	0005303a 	rdctl	r2,status
    c29c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c2a0:	e0fffd17 	ldw	r3,-12(fp)
    c2a4:	00bfff84 	movi	r2,-2
    c2a8:	1884703a 	and	r2,r3,r2
    c2ac:	1001703a 	wrctl	status,r2
  
  return context;
    c2b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c2b4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    c2b8:	000b46c0 	call	b46c <alt_tick>
    c2bc:	e0bffe17 	ldw	r2,-8(fp)
    c2c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c2c4:	e0bffc17 	ldw	r2,-16(fp)
    c2c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c2cc:	e037883a 	mov	sp,fp
    c2d0:	dfc00117 	ldw	ra,4(sp)
    c2d4:	df000017 	ldw	fp,0(sp)
    c2d8:	dec00204 	addi	sp,sp,8
    c2dc:	f800283a 	ret

0000c2e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c2e0:	defff804 	addi	sp,sp,-32
    c2e4:	dfc00715 	stw	ra,28(sp)
    c2e8:	df000615 	stw	fp,24(sp)
    c2ec:	df000604 	addi	fp,sp,24
    c2f0:	e13ffc15 	stw	r4,-16(fp)
    c2f4:	e17ffd15 	stw	r5,-12(fp)
    c2f8:	e1bffe15 	stw	r6,-8(fp)
    c2fc:	e1ffff15 	stw	r7,-4(fp)
    c300:	e0bfff17 	ldw	r2,-4(fp)
    c304:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c308:	00800074 	movhi	r2,1
    c30c:	1083e004 	addi	r2,r2,3968
    c310:	10800017 	ldw	r2,0(r2)
    c314:	1004c03a 	cmpne	r2,r2,zero
    c318:	1000041e 	bne	r2,zero,c32c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    c31c:	00c00074 	movhi	r3,1
    c320:	18c3e004 	addi	r3,r3,3968
    c324:	e0bffb17 	ldw	r2,-20(fp)
    c328:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c32c:	e0bffc17 	ldw	r2,-16(fp)
    c330:	10800104 	addi	r2,r2,4
    c334:	1007883a 	mov	r3,r2
    c338:	008001c4 	movi	r2,7
    c33c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    c340:	d8000015 	stw	zero,0(sp)
    c344:	e13ffd17 	ldw	r4,-12(fp)
    c348:	e17ffe17 	ldw	r5,-8(fp)
    c34c:	01800074 	movhi	r6,1
    c350:	31b09c04 	addi	r6,r6,-15760
    c354:	e1fffc17 	ldw	r7,-16(fp)
    c358:	000c5840 	call	c584 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    c35c:	e037883a 	mov	sp,fp
    c360:	dfc00117 	ldw	ra,4(sp)
    c364:	df000017 	ldw	fp,0(sp)
    c368:	dec00204 	addi	sp,sp,8
    c36c:	f800283a 	ret

0000c370 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c370:	deffff04 	addi	sp,sp,-4
    c374:	df000015 	stw	fp,0(sp)
    c378:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c37c:	e037883a 	mov	sp,fp
    c380:	df000017 	ldw	fp,0(sp)
    c384:	dec00104 	addi	sp,sp,4
    c388:	f800283a 	ret

0000c38c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c38c:	defff904 	addi	sp,sp,-28
    c390:	dfc00615 	stw	ra,24(sp)
    c394:	df000515 	stw	fp,20(sp)
    c398:	df000504 	addi	fp,sp,20
    c39c:	e13ffd15 	stw	r4,-12(fp)
    c3a0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c3a4:	e0bffd17 	ldw	r2,-12(fp)
    c3a8:	1005003a 	cmpeq	r2,r2,zero
    c3ac:	1000041e 	bne	r2,zero,c3c0 <alt_dev_llist_insert+0x34>
    c3b0:	e0bffd17 	ldw	r2,-12(fp)
    c3b4:	10800217 	ldw	r2,8(r2)
    c3b8:	1004c03a 	cmpne	r2,r2,zero
    c3bc:	1000071e 	bne	r2,zero,c3dc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    c3c0:	000c4400 	call	c440 <alt_get_errno>
    c3c4:	1007883a 	mov	r3,r2
    c3c8:	00800584 	movi	r2,22
    c3cc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c3d0:	00bffa84 	movi	r2,-22
    c3d4:	e0bfff15 	stw	r2,-4(fp)
    c3d8:	00001306 	br	c428 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c3dc:	e0fffd17 	ldw	r3,-12(fp)
    c3e0:	e0bffe17 	ldw	r2,-8(fp)
    c3e4:	e0bffb15 	stw	r2,-20(fp)
    c3e8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c3ec:	e0fffc17 	ldw	r3,-16(fp)
    c3f0:	e0bffb17 	ldw	r2,-20(fp)
    c3f4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c3f8:	e0bffb17 	ldw	r2,-20(fp)
    c3fc:	10c00017 	ldw	r3,0(r2)
    c400:	e0bffc17 	ldw	r2,-16(fp)
    c404:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c408:	e0bffb17 	ldw	r2,-20(fp)
    c40c:	10c00017 	ldw	r3,0(r2)
    c410:	e0bffc17 	ldw	r2,-16(fp)
    c414:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c418:	e0fffb17 	ldw	r3,-20(fp)
    c41c:	e0bffc17 	ldw	r2,-16(fp)
    c420:	18800015 	stw	r2,0(r3)

  return 0;  
    c424:	e03fff15 	stw	zero,-4(fp)
    c428:	e0bfff17 	ldw	r2,-4(fp)
}
    c42c:	e037883a 	mov	sp,fp
    c430:	dfc00117 	ldw	ra,4(sp)
    c434:	df000017 	ldw	fp,0(sp)
    c438:	dec00204 	addi	sp,sp,8
    c43c:	f800283a 	ret

0000c440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c440:	defffd04 	addi	sp,sp,-12
    c444:	dfc00215 	stw	ra,8(sp)
    c448:	df000115 	stw	fp,4(sp)
    c44c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c450:	00800074 	movhi	r2,1
    c454:	10bd3604 	addi	r2,r2,-2856
    c458:	10800017 	ldw	r2,0(r2)
    c45c:	1005003a 	cmpeq	r2,r2,zero
    c460:	1000061e 	bne	r2,zero,c47c <alt_get_errno+0x3c>
    c464:	00800074 	movhi	r2,1
    c468:	10bd3604 	addi	r2,r2,-2856
    c46c:	10800017 	ldw	r2,0(r2)
    c470:	103ee83a 	callr	r2
    c474:	e0bfff15 	stw	r2,-4(fp)
    c478:	00000306 	br	c488 <alt_get_errno+0x48>
    c47c:	00800074 	movhi	r2,1
    c480:	1083d904 	addi	r2,r2,3940
    c484:	e0bfff15 	stw	r2,-4(fp)
    c488:	e0bfff17 	ldw	r2,-4(fp)
}
    c48c:	e037883a 	mov	sp,fp
    c490:	dfc00117 	ldw	ra,4(sp)
    c494:	df000017 	ldw	fp,0(sp)
    c498:	dec00204 	addi	sp,sp,8
    c49c:	f800283a 	ret

0000c4a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c4a0:	defffd04 	addi	sp,sp,-12
    c4a4:	dfc00215 	stw	ra,8(sp)
    c4a8:	df000115 	stw	fp,4(sp)
    c4ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c4b0:	00bfff04 	movi	r2,-4
    c4b4:	00c00074 	movhi	r3,1
    c4b8:	18f59b04 	addi	r3,r3,-10644
    c4bc:	1885883a 	add	r2,r3,r2
    c4c0:	e0bfff15 	stw	r2,-4(fp)
    c4c4:	00000606 	br	c4e0 <_do_ctors+0x40>
        (*ctor) (); 
    c4c8:	e0bfff17 	ldw	r2,-4(fp)
    c4cc:	10800017 	ldw	r2,0(r2)
    c4d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c4d4:	e0bfff17 	ldw	r2,-4(fp)
    c4d8:	10bfff04 	addi	r2,r2,-4
    c4dc:	e0bfff15 	stw	r2,-4(fp)
    c4e0:	e0ffff17 	ldw	r3,-4(fp)
    c4e4:	00800074 	movhi	r2,1
    c4e8:	10b59a04 	addi	r2,r2,-10648
    c4ec:	18bff62e 	bgeu	r3,r2,c4c8 <_do_ctors+0x28>
        (*ctor) (); 
}
    c4f0:	e037883a 	mov	sp,fp
    c4f4:	dfc00117 	ldw	ra,4(sp)
    c4f8:	df000017 	ldw	fp,0(sp)
    c4fc:	dec00204 	addi	sp,sp,8
    c500:	f800283a 	ret

0000c504 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c504:	defffd04 	addi	sp,sp,-12
    c508:	dfc00215 	stw	ra,8(sp)
    c50c:	df000115 	stw	fp,4(sp)
    c510:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c514:	00bfff04 	movi	r2,-4
    c518:	00c00074 	movhi	r3,1
    c51c:	18f59b04 	addi	r3,r3,-10644
    c520:	1885883a 	add	r2,r3,r2
    c524:	e0bfff15 	stw	r2,-4(fp)
    c528:	00000606 	br	c544 <_do_dtors+0x40>
        (*dtor) (); 
    c52c:	e0bfff17 	ldw	r2,-4(fp)
    c530:	10800017 	ldw	r2,0(r2)
    c534:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c538:	e0bfff17 	ldw	r2,-4(fp)
    c53c:	10bfff04 	addi	r2,r2,-4
    c540:	e0bfff15 	stw	r2,-4(fp)
    c544:	e0ffff17 	ldw	r3,-4(fp)
    c548:	00800074 	movhi	r2,1
    c54c:	10b59b04 	addi	r2,r2,-10644
    c550:	18bff62e 	bgeu	r3,r2,c52c <_do_dtors+0x28>
        (*dtor) (); 
}
    c554:	e037883a 	mov	sp,fp
    c558:	dfc00117 	ldw	ra,4(sp)
    c55c:	df000017 	ldw	fp,0(sp)
    c560:	dec00204 	addi	sp,sp,8
    c564:	f800283a 	ret

0000c568 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c568:	deffff04 	addi	sp,sp,-4
    c56c:	df000015 	stw	fp,0(sp)
    c570:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    c574:	e037883a 	mov	sp,fp
    c578:	df000017 	ldw	fp,0(sp)
    c57c:	dec00104 	addi	sp,sp,4
    c580:	f800283a 	ret

0000c584 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c584:	defff904 	addi	sp,sp,-28
    c588:	dfc00615 	stw	ra,24(sp)
    c58c:	df000515 	stw	fp,20(sp)
    c590:	df000504 	addi	fp,sp,20
    c594:	e13ffc15 	stw	r4,-16(fp)
    c598:	e17ffd15 	stw	r5,-12(fp)
    c59c:	e1bffe15 	stw	r6,-8(fp)
    c5a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    c5a4:	e0800217 	ldw	r2,8(fp)
    c5a8:	d8800015 	stw	r2,0(sp)
    c5ac:	e13ffc17 	ldw	r4,-16(fp)
    c5b0:	e17ffd17 	ldw	r5,-12(fp)
    c5b4:	e1bffe17 	ldw	r6,-8(fp)
    c5b8:	e1ffff17 	ldw	r7,-4(fp)
    c5bc:	000c7580 	call	c758 <alt_iic_isr_register>
}  
    c5c0:	e037883a 	mov	sp,fp
    c5c4:	dfc00117 	ldw	ra,4(sp)
    c5c8:	df000017 	ldw	fp,0(sp)
    c5cc:	dec00204 	addi	sp,sp,8
    c5d0:	f800283a 	ret

0000c5d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    c5d4:	defff904 	addi	sp,sp,-28
    c5d8:	df000615 	stw	fp,24(sp)
    c5dc:	df000604 	addi	fp,sp,24
    c5e0:	e13ffe15 	stw	r4,-8(fp)
    c5e4:	e17fff15 	stw	r5,-4(fp)
    c5e8:	e0bfff17 	ldw	r2,-4(fp)
    c5ec:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c5f0:	0005303a 	rdctl	r2,status
    c5f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c5f8:	e0fffb17 	ldw	r3,-20(fp)
    c5fc:	00bfff84 	movi	r2,-2
    c600:	1884703a 	and	r2,r3,r2
    c604:	1001703a 	wrctl	status,r2
  
  return context;
    c608:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c60c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    c610:	e0fffc17 	ldw	r3,-16(fp)
    c614:	00800044 	movi	r2,1
    c618:	10c4983a 	sll	r2,r2,r3
    c61c:	1007883a 	mov	r3,r2
    c620:	00800074 	movhi	r2,1
    c624:	1083e204 	addi	r2,r2,3976
    c628:	10800017 	ldw	r2,0(r2)
    c62c:	1886b03a 	or	r3,r3,r2
    c630:	00800074 	movhi	r2,1
    c634:	1083e204 	addi	r2,r2,3976
    c638:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c63c:	00800074 	movhi	r2,1
    c640:	1083e204 	addi	r2,r2,3976
    c644:	10800017 	ldw	r2,0(r2)
    c648:	100170fa 	wrctl	ienable,r2
    c64c:	e0bffd17 	ldw	r2,-12(fp)
    c650:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c654:	e0bffa17 	ldw	r2,-24(fp)
    c658:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c65c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c660:	e037883a 	mov	sp,fp
    c664:	df000017 	ldw	fp,0(sp)
    c668:	dec00104 	addi	sp,sp,4
    c66c:	f800283a 	ret

0000c670 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    c670:	defff904 	addi	sp,sp,-28
    c674:	df000615 	stw	fp,24(sp)
    c678:	df000604 	addi	fp,sp,24
    c67c:	e13ffe15 	stw	r4,-8(fp)
    c680:	e17fff15 	stw	r5,-4(fp)
    c684:	e0bfff17 	ldw	r2,-4(fp)
    c688:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c68c:	0005303a 	rdctl	r2,status
    c690:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c694:	e0fffb17 	ldw	r3,-20(fp)
    c698:	00bfff84 	movi	r2,-2
    c69c:	1884703a 	and	r2,r3,r2
    c6a0:	1001703a 	wrctl	status,r2
  
  return context;
    c6a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c6a8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    c6ac:	e0fffc17 	ldw	r3,-16(fp)
    c6b0:	00800044 	movi	r2,1
    c6b4:	10c4983a 	sll	r2,r2,r3
    c6b8:	0084303a 	nor	r2,zero,r2
    c6bc:	1007883a 	mov	r3,r2
    c6c0:	00800074 	movhi	r2,1
    c6c4:	1083e204 	addi	r2,r2,3976
    c6c8:	10800017 	ldw	r2,0(r2)
    c6cc:	1886703a 	and	r3,r3,r2
    c6d0:	00800074 	movhi	r2,1
    c6d4:	1083e204 	addi	r2,r2,3976
    c6d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c6dc:	00800074 	movhi	r2,1
    c6e0:	1083e204 	addi	r2,r2,3976
    c6e4:	10800017 	ldw	r2,0(r2)
    c6e8:	100170fa 	wrctl	ienable,r2
    c6ec:	e0bffd17 	ldw	r2,-12(fp)
    c6f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c6f4:	e0bffa17 	ldw	r2,-24(fp)
    c6f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c6fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c700:	e037883a 	mov	sp,fp
    c704:	df000017 	ldw	fp,0(sp)
    c708:	dec00104 	addi	sp,sp,4
    c70c:	f800283a 	ret

0000c710 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c710:	defffc04 	addi	sp,sp,-16
    c714:	df000315 	stw	fp,12(sp)
    c718:	df000304 	addi	fp,sp,12
    c71c:	e13ffe15 	stw	r4,-8(fp)
    c720:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c724:	000530fa 	rdctl	r2,ienable
    c728:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c72c:	e0ffff17 	ldw	r3,-4(fp)
    c730:	00800044 	movi	r2,1
    c734:	10c4983a 	sll	r2,r2,r3
    c738:	1007883a 	mov	r3,r2
    c73c:	e0bffd17 	ldw	r2,-12(fp)
    c740:	1884703a 	and	r2,r3,r2
    c744:	1004c03a 	cmpne	r2,r2,zero
}
    c748:	e037883a 	mov	sp,fp
    c74c:	df000017 	ldw	fp,0(sp)
    c750:	dec00104 	addi	sp,sp,4
    c754:	f800283a 	ret

0000c758 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c758:	defff404 	addi	sp,sp,-48
    c75c:	dfc00b15 	stw	ra,44(sp)
    c760:	df000a15 	stw	fp,40(sp)
    c764:	df000a04 	addi	fp,sp,40
    c768:	e13ffb15 	stw	r4,-20(fp)
    c76c:	e17ffc15 	stw	r5,-16(fp)
    c770:	e1bffd15 	stw	r6,-12(fp)
    c774:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    c778:	00bffa84 	movi	r2,-22
    c77c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c780:	e0bffc17 	ldw	r2,-16(fp)
    c784:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c788:	e0bff917 	ldw	r2,-28(fp)
    c78c:	10800808 	cmpgei	r2,r2,32
    c790:	1000291e 	bne	r2,zero,c838 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c794:	0005303a 	rdctl	r2,status
    c798:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c79c:	e0fff717 	ldw	r3,-36(fp)
    c7a0:	00bfff84 	movi	r2,-2
    c7a4:	1884703a 	and	r2,r3,r2
    c7a8:	1001703a 	wrctl	status,r2
  
  return context;
    c7ac:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c7b0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    c7b4:	e0bff917 	ldw	r2,-28(fp)
    c7b8:	00c00074 	movhi	r3,1
    c7bc:	18c44704 	addi	r3,r3,4380
    c7c0:	100490fa 	slli	r2,r2,3
    c7c4:	10c7883a 	add	r3,r2,r3
    c7c8:	e0bffd17 	ldw	r2,-12(fp)
    c7cc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    c7d0:	e0bff917 	ldw	r2,-28(fp)
    c7d4:	00c00074 	movhi	r3,1
    c7d8:	18c44704 	addi	r3,r3,4380
    c7dc:	100490fa 	slli	r2,r2,3
    c7e0:	10c5883a 	add	r2,r2,r3
    c7e4:	10c00104 	addi	r3,r2,4
    c7e8:	e0bffe17 	ldw	r2,-8(fp)
    c7ec:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c7f0:	e0bffd17 	ldw	r2,-12(fp)
    c7f4:	1005003a 	cmpeq	r2,r2,zero
    c7f8:	1000051e 	bne	r2,zero,c810 <alt_iic_isr_register+0xb8>
    c7fc:	e17ff917 	ldw	r5,-28(fp)
    c800:	e13ffb17 	ldw	r4,-20(fp)
    c804:	000c5d40 	call	c5d4 <alt_ic_irq_enable>
    c808:	e0bfff15 	stw	r2,-4(fp)
    c80c:	00000406 	br	c820 <alt_iic_isr_register+0xc8>
    c810:	e17ff917 	ldw	r5,-28(fp)
    c814:	e13ffb17 	ldw	r4,-20(fp)
    c818:	000c6700 	call	c670 <alt_ic_irq_disable>
    c81c:	e0bfff15 	stw	r2,-4(fp)
    c820:	e0bfff17 	ldw	r2,-4(fp)
    c824:	e0bffa15 	stw	r2,-24(fp)
    c828:	e0bff817 	ldw	r2,-32(fp)
    c82c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c830:	e0bff617 	ldw	r2,-40(fp)
    c834:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c838:	e0bffa17 	ldw	r2,-24(fp)
}
    c83c:	e037883a 	mov	sp,fp
    c840:	dfc00117 	ldw	ra,4(sp)
    c844:	df000017 	ldw	fp,0(sp)
    c848:	dec00204 	addi	sp,sp,8
    c84c:	f800283a 	ret

0000c850 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c850:	defff804 	addi	sp,sp,-32
    c854:	dfc00715 	stw	ra,28(sp)
    c858:	df000615 	stw	fp,24(sp)
    c85c:	dc000515 	stw	r16,20(sp)
    c860:	df000504 	addi	fp,sp,20
    c864:	e13ffc15 	stw	r4,-16(fp)
    c868:	e17ffd15 	stw	r5,-12(fp)
    c86c:	e1bffe15 	stw	r6,-8(fp)
    c870:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c874:	e13ffd17 	ldw	r4,-12(fp)
    c878:	e17ffe17 	ldw	r5,-8(fp)
    c87c:	e1bfff17 	ldw	r6,-4(fp)
    c880:	000ca980 	call	ca98 <open>
    c884:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c888:	e0bffb17 	ldw	r2,-20(fp)
    c88c:	1004803a 	cmplt	r2,r2,zero
    c890:	10001f1e 	bne	r2,zero,c910 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c894:	e13ffb17 	ldw	r4,-20(fp)
    c898:	04000074 	movhi	r16,1
    c89c:	8438b204 	addi	r16,r16,-7480
    c8a0:	01400304 	movi	r5,12
    c8a4:	0000d140 	call	d14 <__mulsi3>
    c8a8:	1405883a 	add	r2,r2,r16
    c8ac:	10c00017 	ldw	r3,0(r2)
    c8b0:	e0bffc17 	ldw	r2,-16(fp)
    c8b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c8b8:	e13ffb17 	ldw	r4,-20(fp)
    c8bc:	04000074 	movhi	r16,1
    c8c0:	8438b204 	addi	r16,r16,-7480
    c8c4:	01400304 	movi	r5,12
    c8c8:	0000d140 	call	d14 <__mulsi3>
    c8cc:	1405883a 	add	r2,r2,r16
    c8d0:	10800104 	addi	r2,r2,4
    c8d4:	10c00017 	ldw	r3,0(r2)
    c8d8:	e0bffc17 	ldw	r2,-16(fp)
    c8dc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c8e0:	e13ffb17 	ldw	r4,-20(fp)
    c8e4:	04000074 	movhi	r16,1
    c8e8:	8438b204 	addi	r16,r16,-7480
    c8ec:	01400304 	movi	r5,12
    c8f0:	0000d140 	call	d14 <__mulsi3>
    c8f4:	1405883a 	add	r2,r2,r16
    c8f8:	10800204 	addi	r2,r2,8
    c8fc:	10c00017 	ldw	r3,0(r2)
    c900:	e0bffc17 	ldw	r2,-16(fp)
    c904:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c908:	e13ffb17 	ldw	r4,-20(fp)
    c90c:	000b2a00 	call	b2a0 <alt_release_fd>
  }
} 
    c910:	e037883a 	mov	sp,fp
    c914:	dfc00217 	ldw	ra,8(sp)
    c918:	df000117 	ldw	fp,4(sp)
    c91c:	dc000017 	ldw	r16,0(sp)
    c920:	dec00304 	addi	sp,sp,12
    c924:	f800283a 	ret

0000c928 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c928:	defffb04 	addi	sp,sp,-20
    c92c:	dfc00415 	stw	ra,16(sp)
    c930:	df000315 	stw	fp,12(sp)
    c934:	df000304 	addi	fp,sp,12
    c938:	e13ffd15 	stw	r4,-12(fp)
    c93c:	e17ffe15 	stw	r5,-8(fp)
    c940:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c944:	01000074 	movhi	r4,1
    c948:	2138b504 	addi	r4,r4,-7468
    c94c:	e17ffd17 	ldw	r5,-12(fp)
    c950:	01800044 	movi	r6,1
    c954:	01c07fc4 	movi	r7,511
    c958:	000c8500 	call	c850 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c95c:	01000074 	movhi	r4,1
    c960:	2138b204 	addi	r4,r4,-7480
    c964:	e17ffe17 	ldw	r5,-8(fp)
    c968:	000d883a 	mov	r6,zero
    c96c:	01c07fc4 	movi	r7,511
    c970:	000c8500 	call	c850 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c974:	01000074 	movhi	r4,1
    c978:	2138b804 	addi	r4,r4,-7456
    c97c:	e17fff17 	ldw	r5,-4(fp)
    c980:	01800044 	movi	r6,1
    c984:	01c07fc4 	movi	r7,511
    c988:	000c8500 	call	c850 <alt_open_fd>
}  
    c98c:	e037883a 	mov	sp,fp
    c990:	dfc00117 	ldw	ra,4(sp)
    c994:	df000017 	ldw	fp,0(sp)
    c998:	dec00204 	addi	sp,sp,8
    c99c:	f800283a 	ret

0000c9a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c9a0:	defffa04 	addi	sp,sp,-24
    c9a4:	dfc00515 	stw	ra,20(sp)
    c9a8:	df000415 	stw	fp,16(sp)
    c9ac:	dc000315 	stw	r16,12(sp)
    c9b0:	df000304 	addi	fp,sp,12
    c9b4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c9b8:	e0bffe17 	ldw	r2,-8(fp)
    c9bc:	10800217 	ldw	r2,8(r2)
    c9c0:	10d00034 	orhi	r3,r2,16384
    c9c4:	e0bffe17 	ldw	r2,-8(fp)
    c9c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c9cc:	e03ffd15 	stw	zero,-12(fp)
    c9d0:	00002306 	br	ca60 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c9d4:	e13ffd17 	ldw	r4,-12(fp)
    c9d8:	04000074 	movhi	r16,1
    c9dc:	8438b204 	addi	r16,r16,-7480
    c9e0:	01400304 	movi	r5,12
    c9e4:	0000d140 	call	d14 <__mulsi3>
    c9e8:	1405883a 	add	r2,r2,r16
    c9ec:	10c00017 	ldw	r3,0(r2)
    c9f0:	e0bffe17 	ldw	r2,-8(fp)
    c9f4:	10800017 	ldw	r2,0(r2)
    c9f8:	1880161e 	bne	r3,r2,ca54 <alt_file_locked+0xb4>
    c9fc:	e13ffd17 	ldw	r4,-12(fp)
    ca00:	04000074 	movhi	r16,1
    ca04:	8438b204 	addi	r16,r16,-7480
    ca08:	01400304 	movi	r5,12
    ca0c:	0000d140 	call	d14 <__mulsi3>
    ca10:	1405883a 	add	r2,r2,r16
    ca14:	10800204 	addi	r2,r2,8
    ca18:	10800017 	ldw	r2,0(r2)
    ca1c:	1004403a 	cmpge	r2,r2,zero
    ca20:	10000c1e 	bne	r2,zero,ca54 <alt_file_locked+0xb4>
    ca24:	e13ffd17 	ldw	r4,-12(fp)
    ca28:	01400304 	movi	r5,12
    ca2c:	0000d140 	call	d14 <__mulsi3>
    ca30:	1007883a 	mov	r3,r2
    ca34:	00800074 	movhi	r2,1
    ca38:	10b8b204 	addi	r2,r2,-7480
    ca3c:	1887883a 	add	r3,r3,r2
    ca40:	e0bffe17 	ldw	r2,-8(fp)
    ca44:	18800326 	beq	r3,r2,ca54 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    ca48:	00bffcc4 	movi	r2,-13
    ca4c:	e0bfff15 	stw	r2,-4(fp)
    ca50:	00000a06 	br	ca7c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ca54:	e0bffd17 	ldw	r2,-12(fp)
    ca58:	10800044 	addi	r2,r2,1
    ca5c:	e0bffd15 	stw	r2,-12(fp)
    ca60:	00800074 	movhi	r2,1
    ca64:	10bd3504 	addi	r2,r2,-2860
    ca68:	10800017 	ldw	r2,0(r2)
    ca6c:	1007883a 	mov	r3,r2
    ca70:	e0bffd17 	ldw	r2,-12(fp)
    ca74:	18bfd72e 	bgeu	r3,r2,c9d4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ca78:	e03fff15 	stw	zero,-4(fp)
    ca7c:	e0bfff17 	ldw	r2,-4(fp)
}
    ca80:	e037883a 	mov	sp,fp
    ca84:	dfc00217 	ldw	ra,8(sp)
    ca88:	df000117 	ldw	fp,4(sp)
    ca8c:	dc000017 	ldw	r16,0(sp)
    ca90:	dec00304 	addi	sp,sp,12
    ca94:	f800283a 	ret

0000ca98 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    ca98:	defff404 	addi	sp,sp,-48
    ca9c:	dfc00b15 	stw	ra,44(sp)
    caa0:	df000a15 	stw	fp,40(sp)
    caa4:	df000a04 	addi	fp,sp,40
    caa8:	e13ffb15 	stw	r4,-20(fp)
    caac:	e17ffc15 	stw	r5,-16(fp)
    cab0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    cab4:	00bfffc4 	movi	r2,-1
    cab8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    cabc:	00bffb44 	movi	r2,-19
    cac0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    cac4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    cac8:	e13ffb17 	ldw	r4,-20(fp)
    cacc:	01400074 	movhi	r5,1
    cad0:	297d3304 	addi	r5,r5,-2868
    cad4:	000cca40 	call	cca4 <alt_find_dev>
    cad8:	e0bffa15 	stw	r2,-24(fp)
    cadc:	e0bffa17 	ldw	r2,-24(fp)
    cae0:	1004c03a 	cmpne	r2,r2,zero
    cae4:	1000051e 	bne	r2,zero,cafc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    cae8:	e13ffb17 	ldw	r4,-20(fp)
    caec:	000cd380 	call	cd38 <alt_find_file>
    caf0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    caf4:	00800044 	movi	r2,1
    caf8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    cafc:	e0bffa17 	ldw	r2,-24(fp)
    cb00:	1005003a 	cmpeq	r2,r2,zero
    cb04:	1000311e 	bne	r2,zero,cbcc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    cb08:	e13ffa17 	ldw	r4,-24(fp)
    cb0c:	000ce580 	call	ce58 <alt_get_fd>
    cb10:	e0bff815 	stw	r2,-32(fp)
    cb14:	e0bff817 	ldw	r2,-32(fp)
    cb18:	1004403a 	cmpge	r2,r2,zero
    cb1c:	1000031e 	bne	r2,zero,cb2c <open+0x94>
    {
      status = index;
    cb20:	e0bff817 	ldw	r2,-32(fp)
    cb24:	e0bff715 	stw	r2,-36(fp)
    cb28:	00002a06 	br	cbd4 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    cb2c:	e13ff817 	ldw	r4,-32(fp)
    cb30:	01400304 	movi	r5,12
    cb34:	0000d140 	call	d14 <__mulsi3>
    cb38:	1007883a 	mov	r3,r2
    cb3c:	00800074 	movhi	r2,1
    cb40:	10b8b204 	addi	r2,r2,-7480
    cb44:	1885883a 	add	r2,r3,r2
    cb48:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    cb4c:	e0fffc17 	ldw	r3,-16(fp)
    cb50:	00900034 	movhi	r2,16384
    cb54:	10bfffc4 	addi	r2,r2,-1
    cb58:	1886703a 	and	r3,r3,r2
    cb5c:	e0bff917 	ldw	r2,-28(fp)
    cb60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    cb64:	e0bff617 	ldw	r2,-40(fp)
    cb68:	1004c03a 	cmpne	r2,r2,zero
    cb6c:	1000061e 	bne	r2,zero,cb88 <open+0xf0>
    cb70:	e13ff917 	ldw	r4,-28(fp)
    cb74:	000c9a00 	call	c9a0 <alt_file_locked>
    cb78:	e0bff715 	stw	r2,-36(fp)
    cb7c:	e0bff717 	ldw	r2,-36(fp)
    cb80:	1004803a 	cmplt	r2,r2,zero
    cb84:	1000131e 	bne	r2,zero,cbd4 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    cb88:	e0bffa17 	ldw	r2,-24(fp)
    cb8c:	10800317 	ldw	r2,12(r2)
    cb90:	1005003a 	cmpeq	r2,r2,zero
    cb94:	1000091e 	bne	r2,zero,cbbc <open+0x124>
    cb98:	e0bffa17 	ldw	r2,-24(fp)
    cb9c:	10800317 	ldw	r2,12(r2)
    cba0:	e13ff917 	ldw	r4,-28(fp)
    cba4:	e17ffb17 	ldw	r5,-20(fp)
    cba8:	e1bffc17 	ldw	r6,-16(fp)
    cbac:	e1fffd17 	ldw	r7,-12(fp)
    cbb0:	103ee83a 	callr	r2
    cbb4:	e0bfff15 	stw	r2,-4(fp)
    cbb8:	00000106 	br	cbc0 <open+0x128>
    cbbc:	e03fff15 	stw	zero,-4(fp)
    cbc0:	e0bfff17 	ldw	r2,-4(fp)
    cbc4:	e0bff715 	stw	r2,-36(fp)
    cbc8:	00000206 	br	cbd4 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    cbcc:	00bffb44 	movi	r2,-19
    cbd0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    cbd4:	e0bff717 	ldw	r2,-36(fp)
    cbd8:	1004403a 	cmpge	r2,r2,zero
    cbdc:	1000091e 	bne	r2,zero,cc04 <open+0x16c>
  {
    alt_release_fd (index);  
    cbe0:	e13ff817 	ldw	r4,-32(fp)
    cbe4:	000b2a00 	call	b2a0 <alt_release_fd>
    ALT_ERRNO = -status;
    cbe8:	000cc240 	call	cc24 <alt_get_errno>
    cbec:	e0fff717 	ldw	r3,-36(fp)
    cbf0:	00c7c83a 	sub	r3,zero,r3
    cbf4:	10c00015 	stw	r3,0(r2)
    return -1;
    cbf8:	00bfffc4 	movi	r2,-1
    cbfc:	e0bffe15 	stw	r2,-8(fp)
    cc00:	00000206 	br	cc0c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    cc04:	e0bff817 	ldw	r2,-32(fp)
    cc08:	e0bffe15 	stw	r2,-8(fp)
    cc0c:	e0bffe17 	ldw	r2,-8(fp)
}
    cc10:	e037883a 	mov	sp,fp
    cc14:	dfc00117 	ldw	ra,4(sp)
    cc18:	df000017 	ldw	fp,0(sp)
    cc1c:	dec00204 	addi	sp,sp,8
    cc20:	f800283a 	ret

0000cc24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cc24:	defffd04 	addi	sp,sp,-12
    cc28:	dfc00215 	stw	ra,8(sp)
    cc2c:	df000115 	stw	fp,4(sp)
    cc30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    cc34:	00800074 	movhi	r2,1
    cc38:	10bd3604 	addi	r2,r2,-2856
    cc3c:	10800017 	ldw	r2,0(r2)
    cc40:	1005003a 	cmpeq	r2,r2,zero
    cc44:	1000061e 	bne	r2,zero,cc60 <alt_get_errno+0x3c>
    cc48:	00800074 	movhi	r2,1
    cc4c:	10bd3604 	addi	r2,r2,-2856
    cc50:	10800017 	ldw	r2,0(r2)
    cc54:	103ee83a 	callr	r2
    cc58:	e0bfff15 	stw	r2,-4(fp)
    cc5c:	00000306 	br	cc6c <alt_get_errno+0x48>
    cc60:	00800074 	movhi	r2,1
    cc64:	1083d904 	addi	r2,r2,3940
    cc68:	e0bfff15 	stw	r2,-4(fp)
    cc6c:	e0bfff17 	ldw	r2,-4(fp)
}
    cc70:	e037883a 	mov	sp,fp
    cc74:	dfc00117 	ldw	ra,4(sp)
    cc78:	df000017 	ldw	fp,0(sp)
    cc7c:	dec00204 	addi	sp,sp,8
    cc80:	f800283a 	ret

0000cc84 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    cc84:	deffff04 	addi	sp,sp,-4
    cc88:	df000015 	stw	fp,0(sp)
    cc8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    cc90:	000170fa 	wrctl	ienable,zero
}
    cc94:	e037883a 	mov	sp,fp
    cc98:	df000017 	ldw	fp,0(sp)
    cc9c:	dec00104 	addi	sp,sp,4
    cca0:	f800283a 	ret

0000cca4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    cca4:	defff904 	addi	sp,sp,-28
    cca8:	dfc00615 	stw	ra,24(sp)
    ccac:	df000515 	stw	fp,20(sp)
    ccb0:	df000504 	addi	fp,sp,20
    ccb4:	e13ffd15 	stw	r4,-12(fp)
    ccb8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ccbc:	e0bffe17 	ldw	r2,-8(fp)
    ccc0:	10800017 	ldw	r2,0(r2)
    ccc4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ccc8:	e13ffd17 	ldw	r4,-12(fp)
    cccc:	00016500 	call	1650 <strlen>
    ccd0:	10800044 	addi	r2,r2,1
    ccd4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ccd8:	00000d06 	br	cd10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ccdc:	e0bffc17 	ldw	r2,-16(fp)
    cce0:	11000217 	ldw	r4,8(r2)
    cce4:	e1bffb17 	ldw	r6,-20(fp)
    cce8:	e17ffd17 	ldw	r5,-12(fp)
    ccec:	000cf740 	call	cf74 <memcmp>
    ccf0:	1004c03a 	cmpne	r2,r2,zero
    ccf4:	1000031e 	bne	r2,zero,cd04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ccf8:	e0bffc17 	ldw	r2,-16(fp)
    ccfc:	e0bfff15 	stw	r2,-4(fp)
    cd00:	00000706 	br	cd20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    cd04:	e0bffc17 	ldw	r2,-16(fp)
    cd08:	10800017 	ldw	r2,0(r2)
    cd0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cd10:	e0fffe17 	ldw	r3,-8(fp)
    cd14:	e0bffc17 	ldw	r2,-16(fp)
    cd18:	10fff01e 	bne	r2,r3,ccdc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    cd1c:	e03fff15 	stw	zero,-4(fp)
    cd20:	e0bfff17 	ldw	r2,-4(fp)
}
    cd24:	e037883a 	mov	sp,fp
    cd28:	dfc00117 	ldw	ra,4(sp)
    cd2c:	df000017 	ldw	fp,0(sp)
    cd30:	dec00204 	addi	sp,sp,8
    cd34:	f800283a 	ret

0000cd38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    cd38:	defffa04 	addi	sp,sp,-24
    cd3c:	dfc00515 	stw	ra,20(sp)
    cd40:	df000415 	stw	fp,16(sp)
    cd44:	df000404 	addi	fp,sp,16
    cd48:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    cd4c:	00800074 	movhi	r2,1
    cd50:	10bd3104 	addi	r2,r2,-2876
    cd54:	10800017 	ldw	r2,0(r2)
    cd58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cd5c:	00003306 	br	ce2c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    cd60:	e0bffd17 	ldw	r2,-12(fp)
    cd64:	11000217 	ldw	r4,8(r2)
    cd68:	00016500 	call	1650 <strlen>
    cd6c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    cd70:	e0bffd17 	ldw	r2,-12(fp)
    cd74:	10c00217 	ldw	r3,8(r2)
    cd78:	e0bffc17 	ldw	r2,-16(fp)
    cd7c:	1885883a 	add	r2,r3,r2
    cd80:	10bfffc4 	addi	r2,r2,-1
    cd84:	10800003 	ldbu	r2,0(r2)
    cd88:	10803fcc 	andi	r2,r2,255
    cd8c:	1080201c 	xori	r2,r2,128
    cd90:	10bfe004 	addi	r2,r2,-128
    cd94:	10800bd8 	cmpnei	r2,r2,47
    cd98:	1000031e 	bne	r2,zero,cda8 <alt_find_file+0x70>
    {
      len -= 1;
    cd9c:	e0bffc17 	ldw	r2,-16(fp)
    cda0:	10bfffc4 	addi	r2,r2,-1
    cda4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    cda8:	e0bffc17 	ldw	r2,-16(fp)
    cdac:	1007883a 	mov	r3,r2
    cdb0:	e0bffe17 	ldw	r2,-8(fp)
    cdb4:	1885883a 	add	r2,r3,r2
    cdb8:	10800003 	ldbu	r2,0(r2)
    cdbc:	10803fcc 	andi	r2,r2,255
    cdc0:	1080201c 	xori	r2,r2,128
    cdc4:	10bfe004 	addi	r2,r2,-128
    cdc8:	10800be0 	cmpeqi	r2,r2,47
    cdcc:	10000a1e 	bne	r2,zero,cdf8 <alt_find_file+0xc0>
    cdd0:	e0bffc17 	ldw	r2,-16(fp)
    cdd4:	1007883a 	mov	r3,r2
    cdd8:	e0bffe17 	ldw	r2,-8(fp)
    cddc:	1885883a 	add	r2,r3,r2
    cde0:	10800003 	ldbu	r2,0(r2)
    cde4:	10803fcc 	andi	r2,r2,255
    cde8:	1080201c 	xori	r2,r2,128
    cdec:	10bfe004 	addi	r2,r2,-128
    cdf0:	1004c03a 	cmpne	r2,r2,zero
    cdf4:	10000a1e 	bne	r2,zero,ce20 <alt_find_file+0xe8>
    cdf8:	e0bffd17 	ldw	r2,-12(fp)
    cdfc:	11000217 	ldw	r4,8(r2)
    ce00:	e1bffc17 	ldw	r6,-16(fp)
    ce04:	e17ffe17 	ldw	r5,-8(fp)
    ce08:	000cf740 	call	cf74 <memcmp>
    ce0c:	1004c03a 	cmpne	r2,r2,zero
    ce10:	1000031e 	bne	r2,zero,ce20 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ce14:	e0bffd17 	ldw	r2,-12(fp)
    ce18:	e0bfff15 	stw	r2,-4(fp)
    ce1c:	00000806 	br	ce40 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    ce20:	e0bffd17 	ldw	r2,-12(fp)
    ce24:	10800017 	ldw	r2,0(r2)
    ce28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ce2c:	00c00074 	movhi	r3,1
    ce30:	18fd3104 	addi	r3,r3,-2876
    ce34:	e0bffd17 	ldw	r2,-12(fp)
    ce38:	10ffc91e 	bne	r2,r3,cd60 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    ce3c:	e03fff15 	stw	zero,-4(fp)
    ce40:	e0bfff17 	ldw	r2,-4(fp)
}
    ce44:	e037883a 	mov	sp,fp
    ce48:	dfc00117 	ldw	ra,4(sp)
    ce4c:	df000017 	ldw	fp,0(sp)
    ce50:	dec00204 	addi	sp,sp,8
    ce54:	f800283a 	ret

0000ce58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    ce58:	defffa04 	addi	sp,sp,-24
    ce5c:	dfc00515 	stw	ra,20(sp)
    ce60:	df000415 	stw	fp,16(sp)
    ce64:	dc000315 	stw	r16,12(sp)
    ce68:	df000304 	addi	fp,sp,12
    ce6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    ce70:	00bffa04 	movi	r2,-24
    ce74:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ce78:	e03ffe15 	stw	zero,-8(fp)
    ce7c:	00002006 	br	cf00 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    ce80:	e13ffe17 	ldw	r4,-8(fp)
    ce84:	04000074 	movhi	r16,1
    ce88:	8438b204 	addi	r16,r16,-7480
    ce8c:	01400304 	movi	r5,12
    ce90:	0000d140 	call	d14 <__mulsi3>
    ce94:	1405883a 	add	r2,r2,r16
    ce98:	10800017 	ldw	r2,0(r2)
    ce9c:	1004c03a 	cmpne	r2,r2,zero
    cea0:	1000141e 	bne	r2,zero,cef4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    cea4:	e13ffe17 	ldw	r4,-8(fp)
    cea8:	04000074 	movhi	r16,1
    ceac:	8438b204 	addi	r16,r16,-7480
    ceb0:	01400304 	movi	r5,12
    ceb4:	0000d140 	call	d14 <__mulsi3>
    ceb8:	1407883a 	add	r3,r2,r16
    cebc:	e0bfff17 	ldw	r2,-4(fp)
    cec0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    cec4:	00800074 	movhi	r2,1
    cec8:	10bd3504 	addi	r2,r2,-2860
    cecc:	10c00017 	ldw	r3,0(r2)
    ced0:	e0bffe17 	ldw	r2,-8(fp)
    ced4:	1880040e 	bge	r3,r2,cee8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    ced8:	00c00074 	movhi	r3,1
    cedc:	18fd3504 	addi	r3,r3,-2860
    cee0:	e0bffe17 	ldw	r2,-8(fp)
    cee4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    cee8:	e0bffe17 	ldw	r2,-8(fp)
    ceec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    cef0:	00000606 	br	cf0c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cef4:	e0bffe17 	ldw	r2,-8(fp)
    cef8:	10800044 	addi	r2,r2,1
    cefc:	e0bffe15 	stw	r2,-8(fp)
    cf00:	e0bffe17 	ldw	r2,-8(fp)
    cf04:	10800810 	cmplti	r2,r2,32
    cf08:	103fdd1e 	bne	r2,zero,ce80 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    cf0c:	e0bffd17 	ldw	r2,-12(fp)
}
    cf10:	e037883a 	mov	sp,fp
    cf14:	dfc00217 	ldw	ra,8(sp)
    cf18:	df000117 	ldw	fp,4(sp)
    cf1c:	dc000017 	ldw	r16,0(sp)
    cf20:	dec00304 	addi	sp,sp,12
    cf24:	f800283a 	ret

0000cf28 <atexit>:
    cf28:	200b883a 	mov	r5,r4
    cf2c:	000d883a 	mov	r6,zero
    cf30:	0009883a 	mov	r4,zero
    cf34:	000f883a 	mov	r7,zero
    cf38:	000d3201 	jmpi	d320 <__register_exitproc>

0000cf3c <exit>:
    cf3c:	defffe04 	addi	sp,sp,-8
    cf40:	000b883a 	mov	r5,zero
    cf44:	dc000015 	stw	r16,0(sp)
    cf48:	dfc00115 	stw	ra,4(sp)
    cf4c:	2021883a 	mov	r16,r4
    cf50:	000d4580 	call	d458 <__call_exitprocs>
    cf54:	00800074 	movhi	r2,1
    cf58:	10bd2e04 	addi	r2,r2,-2888
    cf5c:	11000017 	ldw	r4,0(r2)
    cf60:	20800f17 	ldw	r2,60(r4)
    cf64:	10000126 	beq	r2,zero,cf6c <exit+0x30>
    cf68:	103ee83a 	callr	r2
    cf6c:	8009883a 	mov	r4,r16
    cf70:	000d6480 	call	d648 <_exit>

0000cf74 <memcmp>:
    cf74:	00c000c4 	movi	r3,3
    cf78:	1980032e 	bgeu	r3,r6,cf88 <memcmp+0x14>
    cf7c:	2144b03a 	or	r2,r4,r5
    cf80:	10c4703a 	and	r2,r2,r3
    cf84:	10000f26 	beq	r2,zero,cfc4 <memcmp+0x50>
    cf88:	31ffffc4 	addi	r7,r6,-1
    cf8c:	3000061e 	bne	r6,zero,cfa8 <memcmp+0x34>
    cf90:	00000a06 	br	cfbc <memcmp+0x48>
    cf94:	39ffffc4 	addi	r7,r7,-1
    cf98:	00bfffc4 	movi	r2,-1
    cf9c:	21000044 	addi	r4,r4,1
    cfa0:	29400044 	addi	r5,r5,1
    cfa4:	38800526 	beq	r7,r2,cfbc <memcmp+0x48>
    cfa8:	20c00003 	ldbu	r3,0(r4)
    cfac:	28800003 	ldbu	r2,0(r5)
    cfb0:	18bff826 	beq	r3,r2,cf94 <memcmp+0x20>
    cfb4:	1885c83a 	sub	r2,r3,r2
    cfb8:	f800283a 	ret
    cfbc:	0005883a 	mov	r2,zero
    cfc0:	f800283a 	ret
    cfc4:	180f883a 	mov	r7,r3
    cfc8:	20c00017 	ldw	r3,0(r4)
    cfcc:	28800017 	ldw	r2,0(r5)
    cfd0:	18bfed1e 	bne	r3,r2,cf88 <memcmp+0x14>
    cfd4:	31bfff04 	addi	r6,r6,-4
    cfd8:	21000104 	addi	r4,r4,4
    cfdc:	29400104 	addi	r5,r5,4
    cfe0:	39bff936 	bltu	r7,r6,cfc8 <memcmp+0x54>
    cfe4:	003fe806 	br	cf88 <memcmp+0x14>

0000cfe8 <putc>:
    cfe8:	defffc04 	addi	sp,sp,-16
    cfec:	dc800215 	stw	r18,8(sp)
    cff0:	04800074 	movhi	r18,1
    cff4:	94bd2d04 	addi	r18,r18,-2892
    cff8:	90c00017 	ldw	r3,0(r18)
    cffc:	dc400115 	stw	r17,4(sp)
    d000:	dc000015 	stw	r16,0(sp)
    d004:	dfc00315 	stw	ra,12(sp)
    d008:	2023883a 	mov	r17,r4
    d00c:	2821883a 	mov	r16,r5
    d010:	18000226 	beq	r3,zero,d01c <putc+0x34>
    d014:	18800e17 	ldw	r2,56(r3)
    d018:	10001126 	beq	r2,zero,d060 <putc+0x78>
    d01c:	80800217 	ldw	r2,8(r16)
    d020:	10ffffc4 	addi	r3,r2,-1
    d024:	80c00215 	stw	r3,8(r16)
    d028:	18001316 	blt	r3,zero,d078 <putc+0x90>
    d02c:	80800017 	ldw	r2,0(r16)
    d030:	14400005 	stb	r17,0(r2)
    d034:	80c00017 	ldw	r3,0(r16)
    d038:	18800044 	addi	r2,r3,1
    d03c:	18c00003 	ldbu	r3,0(r3)
    d040:	80800015 	stw	r2,0(r16)
    d044:	1805883a 	mov	r2,r3
    d048:	dfc00317 	ldw	ra,12(sp)
    d04c:	dc800217 	ldw	r18,8(sp)
    d050:	dc400117 	ldw	r17,4(sp)
    d054:	dc000017 	ldw	r16,0(sp)
    d058:	dec00404 	addi	sp,sp,16
    d05c:	f800283a 	ret
    d060:	1809883a 	mov	r4,r3
    d064:	00051d00 	call	51d0 <__sinit>
    d068:	80800217 	ldw	r2,8(r16)
    d06c:	10ffffc4 	addi	r3,r2,-1
    d070:	80c00215 	stw	r3,8(r16)
    d074:	183fed0e 	bge	r3,zero,d02c <putc+0x44>
    d078:	80800617 	ldw	r2,24(r16)
    d07c:	18800f16 	blt	r3,r2,d0bc <putc+0xd4>
    d080:	80800017 	ldw	r2,0(r16)
    d084:	14400005 	stb	r17,0(r2)
    d088:	81000017 	ldw	r4,0(r16)
    d08c:	00800284 	movi	r2,10
    d090:	20c00003 	ldbu	r3,0(r4)
    d094:	18801226 	beq	r3,r2,d0e0 <putc+0xf8>
    d098:	20800044 	addi	r2,r4,1
    d09c:	80800015 	stw	r2,0(r16)
    d0a0:	1805883a 	mov	r2,r3
    d0a4:	dfc00317 	ldw	ra,12(sp)
    d0a8:	dc800217 	ldw	r18,8(sp)
    d0ac:	dc400117 	ldw	r17,4(sp)
    d0b0:	dc000017 	ldw	r16,0(sp)
    d0b4:	dec00404 	addi	sp,sp,16
    d0b8:	f800283a 	ret
    d0bc:	91000017 	ldw	r4,0(r18)
    d0c0:	880b883a 	mov	r5,r17
    d0c4:	800d883a 	mov	r6,r16
    d0c8:	dfc00317 	ldw	ra,12(sp)
    d0cc:	dc800217 	ldw	r18,8(sp)
    d0d0:	dc400117 	ldw	r17,4(sp)
    d0d4:	dc000017 	ldw	r16,0(sp)
    d0d8:	dec00404 	addi	sp,sp,16
    d0dc:	000d1d41 	jmpi	d1d4 <__swbuf_r>
    d0e0:	91000017 	ldw	r4,0(r18)
    d0e4:	180b883a 	mov	r5,r3
    d0e8:	003ff606 	br	d0c4 <putc+0xdc>

0000d0ec <_putc_r>:
    d0ec:	defffc04 	addi	sp,sp,-16
    d0f0:	dc400215 	stw	r17,8(sp)
    d0f4:	dc000115 	stw	r16,4(sp)
    d0f8:	dfc00315 	stw	ra,12(sp)
    d0fc:	2021883a 	mov	r16,r4
    d100:	2823883a 	mov	r17,r5
    d104:	20000226 	beq	r4,zero,d110 <_putc_r+0x24>
    d108:	20800e17 	ldw	r2,56(r4)
    d10c:	10001026 	beq	r2,zero,d150 <_putc_r+0x64>
    d110:	30800217 	ldw	r2,8(r6)
    d114:	10ffffc4 	addi	r3,r2,-1
    d118:	30c00215 	stw	r3,8(r6)
    d11c:	18001316 	blt	r3,zero,d16c <_putc_r+0x80>
    d120:	30800017 	ldw	r2,0(r6)
    d124:	14400005 	stb	r17,0(r2)
    d128:	30c00017 	ldw	r3,0(r6)
    d12c:	18800044 	addi	r2,r3,1
    d130:	18c00003 	ldbu	r3,0(r3)
    d134:	30800015 	stw	r2,0(r6)
    d138:	1805883a 	mov	r2,r3
    d13c:	dfc00317 	ldw	ra,12(sp)
    d140:	dc400217 	ldw	r17,8(sp)
    d144:	dc000117 	ldw	r16,4(sp)
    d148:	dec00404 	addi	sp,sp,16
    d14c:	f800283a 	ret
    d150:	d9800015 	stw	r6,0(sp)
    d154:	00051d00 	call	51d0 <__sinit>
    d158:	d9800017 	ldw	r6,0(sp)
    d15c:	30800217 	ldw	r2,8(r6)
    d160:	10ffffc4 	addi	r3,r2,-1
    d164:	30c00215 	stw	r3,8(r6)
    d168:	183fed0e 	bge	r3,zero,d120 <_putc_r+0x34>
    d16c:	30800617 	ldw	r2,24(r6)
    d170:	18800e16 	blt	r3,r2,d1ac <_putc_r+0xc0>
    d174:	30800017 	ldw	r2,0(r6)
    d178:	14400005 	stb	r17,0(r2)
    d17c:	31000017 	ldw	r4,0(r6)
    d180:	00800284 	movi	r2,10
    d184:	20c00003 	ldbu	r3,0(r4)
    d188:	18800f26 	beq	r3,r2,d1c8 <_putc_r+0xdc>
    d18c:	20800044 	addi	r2,r4,1
    d190:	30800015 	stw	r2,0(r6)
    d194:	1805883a 	mov	r2,r3
    d198:	dfc00317 	ldw	ra,12(sp)
    d19c:	dc400217 	ldw	r17,8(sp)
    d1a0:	dc000117 	ldw	r16,4(sp)
    d1a4:	dec00404 	addi	sp,sp,16
    d1a8:	f800283a 	ret
    d1ac:	8009883a 	mov	r4,r16
    d1b0:	880b883a 	mov	r5,r17
    d1b4:	dfc00317 	ldw	ra,12(sp)
    d1b8:	dc400217 	ldw	r17,8(sp)
    d1bc:	dc000117 	ldw	r16,4(sp)
    d1c0:	dec00404 	addi	sp,sp,16
    d1c4:	000d1d41 	jmpi	d1d4 <__swbuf_r>
    d1c8:	8009883a 	mov	r4,r16
    d1cc:	180b883a 	mov	r5,r3
    d1d0:	003ff806 	br	d1b4 <_putc_r+0xc8>

0000d1d4 <__swbuf_r>:
    d1d4:	defffc04 	addi	sp,sp,-16
    d1d8:	dc400215 	stw	r17,8(sp)
    d1dc:	dc000115 	stw	r16,4(sp)
    d1e0:	dfc00315 	stw	ra,12(sp)
    d1e4:	2023883a 	mov	r17,r4
    d1e8:	2821883a 	mov	r16,r5
    d1ec:	20000226 	beq	r4,zero,d1f8 <__swbuf_r+0x24>
    d1f0:	20800e17 	ldw	r2,56(r4)
    d1f4:	10002f26 	beq	r2,zero,d2b4 <__swbuf_r+0xe0>
    d1f8:	3080030b 	ldhu	r2,12(r6)
    d1fc:	30c00617 	ldw	r3,24(r6)
    d200:	1080020c 	andi	r2,r2,8
    d204:	30c00215 	stw	r3,8(r6)
    d208:	10002226 	beq	r2,zero,d294 <__swbuf_r+0xc0>
    d20c:	30c00417 	ldw	r3,16(r6)
    d210:	18002026 	beq	r3,zero,d294 <__swbuf_r+0xc0>
    d214:	31000017 	ldw	r4,0(r6)
    d218:	30800517 	ldw	r2,20(r6)
    d21c:	20c7c83a 	sub	r3,r4,r3
    d220:	18802f0e 	bge	r3,r2,d2e0 <__swbuf_r+0x10c>
    d224:	19400044 	addi	r5,r3,1
    d228:	30800217 	ldw	r2,8(r6)
    d22c:	84003fcc 	andi	r16,r16,255
    d230:	20c00044 	addi	r3,r4,1
    d234:	10bfffc4 	addi	r2,r2,-1
    d238:	30800215 	stw	r2,8(r6)
    d23c:	24000005 	stb	r16,0(r4)
    d240:	30800517 	ldw	r2,20(r6)
    d244:	30c00015 	stw	r3,0(r6)
    d248:	11400c26 	beq	r2,r5,d27c <__swbuf_r+0xa8>
    d24c:	3080030b 	ldhu	r2,12(r6)
    d250:	1080004c 	andi	r2,r2,1
    d254:	1005003a 	cmpeq	r2,r2,zero
    d258:	10000626 	beq	r2,zero,d274 <__swbuf_r+0xa0>
    d25c:	8005883a 	mov	r2,r16
    d260:	dfc00317 	ldw	ra,12(sp)
    d264:	dc400217 	ldw	r17,8(sp)
    d268:	dc000117 	ldw	r16,4(sp)
    d26c:	dec00404 	addi	sp,sp,16
    d270:	f800283a 	ret
    d274:	00800284 	movi	r2,10
    d278:	80bff81e 	bne	r16,r2,d25c <__swbuf_r+0x88>
    d27c:	8809883a 	mov	r4,r17
    d280:	300b883a 	mov	r5,r6
    d284:	0004f380 	call	4f38 <_fflush_r>
    d288:	103ff426 	beq	r2,zero,d25c <__swbuf_r+0x88>
    d28c:	043fffc4 	movi	r16,-1
    d290:	003ff206 	br	d25c <__swbuf_r+0x88>
    d294:	300b883a 	mov	r5,r6
    d298:	8809883a 	mov	r4,r17
    d29c:	d9800015 	stw	r6,0(sp)
    d2a0:	00036040 	call	3604 <__swsetup_r>
    d2a4:	d9800017 	ldw	r6,0(sp)
    d2a8:	1000061e 	bne	r2,zero,d2c4 <__swbuf_r+0xf0>
    d2ac:	30c00417 	ldw	r3,16(r6)
    d2b0:	003fd806 	br	d214 <__swbuf_r+0x40>
    d2b4:	d9800015 	stw	r6,0(sp)
    d2b8:	00051d00 	call	51d0 <__sinit>
    d2bc:	d9800017 	ldw	r6,0(sp)
    d2c0:	003fcd06 	br	d1f8 <__swbuf_r+0x24>
    d2c4:	3080030b 	ldhu	r2,12(r6)
    d2c8:	00c00244 	movi	r3,9
    d2cc:	043fffc4 	movi	r16,-1
    d2d0:	10801014 	ori	r2,r2,64
    d2d4:	3080030d 	sth	r2,12(r6)
    d2d8:	88c00015 	stw	r3,0(r17)
    d2dc:	003fdf06 	br	d25c <__swbuf_r+0x88>
    d2e0:	300b883a 	mov	r5,r6
    d2e4:	8809883a 	mov	r4,r17
    d2e8:	d9800015 	stw	r6,0(sp)
    d2ec:	0004f380 	call	4f38 <_fflush_r>
    d2f0:	d9800017 	ldw	r6,0(sp)
    d2f4:	103fe51e 	bne	r2,zero,d28c <__swbuf_r+0xb8>
    d2f8:	31000017 	ldw	r4,0(r6)
    d2fc:	01400044 	movi	r5,1
    d300:	003fc906 	br	d228 <__swbuf_r+0x54>

0000d304 <__swbuf>:
    d304:	01800074 	movhi	r6,1
    d308:	31bd2d04 	addi	r6,r6,-2892
    d30c:	2007883a 	mov	r3,r4
    d310:	31000017 	ldw	r4,0(r6)
    d314:	280d883a 	mov	r6,r5
    d318:	180b883a 	mov	r5,r3
    d31c:	000d1d41 	jmpi	d1d4 <__swbuf_r>

0000d320 <__register_exitproc>:
    d320:	defffa04 	addi	sp,sp,-24
    d324:	00800074 	movhi	r2,1
    d328:	10bd2e04 	addi	r2,r2,-2888
    d32c:	dc000015 	stw	r16,0(sp)
    d330:	14000017 	ldw	r16,0(r2)
    d334:	dd000415 	stw	r20,16(sp)
    d338:	2829883a 	mov	r20,r5
    d33c:	81405217 	ldw	r5,328(r16)
    d340:	dcc00315 	stw	r19,12(sp)
    d344:	dc800215 	stw	r18,8(sp)
    d348:	dc400115 	stw	r17,4(sp)
    d34c:	dfc00515 	stw	ra,20(sp)
    d350:	2023883a 	mov	r17,r4
    d354:	3027883a 	mov	r19,r6
    d358:	3825883a 	mov	r18,r7
    d35c:	28002526 	beq	r5,zero,d3f4 <__register_exitproc+0xd4>
    d360:	29000117 	ldw	r4,4(r5)
    d364:	008007c4 	movi	r2,31
    d368:	11002716 	blt	r2,r4,d408 <__register_exitproc+0xe8>
    d36c:	8800101e 	bne	r17,zero,d3b0 <__register_exitproc+0x90>
    d370:	2105883a 	add	r2,r4,r4
    d374:	1085883a 	add	r2,r2,r2
    d378:	20c00044 	addi	r3,r4,1
    d37c:	1145883a 	add	r2,r2,r5
    d380:	0009883a 	mov	r4,zero
    d384:	15000215 	stw	r20,8(r2)
    d388:	28c00115 	stw	r3,4(r5)
    d38c:	2005883a 	mov	r2,r4
    d390:	dfc00517 	ldw	ra,20(sp)
    d394:	dd000417 	ldw	r20,16(sp)
    d398:	dcc00317 	ldw	r19,12(sp)
    d39c:	dc800217 	ldw	r18,8(sp)
    d3a0:	dc400117 	ldw	r17,4(sp)
    d3a4:	dc000017 	ldw	r16,0(sp)
    d3a8:	dec00604 	addi	sp,sp,24
    d3ac:	f800283a 	ret
    d3b0:	29802204 	addi	r6,r5,136
    d3b4:	00800044 	movi	r2,1
    d3b8:	110e983a 	sll	r7,r2,r4
    d3bc:	30c04017 	ldw	r3,256(r6)
    d3c0:	2105883a 	add	r2,r4,r4
    d3c4:	1085883a 	add	r2,r2,r2
    d3c8:	1185883a 	add	r2,r2,r6
    d3cc:	19c6b03a 	or	r3,r3,r7
    d3d0:	14802015 	stw	r18,128(r2)
    d3d4:	14c00015 	stw	r19,0(r2)
    d3d8:	00800084 	movi	r2,2
    d3dc:	30c04015 	stw	r3,256(r6)
    d3e0:	88bfe31e 	bne	r17,r2,d370 <__register_exitproc+0x50>
    d3e4:	30804117 	ldw	r2,260(r6)
    d3e8:	11c4b03a 	or	r2,r2,r7
    d3ec:	30804115 	stw	r2,260(r6)
    d3f0:	003fdf06 	br	d370 <__register_exitproc+0x50>
    d3f4:	00800074 	movhi	r2,1
    d3f8:	10848704 	addi	r2,r2,4636
    d3fc:	100b883a 	mov	r5,r2
    d400:	80805215 	stw	r2,328(r16)
    d404:	003fd606 	br	d360 <__register_exitproc+0x40>
    d408:	00800034 	movhi	r2,0
    d40c:	10835804 	addi	r2,r2,3424
    d410:	1000021e 	bne	r2,zero,d41c <__register_exitproc+0xfc>
    d414:	013fffc4 	movi	r4,-1
    d418:	003fdc06 	br	d38c <__register_exitproc+0x6c>
    d41c:	01006404 	movi	r4,400
    d420:	103ee83a 	callr	r2
    d424:	1007883a 	mov	r3,r2
    d428:	103ffa26 	beq	r2,zero,d414 <__register_exitproc+0xf4>
    d42c:	80805217 	ldw	r2,328(r16)
    d430:	180b883a 	mov	r5,r3
    d434:	18000115 	stw	zero,4(r3)
    d438:	18800015 	stw	r2,0(r3)
    d43c:	80c05215 	stw	r3,328(r16)
    d440:	18006215 	stw	zero,392(r3)
    d444:	18006315 	stw	zero,396(r3)
    d448:	0009883a 	mov	r4,zero
    d44c:	883fc826 	beq	r17,zero,d370 <__register_exitproc+0x50>
    d450:	003fd706 	br	d3b0 <__register_exitproc+0x90>

0000d454 <register_fini>:
    d454:	f800283a 	ret

0000d458 <__call_exitprocs>:
    d458:	00800074 	movhi	r2,1
    d45c:	10bd2e04 	addi	r2,r2,-2888
    d460:	10800017 	ldw	r2,0(r2)
    d464:	defff304 	addi	sp,sp,-52
    d468:	df000b15 	stw	fp,44(sp)
    d46c:	d8800115 	stw	r2,4(sp)
    d470:	00800034 	movhi	r2,0
    d474:	10835304 	addi	r2,r2,3404
    d478:	1005003a 	cmpeq	r2,r2,zero
    d47c:	d8800215 	stw	r2,8(sp)
    d480:	d8800117 	ldw	r2,4(sp)
    d484:	dd400815 	stw	r21,32(sp)
    d488:	dd000715 	stw	r20,28(sp)
    d48c:	10805204 	addi	r2,r2,328
    d490:	dfc00c15 	stw	ra,48(sp)
    d494:	ddc00a15 	stw	r23,40(sp)
    d498:	dd800915 	stw	r22,36(sp)
    d49c:	dcc00615 	stw	r19,24(sp)
    d4a0:	dc800515 	stw	r18,20(sp)
    d4a4:	dc400415 	stw	r17,16(sp)
    d4a8:	dc000315 	stw	r16,12(sp)
    d4ac:	282b883a 	mov	r21,r5
    d4b0:	2039883a 	mov	fp,r4
    d4b4:	d8800015 	stw	r2,0(sp)
    d4b8:	2829003a 	cmpeq	r20,r5,zero
    d4bc:	d8800117 	ldw	r2,4(sp)
    d4c0:	14405217 	ldw	r17,328(r2)
    d4c4:	88001026 	beq	r17,zero,d508 <__call_exitprocs+0xb0>
    d4c8:	ddc00017 	ldw	r23,0(sp)
    d4cc:	88800117 	ldw	r2,4(r17)
    d4d0:	8c802204 	addi	r18,r17,136
    d4d4:	143fffc4 	addi	r16,r2,-1
    d4d8:	80000916 	blt	r16,zero,d500 <__call_exitprocs+0xa8>
    d4dc:	05bfffc4 	movi	r22,-1
    d4e0:	a000151e 	bne	r20,zero,d538 <__call_exitprocs+0xe0>
    d4e4:	8409883a 	add	r4,r16,r16
    d4e8:	2105883a 	add	r2,r4,r4
    d4ec:	1485883a 	add	r2,r2,r18
    d4f0:	10c02017 	ldw	r3,128(r2)
    d4f4:	a8c01126 	beq	r21,r3,d53c <__call_exitprocs+0xe4>
    d4f8:	843fffc4 	addi	r16,r16,-1
    d4fc:	85bff81e 	bne	r16,r22,d4e0 <__call_exitprocs+0x88>
    d500:	d8800217 	ldw	r2,8(sp)
    d504:	10003126 	beq	r2,zero,d5cc <__call_exitprocs+0x174>
    d508:	dfc00c17 	ldw	ra,48(sp)
    d50c:	df000b17 	ldw	fp,44(sp)
    d510:	ddc00a17 	ldw	r23,40(sp)
    d514:	dd800917 	ldw	r22,36(sp)
    d518:	dd400817 	ldw	r21,32(sp)
    d51c:	dd000717 	ldw	r20,28(sp)
    d520:	dcc00617 	ldw	r19,24(sp)
    d524:	dc800517 	ldw	r18,20(sp)
    d528:	dc400417 	ldw	r17,16(sp)
    d52c:	dc000317 	ldw	r16,12(sp)
    d530:	dec00d04 	addi	sp,sp,52
    d534:	f800283a 	ret
    d538:	8409883a 	add	r4,r16,r16
    d53c:	88c00117 	ldw	r3,4(r17)
    d540:	2105883a 	add	r2,r4,r4
    d544:	1445883a 	add	r2,r2,r17
    d548:	18ffffc4 	addi	r3,r3,-1
    d54c:	11800217 	ldw	r6,8(r2)
    d550:	1c001526 	beq	r3,r16,d5a8 <__call_exitprocs+0x150>
    d554:	10000215 	stw	zero,8(r2)
    d558:	303fe726 	beq	r6,zero,d4f8 <__call_exitprocs+0xa0>
    d55c:	00c00044 	movi	r3,1
    d560:	1c06983a 	sll	r3,r3,r16
    d564:	90804017 	ldw	r2,256(r18)
    d568:	8cc00117 	ldw	r19,4(r17)
    d56c:	1884703a 	and	r2,r3,r2
    d570:	10001426 	beq	r2,zero,d5c4 <__call_exitprocs+0x16c>
    d574:	90804117 	ldw	r2,260(r18)
    d578:	1884703a 	and	r2,r3,r2
    d57c:	10000c1e 	bne	r2,zero,d5b0 <__call_exitprocs+0x158>
    d580:	2105883a 	add	r2,r4,r4
    d584:	1485883a 	add	r2,r2,r18
    d588:	11400017 	ldw	r5,0(r2)
    d58c:	e009883a 	mov	r4,fp
    d590:	303ee83a 	callr	r6
    d594:	88800117 	ldw	r2,4(r17)
    d598:	98bfc81e 	bne	r19,r2,d4bc <__call_exitprocs+0x64>
    d59c:	b8800017 	ldw	r2,0(r23)
    d5a0:	147fd526 	beq	r2,r17,d4f8 <__call_exitprocs+0xa0>
    d5a4:	003fc506 	br	d4bc <__call_exitprocs+0x64>
    d5a8:	8c000115 	stw	r16,4(r17)
    d5ac:	003fea06 	br	d558 <__call_exitprocs+0x100>
    d5b0:	2105883a 	add	r2,r4,r4
    d5b4:	1485883a 	add	r2,r2,r18
    d5b8:	11000017 	ldw	r4,0(r2)
    d5bc:	303ee83a 	callr	r6
    d5c0:	003ff406 	br	d594 <__call_exitprocs+0x13c>
    d5c4:	303ee83a 	callr	r6
    d5c8:	003ff206 	br	d594 <__call_exitprocs+0x13c>
    d5cc:	88800117 	ldw	r2,4(r17)
    d5d0:	1000081e 	bne	r2,zero,d5f4 <__call_exitprocs+0x19c>
    d5d4:	89000017 	ldw	r4,0(r17)
    d5d8:	20000726 	beq	r4,zero,d5f8 <__call_exitprocs+0x1a0>
    d5dc:	b9000015 	stw	r4,0(r23)
    d5e0:	8809883a 	mov	r4,r17
    d5e4:	0000d4c0 	call	d4c <free>
    d5e8:	bc400017 	ldw	r17,0(r23)
    d5ec:	883fb71e 	bne	r17,zero,d4cc <__call_exitprocs+0x74>
    d5f0:	003fc506 	br	d508 <__call_exitprocs+0xb0>
    d5f4:	89000017 	ldw	r4,0(r17)
    d5f8:	882f883a 	mov	r23,r17
    d5fc:	2023883a 	mov	r17,r4
    d600:	883fb21e 	bne	r17,zero,d4cc <__call_exitprocs+0x74>
    d604:	003fc006 	br	d508 <__call_exitprocs+0xb0>

0000d608 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    d608:	defffd04 	addi	sp,sp,-12
    d60c:	df000215 	stw	fp,8(sp)
    d610:	df000204 	addi	fp,sp,8
    d614:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    d618:	e0bfff17 	ldw	r2,-4(fp)
    d61c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d620:	e0bffe17 	ldw	r2,-8(fp)
    d624:	1005003a 	cmpeq	r2,r2,zero
    d628:	1000021e 	bne	r2,zero,d634 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    d62c:	002af070 	cmpltui	zero,zero,43969
    d630:	00000106 	br	d638 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    d634:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    d638:	e037883a 	mov	sp,fp
    d63c:	df000017 	ldw	fp,0(sp)
    d640:	dec00104 	addi	sp,sp,4
    d644:	f800283a 	ret

0000d648 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d648:	defffd04 	addi	sp,sp,-12
    d64c:	dfc00215 	stw	ra,8(sp)
    d650:	df000115 	stw	fp,4(sp)
    d654:	df000104 	addi	fp,sp,4
    d658:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    d65c:	e13fff17 	ldw	r4,-4(fp)
    d660:	000d6080 	call	d608 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d664:	003fff06 	br	d664 <_exit+0x1c>
    d668:	0000d454 	movui	zero,849
