
ProjectOne.elf:     file format elf32-littlenios2
ProjectOne.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000cb70 memsz 0x0000cb70 flags r-x
    LOAD off    0x0000db90 vaddr 0x0000cb90 paddr 0x0000e5ec align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010048 vaddr 0x00010048 paddr 0x00010048 align 2**12
         filesz 0x00000000 memsz 0x000007bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c690  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000034c  0000c844  0000c844  0000d844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0000cb90  0000e5ec  0000db90  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000007bc  00010048  00010048  00010048  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000f5ec  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  0000f618  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001404  00000000  00000000  000102d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022af1  00000000  00000000  000116d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007aa1  00000000  00000000  000341c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000137ff  00000000  00000000  0003bc66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001910  00000000  00000000  0004f468  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000223b  00000000  00000000  00050d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be38  00000000  00000000  00052fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0005edec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  0005ee00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000627b1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000627b4  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000627b7  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000627b8  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000627bc  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000627c0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000627c4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000627cd  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000627d6  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  000627df  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000028  00000000  00000000  000627ea  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006a1c7  00000000  00000000  00062812  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000c844 l    d  .rodata	00000000 .rodata
0000cb90 l    d  .rwdata	00000000 .rwdata
00010048 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alarm_handler.c
00000000 l    df *ABS*	00000000 project1.c
00000000 l    df *ABS*	00000000 tcb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000424 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000df8 l     F .text	00000058 __sprint_r
0000c8c6 l     O .rodata	00000010 blanks.3452
0000c8b6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002e74 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000489c l     F .text	00000058 std
000049a8 l     F .text	00000008 __fp_lock
000049b0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000cf98 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000e5c0 l     O .rwdata	00000004 charset
0000c8fc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000ca44 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00008620 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a058 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000a0b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000a1bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a2e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a3c0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a520 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a750 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000e5dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000abac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d54c l     O .rwdata	00001060 JTAG_UART
0000ac9c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000aedc l     F .text	00000228 altera_avalon_jtag_uart_irq
0000b104 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b780 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b950 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bd60 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000beb0 l     F .text	000000f8 alt_file_locked
0000c134 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000c62c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000c7e0 l     F .text	00000040 alt_sim_halt
00005f4c g     F .text	00000094 _mprec_log10
00006038 g     F .text	00000088 __any_on
000077f4 g     F .text	00000070 _isatty_r
0000ca1c g     O .rodata	00000028 __mprec_tinytens
0000a580 g     F .text	0000006c alt_main
00010574 g     O .bss	00000100 alt_irq
00007864 g     F .text	00000078 _lseek_r
0000e5ec g       *ABS*	00000000 __flash_rwdata_start
00009140 g     F .text	00000088 __eqdf2
00010804 g       *ABS*	00000000 __alt_heap_start
00000d10 g     F .text	00000044 printf
00007238 g     F .text	00000068 __sseek
00004904 g     F .text	000000a4 __sinit
00005610 g     F .text	00000084 _setlocale_r
00004a04 g     F .text	0000009c __sfmoreglue
0000a60c g     F .text	00000020 __malloc_unlock
0000020c g     F .text	00000060 initialize_alarm
000059c8 g     F .text	000000e0 memmove
000049f4 g     F .text	00000010 _cleanup
000060c0 g     F .text	000000bc _Balloc
00009250 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007780 g     F .text	00000074 _fstat_r
0001005c g     O .bss	00000004 errno
00010070 g     O .bss	00000004 alt_argv
000165ac g       *ABS*	00000000 _gp
0000d3cc g     O .rwdata	00000180 alt_fd_list
0000c1b4 g     F .text	00000094 alt_find_dev
00005928 g     F .text	000000a0 memcpy
000049e8 g     F .text	0000000c _cleanup_r
000093e8 g     F .text	000000f8 __floatsidf
0000be38 g     F .text	00000078 alt_io_redirect
00009360 g     F .text	00000088 __ltdf2
0000c844 g       *ABS*	00000000 __DTOR_END__
0000c194 g     F .text	00000020 altera_nios2_irq_init
00005e9c g     F .text	000000b0 __ratio
0000b31c g     F .text	00000224 altera_avalon_jtag_uart_read
000005bc g     F .text	00000014 malloc
00000d54 g     F .text	00000034 _printf_r
00000560 g     F .text	00000008 __udivsi3
0000a21c g     F .text	000000c4 isatty
0000c92c g     O .rodata	000000c8 __mprec_tens
000055ec g     F .text	00000008 __locale_charset
00010050 g     O .bss	00000004 __malloc_top_pad
0000e5bc g     O .rwdata	00000004 __mb_cur_max
000055f4 g     F .text	0000000c _localeconv_r
00006824 g     F .text	0000003c __i2b
00004fd0 g     F .text	0000049c __sfvwrite_r
00000d88 g     F .text	00000070 _sbrk_r
000078dc g     F .text	00000078 _read_r
0000d398 g     O .rwdata	0000000c __lc_ctype
0000e5d4 g     O .rwdata	00000004 alt_max_fd
00009c04 g     F .text	00000138 __unpack_d
0000765c g     F .text	00000110 _fclose_r
00004868 g     F .text	00000034 fflush
000100c4 g     O .bss	000004b0 threads
00010054 g     O .bss	00000004 __malloc_max_sbrked_mem
000003ec g     F .text	0000001c destroy_thread
00008ab0 g     F .text	00000074 __adddf3
00005d7c g     F .text	00000120 __b2d
0001004c g     O .bss	00000004 current_thread
00007fc0 g     F .text	00000660 __umoddi3
0000a42c g     F .text	000000f4 lseek
0000e5b8 g     O .rwdata	00000004 _global_impure_ptr
00006bcc g     F .text	000005f4 _realloc_r
00010804 g       *ABS*	00000000 __bss_end
0000bc68 g     F .text	000000f8 alt_iic_isr_register
0000a97c g     F .text	0000010c alt_tick
00007954 g     F .text	0000066c __udivdi3
0000c9f4 g     O .rodata	00000028 __mprec_bigtens
00006aac g     F .text	00000120 __s2b
000095b8 g     F .text	00000194 __floatunsidf
00005c9c g     F .text	00000060 __mcmp
000049d0 g     F .text	00000018 __fp_lock_all
0000bc20 g     F .text	00000048 alt_ic_irq_enabled
000100ac g     O .bss	00000018 alarm
0000a8e4 g     F .text	00000098 alt_alarm_stop
00010080 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000d3a4 g     O .rwdata	00000028 alt_dev_null
0000b880 g     F .text	0000001c alt_dcache_flush_all
00005b68 g     F .text	00000070 __hi0bits
000094e0 g     F .text	000000d8 __fixdfsi
000001f0 g     F .text	0000001c my_interrupt_handler
0000e5ec g       *ABS*	00000000 __ram_rwdata_end
0000e5cc g     O .rwdata	00000008 alt_dev_list
0000aa88 g     F .text	00000124 write
0000cb90 g       *ABS*	00000000 __ram_rodata_end
0000a0e4 g     F .text	000000d8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000698c g     F .text	00000120 __pow5mult
00010060 g     O .bss	00000004 __nlocale_changed
00000568 g     F .text	00000008 __umodsi3
00010804 g       *ABS*	00000000 end
0000ae1c g     F .text	000000c0 altera_avalon_jtag_uart_init
0000c840 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000b7f0 g     F .text	00000090 alt_avalon_timer_sc_init
00009870 g     F .text	00000080 __clzsi2
0000b540 g     F .text	00000240 altera_avalon_jtag_uart_write
000048f4 g     F .text	00000004 __sfp_lock_acquire
00005844 g     F .text	000000e4 memchr
00000e50 g     F .text	00001ec4 ___vfprintf_internal_r
00004cbc g     F .text	00000314 _free_r
0000c630 g     F .text	000001b0 __call_exitprocs
00010064 g     O .bss	00000004 __mlocale_changed
0000e5b0 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00010078 g     O .bss	00000004 _alt_tick_rate
00006484 g     F .text	0000014c __lshift
0001007c g     O .bss	00000004 _alt_nticks
0000a62c g     F .text	00000124 read
0000ac40 g     F .text	0000005c alt_sys_init
0000c4f8 g     F .text	00000134 __register_exitproc
000065d0 g     F .text	00000254 __multiply
0000b1b4 g     F .text	00000074 altera_avalon_jtag_uart_close
00000570 g     F .text	00000038 __mulsi3
0000cb90 g       *ABS*	00000000 __ram_rwdata_start
0000c844 g       *ABS*	00000000 __ram_rodata_start
00010084 g     O .bss	00000028 __malloc_current_mallinfo
0000617c g     F .text	0000017c __d2b
000002d0 g     F .text	00000094 initialize_thread
0000acd4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000c368 g     F .text	000000d0 alt_get_fd
00009d3c g     F .text	000000c8 __fpcmp_parts_d
000075ec g     F .text	00000070 _close_r
0000c484 g     F .text	00000074 memcmp
0000ad84 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00010804 g       *ABS*	00000000 __alt_stack_base
0000adcc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00002d38 g     F .text	0000013c __swsetup_r
00008ee8 g     F .text	00000258 __divdf3
00004aa0 g     F .text	000000f0 __sfp
00005fe0 g     F .text	00000058 __copybits
0000cb90 g     O .rwdata	00000408 __malloc_av_
00004900 g     F .text	00000004 __sinit_lock_release
00008b24 g     F .text	000003c4 __muldf3
0000731c g     F .text	00000060 __sread
0000c248 g     F .text	00000120 alt_find_file
0000b89c g     F .text	000000b4 alt_dev_llist_insert
0000a5ec g     F .text	00000020 __malloc_lock
0000a828 g     F .text	000000bc sbrk
0000466c g     F .text	000001fc _fflush_r
00007524 g     F .text	000000c8 _calloc_r
00010048 g       *ABS*	00000000 __bss_start
00005aa8 g     F .text	00000098 memset
0000026c g     F .text	0000002c main
00010074 g     O .bss	00000004 alt_envp
00010058 g     O .bss	00000004 __malloc_max_total_mem
0000ad2c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00007230 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
0000776c g     F .text	00000014 fclose
00010674 g     O .bss	00000190 _atexit0
000030b8 g     F .text	000015b4 _dtoa_r
000005d0 g     F .text	00000740 _malloc_r
0000e5d8 g     O .rwdata	00000004 alt_errno
00000408 g     F .text	0000001c create_thread
00005534 g     F .text	000000b8 _fwalk
000004a0 g     F .text	00000060 __divsi3
0000ca50 g     O .rodata	00000014 __thenan_df
00004b90 g     F .text	0000012c _malloc_trim_r
0000c844 g       *ABS*	00000000 __CTOR_END__
0000737c g     F .text	000000bc strcmp
0000c844 g       *ABS*	00000000 __flash_rodata_start
0000c844 g       *ABS*	00000000 __DTOR_LIST__
00000364 g     F .text	00000088 my_scheduler
000091c8 g     F .text	00000088 __nedf2
0000ac0c g     F .text	00000034 alt_irq_init
0000a7b0 g     F .text	00000078 alt_release_fd
0000ca64 g     O .rodata	00000100 __clz_tab
00010068 g     O .bss	00000004 _PathLocale
0000c438 g     F .text	00000014 atexit
000074ac g     F .text	00000078 _write_r
00005694 g     F .text	0000001c setlocale
0000e5b4 g     O .rwdata	00000004 _impure_ptr
0001006c g     O .bss	00000004 alt_argc
0000ba14 g     F .text	00000064 _do_dtors
00010048 g     O .bss	00000004 numthreads
00000020 g       .exceptions	00000000 alt_irq_entry
00005cfc g     F .text	00000080 __ulp
000071c0 g     F .text	00000040 __isinfd
000049b8 g     F .text	00000018 __fp_unlock_all
0000e5c4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005600 g     F .text	00000010 localeconv
0000ba94 g     F .text	00000050 alt_ic_isr_register
0000e5ec g       *ABS*	00000000 _edata
00010804 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000b228 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00000298 g     F .text	00000038 prototype_os
0000bb80 g     F .text	000000a0 alt_ic_irq_disable
000072a0 g     F .text	0000007c __swrite
0000e5ac g     O .rwdata	00000004 __malloc_trim_threshold
0000c44c g     F .text	00000038 exit
0000546c g     F .text	000000c8 _fwalk_reent
000062f8 g     F .text	0000018c __mdiff
00000500 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000048f8 g     F .text	00000004 __sfp_lock_release
0000c820 g     F .text	00000020 _exit
00007200 g     F .text	00000030 __isnand
00009e04 g     F .text	00000154 alt_alarm_start
0000974c g     F .text	00000124 __muldi3
000056b0 g     F .text	00000194 __smakebuf_r
00007438 g     F .text	00000074 strlen
0000bfa8 g     F .text	0000018c open
000092d8 g     F .text	00000088 __gedf2
08000000 g       *ABS*	00000000 __alt_mem_SRAM
0000ba78 g     F .text	0000001c alt_icache_flush_all
0000e5e8 g     O .rwdata	00000004 alt_priority_mask
0000bae4 g     F .text	0000009c alt_ic_irq_enable
00002d14 g     F .text	00000024 __vfprintf_internal
00008a30 g     F .text	00000080 __subdf3
00005bd8 g     F .text	000000c4 __lo0bits
0000e5e0 g     O .rwdata	00000008 alt_alarm_list
0000b9b0 g     F .text	00000064 _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
00009f58 g     F .text	00000100 close
0000a340 g     F .text	00000080 alt_load
000098f0 g     F .text	00000314 __pack_d
000005a8 g     F .text	00000014 free
000048fc g     F .text	00000004 __sinit_lock_acquire
00006860 g     F .text	0000012c __multadd
00005b40 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406d14 	ori	at,at,436
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18c15d04 	addi	r3,r3,1396
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18c15d04 	addi	r3,r3,1396
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6996b14 	ori	gp,gp,26028
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	10801214 	ori	r2,r2,72

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18c20114 	ori	r3,r3,2052

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000a3400 	call	a340 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000a5800 	call	a580 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <my_interrupt_handler>:
#include <sys\alt_timestamp.h>
#include <sys\alt_alarm.h>
#include <tcb.c>
alt_alarm alarm ;

void my_interrupt_handler(){
     1f0:	deffff04 	addi	sp,sp,-4
     1f4:	df000015 	stw	fp,0(sp)
     1f8:	d839883a 	mov	fp,sp

}
     1fc:	e037883a 	mov	sp,fp
     200:	df000017 	ldw	fp,0(sp)
     204:	dec00104 	addi	sp,sp,4
     208:	f800283a 	ret

0000020c <initialize_alarm>:

void initialize_alarm(){
     20c:	defffe04 	addi	sp,sp,-8
     210:	dfc00115 	stw	ra,4(sp)
     214:	df000015 	stw	fp,0(sp)
     218:	d839883a 	mov	fp,sp
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     21c:	00800074 	movhi	r2,1
     220:	10801e04 	addi	r2,r2,120
     224:	10800017 	ldw	r2,0(r2)
     228:	100b883a 	mov	r5,r2
	if(alt_alarm_start(&alarm, alt_ticks_per_second(), my_interrupt_handler, NULL) != 0){
     22c:	01800034 	movhi	r6,0
     230:	31807c04 	addi	r6,r6,496
     234:	01000074 	movhi	r4,1
     238:	21002b04 	addi	r4,r4,172
     23c:	000f883a 	mov	r7,zero
     240:	0009e040 	call	9e04 <alt_alarm_start>
     244:	1005003a 	cmpeq	r2,r2,zero
     248:	1000031e 	bne	r2,zero,258 <initialize_alarm+0x4c>
			printf("ERROR WITH TIMER");
     24c:	01000074 	movhi	r4,1
     250:	21321104 	addi	r4,r4,-14268
     254:	0000d100 	call	d10 <printf>
		}
}
     258:	e037883a 	mov	sp,fp
     25c:	dfc00117 	ldw	ra,4(sp)
     260:	df000017 	ldw	fp,0(sp)
     264:	dec00204 	addi	sp,sp,8
     268:	f800283a 	ret

0000026c <main>:
#define ALARMTICKS(x) ((alt_ticks_per_second()*(x))/10)
#define MAX 2555

// Note that ALARMTICKS(5) = 1 * 5 / 10 or 0.5 seconds
int main()
{
     26c:	defffe04 	addi	sp,sp,-8
     270:	dfc00115 	stw	ra,4(sp)
     274:	df000015 	stw	fp,0(sp)
     278:	d839883a 	mov	fp,sp
	prototype_os();
     27c:	00002980 	call	298 <prototype_os>
	return 0;
     280:	0005883a 	mov	r2,zero
}
     284:	e037883a 	mov	sp,fp
     288:	dfc00117 	ldw	ra,4(sp)
     28c:	df000017 	ldw	fp,0(sp)
     290:	dec00204 	addi	sp,sp,8
     294:	f800283a 	ret

00000298 <prototype_os>:
void prototype_os()
{
     298:	defffd04 	addi	sp,sp,-12
     29c:	dfc00215 	stw	ra,8(sp)
     2a0:	df000115 	stw	fp,4(sp)
     2a4:	df000104 	addi	fp,sp,4
	// initialize the timer and its interrupt handler
	initialize_alarm();
     2a8:	000020c0 	call	20c <initialize_alarm>
	while (1)
	{
		//printf("This is my prototype OS.\n");
		int j;
	// a delay loop is used below. Try adjust the value of MAX
	for (j = 0; j < MAX; j++){
     2ac:	e03fff15 	stw	zero,-4(fp)
     2b0:	00000306 	br	2c0 <prototype_os+0x28>
     2b4:	e0bfff17 	ldw	r2,-4(fp)
     2b8:	10800044 	addi	r2,r2,1
     2bc:	e0bfff15 	stw	r2,-4(fp)
     2c0:	e0bfff17 	ldw	r2,-4(fp)
     2c4:	10827ed0 	cmplti	r2,r2,2555
     2c8:	103ffa1e 	bne	r2,zero,2b4 <prototype_os+0x1c>

	}
	}
     2cc:	003ff706 	br	2ac <prototype_os+0x14>

000002d0 <initialize_thread>:
	int priority;
};

int numthreads =0;
struct thread threads[50];
void initialize_thread(struct thread *mythread){
     2d0:	defffd04 	addi	sp,sp,-12
     2d4:	dfc00215 	stw	ra,8(sp)
     2d8:	df000115 	stw	fp,4(sp)
     2dc:	df000104 	addi	fp,sp,4
     2e0:	e13fff15 	stw	r4,-4(fp)

	(*mythread).stack_size = 700;
     2e4:	e0ffff17 	ldw	r3,-4(fp)
     2e8:	0080af04 	movi	r2,700
     2ec:	18800215 	stw	r2,8(r3)
	(*mythread).stack_address = malloc((*mythread).stack_size);
     2f0:	e0bfff17 	ldw	r2,-4(fp)
     2f4:	10800217 	ldw	r2,8(r2)
     2f8:	1009883a 	mov	r4,r2
     2fc:	00005bc0 	call	5bc <malloc>
     300:	1007883a 	mov	r3,r2
     304:	e0bfff17 	ldw	r2,-4(fp)
     308:	10c00115 	stw	r3,4(r2)
	(*mythread).stack_pointer = (*mythread).stack_address-(*mythread).stack_size/2;
     30c:	e0bfff17 	ldw	r2,-4(fp)
     310:	11000117 	ldw	r4,4(r2)
     314:	e0bfff17 	ldw	r2,-4(fp)
     318:	10c00217 	ldw	r3,8(r2)
     31c:	1804d7fa 	srli	r2,r3,31
     320:	10c5883a 	add	r2,r2,r3
     324:	1005d07a 	srai	r2,r2,1
     328:	2087c83a 	sub	r3,r4,r2
     32c:	e0bfff17 	ldw	r2,-4(fp)
     330:	10c00315 	stw	r3,12(r2)
	(*mythread).state = 0;
     334:	e0bfff17 	ldw	r2,-4(fp)
     338:	10000415 	stw	zero,16(r2)
	(*mythread).priority=0;
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	10000515 	stw	zero,20(r2)
	numthreads++;
     344:	d0a6a717 	ldw	r2,-25956(gp)
     348:	10800044 	addi	r2,r2,1
     34c:	d0a6a715 	stw	r2,-25956(gp)
}
     350:	e037883a 	mov	sp,fp
     354:	dfc00117 	ldw	ra,4(sp)
     358:	df000017 	ldw	fp,0(sp)
     35c:	dec00204 	addi	sp,sp,8
     360:	f800283a 	ret

00000364 <my_scheduler>:
int current_thread = 0;
int my_scheduler(int sp){//round robin
     364:	defffc04 	addi	sp,sp,-16
     368:	dfc00315 	stw	ra,12(sp)
     36c:	df000215 	stw	fp,8(sp)
     370:	dc000115 	stw	r16,4(sp)
     374:	df000104 	addi	fp,sp,4
     378:	e13fff15 	stw	r4,-4(fp)
	threads[current_thread].stack_pointer= sp;
     37c:	d126a817 	ldw	r4,-25952(gp)
     380:	04000074 	movhi	r16,1
     384:	84003104 	addi	r16,r16,196
     388:	01400604 	movi	r5,24
     38c:	00005700 	call	570 <__mulsi3>
     390:	1405883a 	add	r2,r2,r16
     394:	10c00304 	addi	r3,r2,12
     398:	e0bfff17 	ldw	r2,-4(fp)
     39c:	18800015 	stw	r2,0(r3)
	current_thread = (current_thread+1)%50;
     3a0:	d0a6a817 	ldw	r2,-25952(gp)
     3a4:	11000044 	addi	r4,r2,1
     3a8:	01400c84 	movi	r5,50
     3ac:	00005000 	call	500 <__modsi3>
     3b0:	d0a6a815 	stw	r2,-25952(gp)
	return threads[current_thread].stack_pointer;
     3b4:	d126a817 	ldw	r4,-25952(gp)
     3b8:	04000074 	movhi	r16,1
     3bc:	84003104 	addi	r16,r16,196
     3c0:	01400604 	movi	r5,24
     3c4:	00005700 	call	570 <__mulsi3>
     3c8:	1405883a 	add	r2,r2,r16
     3cc:	10800304 	addi	r2,r2,12
     3d0:	10800017 	ldw	r2,0(r2)
}
     3d4:	e037883a 	mov	sp,fp
     3d8:	dfc00217 	ldw	ra,8(sp)
     3dc:	df000117 	ldw	fp,4(sp)
     3e0:	dc000017 	ldw	r16,0(sp)
     3e4:	dec00304 	addi	sp,sp,12
     3e8:	f800283a 	ret

000003ec <destroy_thread>:
void destroy_thread(){
     3ec:	deffff04 	addi	sp,sp,-4
     3f0:	df000015 	stw	fp,0(sp)
     3f4:	d839883a 	mov	fp,sp

}
     3f8:	e037883a 	mov	sp,fp
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00104 	addi	sp,sp,4
     404:	f800283a 	ret

00000408 <create_thread>:
void create_thread(){
     408:	deffff04 	addi	sp,sp,-4
     40c:	df000015 	stw	fp,0(sp)
     410:	d839883a 	mov	fp,sp

}
     414:	e037883a 	mov	sp,fp
     418:	df000017 	ldw	fp,0(sp)
     41c:	dec00104 	addi	sp,sp,4
     420:	f800283a 	ret

00000424 <udivmodsi4>:
     424:	29001b2e 	bgeu	r5,r4,494 <udivmodsi4+0x70>
     428:	28001a16 	blt	r5,zero,494 <udivmodsi4+0x70>
     42c:	00800044 	movi	r2,1
     430:	0007883a 	mov	r3,zero
     434:	01c007c4 	movi	r7,31
     438:	00000306 	br	448 <udivmodsi4+0x24>
     43c:	19c01326 	beq	r3,r7,48c <udivmodsi4+0x68>
     440:	18c00044 	addi	r3,r3,1
     444:	28000416 	blt	r5,zero,458 <udivmodsi4+0x34>
     448:	294b883a 	add	r5,r5,r5
     44c:	1085883a 	add	r2,r2,r2
     450:	293ffa36 	bltu	r5,r4,43c <udivmodsi4+0x18>
     454:	10000d26 	beq	r2,zero,48c <udivmodsi4+0x68>
     458:	0007883a 	mov	r3,zero
     45c:	21400236 	bltu	r4,r5,468 <udivmodsi4+0x44>
     460:	2149c83a 	sub	r4,r4,r5
     464:	1886b03a 	or	r3,r3,r2
     468:	1004d07a 	srli	r2,r2,1
     46c:	280ad07a 	srli	r5,r5,1
     470:	103ffa1e 	bne	r2,zero,45c <udivmodsi4+0x38>
     474:	30000226 	beq	r6,zero,480 <udivmodsi4+0x5c>
     478:	2005883a 	mov	r2,r4
     47c:	f800283a 	ret
     480:	1809883a 	mov	r4,r3
     484:	2005883a 	mov	r2,r4
     488:	f800283a 	ret
     48c:	0007883a 	mov	r3,zero
     490:	003ff806 	br	474 <udivmodsi4+0x50>
     494:	00800044 	movi	r2,1
     498:	0007883a 	mov	r3,zero
     49c:	003fef06 	br	45c <udivmodsi4+0x38>

000004a0 <__divsi3>:
     4a0:	defffe04 	addi	sp,sp,-8
     4a4:	dc000015 	stw	r16,0(sp)
     4a8:	dfc00115 	stw	ra,4(sp)
     4ac:	0021883a 	mov	r16,zero
     4b0:	20000c16 	blt	r4,zero,4e4 <__divsi3+0x44>
     4b4:	000d883a 	mov	r6,zero
     4b8:	28000e16 	blt	r5,zero,4f4 <__divsi3+0x54>
     4bc:	00004240 	call	424 <udivmodsi4>
     4c0:	1007883a 	mov	r3,r2
     4c4:	8005003a 	cmpeq	r2,r16,zero
     4c8:	1000011e 	bne	r2,zero,4d0 <__divsi3+0x30>
     4cc:	00c7c83a 	sub	r3,zero,r3
     4d0:	1805883a 	mov	r2,r3
     4d4:	dfc00117 	ldw	ra,4(sp)
     4d8:	dc000017 	ldw	r16,0(sp)
     4dc:	dec00204 	addi	sp,sp,8
     4e0:	f800283a 	ret
     4e4:	0109c83a 	sub	r4,zero,r4
     4e8:	04000044 	movi	r16,1
     4ec:	000d883a 	mov	r6,zero
     4f0:	283ff20e 	bge	r5,zero,4bc <__divsi3+0x1c>
     4f4:	014bc83a 	sub	r5,zero,r5
     4f8:	8021003a 	cmpeq	r16,r16,zero
     4fc:	003fef06 	br	4bc <__divsi3+0x1c>

00000500 <__modsi3>:
     500:	deffff04 	addi	sp,sp,-4
     504:	dfc00015 	stw	ra,0(sp)
     508:	01800044 	movi	r6,1
     50c:	2807883a 	mov	r3,r5
     510:	20000416 	blt	r4,zero,524 <__modsi3+0x24>
     514:	28000c16 	blt	r5,zero,548 <__modsi3+0x48>
     518:	dfc00017 	ldw	ra,0(sp)
     51c:	dec00104 	addi	sp,sp,4
     520:	00004241 	jmpi	424 <udivmodsi4>
     524:	0109c83a 	sub	r4,zero,r4
     528:	28000b16 	blt	r5,zero,558 <__modsi3+0x58>
     52c:	180b883a 	mov	r5,r3
     530:	01800044 	movi	r6,1
     534:	00004240 	call	424 <udivmodsi4>
     538:	0085c83a 	sub	r2,zero,r2
     53c:	dfc00017 	ldw	ra,0(sp)
     540:	dec00104 	addi	sp,sp,4
     544:	f800283a 	ret
     548:	014bc83a 	sub	r5,zero,r5
     54c:	dfc00017 	ldw	ra,0(sp)
     550:	dec00104 	addi	sp,sp,4
     554:	00004241 	jmpi	424 <udivmodsi4>
     558:	0147c83a 	sub	r3,zero,r5
     55c:	003ff306 	br	52c <__modsi3+0x2c>

00000560 <__udivsi3>:
     560:	000d883a 	mov	r6,zero
     564:	00004241 	jmpi	424 <udivmodsi4>

00000568 <__umodsi3>:
     568:	01800044 	movi	r6,1
     56c:	00004241 	jmpi	424 <udivmodsi4>

00000570 <__mulsi3>:
     570:	20000a26 	beq	r4,zero,59c <__mulsi3+0x2c>
     574:	0007883a 	mov	r3,zero
     578:	2080004c 	andi	r2,r4,1
     57c:	1005003a 	cmpeq	r2,r2,zero
     580:	2008d07a 	srli	r4,r4,1
     584:	1000011e 	bne	r2,zero,58c <__mulsi3+0x1c>
     588:	1947883a 	add	r3,r3,r5
     58c:	294b883a 	add	r5,r5,r5
     590:	203ff91e 	bne	r4,zero,578 <__mulsi3+0x8>
     594:	1805883a 	mov	r2,r3
     598:	f800283a 	ret
     59c:	0007883a 	mov	r3,zero
     5a0:	1805883a 	mov	r2,r3
     5a4:	f800283a 	ret

000005a8 <free>:
     5a8:	00800074 	movhi	r2,1
     5ac:	10b96d04 	addi	r2,r2,-6732
     5b0:	200b883a 	mov	r5,r4
     5b4:	11000017 	ldw	r4,0(r2)
     5b8:	0004cbc1 	jmpi	4cbc <_free_r>

000005bc <malloc>:
     5bc:	00800074 	movhi	r2,1
     5c0:	10b96d04 	addi	r2,r2,-6732
     5c4:	200b883a 	mov	r5,r4
     5c8:	11000017 	ldw	r4,0(r2)
     5cc:	00005d01 	jmpi	5d0 <_malloc_r>

000005d0 <_malloc_r>:
     5d0:	defff604 	addi	sp,sp,-40
     5d4:	28c002c4 	addi	r3,r5,11
     5d8:	00800584 	movi	r2,22
     5dc:	dc800215 	stw	r18,8(sp)
     5e0:	dfc00915 	stw	ra,36(sp)
     5e4:	df000815 	stw	fp,32(sp)
     5e8:	ddc00715 	stw	r23,28(sp)
     5ec:	dd800615 	stw	r22,24(sp)
     5f0:	dd400515 	stw	r21,20(sp)
     5f4:	dd000415 	stw	r20,16(sp)
     5f8:	dcc00315 	stw	r19,12(sp)
     5fc:	dc400115 	stw	r17,4(sp)
     600:	dc000015 	stw	r16,0(sp)
     604:	2025883a 	mov	r18,r4
     608:	10c01236 	bltu	r2,r3,654 <_malloc_r+0x84>
     60c:	04400404 	movi	r17,16
     610:	8940142e 	bgeu	r17,r5,664 <_malloc_r+0x94>
     614:	00800304 	movi	r2,12
     618:	0007883a 	mov	r3,zero
     61c:	90800015 	stw	r2,0(r18)
     620:	1805883a 	mov	r2,r3
     624:	dfc00917 	ldw	ra,36(sp)
     628:	df000817 	ldw	fp,32(sp)
     62c:	ddc00717 	ldw	r23,28(sp)
     630:	dd800617 	ldw	r22,24(sp)
     634:	dd400517 	ldw	r21,20(sp)
     638:	dd000417 	ldw	r20,16(sp)
     63c:	dcc00317 	ldw	r19,12(sp)
     640:	dc800217 	ldw	r18,8(sp)
     644:	dc400117 	ldw	r17,4(sp)
     648:	dc000017 	ldw	r16,0(sp)
     64c:	dec00a04 	addi	sp,sp,40
     650:	f800283a 	ret
     654:	00bffe04 	movi	r2,-8
     658:	18a2703a 	and	r17,r3,r2
     65c:	883fed16 	blt	r17,zero,614 <_malloc_r+0x44>
     660:	897fec36 	bltu	r17,r5,614 <_malloc_r+0x44>
     664:	9009883a 	mov	r4,r18
     668:	000a5ec0 	call	a5ec <__malloc_lock>
     66c:	00807dc4 	movi	r2,503
     670:	14402b2e 	bgeu	r2,r17,720 <_malloc_r+0x150>
     674:	8806d27a 	srli	r3,r17,9
     678:	18003f1e 	bne	r3,zero,778 <_malloc_r+0x1a8>
     67c:	880cd0fa 	srli	r6,r17,3
     680:	300490fa 	slli	r2,r6,3
     684:	02c00074 	movhi	r11,1
     688:	5af2e404 	addi	r11,r11,-13424
     68c:	12cb883a 	add	r5,r2,r11
     690:	2c000317 	ldw	r16,12(r5)
     694:	580f883a 	mov	r7,r11
     698:	2c00041e 	bne	r5,r16,6ac <_malloc_r+0xdc>
     69c:	00000a06 	br	6c8 <_malloc_r+0xf8>
     6a0:	1800860e 	bge	r3,zero,8bc <_malloc_r+0x2ec>
     6a4:	84000317 	ldw	r16,12(r16)
     6a8:	2c000726 	beq	r5,r16,6c8 <_malloc_r+0xf8>
     6ac:	80800117 	ldw	r2,4(r16)
     6b0:	00ffff04 	movi	r3,-4
     6b4:	10c8703a 	and	r4,r2,r3
     6b8:	2447c83a 	sub	r3,r4,r17
     6bc:	008003c4 	movi	r2,15
     6c0:	10fff70e 	bge	r2,r3,6a0 <_malloc_r+0xd0>
     6c4:	31bfffc4 	addi	r6,r6,-1
     6c8:	32400044 	addi	r9,r6,1
     6cc:	02800074 	movhi	r10,1
     6d0:	52b2e604 	addi	r10,r10,-13416
     6d4:	54000217 	ldw	r16,8(r10)
     6d8:	8280a026 	beq	r16,r10,95c <_malloc_r+0x38c>
     6dc:	80800117 	ldw	r2,4(r16)
     6e0:	00ffff04 	movi	r3,-4
     6e4:	10ca703a 	and	r5,r2,r3
     6e8:	2c4dc83a 	sub	r6,r5,r17
     6ec:	008003c4 	movi	r2,15
     6f0:	11808316 	blt	r2,r6,900 <_malloc_r+0x330>
     6f4:	52800315 	stw	r10,12(r10)
     6f8:	52800215 	stw	r10,8(r10)
     6fc:	30002916 	blt	r6,zero,7a4 <_malloc_r+0x1d4>
     700:	8147883a 	add	r3,r16,r5
     704:	18800117 	ldw	r2,4(r3)
     708:	9009883a 	mov	r4,r18
     70c:	10800054 	ori	r2,r2,1
     710:	18800115 	stw	r2,4(r3)
     714:	000a60c0 	call	a60c <__malloc_unlock>
     718:	80c00204 	addi	r3,r16,8
     71c:	003fc006 	br	620 <_malloc_r+0x50>
     720:	02c00074 	movhi	r11,1
     724:	5af2e404 	addi	r11,r11,-13424
     728:	8ac5883a 	add	r2,r17,r11
     72c:	14000317 	ldw	r16,12(r2)
     730:	580f883a 	mov	r7,r11
     734:	8806d0fa 	srli	r3,r17,3
     738:	14006c26 	beq	r2,r16,8ec <_malloc_r+0x31c>
     73c:	80c00117 	ldw	r3,4(r16)
     740:	00bfff04 	movi	r2,-4
     744:	81800317 	ldw	r6,12(r16)
     748:	1886703a 	and	r3,r3,r2
     74c:	80c7883a 	add	r3,r16,r3
     750:	18800117 	ldw	r2,4(r3)
     754:	81400217 	ldw	r5,8(r16)
     758:	9009883a 	mov	r4,r18
     75c:	10800054 	ori	r2,r2,1
     760:	18800115 	stw	r2,4(r3)
     764:	31400215 	stw	r5,8(r6)
     768:	29800315 	stw	r6,12(r5)
     76c:	000a60c0 	call	a60c <__malloc_unlock>
     770:	80c00204 	addi	r3,r16,8
     774:	003faa06 	br	620 <_malloc_r+0x50>
     778:	00800104 	movi	r2,4
     77c:	10c0052e 	bgeu	r2,r3,794 <_malloc_r+0x1c4>
     780:	00800504 	movi	r2,20
     784:	10c07836 	bltu	r2,r3,968 <_malloc_r+0x398>
     788:	198016c4 	addi	r6,r3,91
     78c:	300490fa 	slli	r2,r6,3
     790:	003fbc06 	br	684 <_malloc_r+0xb4>
     794:	8804d1ba 	srli	r2,r17,6
     798:	11800e04 	addi	r6,r2,56
     79c:	300490fa 	slli	r2,r6,3
     7a0:	003fb806 	br	684 <_malloc_r+0xb4>
     7a4:	00807fc4 	movi	r2,511
     7a8:	1140bb36 	bltu	r2,r5,a98 <_malloc_r+0x4c8>
     7ac:	2806d0fa 	srli	r3,r5,3
     7b0:	573ffe04 	addi	fp,r10,-8
     7b4:	00800044 	movi	r2,1
     7b8:	180890fa 	slli	r4,r3,3
     7bc:	1807d0ba 	srai	r3,r3,2
     7c0:	e1c00117 	ldw	r7,4(fp)
     7c4:	5909883a 	add	r4,r11,r4
     7c8:	21400217 	ldw	r5,8(r4)
     7cc:	10c4983a 	sll	r2,r2,r3
     7d0:	81000315 	stw	r4,12(r16)
     7d4:	81400215 	stw	r5,8(r16)
     7d8:	388eb03a 	or	r7,r7,r2
     7dc:	2c000315 	stw	r16,12(r5)
     7e0:	24000215 	stw	r16,8(r4)
     7e4:	e1c00115 	stw	r7,4(fp)
     7e8:	4807883a 	mov	r3,r9
     7ec:	4800cd16 	blt	r9,zero,b24 <_malloc_r+0x554>
     7f0:	1807d0ba 	srai	r3,r3,2
     7f4:	00800044 	movi	r2,1
     7f8:	10c8983a 	sll	r4,r2,r3
     7fc:	39004436 	bltu	r7,r4,910 <_malloc_r+0x340>
     800:	21c4703a 	and	r2,r4,r7
     804:	10000a1e 	bne	r2,zero,830 <_malloc_r+0x260>
     808:	2109883a 	add	r4,r4,r4
     80c:	00bfff04 	movi	r2,-4
     810:	4884703a 	and	r2,r9,r2
     814:	3906703a 	and	r3,r7,r4
     818:	12400104 	addi	r9,r2,4
     81c:	1800041e 	bne	r3,zero,830 <_malloc_r+0x260>
     820:	2109883a 	add	r4,r4,r4
     824:	3904703a 	and	r2,r7,r4
     828:	4a400104 	addi	r9,r9,4
     82c:	103ffc26 	beq	r2,zero,820 <_malloc_r+0x250>
     830:	480490fa 	slli	r2,r9,3
     834:	4819883a 	mov	r12,r9
     838:	023fff04 	movi	r8,-4
     83c:	589b883a 	add	r13,r11,r2
     840:	6807883a 	mov	r3,r13
     844:	014003c4 	movi	r5,15
     848:	1c000317 	ldw	r16,12(r3)
     84c:	1c00041e 	bne	r3,r16,860 <_malloc_r+0x290>
     850:	0000a706 	br	af0 <_malloc_r+0x520>
     854:	3000ab0e 	bge	r6,zero,b04 <_malloc_r+0x534>
     858:	84000317 	ldw	r16,12(r16)
     85c:	1c00a426 	beq	r3,r16,af0 <_malloc_r+0x520>
     860:	80800117 	ldw	r2,4(r16)
     864:	1204703a 	and	r2,r2,r8
     868:	144dc83a 	sub	r6,r2,r17
     86c:	29bff90e 	bge	r5,r6,854 <_malloc_r+0x284>
     870:	81000317 	ldw	r4,12(r16)
     874:	80c00217 	ldw	r3,8(r16)
     878:	89400054 	ori	r5,r17,1
     87c:	8445883a 	add	r2,r16,r17
     880:	20c00215 	stw	r3,8(r4)
     884:	19000315 	stw	r4,12(r3)
     888:	81400115 	stw	r5,4(r16)
     88c:	1187883a 	add	r3,r2,r6
     890:	31000054 	ori	r4,r6,1
     894:	50800315 	stw	r2,12(r10)
     898:	50800215 	stw	r2,8(r10)
     89c:	19800015 	stw	r6,0(r3)
     8a0:	11000115 	stw	r4,4(r2)
     8a4:	12800215 	stw	r10,8(r2)
     8a8:	12800315 	stw	r10,12(r2)
     8ac:	9009883a 	mov	r4,r18
     8b0:	000a60c0 	call	a60c <__malloc_unlock>
     8b4:	80c00204 	addi	r3,r16,8
     8b8:	003f5906 	br	620 <_malloc_r+0x50>
     8bc:	8109883a 	add	r4,r16,r4
     8c0:	20800117 	ldw	r2,4(r4)
     8c4:	80c00217 	ldw	r3,8(r16)
     8c8:	81400317 	ldw	r5,12(r16)
     8cc:	10800054 	ori	r2,r2,1
     8d0:	20800115 	stw	r2,4(r4)
     8d4:	28c00215 	stw	r3,8(r5)
     8d8:	19400315 	stw	r5,12(r3)
     8dc:	9009883a 	mov	r4,r18
     8e0:	000a60c0 	call	a60c <__malloc_unlock>
     8e4:	80c00204 	addi	r3,r16,8
     8e8:	003f4d06 	br	620 <_malloc_r+0x50>
     8ec:	80800204 	addi	r2,r16,8
     8f0:	14000317 	ldw	r16,12(r2)
     8f4:	143f911e 	bne	r2,r16,73c <_malloc_r+0x16c>
     8f8:	1a400084 	addi	r9,r3,2
     8fc:	003f7306 	br	6cc <_malloc_r+0xfc>
     900:	88c00054 	ori	r3,r17,1
     904:	8445883a 	add	r2,r16,r17
     908:	80c00115 	stw	r3,4(r16)
     90c:	003fdf06 	br	88c <_malloc_r+0x2bc>
     910:	e4000217 	ldw	r16,8(fp)
     914:	00bfff04 	movi	r2,-4
     918:	80c00117 	ldw	r3,4(r16)
     91c:	802d883a 	mov	r22,r16
     920:	18aa703a 	and	r21,r3,r2
     924:	ac401636 	bltu	r21,r17,980 <_malloc_r+0x3b0>
     928:	ac49c83a 	sub	r4,r21,r17
     92c:	008003c4 	movi	r2,15
     930:	1100130e 	bge	r2,r4,980 <_malloc_r+0x3b0>
     934:	88800054 	ori	r2,r17,1
     938:	8447883a 	add	r3,r16,r17
     93c:	80800115 	stw	r2,4(r16)
     940:	20800054 	ori	r2,r4,1
     944:	18800115 	stw	r2,4(r3)
     948:	e0c00215 	stw	r3,8(fp)
     94c:	9009883a 	mov	r4,r18
     950:	000a60c0 	call	a60c <__malloc_unlock>
     954:	80c00204 	addi	r3,r16,8
     958:	003f3106 	br	620 <_malloc_r+0x50>
     95c:	39c00117 	ldw	r7,4(r7)
     960:	573ffe04 	addi	fp,r10,-8
     964:	003fa006 	br	7e8 <_malloc_r+0x218>
     968:	00801504 	movi	r2,84
     96c:	10c06736 	bltu	r2,r3,b0c <_malloc_r+0x53c>
     970:	8804d33a 	srli	r2,r17,12
     974:	11801b84 	addi	r6,r2,110
     978:	300490fa 	slli	r2,r6,3
     97c:	003f4106 	br	684 <_malloc_r+0xb4>
     980:	d0a6a917 	ldw	r2,-25948(gp)
     984:	d0e00117 	ldw	r3,-32764(gp)
     988:	053fffc4 	movi	r20,-1
     98c:	10800404 	addi	r2,r2,16
     990:	88a7883a 	add	r19,r17,r2
     994:	1d000326 	beq	r3,r20,9a4 <_malloc_r+0x3d4>
     998:	98c3ffc4 	addi	r3,r19,4095
     99c:	00bc0004 	movi	r2,-4096
     9a0:	18a6703a 	and	r19,r3,r2
     9a4:	9009883a 	mov	r4,r18
     9a8:	980b883a 	mov	r5,r19
     9ac:	0000d880 	call	d88 <_sbrk_r>
     9b0:	1009883a 	mov	r4,r2
     9b4:	15000426 	beq	r2,r20,9c8 <_malloc_r+0x3f8>
     9b8:	854b883a 	add	r5,r16,r21
     9bc:	1029883a 	mov	r20,r2
     9c0:	11405a2e 	bgeu	r2,r5,b2c <_malloc_r+0x55c>
     9c4:	87000c26 	beq	r16,fp,9f8 <_malloc_r+0x428>
     9c8:	e4000217 	ldw	r16,8(fp)
     9cc:	80c00117 	ldw	r3,4(r16)
     9d0:	00bfff04 	movi	r2,-4
     9d4:	1884703a 	and	r2,r3,r2
     9d8:	14400336 	bltu	r2,r17,9e8 <_malloc_r+0x418>
     9dc:	1449c83a 	sub	r4,r2,r17
     9e0:	008003c4 	movi	r2,15
     9e4:	113fd316 	blt	r2,r4,934 <_malloc_r+0x364>
     9e8:	9009883a 	mov	r4,r18
     9ec:	000a60c0 	call	a60c <__malloc_unlock>
     9f0:	0007883a 	mov	r3,zero
     9f4:	003f0a06 	br	620 <_malloc_r+0x50>
     9f8:	05c00074 	movhi	r23,1
     9fc:	bdc02104 	addi	r23,r23,132
     a00:	b8800017 	ldw	r2,0(r23)
     a04:	988d883a 	add	r6,r19,r2
     a08:	b9800015 	stw	r6,0(r23)
     a0c:	d0e00117 	ldw	r3,-32764(gp)
     a10:	00bfffc4 	movi	r2,-1
     a14:	18808e26 	beq	r3,r2,c50 <_malloc_r+0x680>
     a18:	2145c83a 	sub	r2,r4,r5
     a1c:	3085883a 	add	r2,r6,r2
     a20:	b8800015 	stw	r2,0(r23)
     a24:	20c001cc 	andi	r3,r4,7
     a28:	18005f1e 	bne	r3,zero,ba8 <_malloc_r+0x5d8>
     a2c:	000b883a 	mov	r5,zero
     a30:	a4c5883a 	add	r2,r20,r19
     a34:	1083ffcc 	andi	r2,r2,4095
     a38:	00c40004 	movi	r3,4096
     a3c:	1887c83a 	sub	r3,r3,r2
     a40:	28e7883a 	add	r19,r5,r3
     a44:	9009883a 	mov	r4,r18
     a48:	980b883a 	mov	r5,r19
     a4c:	0000d880 	call	d88 <_sbrk_r>
     a50:	1007883a 	mov	r3,r2
     a54:	00bfffc4 	movi	r2,-1
     a58:	18807a26 	beq	r3,r2,c44 <_malloc_r+0x674>
     a5c:	1d05c83a 	sub	r2,r3,r20
     a60:	9885883a 	add	r2,r19,r2
     a64:	10c00054 	ori	r3,r2,1
     a68:	b8800017 	ldw	r2,0(r23)
     a6c:	a021883a 	mov	r16,r20
     a70:	a0c00115 	stw	r3,4(r20)
     a74:	9885883a 	add	r2,r19,r2
     a78:	b8800015 	stw	r2,0(r23)
     a7c:	e5000215 	stw	r20,8(fp)
     a80:	b7003626 	beq	r22,fp,b5c <_malloc_r+0x58c>
     a84:	018003c4 	movi	r6,15
     a88:	35404b36 	bltu	r6,r21,bb8 <_malloc_r+0x5e8>
     a8c:	00800044 	movi	r2,1
     a90:	a0800115 	stw	r2,4(r20)
     a94:	003fcd06 	br	9cc <_malloc_r+0x3fc>
     a98:	2808d27a 	srli	r4,r5,9
     a9c:	2000371e 	bne	r4,zero,b7c <_malloc_r+0x5ac>
     aa0:	2808d0fa 	srli	r4,r5,3
     aa4:	200690fa 	slli	r3,r4,3
     aa8:	1ad1883a 	add	r8,r3,r11
     aac:	41800217 	ldw	r6,8(r8)
     ab0:	41805b26 	beq	r8,r6,c20 <_malloc_r+0x650>
     ab4:	30800117 	ldw	r2,4(r6)
     ab8:	00ffff04 	movi	r3,-4
     abc:	10c4703a 	and	r2,r2,r3
     ac0:	2880022e 	bgeu	r5,r2,acc <_malloc_r+0x4fc>
     ac4:	31800217 	ldw	r6,8(r6)
     ac8:	41bffa1e 	bne	r8,r6,ab4 <_malloc_r+0x4e4>
     acc:	32000317 	ldw	r8,12(r6)
     ad0:	39c00117 	ldw	r7,4(r7)
     ad4:	82000315 	stw	r8,12(r16)
     ad8:	81800215 	stw	r6,8(r16)
     adc:	07000074 	movhi	fp,1
     ae0:	e732e404 	addi	fp,fp,-13424
     ae4:	34000315 	stw	r16,12(r6)
     ae8:	44000215 	stw	r16,8(r8)
     aec:	003f3e06 	br	7e8 <_malloc_r+0x218>
     af0:	63000044 	addi	r12,r12,1
     af4:	608000cc 	andi	r2,r12,3
     af8:	10005d26 	beq	r2,zero,c70 <_malloc_r+0x6a0>
     afc:	18c00204 	addi	r3,r3,8
     b00:	003f5106 	br	848 <_malloc_r+0x278>
     b04:	8089883a 	add	r4,r16,r2
     b08:	003f6d06 	br	8c0 <_malloc_r+0x2f0>
     b0c:	00805504 	movi	r2,340
     b10:	10c02036 	bltu	r2,r3,b94 <_malloc_r+0x5c4>
     b14:	8804d3fa 	srli	r2,r17,15
     b18:	11801dc4 	addi	r6,r2,119
     b1c:	300490fa 	slli	r2,r6,3
     b20:	003ed806 	br	684 <_malloc_r+0xb4>
     b24:	48c000c4 	addi	r3,r9,3
     b28:	003f3106 	br	7f0 <_malloc_r+0x220>
     b2c:	05c00074 	movhi	r23,1
     b30:	bdc02104 	addi	r23,r23,132
     b34:	b8800017 	ldw	r2,0(r23)
     b38:	988d883a 	add	r6,r19,r2
     b3c:	b9800015 	stw	r6,0(r23)
     b40:	293fb21e 	bne	r5,r4,a0c <_malloc_r+0x43c>
     b44:	2083ffcc 	andi	r2,r4,4095
     b48:	103fb01e 	bne	r2,zero,a0c <_malloc_r+0x43c>
     b4c:	e4000217 	ldw	r16,8(fp)
     b50:	9d45883a 	add	r2,r19,r21
     b54:	10800054 	ori	r2,r2,1
     b58:	80800115 	stw	r2,4(r16)
     b5c:	b8c00017 	ldw	r3,0(r23)
     b60:	d0a6aa17 	ldw	r2,-25944(gp)
     b64:	10c0012e 	bgeu	r2,r3,b6c <_malloc_r+0x59c>
     b68:	d0e6aa15 	stw	r3,-25944(gp)
     b6c:	d0a6ab17 	ldw	r2,-25940(gp)
     b70:	10ff962e 	bgeu	r2,r3,9cc <_malloc_r+0x3fc>
     b74:	d0e6ab15 	stw	r3,-25940(gp)
     b78:	003f9406 	br	9cc <_malloc_r+0x3fc>
     b7c:	00800104 	movi	r2,4
     b80:	11001e36 	bltu	r2,r4,bfc <_malloc_r+0x62c>
     b84:	2804d1ba 	srli	r2,r5,6
     b88:	11000e04 	addi	r4,r2,56
     b8c:	200690fa 	slli	r3,r4,3
     b90:	003fc506 	br	aa8 <_malloc_r+0x4d8>
     b94:	00815504 	movi	r2,1364
     b98:	10c01d2e 	bgeu	r2,r3,c10 <_malloc_r+0x640>
     b9c:	01801f84 	movi	r6,126
     ba0:	0080fc04 	movi	r2,1008
     ba4:	003eb706 	br	684 <_malloc_r+0xb4>
     ba8:	00800204 	movi	r2,8
     bac:	10cbc83a 	sub	r5,r2,r3
     bb0:	2169883a 	add	r20,r4,r5
     bb4:	003f9e06 	br	a30 <_malloc_r+0x460>
     bb8:	00bffe04 	movi	r2,-8
     bbc:	a93ffd04 	addi	r4,r21,-12
     bc0:	2088703a 	and	r4,r4,r2
     bc4:	b10b883a 	add	r5,r22,r4
     bc8:	00c00144 	movi	r3,5
     bcc:	28c00215 	stw	r3,8(r5)
     bd0:	28c00115 	stw	r3,4(r5)
     bd4:	b0800117 	ldw	r2,4(r22)
     bd8:	1080004c 	andi	r2,r2,1
     bdc:	2084b03a 	or	r2,r4,r2
     be0:	b0800115 	stw	r2,4(r22)
     be4:	313fdd2e 	bgeu	r6,r4,b5c <_malloc_r+0x58c>
     be8:	b1400204 	addi	r5,r22,8
     bec:	9009883a 	mov	r4,r18
     bf0:	0004cbc0 	call	4cbc <_free_r>
     bf4:	e4000217 	ldw	r16,8(fp)
     bf8:	003fd806 	br	b5c <_malloc_r+0x58c>
     bfc:	00800504 	movi	r2,20
     c00:	11001536 	bltu	r2,r4,c58 <_malloc_r+0x688>
     c04:	210016c4 	addi	r4,r4,91
     c08:	200690fa 	slli	r3,r4,3
     c0c:	003fa606 	br	aa8 <_malloc_r+0x4d8>
     c10:	8804d4ba 	srli	r2,r17,18
     c14:	11801f04 	addi	r6,r2,124
     c18:	300490fa 	slli	r2,r6,3
     c1c:	003e9906 	br	684 <_malloc_r+0xb4>
     c20:	2009d0ba 	srai	r4,r4,2
     c24:	01400074 	movhi	r5,1
     c28:	2972e404 	addi	r5,r5,-13424
     c2c:	00c00044 	movi	r3,1
     c30:	28800117 	ldw	r2,4(r5)
     c34:	1906983a 	sll	r3,r3,r4
     c38:	10c4b03a 	or	r2,r2,r3
     c3c:	28800115 	stw	r2,4(r5)
     c40:	003fa306 	br	ad0 <_malloc_r+0x500>
     c44:	0027883a 	mov	r19,zero
     c48:	00c00044 	movi	r3,1
     c4c:	003f8606 	br	a68 <_malloc_r+0x498>
     c50:	d1200115 	stw	r4,-32764(gp)
     c54:	003f7306 	br	a24 <_malloc_r+0x454>
     c58:	00801504 	movi	r2,84
     c5c:	11001936 	bltu	r2,r4,cc4 <_malloc_r+0x6f4>
     c60:	2804d33a 	srli	r2,r5,12
     c64:	11001b84 	addi	r4,r2,110
     c68:	200690fa 	slli	r3,r4,3
     c6c:	003f8e06 	br	aa8 <_malloc_r+0x4d8>
     c70:	480b883a 	mov	r5,r9
     c74:	6807883a 	mov	r3,r13
     c78:	288000cc 	andi	r2,r5,3
     c7c:	18fffe04 	addi	r3,r3,-8
     c80:	297fffc4 	addi	r5,r5,-1
     c84:	10001526 	beq	r2,zero,cdc <_malloc_r+0x70c>
     c88:	18800217 	ldw	r2,8(r3)
     c8c:	10fffa26 	beq	r2,r3,c78 <_malloc_r+0x6a8>
     c90:	2109883a 	add	r4,r4,r4
     c94:	393f1e36 	bltu	r7,r4,910 <_malloc_r+0x340>
     c98:	203f1d26 	beq	r4,zero,910 <_malloc_r+0x340>
     c9c:	21c4703a 	and	r2,r4,r7
     ca0:	10000226 	beq	r2,zero,cac <_malloc_r+0x6dc>
     ca4:	6013883a 	mov	r9,r12
     ca8:	003ee106 	br	830 <_malloc_r+0x260>
     cac:	2109883a 	add	r4,r4,r4
     cb0:	3904703a 	and	r2,r7,r4
     cb4:	63000104 	addi	r12,r12,4
     cb8:	103ffc26 	beq	r2,zero,cac <_malloc_r+0x6dc>
     cbc:	6013883a 	mov	r9,r12
     cc0:	003edb06 	br	830 <_malloc_r+0x260>
     cc4:	00805504 	movi	r2,340
     cc8:	11000836 	bltu	r2,r4,cec <_malloc_r+0x71c>
     ccc:	2804d3fa 	srli	r2,r5,15
     cd0:	11001dc4 	addi	r4,r2,119
     cd4:	200690fa 	slli	r3,r4,3
     cd8:	003f7306 	br	aa8 <_malloc_r+0x4d8>
     cdc:	0104303a 	nor	r2,zero,r4
     ce0:	388e703a 	and	r7,r7,r2
     ce4:	e1c00115 	stw	r7,4(fp)
     ce8:	003fe906 	br	c90 <_malloc_r+0x6c0>
     cec:	00815504 	movi	r2,1364
     cf0:	1100032e 	bgeu	r2,r4,d00 <_malloc_r+0x730>
     cf4:	01001f84 	movi	r4,126
     cf8:	00c0fc04 	movi	r3,1008
     cfc:	003f6a06 	br	aa8 <_malloc_r+0x4d8>
     d00:	2804d4ba 	srli	r2,r5,18
     d04:	11001f04 	addi	r4,r2,124
     d08:	200690fa 	slli	r3,r4,3
     d0c:	003f6606 	br	aa8 <_malloc_r+0x4d8>

00000d10 <printf>:
     d10:	defffb04 	addi	sp,sp,-20
     d14:	dfc00115 	stw	ra,4(sp)
     d18:	d9400215 	stw	r5,8(sp)
     d1c:	d9800315 	stw	r6,12(sp)
     d20:	d9c00415 	stw	r7,16(sp)
     d24:	00800074 	movhi	r2,1
     d28:	10b96d04 	addi	r2,r2,-6732
     d2c:	10c00017 	ldw	r3,0(r2)
     d30:	200b883a 	mov	r5,r4
     d34:	d8800204 	addi	r2,sp,8
     d38:	19000217 	ldw	r4,8(r3)
     d3c:	100d883a 	mov	r6,r2
     d40:	d8800015 	stw	r2,0(sp)
     d44:	0002d140 	call	2d14 <__vfprintf_internal>
     d48:	dfc00117 	ldw	ra,4(sp)
     d4c:	dec00504 	addi	sp,sp,20
     d50:	f800283a 	ret

00000d54 <_printf_r>:
     d54:	defffc04 	addi	sp,sp,-16
     d58:	dfc00115 	stw	ra,4(sp)
     d5c:	d9800215 	stw	r6,8(sp)
     d60:	d9c00315 	stw	r7,12(sp)
     d64:	280d883a 	mov	r6,r5
     d68:	21400217 	ldw	r5,8(r4)
     d6c:	d8c00204 	addi	r3,sp,8
     d70:	180f883a 	mov	r7,r3
     d74:	d8c00015 	stw	r3,0(sp)
     d78:	0000e500 	call	e50 <___vfprintf_internal_r>
     d7c:	dfc00117 	ldw	ra,4(sp)
     d80:	dec00404 	addi	sp,sp,16
     d84:	f800283a 	ret

00000d88 <_sbrk_r>:
     d88:	defffd04 	addi	sp,sp,-12
     d8c:	dc000015 	stw	r16,0(sp)
     d90:	04000074 	movhi	r16,1
     d94:	84001704 	addi	r16,r16,92
     d98:	dc400115 	stw	r17,4(sp)
     d9c:	80000015 	stw	zero,0(r16)
     da0:	2023883a 	mov	r17,r4
     da4:	2809883a 	mov	r4,r5
     da8:	dfc00215 	stw	ra,8(sp)
     dac:	000a8280 	call	a828 <sbrk>
     db0:	1007883a 	mov	r3,r2
     db4:	00bfffc4 	movi	r2,-1
     db8:	18800626 	beq	r3,r2,dd4 <_sbrk_r+0x4c>
     dbc:	1805883a 	mov	r2,r3
     dc0:	dfc00217 	ldw	ra,8(sp)
     dc4:	dc400117 	ldw	r17,4(sp)
     dc8:	dc000017 	ldw	r16,0(sp)
     dcc:	dec00304 	addi	sp,sp,12
     dd0:	f800283a 	ret
     dd4:	80800017 	ldw	r2,0(r16)
     dd8:	103ff826 	beq	r2,zero,dbc <_sbrk_r+0x34>
     ddc:	88800015 	stw	r2,0(r17)
     de0:	1805883a 	mov	r2,r3
     de4:	dfc00217 	ldw	ra,8(sp)
     de8:	dc400117 	ldw	r17,4(sp)
     dec:	dc000017 	ldw	r16,0(sp)
     df0:	dec00304 	addi	sp,sp,12
     df4:	f800283a 	ret

00000df8 <__sprint_r>:
     df8:	30800217 	ldw	r2,8(r6)
     dfc:	defffe04 	addi	sp,sp,-8
     e00:	dc000015 	stw	r16,0(sp)
     e04:	dfc00115 	stw	ra,4(sp)
     e08:	3021883a 	mov	r16,r6
     e0c:	0007883a 	mov	r3,zero
     e10:	1000061e 	bne	r2,zero,e2c <__sprint_r+0x34>
     e14:	1805883a 	mov	r2,r3
     e18:	30000115 	stw	zero,4(r6)
     e1c:	dfc00117 	ldw	ra,4(sp)
     e20:	dc000017 	ldw	r16,0(sp)
     e24:	dec00204 	addi	sp,sp,8
     e28:	f800283a 	ret
     e2c:	0004fd00 	call	4fd0 <__sfvwrite_r>
     e30:	1007883a 	mov	r3,r2
     e34:	1805883a 	mov	r2,r3
     e38:	80000115 	stw	zero,4(r16)
     e3c:	80000215 	stw	zero,8(r16)
     e40:	dfc00117 	ldw	ra,4(sp)
     e44:	dc000017 	ldw	r16,0(sp)
     e48:	dec00204 	addi	sp,sp,8
     e4c:	f800283a 	ret

00000e50 <___vfprintf_internal_r>:
     e50:	defea404 	addi	sp,sp,-1392
     e54:	dd815815 	stw	r22,1376(sp)
     e58:	dc015215 	stw	r16,1352(sp)
     e5c:	d9c15115 	stw	r7,1348(sp)
     e60:	dfc15b15 	stw	ra,1388(sp)
     e64:	df015a15 	stw	fp,1384(sp)
     e68:	ddc15915 	stw	r23,1380(sp)
     e6c:	dd415715 	stw	r21,1372(sp)
     e70:	dd015615 	stw	r20,1368(sp)
     e74:	dcc15515 	stw	r19,1364(sp)
     e78:	dc815415 	stw	r18,1360(sp)
     e7c:	dc415315 	stw	r17,1356(sp)
     e80:	282d883a 	mov	r22,r5
     e84:	3021883a 	mov	r16,r6
     e88:	d9014f15 	stw	r4,1340(sp)
     e8c:	00055f40 	call	55f4 <_localeconv_r>
     e90:	10800017 	ldw	r2,0(r2)
     e94:	d9c15117 	ldw	r7,1348(sp)
     e98:	d8814915 	stw	r2,1316(sp)
     e9c:	d8814f17 	ldw	r2,1340(sp)
     ea0:	10000226 	beq	r2,zero,eac <___vfprintf_internal_r+0x5c>
     ea4:	10800e17 	ldw	r2,56(r2)
     ea8:	10020d26 	beq	r2,zero,16e0 <___vfprintf_internal_r+0x890>
     eac:	b080030b 	ldhu	r2,12(r22)
     eb0:	1080020c 	andi	r2,r2,8
     eb4:	10020e26 	beq	r2,zero,16f0 <___vfprintf_internal_r+0x8a0>
     eb8:	b0800417 	ldw	r2,16(r22)
     ebc:	10020c26 	beq	r2,zero,16f0 <___vfprintf_internal_r+0x8a0>
     ec0:	b200030b 	ldhu	r8,12(r22)
     ec4:	00800284 	movi	r2,10
     ec8:	40c0068c 	andi	r3,r8,26
     ecc:	18802f1e 	bne	r3,r2,f8c <___vfprintf_internal_r+0x13c>
     ed0:	b080038f 	ldh	r2,14(r22)
     ed4:	10002d16 	blt	r2,zero,f8c <___vfprintf_internal_r+0x13c>
     ed8:	b240038b 	ldhu	r9,14(r22)
     edc:	b2800717 	ldw	r10,28(r22)
     ee0:	b2c00917 	ldw	r11,36(r22)
     ee4:	d9014f17 	ldw	r4,1340(sp)
     ee8:	dc402904 	addi	r17,sp,164
     eec:	d8804004 	addi	r2,sp,256
     ef0:	00c10004 	movi	r3,1024
     ef4:	423fff4c 	andi	r8,r8,65533
     ef8:	800d883a 	mov	r6,r16
     efc:	880b883a 	mov	r5,r17
     f00:	da002c0d 	sth	r8,176(sp)
     f04:	da402c8d 	sth	r9,178(sp)
     f08:	da803015 	stw	r10,192(sp)
     f0c:	dac03215 	stw	r11,200(sp)
     f10:	d8802d15 	stw	r2,180(sp)
     f14:	d8c02e15 	stw	r3,184(sp)
     f18:	d8802915 	stw	r2,164(sp)
     f1c:	d8c02b15 	stw	r3,172(sp)
     f20:	d8002f15 	stw	zero,188(sp)
     f24:	0000e500 	call	e50 <___vfprintf_internal_r>
     f28:	d8814b15 	stw	r2,1324(sp)
     f2c:	10000416 	blt	r2,zero,f40 <___vfprintf_internal_r+0xf0>
     f30:	d9014f17 	ldw	r4,1340(sp)
     f34:	880b883a 	mov	r5,r17
     f38:	000466c0 	call	466c <_fflush_r>
     f3c:	1002321e 	bne	r2,zero,1808 <___vfprintf_internal_r+0x9b8>
     f40:	d8802c0b 	ldhu	r2,176(sp)
     f44:	1080100c 	andi	r2,r2,64
     f48:	10000326 	beq	r2,zero,f58 <___vfprintf_internal_r+0x108>
     f4c:	b080030b 	ldhu	r2,12(r22)
     f50:	10801014 	ori	r2,r2,64
     f54:	b080030d 	sth	r2,12(r22)
     f58:	d8814b17 	ldw	r2,1324(sp)
     f5c:	dfc15b17 	ldw	ra,1388(sp)
     f60:	df015a17 	ldw	fp,1384(sp)
     f64:	ddc15917 	ldw	r23,1380(sp)
     f68:	dd815817 	ldw	r22,1376(sp)
     f6c:	dd415717 	ldw	r21,1372(sp)
     f70:	dd015617 	ldw	r20,1368(sp)
     f74:	dcc15517 	ldw	r19,1364(sp)
     f78:	dc815417 	ldw	r18,1360(sp)
     f7c:	dc415317 	ldw	r17,1356(sp)
     f80:	dc015217 	ldw	r16,1352(sp)
     f84:	dec15c04 	addi	sp,sp,1392
     f88:	f800283a 	ret
     f8c:	0005883a 	mov	r2,zero
     f90:	0007883a 	mov	r3,zero
     f94:	dd401904 	addi	r21,sp,100
     f98:	d8814215 	stw	r2,1288(sp)
     f9c:	802f883a 	mov	r23,r16
     fa0:	d8c14315 	stw	r3,1292(sp)
     fa4:	d8014b15 	stw	zero,1324(sp)
     fa8:	d8014815 	stw	zero,1312(sp)
     fac:	d8014415 	stw	zero,1296(sp)
     fb0:	d8014715 	stw	zero,1308(sp)
     fb4:	dd400c15 	stw	r21,48(sp)
     fb8:	d8000e15 	stw	zero,56(sp)
     fbc:	d8000d15 	stw	zero,52(sp)
     fc0:	b8800007 	ldb	r2,0(r23)
     fc4:	10001926 	beq	r2,zero,102c <___vfprintf_internal_r+0x1dc>
     fc8:	00c00944 	movi	r3,37
     fcc:	10c01726 	beq	r2,r3,102c <___vfprintf_internal_r+0x1dc>
     fd0:	b821883a 	mov	r16,r23
     fd4:	00000106 	br	fdc <___vfprintf_internal_r+0x18c>
     fd8:	10c00326 	beq	r2,r3,fe8 <___vfprintf_internal_r+0x198>
     fdc:	84000044 	addi	r16,r16,1
     fe0:	80800007 	ldb	r2,0(r16)
     fe4:	103ffc1e 	bne	r2,zero,fd8 <___vfprintf_internal_r+0x188>
     fe8:	85e7c83a 	sub	r19,r16,r23
     fec:	98000e26 	beq	r19,zero,1028 <___vfprintf_internal_r+0x1d8>
     ff0:	dc800e17 	ldw	r18,56(sp)
     ff4:	dc400d17 	ldw	r17,52(sp)
     ff8:	008001c4 	movi	r2,7
     ffc:	94e5883a 	add	r18,r18,r19
    1000:	8c400044 	addi	r17,r17,1
    1004:	adc00015 	stw	r23,0(r21)
    1008:	dc800e15 	stw	r18,56(sp)
    100c:	acc00115 	stw	r19,4(r21)
    1010:	dc400d15 	stw	r17,52(sp)
    1014:	14428b16 	blt	r2,r17,1a44 <___vfprintf_internal_r+0xbf4>
    1018:	ad400204 	addi	r21,r21,8
    101c:	d9014b17 	ldw	r4,1324(sp)
    1020:	24c9883a 	add	r4,r4,r19
    1024:	d9014b15 	stw	r4,1324(sp)
    1028:	802f883a 	mov	r23,r16
    102c:	b8800007 	ldb	r2,0(r23)
    1030:	10013c26 	beq	r2,zero,1524 <___vfprintf_internal_r+0x6d4>
    1034:	bdc00044 	addi	r23,r23,1
    1038:	d8000405 	stb	zero,16(sp)
    103c:	b8c00007 	ldb	r3,0(r23)
    1040:	04ffffc4 	movi	r19,-1
    1044:	d8014c15 	stw	zero,1328(sp)
    1048:	d8014a15 	stw	zero,1320(sp)
    104c:	d8c14d15 	stw	r3,1332(sp)
    1050:	bdc00044 	addi	r23,r23,1
    1054:	d9414d17 	ldw	r5,1332(sp)
    1058:	00801604 	movi	r2,88
    105c:	28fff804 	addi	r3,r5,-32
    1060:	10c06036 	bltu	r2,r3,11e4 <___vfprintf_internal_r+0x394>
    1064:	18c5883a 	add	r2,r3,r3
    1068:	1085883a 	add	r2,r2,r2
    106c:	00c00034 	movhi	r3,0
    1070:	18c42004 	addi	r3,r3,4224
    1074:	10c5883a 	add	r2,r2,r3
    1078:	11000017 	ldw	r4,0(r2)
    107c:	2000683a 	jmp	r4
    1080:	00001ff4 	movhi	zero,127
    1084:	000011e4 	muli	zero,zero,71
    1088:	000011e4 	muli	zero,zero,71
    108c:	00001fe0 	cmpeqi	zero,zero,127
    1090:	000011e4 	muli	zero,zero,71
    1094:	000011e4 	muli	zero,zero,71
    1098:	000011e4 	muli	zero,zero,71
    109c:	000011e4 	muli	zero,zero,71
    10a0:	000011e4 	muli	zero,zero,71
    10a4:	000011e4 	muli	zero,zero,71
    10a8:	00001dc0 	call	1dc <_start+0x28>
    10ac:	00001fd0 	cmplti	zero,zero,127
    10b0:	000011e4 	muli	zero,zero,71
    10b4:	00001dd8 	cmpnei	zero,zero,119
    10b8:	00002078 	rdprs	zero,zero,129
    10bc:	000011e4 	muli	zero,zero,71
    10c0:	00002064 	muli	zero,zero,129
    10c4:	00002020 	cmpeqi	zero,zero,128
    10c8:	00002020 	cmpeqi	zero,zero,128
    10cc:	00002020 	cmpeqi	zero,zero,128
    10d0:	00002020 	cmpeqi	zero,zero,128
    10d4:	00002020 	cmpeqi	zero,zero,128
    10d8:	00002020 	cmpeqi	zero,zero,128
    10dc:	00002020 	cmpeqi	zero,zero,128
    10e0:	00002020 	cmpeqi	zero,zero,128
    10e4:	00002020 	cmpeqi	zero,zero,128
    10e8:	000011e4 	muli	zero,zero,71
    10ec:	000011e4 	muli	zero,zero,71
    10f0:	000011e4 	muli	zero,zero,71
    10f4:	000011e4 	muli	zero,zero,71
    10f8:	000011e4 	muli	zero,zero,71
    10fc:	000011e4 	muli	zero,zero,71
    1100:	000011e4 	muli	zero,zero,71
    1104:	000011e4 	muli	zero,zero,71
    1108:	000011e4 	muli	zero,zero,71
    110c:	000011e4 	muli	zero,zero,71
    1110:	0000183c 	xorhi	zero,zero,96
    1114:	00001ea8 	cmpgeui	zero,zero,122
    1118:	000011e4 	muli	zero,zero,71
    111c:	00001ea8 	cmpgeui	zero,zero,122
    1120:	000011e4 	muli	zero,zero,71
    1124:	000011e4 	muli	zero,zero,71
    1128:	000011e4 	muli	zero,zero,71
    112c:	000011e4 	muli	zero,zero,71
    1130:	0000200c 	andi	zero,zero,128
    1134:	000011e4 	muli	zero,zero,71
    1138:	000011e4 	muli	zero,zero,71
    113c:	000018f0 	cmpltui	zero,zero,99
    1140:	000011e4 	muli	zero,zero,71
    1144:	000011e4 	muli	zero,zero,71
    1148:	000011e4 	muli	zero,zero,71
    114c:	000011e4 	muli	zero,zero,71
    1150:	000011e4 	muli	zero,zero,71
    1154:	0000193c 	xorhi	zero,zero,100
    1158:	000011e4 	muli	zero,zero,71
    115c:	000011e4 	muli	zero,zero,71
    1160:	00001f5c 	xori	zero,zero,125
    1164:	000011e4 	muli	zero,zero,71
    1168:	000011e4 	muli	zero,zero,71
    116c:	000011e4 	muli	zero,zero,71
    1170:	000011e4 	muli	zero,zero,71
    1174:	000011e4 	muli	zero,zero,71
    1178:	000011e4 	muli	zero,zero,71
    117c:	000011e4 	muli	zero,zero,71
    1180:	000011e4 	muli	zero,zero,71
    1184:	000011e4 	muli	zero,zero,71
    1188:	000011e4 	muli	zero,zero,71
    118c:	00001f30 	cmpltui	zero,zero,124
    1190:	00001848 	cmpgei	zero,zero,97
    1194:	00001ea8 	cmpgeui	zero,zero,122
    1198:	00001ea8 	cmpgeui	zero,zero,122
    119c:	00001ea8 	cmpgeui	zero,zero,122
    11a0:	00001e94 	movui	zero,122
    11a4:	00001848 	cmpgei	zero,zero,97
    11a8:	000011e4 	muli	zero,zero,71
    11ac:	000011e4 	muli	zero,zero,71
    11b0:	00001e1c 	xori	zero,zero,120
    11b4:	000011e4 	muli	zero,zero,71
    11b8:	00001dec 	andhi	zero,zero,119
    11bc:	000018fc 	xorhi	zero,zero,99
    11c0:	00001e4c 	andi	zero,zero,121
    11c4:	00001e38 	rdprs	zero,zero,120
    11c8:	000011e4 	muli	zero,zero,71
    11cc:	000020e0 	cmpeqi	zero,zero,131
    11d0:	000011e4 	muli	zero,zero,71
    11d4:	00001948 	cmpgei	zero,zero,101
    11d8:	000011e4 	muli	zero,zero,71
    11dc:	000011e4 	muli	zero,zero,71
    11e0:	00001fc0 	call	1fc <my_interrupt_handler+0xc>
    11e4:	d9014d17 	ldw	r4,1332(sp)
    11e8:	2000ce26 	beq	r4,zero,1524 <___vfprintf_internal_r+0x6d4>
    11ec:	01400044 	movi	r5,1
    11f0:	d9800f04 	addi	r6,sp,60
    11f4:	d9c14015 	stw	r7,1280(sp)
    11f8:	d9414515 	stw	r5,1300(sp)
    11fc:	d9814115 	stw	r6,1284(sp)
    1200:	280f883a 	mov	r7,r5
    1204:	d9000f05 	stb	r4,60(sp)
    1208:	d8000405 	stb	zero,16(sp)
    120c:	d8014615 	stw	zero,1304(sp)
    1210:	d8c14c17 	ldw	r3,1328(sp)
    1214:	1880008c 	andi	r2,r3,2
    1218:	1005003a 	cmpeq	r2,r2,zero
    121c:	d8815015 	stw	r2,1344(sp)
    1220:	1000031e 	bne	r2,zero,1230 <___vfprintf_internal_r+0x3e0>
    1224:	d9014517 	ldw	r4,1300(sp)
    1228:	21000084 	addi	r4,r4,2
    122c:	d9014515 	stw	r4,1300(sp)
    1230:	d9414c17 	ldw	r5,1328(sp)
    1234:	2940210c 	andi	r5,r5,132
    1238:	d9414e15 	stw	r5,1336(sp)
    123c:	28002d1e 	bne	r5,zero,12f4 <___vfprintf_internal_r+0x4a4>
    1240:	d9814a17 	ldw	r6,1320(sp)
    1244:	d8814517 	ldw	r2,1300(sp)
    1248:	30a1c83a 	sub	r16,r6,r2
    124c:	0400290e 	bge	zero,r16,12f4 <___vfprintf_internal_r+0x4a4>
    1250:	00800404 	movi	r2,16
    1254:	14045e0e 	bge	r2,r16,23d0 <___vfprintf_internal_r+0x1580>
    1258:	dc800e17 	ldw	r18,56(sp)
    125c:	dc400d17 	ldw	r17,52(sp)
    1260:	1027883a 	mov	r19,r2
    1264:	07000074 	movhi	fp,1
    1268:	e7323184 	addi	fp,fp,-14138
    126c:	050001c4 	movi	r20,7
    1270:	00000306 	br	1280 <___vfprintf_internal_r+0x430>
    1274:	843ffc04 	addi	r16,r16,-16
    1278:	ad400204 	addi	r21,r21,8
    127c:	9c00130e 	bge	r19,r16,12cc <___vfprintf_internal_r+0x47c>
    1280:	94800404 	addi	r18,r18,16
    1284:	8c400044 	addi	r17,r17,1
    1288:	af000015 	stw	fp,0(r21)
    128c:	acc00115 	stw	r19,4(r21)
    1290:	dc800e15 	stw	r18,56(sp)
    1294:	dc400d15 	stw	r17,52(sp)
    1298:	a47ff60e 	bge	r20,r17,1274 <___vfprintf_internal_r+0x424>
    129c:	d9014f17 	ldw	r4,1340(sp)
    12a0:	b00b883a 	mov	r5,r22
    12a4:	d9800c04 	addi	r6,sp,48
    12a8:	d9c15115 	stw	r7,1348(sp)
    12ac:	0000df80 	call	df8 <__sprint_r>
    12b0:	d9c15117 	ldw	r7,1348(sp)
    12b4:	10009e1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    12b8:	843ffc04 	addi	r16,r16,-16
    12bc:	dc800e17 	ldw	r18,56(sp)
    12c0:	dc400d17 	ldw	r17,52(sp)
    12c4:	dd401904 	addi	r21,sp,100
    12c8:	9c3fed16 	blt	r19,r16,1280 <___vfprintf_internal_r+0x430>
    12cc:	9425883a 	add	r18,r18,r16
    12d0:	8c400044 	addi	r17,r17,1
    12d4:	008001c4 	movi	r2,7
    12d8:	af000015 	stw	fp,0(r21)
    12dc:	ac000115 	stw	r16,4(r21)
    12e0:	dc800e15 	stw	r18,56(sp)
    12e4:	dc400d15 	stw	r17,52(sp)
    12e8:	1441f516 	blt	r2,r17,1ac0 <___vfprintf_internal_r+0xc70>
    12ec:	ad400204 	addi	r21,r21,8
    12f0:	00000206 	br	12fc <___vfprintf_internal_r+0x4ac>
    12f4:	dc800e17 	ldw	r18,56(sp)
    12f8:	dc400d17 	ldw	r17,52(sp)
    12fc:	d8800407 	ldb	r2,16(sp)
    1300:	10000b26 	beq	r2,zero,1330 <___vfprintf_internal_r+0x4e0>
    1304:	00800044 	movi	r2,1
    1308:	94800044 	addi	r18,r18,1
    130c:	8c400044 	addi	r17,r17,1
    1310:	a8800115 	stw	r2,4(r21)
    1314:	d8c00404 	addi	r3,sp,16
    1318:	008001c4 	movi	r2,7
    131c:	a8c00015 	stw	r3,0(r21)
    1320:	dc800e15 	stw	r18,56(sp)
    1324:	dc400d15 	stw	r17,52(sp)
    1328:	1441da16 	blt	r2,r17,1a94 <___vfprintf_internal_r+0xc44>
    132c:	ad400204 	addi	r21,r21,8
    1330:	d9015017 	ldw	r4,1344(sp)
    1334:	20000b1e 	bne	r4,zero,1364 <___vfprintf_internal_r+0x514>
    1338:	d8800444 	addi	r2,sp,17
    133c:	94800084 	addi	r18,r18,2
    1340:	8c400044 	addi	r17,r17,1
    1344:	a8800015 	stw	r2,0(r21)
    1348:	00c00084 	movi	r3,2
    134c:	008001c4 	movi	r2,7
    1350:	a8c00115 	stw	r3,4(r21)
    1354:	dc800e15 	stw	r18,56(sp)
    1358:	dc400d15 	stw	r17,52(sp)
    135c:	1441c216 	blt	r2,r17,1a68 <___vfprintf_internal_r+0xc18>
    1360:	ad400204 	addi	r21,r21,8
    1364:	d9414e17 	ldw	r5,1336(sp)
    1368:	00802004 	movi	r2,128
    136c:	2880b126 	beq	r5,r2,1634 <___vfprintf_internal_r+0x7e4>
    1370:	d8c14617 	ldw	r3,1304(sp)
    1374:	19e1c83a 	sub	r16,r3,r7
    1378:	0400260e 	bge	zero,r16,1414 <___vfprintf_internal_r+0x5c4>
    137c:	00800404 	movi	r2,16
    1380:	1403cf0e 	bge	r2,r16,22c0 <___vfprintf_internal_r+0x1470>
    1384:	1027883a 	mov	r19,r2
    1388:	07000074 	movhi	fp,1
    138c:	e7322d84 	addi	fp,fp,-14154
    1390:	050001c4 	movi	r20,7
    1394:	00000306 	br	13a4 <___vfprintf_internal_r+0x554>
    1398:	843ffc04 	addi	r16,r16,-16
    139c:	ad400204 	addi	r21,r21,8
    13a0:	9c00130e 	bge	r19,r16,13f0 <___vfprintf_internal_r+0x5a0>
    13a4:	94800404 	addi	r18,r18,16
    13a8:	8c400044 	addi	r17,r17,1
    13ac:	af000015 	stw	fp,0(r21)
    13b0:	acc00115 	stw	r19,4(r21)
    13b4:	dc800e15 	stw	r18,56(sp)
    13b8:	dc400d15 	stw	r17,52(sp)
    13bc:	a47ff60e 	bge	r20,r17,1398 <___vfprintf_internal_r+0x548>
    13c0:	d9014f17 	ldw	r4,1340(sp)
    13c4:	b00b883a 	mov	r5,r22
    13c8:	d9800c04 	addi	r6,sp,48
    13cc:	d9c15115 	stw	r7,1348(sp)
    13d0:	0000df80 	call	df8 <__sprint_r>
    13d4:	d9c15117 	ldw	r7,1348(sp)
    13d8:	1000551e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    13dc:	843ffc04 	addi	r16,r16,-16
    13e0:	dc800e17 	ldw	r18,56(sp)
    13e4:	dc400d17 	ldw	r17,52(sp)
    13e8:	dd401904 	addi	r21,sp,100
    13ec:	9c3fed16 	blt	r19,r16,13a4 <___vfprintf_internal_r+0x554>
    13f0:	9425883a 	add	r18,r18,r16
    13f4:	8c400044 	addi	r17,r17,1
    13f8:	008001c4 	movi	r2,7
    13fc:	af000015 	stw	fp,0(r21)
    1400:	ac000115 	stw	r16,4(r21)
    1404:	dc800e15 	stw	r18,56(sp)
    1408:	dc400d15 	stw	r17,52(sp)
    140c:	14418216 	blt	r2,r17,1a18 <___vfprintf_internal_r+0xbc8>
    1410:	ad400204 	addi	r21,r21,8
    1414:	d9014c17 	ldw	r4,1328(sp)
    1418:	2080400c 	andi	r2,r4,256
    141c:	10004a1e 	bne	r2,zero,1548 <___vfprintf_internal_r+0x6f8>
    1420:	d9414117 	ldw	r5,1284(sp)
    1424:	91e5883a 	add	r18,r18,r7
    1428:	8c400044 	addi	r17,r17,1
    142c:	008001c4 	movi	r2,7
    1430:	a9400015 	stw	r5,0(r21)
    1434:	a9c00115 	stw	r7,4(r21)
    1438:	dc800e15 	stw	r18,56(sp)
    143c:	dc400d15 	stw	r17,52(sp)
    1440:	14416716 	blt	r2,r17,19e0 <___vfprintf_internal_r+0xb90>
    1444:	a8c00204 	addi	r3,r21,8
    1448:	d9814c17 	ldw	r6,1328(sp)
    144c:	3080010c 	andi	r2,r6,4
    1450:	10002826 	beq	r2,zero,14f4 <___vfprintf_internal_r+0x6a4>
    1454:	d8814a17 	ldw	r2,1320(sp)
    1458:	d9014517 	ldw	r4,1300(sp)
    145c:	1121c83a 	sub	r16,r2,r4
    1460:	0400240e 	bge	zero,r16,14f4 <___vfprintf_internal_r+0x6a4>
    1464:	00800404 	movi	r2,16
    1468:	1404550e 	bge	r2,r16,25c0 <___vfprintf_internal_r+0x1770>
    146c:	dc400d17 	ldw	r17,52(sp)
    1470:	1027883a 	mov	r19,r2
    1474:	07000074 	movhi	fp,1
    1478:	e7323184 	addi	fp,fp,-14138
    147c:	050001c4 	movi	r20,7
    1480:	00000306 	br	1490 <___vfprintf_internal_r+0x640>
    1484:	843ffc04 	addi	r16,r16,-16
    1488:	18c00204 	addi	r3,r3,8
    148c:	9c00110e 	bge	r19,r16,14d4 <___vfprintf_internal_r+0x684>
    1490:	94800404 	addi	r18,r18,16
    1494:	8c400044 	addi	r17,r17,1
    1498:	1f000015 	stw	fp,0(r3)
    149c:	1cc00115 	stw	r19,4(r3)
    14a0:	dc800e15 	stw	r18,56(sp)
    14a4:	dc400d15 	stw	r17,52(sp)
    14a8:	a47ff60e 	bge	r20,r17,1484 <___vfprintf_internal_r+0x634>
    14ac:	d9014f17 	ldw	r4,1340(sp)
    14b0:	b00b883a 	mov	r5,r22
    14b4:	d9800c04 	addi	r6,sp,48
    14b8:	0000df80 	call	df8 <__sprint_r>
    14bc:	10001c1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    14c0:	843ffc04 	addi	r16,r16,-16
    14c4:	dc800e17 	ldw	r18,56(sp)
    14c8:	dc400d17 	ldw	r17,52(sp)
    14cc:	d8c01904 	addi	r3,sp,100
    14d0:	9c3fef16 	blt	r19,r16,1490 <___vfprintf_internal_r+0x640>
    14d4:	9425883a 	add	r18,r18,r16
    14d8:	8c400044 	addi	r17,r17,1
    14dc:	008001c4 	movi	r2,7
    14e0:	1f000015 	stw	fp,0(r3)
    14e4:	1c000115 	stw	r16,4(r3)
    14e8:	dc800e15 	stw	r18,56(sp)
    14ec:	dc400d15 	stw	r17,52(sp)
    14f0:	1440cb16 	blt	r2,r17,1820 <___vfprintf_internal_r+0x9d0>
    14f4:	d8814a17 	ldw	r2,1320(sp)
    14f8:	d9414517 	ldw	r5,1300(sp)
    14fc:	1140010e 	bge	r2,r5,1504 <___vfprintf_internal_r+0x6b4>
    1500:	2805883a 	mov	r2,r5
    1504:	d9814b17 	ldw	r6,1324(sp)
    1508:	308d883a 	add	r6,r6,r2
    150c:	d9814b15 	stw	r6,1324(sp)
    1510:	90013b1e 	bne	r18,zero,1a00 <___vfprintf_internal_r+0xbb0>
    1514:	d9c14017 	ldw	r7,1280(sp)
    1518:	dd401904 	addi	r21,sp,100
    151c:	d8000d15 	stw	zero,52(sp)
    1520:	003ea706 	br	fc0 <___vfprintf_internal_r+0x170>
    1524:	d8800e17 	ldw	r2,56(sp)
    1528:	1005451e 	bne	r2,zero,2a40 <___vfprintf_internal_r+0x1bf0>
    152c:	d8000d15 	stw	zero,52(sp)
    1530:	b080030b 	ldhu	r2,12(r22)
    1534:	1080100c 	andi	r2,r2,64
    1538:	103e8726 	beq	r2,zero,f58 <___vfprintf_internal_r+0x108>
    153c:	00bfffc4 	movi	r2,-1
    1540:	d8814b15 	stw	r2,1324(sp)
    1544:	003e8406 	br	f58 <___vfprintf_internal_r+0x108>
    1548:	d9814d17 	ldw	r6,1332(sp)
    154c:	00801944 	movi	r2,101
    1550:	11806e16 	blt	r2,r6,170c <___vfprintf_internal_r+0x8bc>
    1554:	d9414717 	ldw	r5,1308(sp)
    1558:	00c00044 	movi	r3,1
    155c:	1943490e 	bge	r3,r5,2284 <___vfprintf_internal_r+0x1434>
    1560:	d8814117 	ldw	r2,1284(sp)
    1564:	94800044 	addi	r18,r18,1
    1568:	8c400044 	addi	r17,r17,1
    156c:	a8800015 	stw	r2,0(r21)
    1570:	008001c4 	movi	r2,7
    1574:	a8c00115 	stw	r3,4(r21)
    1578:	dc800e15 	stw	r18,56(sp)
    157c:	dc400d15 	stw	r17,52(sp)
    1580:	1441ca16 	blt	r2,r17,1cac <___vfprintf_internal_r+0xe5c>
    1584:	a8c00204 	addi	r3,r21,8
    1588:	d9014917 	ldw	r4,1316(sp)
    158c:	00800044 	movi	r2,1
    1590:	94800044 	addi	r18,r18,1
    1594:	8c400044 	addi	r17,r17,1
    1598:	18800115 	stw	r2,4(r3)
    159c:	008001c4 	movi	r2,7
    15a0:	19000015 	stw	r4,0(r3)
    15a4:	dc800e15 	stw	r18,56(sp)
    15a8:	dc400d15 	stw	r17,52(sp)
    15ac:	1441b616 	blt	r2,r17,1c88 <___vfprintf_internal_r+0xe38>
    15b0:	1cc00204 	addi	r19,r3,8
    15b4:	d9014217 	ldw	r4,1288(sp)
    15b8:	d9414317 	ldw	r5,1292(sp)
    15bc:	000d883a 	mov	r6,zero
    15c0:	000f883a 	mov	r7,zero
    15c4:	00091c80 	call	91c8 <__nedf2>
    15c8:	10017426 	beq	r2,zero,1b9c <___vfprintf_internal_r+0xd4c>
    15cc:	d9414717 	ldw	r5,1308(sp)
    15d0:	d9814117 	ldw	r6,1284(sp)
    15d4:	8c400044 	addi	r17,r17,1
    15d8:	2c85883a 	add	r2,r5,r18
    15dc:	14bfffc4 	addi	r18,r2,-1
    15e0:	28bfffc4 	addi	r2,r5,-1
    15e4:	30c00044 	addi	r3,r6,1
    15e8:	98800115 	stw	r2,4(r19)
    15ec:	008001c4 	movi	r2,7
    15f0:	98c00015 	stw	r3,0(r19)
    15f4:	dc800e15 	stw	r18,56(sp)
    15f8:	dc400d15 	stw	r17,52(sp)
    15fc:	14418e16 	blt	r2,r17,1c38 <___vfprintf_internal_r+0xde8>
    1600:	9cc00204 	addi	r19,r19,8
    1604:	d9414817 	ldw	r5,1312(sp)
    1608:	d8800804 	addi	r2,sp,32
    160c:	8c400044 	addi	r17,r17,1
    1610:	9165883a 	add	r18,r18,r5
    1614:	98800015 	stw	r2,0(r19)
    1618:	008001c4 	movi	r2,7
    161c:	99400115 	stw	r5,4(r19)
    1620:	dc800e15 	stw	r18,56(sp)
    1624:	dc400d15 	stw	r17,52(sp)
    1628:	1440ed16 	blt	r2,r17,19e0 <___vfprintf_internal_r+0xb90>
    162c:	98c00204 	addi	r3,r19,8
    1630:	003f8506 	br	1448 <___vfprintf_internal_r+0x5f8>
    1634:	d9814a17 	ldw	r6,1320(sp)
    1638:	d8814517 	ldw	r2,1300(sp)
    163c:	30a1c83a 	sub	r16,r6,r2
    1640:	043f4b0e 	bge	zero,r16,1370 <___vfprintf_internal_r+0x520>
    1644:	00800404 	movi	r2,16
    1648:	14043a0e 	bge	r2,r16,2734 <___vfprintf_internal_r+0x18e4>
    164c:	1027883a 	mov	r19,r2
    1650:	07000074 	movhi	fp,1
    1654:	e7322d84 	addi	fp,fp,-14154
    1658:	050001c4 	movi	r20,7
    165c:	00000306 	br	166c <___vfprintf_internal_r+0x81c>
    1660:	843ffc04 	addi	r16,r16,-16
    1664:	ad400204 	addi	r21,r21,8
    1668:	9c00130e 	bge	r19,r16,16b8 <___vfprintf_internal_r+0x868>
    166c:	94800404 	addi	r18,r18,16
    1670:	8c400044 	addi	r17,r17,1
    1674:	af000015 	stw	fp,0(r21)
    1678:	acc00115 	stw	r19,4(r21)
    167c:	dc800e15 	stw	r18,56(sp)
    1680:	dc400d15 	stw	r17,52(sp)
    1684:	a47ff60e 	bge	r20,r17,1660 <___vfprintf_internal_r+0x810>
    1688:	d9014f17 	ldw	r4,1340(sp)
    168c:	b00b883a 	mov	r5,r22
    1690:	d9800c04 	addi	r6,sp,48
    1694:	d9c15115 	stw	r7,1348(sp)
    1698:	0000df80 	call	df8 <__sprint_r>
    169c:	d9c15117 	ldw	r7,1348(sp)
    16a0:	103fa31e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    16a4:	843ffc04 	addi	r16,r16,-16
    16a8:	dc800e17 	ldw	r18,56(sp)
    16ac:	dc400d17 	ldw	r17,52(sp)
    16b0:	dd401904 	addi	r21,sp,100
    16b4:	9c3fed16 	blt	r19,r16,166c <___vfprintf_internal_r+0x81c>
    16b8:	9425883a 	add	r18,r18,r16
    16bc:	8c400044 	addi	r17,r17,1
    16c0:	008001c4 	movi	r2,7
    16c4:	af000015 	stw	fp,0(r21)
    16c8:	ac000115 	stw	r16,4(r21)
    16cc:	dc800e15 	stw	r18,56(sp)
    16d0:	dc400d15 	stw	r17,52(sp)
    16d4:	14416116 	blt	r2,r17,1c5c <___vfprintf_internal_r+0xe0c>
    16d8:	ad400204 	addi	r21,r21,8
    16dc:	003f2406 	br	1370 <___vfprintf_internal_r+0x520>
    16e0:	d9014f17 	ldw	r4,1340(sp)
    16e4:	00049040 	call	4904 <__sinit>
    16e8:	d9c15117 	ldw	r7,1348(sp)
    16ec:	003def06 	br	eac <___vfprintf_internal_r+0x5c>
    16f0:	d9014f17 	ldw	r4,1340(sp)
    16f4:	b00b883a 	mov	r5,r22
    16f8:	d9c15115 	stw	r7,1348(sp)
    16fc:	0002d380 	call	2d38 <__swsetup_r>
    1700:	d9c15117 	ldw	r7,1348(sp)
    1704:	103dee26 	beq	r2,zero,ec0 <___vfprintf_internal_r+0x70>
    1708:	003f8c06 	br	153c <___vfprintf_internal_r+0x6ec>
    170c:	d9014217 	ldw	r4,1288(sp)
    1710:	d9414317 	ldw	r5,1292(sp)
    1714:	000d883a 	mov	r6,zero
    1718:	000f883a 	mov	r7,zero
    171c:	00091400 	call	9140 <__eqdf2>
    1720:	1000f21e 	bne	r2,zero,1aec <___vfprintf_internal_r+0xc9c>
    1724:	00800074 	movhi	r2,1
    1728:	10b22d04 	addi	r2,r2,-14156
    172c:	94800044 	addi	r18,r18,1
    1730:	8c400044 	addi	r17,r17,1
    1734:	a8800015 	stw	r2,0(r21)
    1738:	00c00044 	movi	r3,1
    173c:	008001c4 	movi	r2,7
    1740:	a8c00115 	stw	r3,4(r21)
    1744:	dc800e15 	stw	r18,56(sp)
    1748:	dc400d15 	stw	r17,52(sp)
    174c:	14430016 	blt	r2,r17,2350 <___vfprintf_internal_r+0x1500>
    1750:	a8c00204 	addi	r3,r21,8
    1754:	d8800517 	ldw	r2,20(sp)
    1758:	d9014717 	ldw	r4,1308(sp)
    175c:	11015c0e 	bge	r2,r4,1cd0 <___vfprintf_internal_r+0xe80>
    1760:	dc400d17 	ldw	r17,52(sp)
    1764:	d9814917 	ldw	r6,1316(sp)
    1768:	00800044 	movi	r2,1
    176c:	94800044 	addi	r18,r18,1
    1770:	8c400044 	addi	r17,r17,1
    1774:	18800115 	stw	r2,4(r3)
    1778:	008001c4 	movi	r2,7
    177c:	19800015 	stw	r6,0(r3)
    1780:	dc800e15 	stw	r18,56(sp)
    1784:	dc400d15 	stw	r17,52(sp)
    1788:	14431616 	blt	r2,r17,23e4 <___vfprintf_internal_r+0x1594>
    178c:	18c00204 	addi	r3,r3,8
    1790:	d8814717 	ldw	r2,1308(sp)
    1794:	143fffc4 	addi	r16,r2,-1
    1798:	043f2b0e 	bge	zero,r16,1448 <___vfprintf_internal_r+0x5f8>
    179c:	00800404 	movi	r2,16
    17a0:	1402a80e 	bge	r2,r16,2244 <___vfprintf_internal_r+0x13f4>
    17a4:	dc400d17 	ldw	r17,52(sp)
    17a8:	1027883a 	mov	r19,r2
    17ac:	07000074 	movhi	fp,1
    17b0:	e7322d84 	addi	fp,fp,-14154
    17b4:	050001c4 	movi	r20,7
    17b8:	00000306 	br	17c8 <___vfprintf_internal_r+0x978>
    17bc:	18c00204 	addi	r3,r3,8
    17c0:	843ffc04 	addi	r16,r16,-16
    17c4:	9c02a20e 	bge	r19,r16,2250 <___vfprintf_internal_r+0x1400>
    17c8:	94800404 	addi	r18,r18,16
    17cc:	8c400044 	addi	r17,r17,1
    17d0:	1f000015 	stw	fp,0(r3)
    17d4:	1cc00115 	stw	r19,4(r3)
    17d8:	dc800e15 	stw	r18,56(sp)
    17dc:	dc400d15 	stw	r17,52(sp)
    17e0:	a47ff60e 	bge	r20,r17,17bc <___vfprintf_internal_r+0x96c>
    17e4:	d9014f17 	ldw	r4,1340(sp)
    17e8:	b00b883a 	mov	r5,r22
    17ec:	d9800c04 	addi	r6,sp,48
    17f0:	0000df80 	call	df8 <__sprint_r>
    17f4:	103f4e1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    17f8:	dc800e17 	ldw	r18,56(sp)
    17fc:	dc400d17 	ldw	r17,52(sp)
    1800:	d8c01904 	addi	r3,sp,100
    1804:	003fee06 	br	17c0 <___vfprintf_internal_r+0x970>
    1808:	d8802c0b 	ldhu	r2,176(sp)
    180c:	00ffffc4 	movi	r3,-1
    1810:	d8c14b15 	stw	r3,1324(sp)
    1814:	1080100c 	andi	r2,r2,64
    1818:	103dcc1e 	bne	r2,zero,f4c <___vfprintf_internal_r+0xfc>
    181c:	003dce06 	br	f58 <___vfprintf_internal_r+0x108>
    1820:	d9014f17 	ldw	r4,1340(sp)
    1824:	b00b883a 	mov	r5,r22
    1828:	d9800c04 	addi	r6,sp,48
    182c:	0000df80 	call	df8 <__sprint_r>
    1830:	103f3f1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1834:	dc800e17 	ldw	r18,56(sp)
    1838:	003f2e06 	br	14f4 <___vfprintf_internal_r+0x6a4>
    183c:	d9414c17 	ldw	r5,1328(sp)
    1840:	29400414 	ori	r5,r5,16
    1844:	d9414c15 	stw	r5,1328(sp)
    1848:	d9814c17 	ldw	r6,1328(sp)
    184c:	3080080c 	andi	r2,r6,32
    1850:	10014f1e 	bne	r2,zero,1d90 <___vfprintf_internal_r+0xf40>
    1854:	d8c14c17 	ldw	r3,1328(sp)
    1858:	1880040c 	andi	r2,r3,16
    185c:	1002f01e 	bne	r2,zero,2420 <___vfprintf_internal_r+0x15d0>
    1860:	d9014c17 	ldw	r4,1328(sp)
    1864:	2080100c 	andi	r2,r4,64
    1868:	1002ed26 	beq	r2,zero,2420 <___vfprintf_internal_r+0x15d0>
    186c:	3880000f 	ldh	r2,0(r7)
    1870:	39c00104 	addi	r7,r7,4
    1874:	d9c14015 	stw	r7,1280(sp)
    1878:	1023d7fa 	srai	r17,r2,31
    187c:	1021883a 	mov	r16,r2
    1880:	88037816 	blt	r17,zero,2664 <___vfprintf_internal_r+0x1814>
    1884:	01000044 	movi	r4,1
    1888:	98000416 	blt	r19,zero,189c <___vfprintf_internal_r+0xa4c>
    188c:	d8c14c17 	ldw	r3,1328(sp)
    1890:	00bfdfc4 	movi	r2,-129
    1894:	1886703a 	and	r3,r3,r2
    1898:	d8c14c15 	stw	r3,1328(sp)
    189c:	8444b03a 	or	r2,r16,r17
    18a0:	10022c1e 	bne	r2,zero,2154 <___vfprintf_internal_r+0x1304>
    18a4:	98022b1e 	bne	r19,zero,2154 <___vfprintf_internal_r+0x1304>
    18a8:	20803fcc 	andi	r2,r4,255
    18ac:	1002a126 	beq	r2,zero,2334 <___vfprintf_internal_r+0x14e4>
    18b0:	d8c01904 	addi	r3,sp,100
    18b4:	dd000f04 	addi	r20,sp,60
    18b8:	d8c14115 	stw	r3,1284(sp)
    18bc:	d8c14117 	ldw	r3,1284(sp)
    18c0:	dcc14515 	stw	r19,1300(sp)
    18c4:	a0c5c83a 	sub	r2,r20,r3
    18c8:	11c00a04 	addi	r7,r2,40
    18cc:	99c0010e 	bge	r19,r7,18d4 <___vfprintf_internal_r+0xa84>
    18d0:	d9c14515 	stw	r7,1300(sp)
    18d4:	dcc14615 	stw	r19,1304(sp)
    18d8:	d8800407 	ldb	r2,16(sp)
    18dc:	103e4c26 	beq	r2,zero,1210 <___vfprintf_internal_r+0x3c0>
    18e0:	d8814517 	ldw	r2,1300(sp)
    18e4:	10800044 	addi	r2,r2,1
    18e8:	d8814515 	stw	r2,1300(sp)
    18ec:	003e4806 	br	1210 <___vfprintf_internal_r+0x3c0>
    18f0:	d9814c17 	ldw	r6,1328(sp)
    18f4:	31800414 	ori	r6,r6,16
    18f8:	d9814c15 	stw	r6,1328(sp)
    18fc:	d8c14c17 	ldw	r3,1328(sp)
    1900:	1880080c 	andi	r2,r3,32
    1904:	1001271e 	bne	r2,zero,1da4 <___vfprintf_internal_r+0xf54>
    1908:	d9414c17 	ldw	r5,1328(sp)
    190c:	2880040c 	andi	r2,r5,16
    1910:	1002bc1e 	bne	r2,zero,2404 <___vfprintf_internal_r+0x15b4>
    1914:	d9814c17 	ldw	r6,1328(sp)
    1918:	3080100c 	andi	r2,r6,64
    191c:	1002b926 	beq	r2,zero,2404 <___vfprintf_internal_r+0x15b4>
    1920:	3c00000b 	ldhu	r16,0(r7)
    1924:	0009883a 	mov	r4,zero
    1928:	39c00104 	addi	r7,r7,4
    192c:	0023883a 	mov	r17,zero
    1930:	d9c14015 	stw	r7,1280(sp)
    1934:	d8000405 	stb	zero,16(sp)
    1938:	003fd306 	br	1888 <___vfprintf_internal_r+0xa38>
    193c:	d9014c17 	ldw	r4,1328(sp)
    1940:	21000414 	ori	r4,r4,16
    1944:	d9014c15 	stw	r4,1328(sp)
    1948:	d9414c17 	ldw	r5,1328(sp)
    194c:	2880080c 	andi	r2,r5,32
    1950:	1001081e 	bne	r2,zero,1d74 <___vfprintf_internal_r+0xf24>
    1954:	d8c14c17 	ldw	r3,1328(sp)
    1958:	1880040c 	andi	r2,r3,16
    195c:	1002b61e 	bne	r2,zero,2438 <___vfprintf_internal_r+0x15e8>
    1960:	d9014c17 	ldw	r4,1328(sp)
    1964:	2080100c 	andi	r2,r4,64
    1968:	1002b326 	beq	r2,zero,2438 <___vfprintf_internal_r+0x15e8>
    196c:	3c00000b 	ldhu	r16,0(r7)
    1970:	01000044 	movi	r4,1
    1974:	39c00104 	addi	r7,r7,4
    1978:	0023883a 	mov	r17,zero
    197c:	d9c14015 	stw	r7,1280(sp)
    1980:	d8000405 	stb	zero,16(sp)
    1984:	003fc006 	br	1888 <___vfprintf_internal_r+0xa38>
    1988:	d9014f17 	ldw	r4,1340(sp)
    198c:	b00b883a 	mov	r5,r22
    1990:	d9800c04 	addi	r6,sp,48
    1994:	0000df80 	call	df8 <__sprint_r>
    1998:	103ee51e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    199c:	dc800e17 	ldw	r18,56(sp)
    19a0:	d8c01904 	addi	r3,sp,100
    19a4:	d9814c17 	ldw	r6,1328(sp)
    19a8:	3080004c 	andi	r2,r6,1
    19ac:	1005003a 	cmpeq	r2,r2,zero
    19b0:	103ea51e 	bne	r2,zero,1448 <___vfprintf_internal_r+0x5f8>
    19b4:	00800044 	movi	r2,1
    19b8:	dc400d17 	ldw	r17,52(sp)
    19bc:	18800115 	stw	r2,4(r3)
    19c0:	d8814917 	ldw	r2,1316(sp)
    19c4:	94800044 	addi	r18,r18,1
    19c8:	8c400044 	addi	r17,r17,1
    19cc:	18800015 	stw	r2,0(r3)
    19d0:	008001c4 	movi	r2,7
    19d4:	dc800e15 	stw	r18,56(sp)
    19d8:	dc400d15 	stw	r17,52(sp)
    19dc:	1442240e 	bge	r2,r17,2270 <___vfprintf_internal_r+0x1420>
    19e0:	d9014f17 	ldw	r4,1340(sp)
    19e4:	b00b883a 	mov	r5,r22
    19e8:	d9800c04 	addi	r6,sp,48
    19ec:	0000df80 	call	df8 <__sprint_r>
    19f0:	103ecf1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    19f4:	dc800e17 	ldw	r18,56(sp)
    19f8:	d8c01904 	addi	r3,sp,100
    19fc:	003e9206 	br	1448 <___vfprintf_internal_r+0x5f8>
    1a00:	d9014f17 	ldw	r4,1340(sp)
    1a04:	b00b883a 	mov	r5,r22
    1a08:	d9800c04 	addi	r6,sp,48
    1a0c:	0000df80 	call	df8 <__sprint_r>
    1a10:	103ec026 	beq	r2,zero,1514 <___vfprintf_internal_r+0x6c4>
    1a14:	003ec606 	br	1530 <___vfprintf_internal_r+0x6e0>
    1a18:	d9014f17 	ldw	r4,1340(sp)
    1a1c:	b00b883a 	mov	r5,r22
    1a20:	d9800c04 	addi	r6,sp,48
    1a24:	d9c15115 	stw	r7,1348(sp)
    1a28:	0000df80 	call	df8 <__sprint_r>
    1a2c:	d9c15117 	ldw	r7,1348(sp)
    1a30:	103ebf1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1a34:	dc800e17 	ldw	r18,56(sp)
    1a38:	dc400d17 	ldw	r17,52(sp)
    1a3c:	dd401904 	addi	r21,sp,100
    1a40:	003e7406 	br	1414 <___vfprintf_internal_r+0x5c4>
    1a44:	d9014f17 	ldw	r4,1340(sp)
    1a48:	b00b883a 	mov	r5,r22
    1a4c:	d9800c04 	addi	r6,sp,48
    1a50:	d9c15115 	stw	r7,1348(sp)
    1a54:	0000df80 	call	df8 <__sprint_r>
    1a58:	d9c15117 	ldw	r7,1348(sp)
    1a5c:	103eb41e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1a60:	dd401904 	addi	r21,sp,100
    1a64:	003d6d06 	br	101c <___vfprintf_internal_r+0x1cc>
    1a68:	d9014f17 	ldw	r4,1340(sp)
    1a6c:	b00b883a 	mov	r5,r22
    1a70:	d9800c04 	addi	r6,sp,48
    1a74:	d9c15115 	stw	r7,1348(sp)
    1a78:	0000df80 	call	df8 <__sprint_r>
    1a7c:	d9c15117 	ldw	r7,1348(sp)
    1a80:	103eab1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1a84:	dc800e17 	ldw	r18,56(sp)
    1a88:	dc400d17 	ldw	r17,52(sp)
    1a8c:	dd401904 	addi	r21,sp,100
    1a90:	003e3406 	br	1364 <___vfprintf_internal_r+0x514>
    1a94:	d9014f17 	ldw	r4,1340(sp)
    1a98:	b00b883a 	mov	r5,r22
    1a9c:	d9800c04 	addi	r6,sp,48
    1aa0:	d9c15115 	stw	r7,1348(sp)
    1aa4:	0000df80 	call	df8 <__sprint_r>
    1aa8:	d9c15117 	ldw	r7,1348(sp)
    1aac:	103ea01e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1ab0:	dc800e17 	ldw	r18,56(sp)
    1ab4:	dc400d17 	ldw	r17,52(sp)
    1ab8:	dd401904 	addi	r21,sp,100
    1abc:	003e1c06 	br	1330 <___vfprintf_internal_r+0x4e0>
    1ac0:	d9014f17 	ldw	r4,1340(sp)
    1ac4:	b00b883a 	mov	r5,r22
    1ac8:	d9800c04 	addi	r6,sp,48
    1acc:	d9c15115 	stw	r7,1348(sp)
    1ad0:	0000df80 	call	df8 <__sprint_r>
    1ad4:	d9c15117 	ldw	r7,1348(sp)
    1ad8:	103e951e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1adc:	dc800e17 	ldw	r18,56(sp)
    1ae0:	dc400d17 	ldw	r17,52(sp)
    1ae4:	dd401904 	addi	r21,sp,100
    1ae8:	003e0406 	br	12fc <___vfprintf_internal_r+0x4ac>
    1aec:	d9000517 	ldw	r4,20(sp)
    1af0:	0102580e 	bge	zero,r4,2454 <___vfprintf_internal_r+0x1604>
    1af4:	d9814717 	ldw	r6,1308(sp)
    1af8:	21807a16 	blt	r4,r6,1ce4 <___vfprintf_internal_r+0xe94>
    1afc:	d8814117 	ldw	r2,1284(sp)
    1b00:	91a5883a 	add	r18,r18,r6
    1b04:	8c400044 	addi	r17,r17,1
    1b08:	a8800015 	stw	r2,0(r21)
    1b0c:	008001c4 	movi	r2,7
    1b10:	a9800115 	stw	r6,4(r21)
    1b14:	dc800e15 	stw	r18,56(sp)
    1b18:	dc400d15 	stw	r17,52(sp)
    1b1c:	1442fc16 	blt	r2,r17,2710 <___vfprintf_internal_r+0x18c0>
    1b20:	a8c00204 	addi	r3,r21,8
    1b24:	d9414717 	ldw	r5,1308(sp)
    1b28:	2161c83a 	sub	r16,r4,r5
    1b2c:	043f9d0e 	bge	zero,r16,19a4 <___vfprintf_internal_r+0xb54>
    1b30:	00800404 	movi	r2,16
    1b34:	1402190e 	bge	r2,r16,239c <___vfprintf_internal_r+0x154c>
    1b38:	dc400d17 	ldw	r17,52(sp)
    1b3c:	1027883a 	mov	r19,r2
    1b40:	07000074 	movhi	fp,1
    1b44:	e7322d84 	addi	fp,fp,-14154
    1b48:	050001c4 	movi	r20,7
    1b4c:	00000306 	br	1b5c <___vfprintf_internal_r+0xd0c>
    1b50:	18c00204 	addi	r3,r3,8
    1b54:	843ffc04 	addi	r16,r16,-16
    1b58:	9c02130e 	bge	r19,r16,23a8 <___vfprintf_internal_r+0x1558>
    1b5c:	94800404 	addi	r18,r18,16
    1b60:	8c400044 	addi	r17,r17,1
    1b64:	1f000015 	stw	fp,0(r3)
    1b68:	1cc00115 	stw	r19,4(r3)
    1b6c:	dc800e15 	stw	r18,56(sp)
    1b70:	dc400d15 	stw	r17,52(sp)
    1b74:	a47ff60e 	bge	r20,r17,1b50 <___vfprintf_internal_r+0xd00>
    1b78:	d9014f17 	ldw	r4,1340(sp)
    1b7c:	b00b883a 	mov	r5,r22
    1b80:	d9800c04 	addi	r6,sp,48
    1b84:	0000df80 	call	df8 <__sprint_r>
    1b88:	103e691e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1b8c:	dc800e17 	ldw	r18,56(sp)
    1b90:	dc400d17 	ldw	r17,52(sp)
    1b94:	d8c01904 	addi	r3,sp,100
    1b98:	003fee06 	br	1b54 <___vfprintf_internal_r+0xd04>
    1b9c:	d8814717 	ldw	r2,1308(sp)
    1ba0:	143fffc4 	addi	r16,r2,-1
    1ba4:	043e970e 	bge	zero,r16,1604 <___vfprintf_internal_r+0x7b4>
    1ba8:	00800404 	movi	r2,16
    1bac:	1400180e 	bge	r2,r16,1c10 <___vfprintf_internal_r+0xdc0>
    1bb0:	1029883a 	mov	r20,r2
    1bb4:	07000074 	movhi	fp,1
    1bb8:	e7322d84 	addi	fp,fp,-14154
    1bbc:	054001c4 	movi	r21,7
    1bc0:	00000306 	br	1bd0 <___vfprintf_internal_r+0xd80>
    1bc4:	9cc00204 	addi	r19,r19,8
    1bc8:	843ffc04 	addi	r16,r16,-16
    1bcc:	a400120e 	bge	r20,r16,1c18 <___vfprintf_internal_r+0xdc8>
    1bd0:	94800404 	addi	r18,r18,16
    1bd4:	8c400044 	addi	r17,r17,1
    1bd8:	9f000015 	stw	fp,0(r19)
    1bdc:	9d000115 	stw	r20,4(r19)
    1be0:	dc800e15 	stw	r18,56(sp)
    1be4:	dc400d15 	stw	r17,52(sp)
    1be8:	ac7ff60e 	bge	r21,r17,1bc4 <___vfprintf_internal_r+0xd74>
    1bec:	d9014f17 	ldw	r4,1340(sp)
    1bf0:	b00b883a 	mov	r5,r22
    1bf4:	d9800c04 	addi	r6,sp,48
    1bf8:	0000df80 	call	df8 <__sprint_r>
    1bfc:	103e4c1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1c00:	dc800e17 	ldw	r18,56(sp)
    1c04:	dc400d17 	ldw	r17,52(sp)
    1c08:	dcc01904 	addi	r19,sp,100
    1c0c:	003fee06 	br	1bc8 <___vfprintf_internal_r+0xd78>
    1c10:	07000074 	movhi	fp,1
    1c14:	e7322d84 	addi	fp,fp,-14154
    1c18:	9425883a 	add	r18,r18,r16
    1c1c:	8c400044 	addi	r17,r17,1
    1c20:	008001c4 	movi	r2,7
    1c24:	9f000015 	stw	fp,0(r19)
    1c28:	9c000115 	stw	r16,4(r19)
    1c2c:	dc800e15 	stw	r18,56(sp)
    1c30:	dc400d15 	stw	r17,52(sp)
    1c34:	147e720e 	bge	r2,r17,1600 <___vfprintf_internal_r+0x7b0>
    1c38:	d9014f17 	ldw	r4,1340(sp)
    1c3c:	b00b883a 	mov	r5,r22
    1c40:	d9800c04 	addi	r6,sp,48
    1c44:	0000df80 	call	df8 <__sprint_r>
    1c48:	103e391e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1c4c:	dc800e17 	ldw	r18,56(sp)
    1c50:	dc400d17 	ldw	r17,52(sp)
    1c54:	dcc01904 	addi	r19,sp,100
    1c58:	003e6a06 	br	1604 <___vfprintf_internal_r+0x7b4>
    1c5c:	d9014f17 	ldw	r4,1340(sp)
    1c60:	b00b883a 	mov	r5,r22
    1c64:	d9800c04 	addi	r6,sp,48
    1c68:	d9c15115 	stw	r7,1348(sp)
    1c6c:	0000df80 	call	df8 <__sprint_r>
    1c70:	d9c15117 	ldw	r7,1348(sp)
    1c74:	103e2e1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1c78:	dc800e17 	ldw	r18,56(sp)
    1c7c:	dc400d17 	ldw	r17,52(sp)
    1c80:	dd401904 	addi	r21,sp,100
    1c84:	003dba06 	br	1370 <___vfprintf_internal_r+0x520>
    1c88:	d9014f17 	ldw	r4,1340(sp)
    1c8c:	b00b883a 	mov	r5,r22
    1c90:	d9800c04 	addi	r6,sp,48
    1c94:	0000df80 	call	df8 <__sprint_r>
    1c98:	103e251e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1c9c:	dc800e17 	ldw	r18,56(sp)
    1ca0:	dc400d17 	ldw	r17,52(sp)
    1ca4:	dcc01904 	addi	r19,sp,100
    1ca8:	003e4206 	br	15b4 <___vfprintf_internal_r+0x764>
    1cac:	d9014f17 	ldw	r4,1340(sp)
    1cb0:	b00b883a 	mov	r5,r22
    1cb4:	d9800c04 	addi	r6,sp,48
    1cb8:	0000df80 	call	df8 <__sprint_r>
    1cbc:	103e1c1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    1cc0:	dc800e17 	ldw	r18,56(sp)
    1cc4:	dc400d17 	ldw	r17,52(sp)
    1cc8:	d8c01904 	addi	r3,sp,100
    1ccc:	003e2e06 	br	1588 <___vfprintf_internal_r+0x738>
    1cd0:	d9414c17 	ldw	r5,1328(sp)
    1cd4:	2880004c 	andi	r2,r5,1
    1cd8:	1005003a 	cmpeq	r2,r2,zero
    1cdc:	103dda1e 	bne	r2,zero,1448 <___vfprintf_internal_r+0x5f8>
    1ce0:	003e9f06 	br	1760 <___vfprintf_internal_r+0x910>
    1ce4:	d8c14117 	ldw	r3,1284(sp)
    1ce8:	9125883a 	add	r18,r18,r4
    1cec:	8c400044 	addi	r17,r17,1
    1cf0:	008001c4 	movi	r2,7
    1cf4:	a8c00015 	stw	r3,0(r21)
    1cf8:	a9000115 	stw	r4,4(r21)
    1cfc:	dc800e15 	stw	r18,56(sp)
    1d00:	dc400d15 	stw	r17,52(sp)
    1d04:	14426c16 	blt	r2,r17,26b8 <___vfprintf_internal_r+0x1868>
    1d08:	a8c00204 	addi	r3,r21,8
    1d0c:	d9414917 	ldw	r5,1316(sp)
    1d10:	00800044 	movi	r2,1
    1d14:	94800044 	addi	r18,r18,1
    1d18:	8c400044 	addi	r17,r17,1
    1d1c:	18800115 	stw	r2,4(r3)
    1d20:	008001c4 	movi	r2,7
    1d24:	19400015 	stw	r5,0(r3)
    1d28:	dc800e15 	stw	r18,56(sp)
    1d2c:	dc400d15 	stw	r17,52(sp)
    1d30:	2021883a 	mov	r16,r4
    1d34:	14425616 	blt	r2,r17,2690 <___vfprintf_internal_r+0x1840>
    1d38:	19400204 	addi	r5,r3,8
    1d3c:	d9814717 	ldw	r6,1308(sp)
    1d40:	8c400044 	addi	r17,r17,1
    1d44:	dc400d15 	stw	r17,52(sp)
    1d48:	3107c83a 	sub	r3,r6,r4
    1d4c:	d9014117 	ldw	r4,1284(sp)
    1d50:	90e5883a 	add	r18,r18,r3
    1d54:	28c00115 	stw	r3,4(r5)
    1d58:	8105883a 	add	r2,r16,r4
    1d5c:	28800015 	stw	r2,0(r5)
    1d60:	008001c4 	movi	r2,7
    1d64:	dc800e15 	stw	r18,56(sp)
    1d68:	147f1d16 	blt	r2,r17,19e0 <___vfprintf_internal_r+0xb90>
    1d6c:	28c00204 	addi	r3,r5,8
    1d70:	003db506 	br	1448 <___vfprintf_internal_r+0x5f8>
    1d74:	3c000017 	ldw	r16,0(r7)
    1d78:	3c400117 	ldw	r17,4(r7)
    1d7c:	39800204 	addi	r6,r7,8
    1d80:	01000044 	movi	r4,1
    1d84:	d9814015 	stw	r6,1280(sp)
    1d88:	d8000405 	stb	zero,16(sp)
    1d8c:	003ebe06 	br	1888 <___vfprintf_internal_r+0xa38>
    1d90:	3c000017 	ldw	r16,0(r7)
    1d94:	3c400117 	ldw	r17,4(r7)
    1d98:	38800204 	addi	r2,r7,8
    1d9c:	d8814015 	stw	r2,1280(sp)
    1da0:	003eb706 	br	1880 <___vfprintf_internal_r+0xa30>
    1da4:	3c000017 	ldw	r16,0(r7)
    1da8:	3c400117 	ldw	r17,4(r7)
    1dac:	39000204 	addi	r4,r7,8
    1db0:	d9014015 	stw	r4,1280(sp)
    1db4:	0009883a 	mov	r4,zero
    1db8:	d8000405 	stb	zero,16(sp)
    1dbc:	003eb206 	br	1888 <___vfprintf_internal_r+0xa38>
    1dc0:	38c00017 	ldw	r3,0(r7)
    1dc4:	39c00104 	addi	r7,r7,4
    1dc8:	d8c14a15 	stw	r3,1320(sp)
    1dcc:	1800d70e 	bge	r3,zero,212c <___vfprintf_internal_r+0x12dc>
    1dd0:	00c7c83a 	sub	r3,zero,r3
    1dd4:	d8c14a15 	stw	r3,1320(sp)
    1dd8:	d9014c17 	ldw	r4,1328(sp)
    1ddc:	b8c00007 	ldb	r3,0(r23)
    1de0:	21000114 	ori	r4,r4,4
    1de4:	d9014c15 	stw	r4,1328(sp)
    1de8:	003c9806 	br	104c <___vfprintf_internal_r+0x1fc>
    1dec:	d9814c17 	ldw	r6,1328(sp)
    1df0:	3080080c 	andi	r2,r6,32
    1df4:	1001f626 	beq	r2,zero,25d0 <___vfprintf_internal_r+0x1780>
    1df8:	d9014b17 	ldw	r4,1324(sp)
    1dfc:	38800017 	ldw	r2,0(r7)
    1e00:	39c00104 	addi	r7,r7,4
    1e04:	d9c14015 	stw	r7,1280(sp)
    1e08:	2007d7fa 	srai	r3,r4,31
    1e0c:	d9c14017 	ldw	r7,1280(sp)
    1e10:	11000015 	stw	r4,0(r2)
    1e14:	10c00115 	stw	r3,4(r2)
    1e18:	003c6906 	br	fc0 <___vfprintf_internal_r+0x170>
    1e1c:	b8c00007 	ldb	r3,0(r23)
    1e20:	00801b04 	movi	r2,108
    1e24:	18825526 	beq	r3,r2,277c <___vfprintf_internal_r+0x192c>
    1e28:	d9414c17 	ldw	r5,1328(sp)
    1e2c:	29400414 	ori	r5,r5,16
    1e30:	d9414c15 	stw	r5,1328(sp)
    1e34:	003c8506 	br	104c <___vfprintf_internal_r+0x1fc>
    1e38:	d9814c17 	ldw	r6,1328(sp)
    1e3c:	b8c00007 	ldb	r3,0(r23)
    1e40:	31800814 	ori	r6,r6,32
    1e44:	d9814c15 	stw	r6,1328(sp)
    1e48:	003c8006 	br	104c <___vfprintf_internal_r+0x1fc>
    1e4c:	d8814c17 	ldw	r2,1328(sp)
    1e50:	3c000017 	ldw	r16,0(r7)
    1e54:	00c01e04 	movi	r3,120
    1e58:	10800094 	ori	r2,r2,2
    1e5c:	d8814c15 	stw	r2,1328(sp)
    1e60:	39c00104 	addi	r7,r7,4
    1e64:	01400074 	movhi	r5,1
    1e68:	29721604 	addi	r5,r5,-14248
    1e6c:	00800c04 	movi	r2,48
    1e70:	0023883a 	mov	r17,zero
    1e74:	01000084 	movi	r4,2
    1e78:	d9c14015 	stw	r7,1280(sp)
    1e7c:	d8c14d15 	stw	r3,1332(sp)
    1e80:	d9414415 	stw	r5,1296(sp)
    1e84:	d8800445 	stb	r2,17(sp)
    1e88:	d8c00485 	stb	r3,18(sp)
    1e8c:	d8000405 	stb	zero,16(sp)
    1e90:	003e7d06 	br	1888 <___vfprintf_internal_r+0xa38>
    1e94:	d8814c17 	ldw	r2,1328(sp)
    1e98:	b8c00007 	ldb	r3,0(r23)
    1e9c:	10801014 	ori	r2,r2,64
    1ea0:	d8814c15 	stw	r2,1328(sp)
    1ea4:	003c6906 	br	104c <___vfprintf_internal_r+0x1fc>
    1ea8:	d9414c17 	ldw	r5,1328(sp)
    1eac:	2880020c 	andi	r2,r5,8
    1eb0:	1001e526 	beq	r2,zero,2648 <___vfprintf_internal_r+0x17f8>
    1eb4:	39800017 	ldw	r6,0(r7)
    1eb8:	38800204 	addi	r2,r7,8
    1ebc:	d8814015 	stw	r2,1280(sp)
    1ec0:	d9814215 	stw	r6,1288(sp)
    1ec4:	39c00117 	ldw	r7,4(r7)
    1ec8:	d9c14315 	stw	r7,1292(sp)
    1ecc:	d9014217 	ldw	r4,1288(sp)
    1ed0:	d9414317 	ldw	r5,1292(sp)
    1ed4:	00071c00 	call	71c0 <__isinfd>
    1ed8:	10021d26 	beq	r2,zero,2750 <___vfprintf_internal_r+0x1900>
    1edc:	d9014217 	ldw	r4,1288(sp)
    1ee0:	d9414317 	ldw	r5,1292(sp)
    1ee4:	000d883a 	mov	r6,zero
    1ee8:	000f883a 	mov	r7,zero
    1eec:	00093600 	call	9360 <__ltdf2>
    1ef0:	1002d016 	blt	r2,zero,2a34 <___vfprintf_internal_r+0x1be4>
    1ef4:	d9414d17 	ldw	r5,1332(sp)
    1ef8:	008011c4 	movi	r2,71
    1efc:	11421016 	blt	r2,r5,2740 <___vfprintf_internal_r+0x18f0>
    1f00:	01800074 	movhi	r6,1
    1f04:	31b21b04 	addi	r6,r6,-14228
    1f08:	d9814115 	stw	r6,1284(sp)
    1f0c:	d9014c17 	ldw	r4,1328(sp)
    1f10:	00c000c4 	movi	r3,3
    1f14:	00bfdfc4 	movi	r2,-129
    1f18:	2088703a 	and	r4,r4,r2
    1f1c:	180f883a 	mov	r7,r3
    1f20:	d8c14515 	stw	r3,1300(sp)
    1f24:	d9014c15 	stw	r4,1328(sp)
    1f28:	d8014615 	stw	zero,1304(sp)
    1f2c:	003e6a06 	br	18d8 <___vfprintf_internal_r+0xa88>
    1f30:	38800017 	ldw	r2,0(r7)
    1f34:	00c00044 	movi	r3,1
    1f38:	39c00104 	addi	r7,r7,4
    1f3c:	d9c14015 	stw	r7,1280(sp)
    1f40:	d9000f04 	addi	r4,sp,60
    1f44:	180f883a 	mov	r7,r3
    1f48:	d8c14515 	stw	r3,1300(sp)
    1f4c:	d9014115 	stw	r4,1284(sp)
    1f50:	d8800f05 	stb	r2,60(sp)
    1f54:	d8000405 	stb	zero,16(sp)
    1f58:	003cac06 	br	120c <___vfprintf_internal_r+0x3bc>
    1f5c:	01400074 	movhi	r5,1
    1f60:	29722104 	addi	r5,r5,-14204
    1f64:	d9414415 	stw	r5,1296(sp)
    1f68:	d9814c17 	ldw	r6,1328(sp)
    1f6c:	3080080c 	andi	r2,r6,32
    1f70:	1000ff26 	beq	r2,zero,2370 <___vfprintf_internal_r+0x1520>
    1f74:	3c000017 	ldw	r16,0(r7)
    1f78:	3c400117 	ldw	r17,4(r7)
    1f7c:	38800204 	addi	r2,r7,8
    1f80:	d8814015 	stw	r2,1280(sp)
    1f84:	d9414c17 	ldw	r5,1328(sp)
    1f88:	2880004c 	andi	r2,r5,1
    1f8c:	1005003a 	cmpeq	r2,r2,zero
    1f90:	1000b91e 	bne	r2,zero,2278 <___vfprintf_internal_r+0x1428>
    1f94:	8444b03a 	or	r2,r16,r17
    1f98:	1000b726 	beq	r2,zero,2278 <___vfprintf_internal_r+0x1428>
    1f9c:	d9814d17 	ldw	r6,1332(sp)
    1fa0:	29400094 	ori	r5,r5,2
    1fa4:	00800c04 	movi	r2,48
    1fa8:	01000084 	movi	r4,2
    1fac:	d9414c15 	stw	r5,1328(sp)
    1fb0:	d8800445 	stb	r2,17(sp)
    1fb4:	d9800485 	stb	r6,18(sp)
    1fb8:	d8000405 	stb	zero,16(sp)
    1fbc:	003e3206 	br	1888 <___vfprintf_internal_r+0xa38>
    1fc0:	01800074 	movhi	r6,1
    1fc4:	31b21604 	addi	r6,r6,-14248
    1fc8:	d9814415 	stw	r6,1296(sp)
    1fcc:	003fe606 	br	1f68 <___vfprintf_internal_r+0x1118>
    1fd0:	00800ac4 	movi	r2,43
    1fd4:	d8800405 	stb	r2,16(sp)
    1fd8:	b8c00007 	ldb	r3,0(r23)
    1fdc:	003c1b06 	br	104c <___vfprintf_internal_r+0x1fc>
    1fe0:	d8814c17 	ldw	r2,1328(sp)
    1fe4:	b8c00007 	ldb	r3,0(r23)
    1fe8:	10800054 	ori	r2,r2,1
    1fec:	d8814c15 	stw	r2,1328(sp)
    1ff0:	003c1606 	br	104c <___vfprintf_internal_r+0x1fc>
    1ff4:	d8800407 	ldb	r2,16(sp)
    1ff8:	10004c1e 	bne	r2,zero,212c <___vfprintf_internal_r+0x12dc>
    1ffc:	00800804 	movi	r2,32
    2000:	d8800405 	stb	r2,16(sp)
    2004:	b8c00007 	ldb	r3,0(r23)
    2008:	003c1006 	br	104c <___vfprintf_internal_r+0x1fc>
    200c:	d9814c17 	ldw	r6,1328(sp)
    2010:	b8c00007 	ldb	r3,0(r23)
    2014:	31800214 	ori	r6,r6,8
    2018:	d9814c15 	stw	r6,1328(sp)
    201c:	003c0b06 	br	104c <___vfprintf_internal_r+0x1fc>
    2020:	0009883a 	mov	r4,zero
    2024:	04000244 	movi	r16,9
    2028:	01400284 	movi	r5,10
    202c:	d9c15115 	stw	r7,1348(sp)
    2030:	00005700 	call	570 <__mulsi3>
    2034:	b9000007 	ldb	r4,0(r23)
    2038:	d8c14d17 	ldw	r3,1332(sp)
    203c:	bdc00044 	addi	r23,r23,1
    2040:	d9014d15 	stw	r4,1332(sp)
    2044:	d9414d17 	ldw	r5,1332(sp)
    2048:	1885883a 	add	r2,r3,r2
    204c:	113ff404 	addi	r4,r2,-48
    2050:	28bff404 	addi	r2,r5,-48
    2054:	d9c15117 	ldw	r7,1348(sp)
    2058:	80bff32e 	bgeu	r16,r2,2028 <___vfprintf_internal_r+0x11d8>
    205c:	d9014a15 	stw	r4,1320(sp)
    2060:	003bfc06 	br	1054 <___vfprintf_internal_r+0x204>
    2064:	d8814c17 	ldw	r2,1328(sp)
    2068:	b8c00007 	ldb	r3,0(r23)
    206c:	10802014 	ori	r2,r2,128
    2070:	d8814c15 	stw	r2,1328(sp)
    2074:	003bf506 	br	104c <___vfprintf_internal_r+0x1fc>
    2078:	b8c00007 	ldb	r3,0(r23)
    207c:	00800a84 	movi	r2,42
    2080:	bdc00044 	addi	r23,r23,1
    2084:	18831826 	beq	r3,r2,2ce8 <___vfprintf_internal_r+0x1e98>
    2088:	d8c14d15 	stw	r3,1332(sp)
    208c:	18bff404 	addi	r2,r3,-48
    2090:	00c00244 	movi	r3,9
    2094:	18827b36 	bltu	r3,r2,2a84 <___vfprintf_internal_r+0x1c34>
    2098:	1821883a 	mov	r16,r3
    209c:	0009883a 	mov	r4,zero
    20a0:	01400284 	movi	r5,10
    20a4:	d9c15115 	stw	r7,1348(sp)
    20a8:	00005700 	call	570 <__mulsi3>
    20ac:	d9414d17 	ldw	r5,1332(sp)
    20b0:	b9800007 	ldb	r6,0(r23)
    20b4:	d9c15117 	ldw	r7,1348(sp)
    20b8:	1145883a 	add	r2,r2,r5
    20bc:	113ff404 	addi	r4,r2,-48
    20c0:	30bff404 	addi	r2,r6,-48
    20c4:	d9814d15 	stw	r6,1332(sp)
    20c8:	bdc00044 	addi	r23,r23,1
    20cc:	80bff42e 	bgeu	r16,r2,20a0 <___vfprintf_internal_r+0x1250>
    20d0:	2027883a 	mov	r19,r4
    20d4:	203bdf0e 	bge	r4,zero,1054 <___vfprintf_internal_r+0x204>
    20d8:	04ffffc4 	movi	r19,-1
    20dc:	003bdd06 	br	1054 <___vfprintf_internal_r+0x204>
    20e0:	d8000405 	stb	zero,16(sp)
    20e4:	39800017 	ldw	r6,0(r7)
    20e8:	39c00104 	addi	r7,r7,4
    20ec:	d9c14015 	stw	r7,1280(sp)
    20f0:	d9814115 	stw	r6,1284(sp)
    20f4:	3001c926 	beq	r6,zero,281c <___vfprintf_internal_r+0x19cc>
    20f8:	98000e16 	blt	r19,zero,2134 <___vfprintf_internal_r+0x12e4>
    20fc:	d9014117 	ldw	r4,1284(sp)
    2100:	000b883a 	mov	r5,zero
    2104:	980d883a 	mov	r6,r19
    2108:	00058440 	call	5844 <memchr>
    210c:	10025926 	beq	r2,zero,2a74 <___vfprintf_internal_r+0x1c24>
    2110:	d8c14117 	ldw	r3,1284(sp)
    2114:	10cfc83a 	sub	r7,r2,r3
    2118:	99c19e16 	blt	r19,r7,2794 <___vfprintf_internal_r+0x1944>
    211c:	d9c14515 	stw	r7,1300(sp)
    2120:	38000916 	blt	r7,zero,2148 <___vfprintf_internal_r+0x12f8>
    2124:	d8014615 	stw	zero,1304(sp)
    2128:	003deb06 	br	18d8 <___vfprintf_internal_r+0xa88>
    212c:	b8c00007 	ldb	r3,0(r23)
    2130:	003bc606 	br	104c <___vfprintf_internal_r+0x1fc>
    2134:	d9014117 	ldw	r4,1284(sp)
    2138:	00074380 	call	7438 <strlen>
    213c:	d8814515 	stw	r2,1300(sp)
    2140:	100f883a 	mov	r7,r2
    2144:	103ff70e 	bge	r2,zero,2124 <___vfprintf_internal_r+0x12d4>
    2148:	d8014515 	stw	zero,1300(sp)
    214c:	d8014615 	stw	zero,1304(sp)
    2150:	003de106 	br	18d8 <___vfprintf_internal_r+0xa88>
    2154:	20c03fcc 	andi	r3,r4,255
    2158:	00800044 	movi	r2,1
    215c:	18802d26 	beq	r3,r2,2214 <___vfprintf_internal_r+0x13c4>
    2160:	18800e36 	bltu	r3,r2,219c <___vfprintf_internal_r+0x134c>
    2164:	00800084 	movi	r2,2
    2168:	1880fa26 	beq	r3,r2,2554 <___vfprintf_internal_r+0x1704>
    216c:	01000074 	movhi	r4,1
    2170:	21322604 	addi	r4,r4,-14184
    2174:	00074380 	call	7438 <strlen>
    2178:	100f883a 	mov	r7,r2
    217c:	dcc14515 	stw	r19,1300(sp)
    2180:	9880010e 	bge	r19,r2,2188 <___vfprintf_internal_r+0x1338>
    2184:	d8814515 	stw	r2,1300(sp)
    2188:	00800074 	movhi	r2,1
    218c:	10b22604 	addi	r2,r2,-14184
    2190:	dcc14615 	stw	r19,1304(sp)
    2194:	d8814115 	stw	r2,1284(sp)
    2198:	003dcf06 	br	18d8 <___vfprintf_internal_r+0xa88>
    219c:	d9401904 	addi	r5,sp,100
    21a0:	dd000f04 	addi	r20,sp,60
    21a4:	d9414115 	stw	r5,1284(sp)
    21a8:	880a977a 	slli	r5,r17,29
    21ac:	d9814117 	ldw	r6,1284(sp)
    21b0:	8004d0fa 	srli	r2,r16,3
    21b4:	8806d0fa 	srli	r3,r17,3
    21b8:	810001cc 	andi	r4,r16,7
    21bc:	2884b03a 	or	r2,r5,r2
    21c0:	31bfffc4 	addi	r6,r6,-1
    21c4:	21000c04 	addi	r4,r4,48
    21c8:	d9814115 	stw	r6,1284(sp)
    21cc:	10cab03a 	or	r5,r2,r3
    21d0:	31000005 	stb	r4,0(r6)
    21d4:	1021883a 	mov	r16,r2
    21d8:	1823883a 	mov	r17,r3
    21dc:	283ff21e 	bne	r5,zero,21a8 <___vfprintf_internal_r+0x1358>
    21e0:	d8c14c17 	ldw	r3,1328(sp)
    21e4:	1880004c 	andi	r2,r3,1
    21e8:	1005003a 	cmpeq	r2,r2,zero
    21ec:	103db31e 	bne	r2,zero,18bc <___vfprintf_internal_r+0xa6c>
    21f0:	20803fcc 	andi	r2,r4,255
    21f4:	1080201c 	xori	r2,r2,128
    21f8:	10bfe004 	addi	r2,r2,-128
    21fc:	00c00c04 	movi	r3,48
    2200:	10fdae26 	beq	r2,r3,18bc <___vfprintf_internal_r+0xa6c>
    2204:	31bfffc4 	addi	r6,r6,-1
    2208:	d9814115 	stw	r6,1284(sp)
    220c:	30c00005 	stb	r3,0(r6)
    2210:	003daa06 	br	18bc <___vfprintf_internal_r+0xa6c>
    2214:	88800068 	cmpgeui	r2,r17,1
    2218:	10002c1e 	bne	r2,zero,22cc <___vfprintf_internal_r+0x147c>
    221c:	8800021e 	bne	r17,zero,2228 <___vfprintf_internal_r+0x13d8>
    2220:	00800244 	movi	r2,9
    2224:	14002936 	bltu	r2,r16,22cc <___vfprintf_internal_r+0x147c>
    2228:	d90018c4 	addi	r4,sp,99
    222c:	dd000f04 	addi	r20,sp,60
    2230:	d9014115 	stw	r4,1284(sp)
    2234:	d9014117 	ldw	r4,1284(sp)
    2238:	80800c04 	addi	r2,r16,48
    223c:	20800005 	stb	r2,0(r4)
    2240:	003d9e06 	br	18bc <___vfprintf_internal_r+0xa6c>
    2244:	dc400d17 	ldw	r17,52(sp)
    2248:	07000074 	movhi	fp,1
    224c:	e7322d84 	addi	fp,fp,-14154
    2250:	9425883a 	add	r18,r18,r16
    2254:	8c400044 	addi	r17,r17,1
    2258:	008001c4 	movi	r2,7
    225c:	1f000015 	stw	fp,0(r3)
    2260:	1c000115 	stw	r16,4(r3)
    2264:	dc800e15 	stw	r18,56(sp)
    2268:	dc400d15 	stw	r17,52(sp)
    226c:	147ddc16 	blt	r2,r17,19e0 <___vfprintf_internal_r+0xb90>
    2270:	18c00204 	addi	r3,r3,8
    2274:	003c7406 	br	1448 <___vfprintf_internal_r+0x5f8>
    2278:	01000084 	movi	r4,2
    227c:	d8000405 	stb	zero,16(sp)
    2280:	003d8106 	br	1888 <___vfprintf_internal_r+0xa38>
    2284:	d9814c17 	ldw	r6,1328(sp)
    2288:	30c4703a 	and	r2,r6,r3
    228c:	1005003a 	cmpeq	r2,r2,zero
    2290:	103cb326 	beq	r2,zero,1560 <___vfprintf_internal_r+0x710>
    2294:	d9014117 	ldw	r4,1284(sp)
    2298:	94800044 	addi	r18,r18,1
    229c:	8c400044 	addi	r17,r17,1
    22a0:	008001c4 	movi	r2,7
    22a4:	a9000015 	stw	r4,0(r21)
    22a8:	a8c00115 	stw	r3,4(r21)
    22ac:	dc800e15 	stw	r18,56(sp)
    22b0:	dc400d15 	stw	r17,52(sp)
    22b4:	147e6016 	blt	r2,r17,1c38 <___vfprintf_internal_r+0xde8>
    22b8:	acc00204 	addi	r19,r21,8
    22bc:	003cd106 	br	1604 <___vfprintf_internal_r+0x7b4>
    22c0:	07000074 	movhi	fp,1
    22c4:	e7322d84 	addi	fp,fp,-14154
    22c8:	003c4906 	br	13f0 <___vfprintf_internal_r+0x5a0>
    22cc:	dd000f04 	addi	r20,sp,60
    22d0:	dc801904 	addi	r18,sp,100
    22d4:	8009883a 	mov	r4,r16
    22d8:	880b883a 	mov	r5,r17
    22dc:	01800284 	movi	r6,10
    22e0:	000f883a 	mov	r7,zero
    22e4:	0007fc00 	call	7fc0 <__umoddi3>
    22e8:	12000c04 	addi	r8,r2,48
    22ec:	94bfffc4 	addi	r18,r18,-1
    22f0:	8009883a 	mov	r4,r16
    22f4:	880b883a 	mov	r5,r17
    22f8:	01800284 	movi	r6,10
    22fc:	000f883a 	mov	r7,zero
    2300:	92000005 	stb	r8,0(r18)
    2304:	00079540 	call	7954 <__udivdi3>
    2308:	1009883a 	mov	r4,r2
    230c:	1021883a 	mov	r16,r2
    2310:	18800068 	cmpgeui	r2,r3,1
    2314:	1823883a 	mov	r17,r3
    2318:	103fee1e 	bne	r2,zero,22d4 <___vfprintf_internal_r+0x1484>
    231c:	1800021e 	bne	r3,zero,2328 <___vfprintf_internal_r+0x14d8>
    2320:	00800244 	movi	r2,9
    2324:	113feb36 	bltu	r2,r4,22d4 <___vfprintf_internal_r+0x1484>
    2328:	94bfffc4 	addi	r18,r18,-1
    232c:	dc814115 	stw	r18,1284(sp)
    2330:	003fc006 	br	2234 <___vfprintf_internal_r+0x13e4>
    2334:	d9014c17 	ldw	r4,1328(sp)
    2338:	2080004c 	andi	r2,r4,1
    233c:	10009a1e 	bne	r2,zero,25a8 <___vfprintf_internal_r+0x1758>
    2340:	d9401904 	addi	r5,sp,100
    2344:	dd000f04 	addi	r20,sp,60
    2348:	d9414115 	stw	r5,1284(sp)
    234c:	003d5b06 	br	18bc <___vfprintf_internal_r+0xa6c>
    2350:	d9014f17 	ldw	r4,1340(sp)
    2354:	b00b883a 	mov	r5,r22
    2358:	d9800c04 	addi	r6,sp,48
    235c:	0000df80 	call	df8 <__sprint_r>
    2360:	103c731e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    2364:	dc800e17 	ldw	r18,56(sp)
    2368:	d8c01904 	addi	r3,sp,100
    236c:	003cf906 	br	1754 <___vfprintf_internal_r+0x904>
    2370:	d8c14c17 	ldw	r3,1328(sp)
    2374:	1880040c 	andi	r2,r3,16
    2378:	1000711e 	bne	r2,zero,2540 <___vfprintf_internal_r+0x16f0>
    237c:	d9014c17 	ldw	r4,1328(sp)
    2380:	2080100c 	andi	r2,r4,64
    2384:	10006e26 	beq	r2,zero,2540 <___vfprintf_internal_r+0x16f0>
    2388:	3c00000b 	ldhu	r16,0(r7)
    238c:	0023883a 	mov	r17,zero
    2390:	39c00104 	addi	r7,r7,4
    2394:	d9c14015 	stw	r7,1280(sp)
    2398:	003efa06 	br	1f84 <___vfprintf_internal_r+0x1134>
    239c:	dc400d17 	ldw	r17,52(sp)
    23a0:	07000074 	movhi	fp,1
    23a4:	e7322d84 	addi	fp,fp,-14154
    23a8:	9425883a 	add	r18,r18,r16
    23ac:	8c400044 	addi	r17,r17,1
    23b0:	008001c4 	movi	r2,7
    23b4:	1f000015 	stw	fp,0(r3)
    23b8:	1c000115 	stw	r16,4(r3)
    23bc:	dc800e15 	stw	r18,56(sp)
    23c0:	dc400d15 	stw	r17,52(sp)
    23c4:	147d7016 	blt	r2,r17,1988 <___vfprintf_internal_r+0xb38>
    23c8:	18c00204 	addi	r3,r3,8
    23cc:	003d7506 	br	19a4 <___vfprintf_internal_r+0xb54>
    23d0:	dc800e17 	ldw	r18,56(sp)
    23d4:	dc400d17 	ldw	r17,52(sp)
    23d8:	07000074 	movhi	fp,1
    23dc:	e7323184 	addi	fp,fp,-14138
    23e0:	003bba06 	br	12cc <___vfprintf_internal_r+0x47c>
    23e4:	d9014f17 	ldw	r4,1340(sp)
    23e8:	b00b883a 	mov	r5,r22
    23ec:	d9800c04 	addi	r6,sp,48
    23f0:	0000df80 	call	df8 <__sprint_r>
    23f4:	103c4e1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    23f8:	dc800e17 	ldw	r18,56(sp)
    23fc:	d8c01904 	addi	r3,sp,100
    2400:	003ce306 	br	1790 <___vfprintf_internal_r+0x940>
    2404:	3c000017 	ldw	r16,0(r7)
    2408:	0009883a 	mov	r4,zero
    240c:	39c00104 	addi	r7,r7,4
    2410:	0023883a 	mov	r17,zero
    2414:	d9c14015 	stw	r7,1280(sp)
    2418:	d8000405 	stb	zero,16(sp)
    241c:	003d1a06 	br	1888 <___vfprintf_internal_r+0xa38>
    2420:	38800017 	ldw	r2,0(r7)
    2424:	39c00104 	addi	r7,r7,4
    2428:	d9c14015 	stw	r7,1280(sp)
    242c:	1023d7fa 	srai	r17,r2,31
    2430:	1021883a 	mov	r16,r2
    2434:	003d1206 	br	1880 <___vfprintf_internal_r+0xa30>
    2438:	3c000017 	ldw	r16,0(r7)
    243c:	01000044 	movi	r4,1
    2440:	39c00104 	addi	r7,r7,4
    2444:	0023883a 	mov	r17,zero
    2448:	d9c14015 	stw	r7,1280(sp)
    244c:	d8000405 	stb	zero,16(sp)
    2450:	003d0d06 	br	1888 <___vfprintf_internal_r+0xa38>
    2454:	00800074 	movhi	r2,1
    2458:	10b22d04 	addi	r2,r2,-14156
    245c:	94800044 	addi	r18,r18,1
    2460:	8c400044 	addi	r17,r17,1
    2464:	a8800015 	stw	r2,0(r21)
    2468:	00c00044 	movi	r3,1
    246c:	008001c4 	movi	r2,7
    2470:	a8c00115 	stw	r3,4(r21)
    2474:	dc800e15 	stw	r18,56(sp)
    2478:	dc400d15 	stw	r17,52(sp)
    247c:	1440ca16 	blt	r2,r17,27a8 <___vfprintf_internal_r+0x1958>
    2480:	a8c00204 	addi	r3,r21,8
    2484:	2000061e 	bne	r4,zero,24a0 <___vfprintf_internal_r+0x1650>
    2488:	d9414717 	ldw	r5,1308(sp)
    248c:	2800041e 	bne	r5,zero,24a0 <___vfprintf_internal_r+0x1650>
    2490:	d9814c17 	ldw	r6,1328(sp)
    2494:	3080004c 	andi	r2,r6,1
    2498:	1005003a 	cmpeq	r2,r2,zero
    249c:	103bea1e 	bne	r2,zero,1448 <___vfprintf_internal_r+0x5f8>
    24a0:	00800044 	movi	r2,1
    24a4:	dc400d17 	ldw	r17,52(sp)
    24a8:	18800115 	stw	r2,4(r3)
    24ac:	d8814917 	ldw	r2,1316(sp)
    24b0:	94800044 	addi	r18,r18,1
    24b4:	8c400044 	addi	r17,r17,1
    24b8:	18800015 	stw	r2,0(r3)
    24bc:	008001c4 	movi	r2,7
    24c0:	dc800e15 	stw	r18,56(sp)
    24c4:	dc400d15 	stw	r17,52(sp)
    24c8:	1440ca16 	blt	r2,r17,27f4 <___vfprintf_internal_r+0x19a4>
    24cc:	18c00204 	addi	r3,r3,8
    24d0:	0121c83a 	sub	r16,zero,r4
    24d4:	0400500e 	bge	zero,r16,2618 <___vfprintf_internal_r+0x17c8>
    24d8:	00800404 	movi	r2,16
    24dc:	1400800e 	bge	r2,r16,26e0 <___vfprintf_internal_r+0x1890>
    24e0:	1027883a 	mov	r19,r2
    24e4:	07000074 	movhi	fp,1
    24e8:	e7322d84 	addi	fp,fp,-14154
    24ec:	050001c4 	movi	r20,7
    24f0:	00000306 	br	2500 <___vfprintf_internal_r+0x16b0>
    24f4:	18c00204 	addi	r3,r3,8
    24f8:	843ffc04 	addi	r16,r16,-16
    24fc:	9c007a0e 	bge	r19,r16,26e8 <___vfprintf_internal_r+0x1898>
    2500:	94800404 	addi	r18,r18,16
    2504:	8c400044 	addi	r17,r17,1
    2508:	1f000015 	stw	fp,0(r3)
    250c:	1cc00115 	stw	r19,4(r3)
    2510:	dc800e15 	stw	r18,56(sp)
    2514:	dc400d15 	stw	r17,52(sp)
    2518:	a47ff60e 	bge	r20,r17,24f4 <___vfprintf_internal_r+0x16a4>
    251c:	d9014f17 	ldw	r4,1340(sp)
    2520:	b00b883a 	mov	r5,r22
    2524:	d9800c04 	addi	r6,sp,48
    2528:	0000df80 	call	df8 <__sprint_r>
    252c:	103c001e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    2530:	dc800e17 	ldw	r18,56(sp)
    2534:	dc400d17 	ldw	r17,52(sp)
    2538:	d8c01904 	addi	r3,sp,100
    253c:	003fee06 	br	24f8 <___vfprintf_internal_r+0x16a8>
    2540:	3c000017 	ldw	r16,0(r7)
    2544:	0023883a 	mov	r17,zero
    2548:	39c00104 	addi	r7,r7,4
    254c:	d9c14015 	stw	r7,1280(sp)
    2550:	003e8c06 	br	1f84 <___vfprintf_internal_r+0x1134>
    2554:	d9401904 	addi	r5,sp,100
    2558:	dd000f04 	addi	r20,sp,60
    255c:	d9414115 	stw	r5,1284(sp)
    2560:	d9814417 	ldw	r6,1296(sp)
    2564:	880a973a 	slli	r5,r17,28
    2568:	8004d13a 	srli	r2,r16,4
    256c:	810003cc 	andi	r4,r16,15
    2570:	3109883a 	add	r4,r6,r4
    2574:	2884b03a 	or	r2,r5,r2
    2578:	21400003 	ldbu	r5,0(r4)
    257c:	d9014117 	ldw	r4,1284(sp)
    2580:	8806d13a 	srli	r3,r17,4
    2584:	1021883a 	mov	r16,r2
    2588:	213fffc4 	addi	r4,r4,-1
    258c:	d9014115 	stw	r4,1284(sp)
    2590:	d9814117 	ldw	r6,1284(sp)
    2594:	10c8b03a 	or	r4,r2,r3
    2598:	1823883a 	mov	r17,r3
    259c:	31400005 	stb	r5,0(r6)
    25a0:	203fef1e 	bne	r4,zero,2560 <___vfprintf_internal_r+0x1710>
    25a4:	003cc506 	br	18bc <___vfprintf_internal_r+0xa6c>
    25a8:	00800c04 	movi	r2,48
    25ac:	d98018c4 	addi	r6,sp,99
    25b0:	dd000f04 	addi	r20,sp,60
    25b4:	d88018c5 	stb	r2,99(sp)
    25b8:	d9814115 	stw	r6,1284(sp)
    25bc:	003cbf06 	br	18bc <___vfprintf_internal_r+0xa6c>
    25c0:	dc400d17 	ldw	r17,52(sp)
    25c4:	07000074 	movhi	fp,1
    25c8:	e7323184 	addi	fp,fp,-14138
    25cc:	003bc106 	br	14d4 <___vfprintf_internal_r+0x684>
    25d0:	d9414c17 	ldw	r5,1328(sp)
    25d4:	2880040c 	andi	r2,r5,16
    25d8:	10007c26 	beq	r2,zero,27cc <___vfprintf_internal_r+0x197c>
    25dc:	38800017 	ldw	r2,0(r7)
    25e0:	39c00104 	addi	r7,r7,4
    25e4:	d9c14015 	stw	r7,1280(sp)
    25e8:	d9814b17 	ldw	r6,1324(sp)
    25ec:	d9c14017 	ldw	r7,1280(sp)
    25f0:	11800015 	stw	r6,0(r2)
    25f4:	003a7206 	br	fc0 <___vfprintf_internal_r+0x170>
    25f8:	d9014f17 	ldw	r4,1340(sp)
    25fc:	b00b883a 	mov	r5,r22
    2600:	d9800c04 	addi	r6,sp,48
    2604:	0000df80 	call	df8 <__sprint_r>
    2608:	103bc91e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    260c:	dc800e17 	ldw	r18,56(sp)
    2610:	dc400d17 	ldw	r17,52(sp)
    2614:	d8c01904 	addi	r3,sp,100
    2618:	d9014717 	ldw	r4,1308(sp)
    261c:	d9414117 	ldw	r5,1284(sp)
    2620:	8c400044 	addi	r17,r17,1
    2624:	9125883a 	add	r18,r18,r4
    2628:	008001c4 	movi	r2,7
    262c:	19400015 	stw	r5,0(r3)
    2630:	19000115 	stw	r4,4(r3)
    2634:	dc800e15 	stw	r18,56(sp)
    2638:	dc400d15 	stw	r17,52(sp)
    263c:	147ce816 	blt	r2,r17,19e0 <___vfprintf_internal_r+0xb90>
    2640:	18c00204 	addi	r3,r3,8
    2644:	003b8006 	br	1448 <___vfprintf_internal_r+0x5f8>
    2648:	38c00017 	ldw	r3,0(r7)
    264c:	39000204 	addi	r4,r7,8
    2650:	d9014015 	stw	r4,1280(sp)
    2654:	d8c14215 	stw	r3,1288(sp)
    2658:	39c00117 	ldw	r7,4(r7)
    265c:	d9c14315 	stw	r7,1292(sp)
    2660:	003e1a06 	br	1ecc <___vfprintf_internal_r+0x107c>
    2664:	0005883a 	mov	r2,zero
    2668:	1409c83a 	sub	r4,r2,r16
    266c:	1105803a 	cmpltu	r2,r2,r4
    2670:	044bc83a 	sub	r5,zero,r17
    2674:	2885c83a 	sub	r2,r5,r2
    2678:	2021883a 	mov	r16,r4
    267c:	1023883a 	mov	r17,r2
    2680:	01000044 	movi	r4,1
    2684:	00800b44 	movi	r2,45
    2688:	d8800405 	stb	r2,16(sp)
    268c:	003c7e06 	br	1888 <___vfprintf_internal_r+0xa38>
    2690:	d9014f17 	ldw	r4,1340(sp)
    2694:	b00b883a 	mov	r5,r22
    2698:	d9800c04 	addi	r6,sp,48
    269c:	0000df80 	call	df8 <__sprint_r>
    26a0:	103ba31e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    26a4:	dc800e17 	ldw	r18,56(sp)
    26a8:	dc400d17 	ldw	r17,52(sp)
    26ac:	d9000517 	ldw	r4,20(sp)
    26b0:	d9401904 	addi	r5,sp,100
    26b4:	003da106 	br	1d3c <___vfprintf_internal_r+0xeec>
    26b8:	d9014f17 	ldw	r4,1340(sp)
    26bc:	b00b883a 	mov	r5,r22
    26c0:	d9800c04 	addi	r6,sp,48
    26c4:	0000df80 	call	df8 <__sprint_r>
    26c8:	103b991e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    26cc:	dc800e17 	ldw	r18,56(sp)
    26d0:	dc400d17 	ldw	r17,52(sp)
    26d4:	d9000517 	ldw	r4,20(sp)
    26d8:	d8c01904 	addi	r3,sp,100
    26dc:	003d8b06 	br	1d0c <___vfprintf_internal_r+0xebc>
    26e0:	07000074 	movhi	fp,1
    26e4:	e7322d84 	addi	fp,fp,-14154
    26e8:	9425883a 	add	r18,r18,r16
    26ec:	8c400044 	addi	r17,r17,1
    26f0:	008001c4 	movi	r2,7
    26f4:	1f000015 	stw	fp,0(r3)
    26f8:	1c000115 	stw	r16,4(r3)
    26fc:	dc800e15 	stw	r18,56(sp)
    2700:	dc400d15 	stw	r17,52(sp)
    2704:	147fbc16 	blt	r2,r17,25f8 <___vfprintf_internal_r+0x17a8>
    2708:	18c00204 	addi	r3,r3,8
    270c:	003fc206 	br	2618 <___vfprintf_internal_r+0x17c8>
    2710:	d9014f17 	ldw	r4,1340(sp)
    2714:	b00b883a 	mov	r5,r22
    2718:	d9800c04 	addi	r6,sp,48
    271c:	0000df80 	call	df8 <__sprint_r>
    2720:	103b831e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    2724:	dc800e17 	ldw	r18,56(sp)
    2728:	d9000517 	ldw	r4,20(sp)
    272c:	d8c01904 	addi	r3,sp,100
    2730:	003cfc06 	br	1b24 <___vfprintf_internal_r+0xcd4>
    2734:	07000074 	movhi	fp,1
    2738:	e7322d84 	addi	fp,fp,-14154
    273c:	003bde06 	br	16b8 <___vfprintf_internal_r+0x868>
    2740:	00800074 	movhi	r2,1
    2744:	10b21c04 	addi	r2,r2,-14224
    2748:	d8814115 	stw	r2,1284(sp)
    274c:	003def06 	br	1f0c <___vfprintf_internal_r+0x10bc>
    2750:	d9014217 	ldw	r4,1288(sp)
    2754:	d9414317 	ldw	r5,1292(sp)
    2758:	00072000 	call	7200 <__isnand>
    275c:	10003926 	beq	r2,zero,2844 <___vfprintf_internal_r+0x19f4>
    2760:	d9414d17 	ldw	r5,1332(sp)
    2764:	008011c4 	movi	r2,71
    2768:	1140ce16 	blt	r2,r5,2aa4 <___vfprintf_internal_r+0x1c54>
    276c:	01800074 	movhi	r6,1
    2770:	31b21d04 	addi	r6,r6,-14220
    2774:	d9814115 	stw	r6,1284(sp)
    2778:	003de406 	br	1f0c <___vfprintf_internal_r+0x10bc>
    277c:	d9014c17 	ldw	r4,1328(sp)
    2780:	bdc00044 	addi	r23,r23,1
    2784:	b8c00007 	ldb	r3,0(r23)
    2788:	21000814 	ori	r4,r4,32
    278c:	d9014c15 	stw	r4,1328(sp)
    2790:	003a2e06 	br	104c <___vfprintf_internal_r+0x1fc>
    2794:	dcc14515 	stw	r19,1300(sp)
    2798:	98011016 	blt	r19,zero,2bdc <___vfprintf_internal_r+0x1d8c>
    279c:	980f883a 	mov	r7,r19
    27a0:	d8014615 	stw	zero,1304(sp)
    27a4:	003c4c06 	br	18d8 <___vfprintf_internal_r+0xa88>
    27a8:	d9014f17 	ldw	r4,1340(sp)
    27ac:	b00b883a 	mov	r5,r22
    27b0:	d9800c04 	addi	r6,sp,48
    27b4:	0000df80 	call	df8 <__sprint_r>
    27b8:	103b5d1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    27bc:	dc800e17 	ldw	r18,56(sp)
    27c0:	d9000517 	ldw	r4,20(sp)
    27c4:	d8c01904 	addi	r3,sp,100
    27c8:	003f2e06 	br	2484 <___vfprintf_internal_r+0x1634>
    27cc:	d8c14c17 	ldw	r3,1328(sp)
    27d0:	1880100c 	andi	r2,r3,64
    27d4:	1000a026 	beq	r2,zero,2a58 <___vfprintf_internal_r+0x1c08>
    27d8:	38800017 	ldw	r2,0(r7)
    27dc:	39c00104 	addi	r7,r7,4
    27e0:	d9c14015 	stw	r7,1280(sp)
    27e4:	d9014b17 	ldw	r4,1324(sp)
    27e8:	d9c14017 	ldw	r7,1280(sp)
    27ec:	1100000d 	sth	r4,0(r2)
    27f0:	0039f306 	br	fc0 <___vfprintf_internal_r+0x170>
    27f4:	d9014f17 	ldw	r4,1340(sp)
    27f8:	b00b883a 	mov	r5,r22
    27fc:	d9800c04 	addi	r6,sp,48
    2800:	0000df80 	call	df8 <__sprint_r>
    2804:	103b4a1e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    2808:	dc800e17 	ldw	r18,56(sp)
    280c:	dc400d17 	ldw	r17,52(sp)
    2810:	d9000517 	ldw	r4,20(sp)
    2814:	d8c01904 	addi	r3,sp,100
    2818:	003f2d06 	br	24d0 <___vfprintf_internal_r+0x1680>
    281c:	00800184 	movi	r2,6
    2820:	14c09a36 	bltu	r2,r19,2a8c <___vfprintf_internal_r+0x1c3c>
    2824:	dcc14515 	stw	r19,1300(sp)
    2828:	9800010e 	bge	r19,zero,2830 <___vfprintf_internal_r+0x19e0>
    282c:	d8014515 	stw	zero,1300(sp)
    2830:	00800074 	movhi	r2,1
    2834:	10b21f04 	addi	r2,r2,-14212
    2838:	980f883a 	mov	r7,r19
    283c:	d8814115 	stw	r2,1284(sp)
    2840:	003a7206 	br	120c <___vfprintf_internal_r+0x3bc>
    2844:	00bfffc4 	movi	r2,-1
    2848:	9880e226 	beq	r19,r2,2bd4 <___vfprintf_internal_r+0x1d84>
    284c:	d9414d17 	ldw	r5,1332(sp)
    2850:	008019c4 	movi	r2,103
    2854:	2880dc26 	beq	r5,r2,2bc8 <___vfprintf_internal_r+0x1d78>
    2858:	008011c4 	movi	r2,71
    285c:	2880da26 	beq	r5,r2,2bc8 <___vfprintf_internal_r+0x1d78>
    2860:	d9414c17 	ldw	r5,1328(sp)
    2864:	d9014317 	ldw	r4,1292(sp)
    2868:	d9814217 	ldw	r6,1288(sp)
    286c:	29404014 	ori	r5,r5,256
    2870:	d9414c15 	stw	r5,1328(sp)
    2874:	2000cc16 	blt	r4,zero,2ba8 <___vfprintf_internal_r+0x1d58>
    2878:	3021883a 	mov	r16,r6
    287c:	2023883a 	mov	r17,r4
    2880:	0039883a 	mov	fp,zero
    2884:	d9414d17 	ldw	r5,1332(sp)
    2888:	00801984 	movi	r2,102
    288c:	2880b726 	beq	r5,r2,2b6c <___vfprintf_internal_r+0x1d1c>
    2890:	00801184 	movi	r2,70
    2894:	2880b526 	beq	r5,r2,2b6c <___vfprintf_internal_r+0x1d1c>
    2898:	00801944 	movi	r2,101
    289c:	2880c826 	beq	r5,r2,2bc0 <___vfprintf_internal_r+0x1d70>
    28a0:	00801144 	movi	r2,69
    28a4:	2880c626 	beq	r5,r2,2bc0 <___vfprintf_internal_r+0x1d70>
    28a8:	9829883a 	mov	r20,r19
    28ac:	d9014f17 	ldw	r4,1340(sp)
    28b0:	d8800504 	addi	r2,sp,20
    28b4:	880d883a 	mov	r6,r17
    28b8:	d8800115 	stw	r2,4(sp)
    28bc:	d8c00604 	addi	r3,sp,24
    28c0:	d8800704 	addi	r2,sp,28
    28c4:	800b883a 	mov	r5,r16
    28c8:	01c00084 	movi	r7,2
    28cc:	d8c00215 	stw	r3,8(sp)
    28d0:	d8800315 	stw	r2,12(sp)
    28d4:	dd000015 	stw	r20,0(sp)
    28d8:	00030b80 	call	30b8 <_dtoa_r>
    28dc:	d9814d17 	ldw	r6,1332(sp)
    28e0:	d8814115 	stw	r2,1284(sp)
    28e4:	008019c4 	movi	r2,103
    28e8:	30809526 	beq	r6,r2,2b40 <___vfprintf_internal_r+0x1cf0>
    28ec:	d8c14d17 	ldw	r3,1332(sp)
    28f0:	008011c4 	movi	r2,71
    28f4:	18809226 	beq	r3,r2,2b40 <___vfprintf_internal_r+0x1cf0>
    28f8:	d9414117 	ldw	r5,1284(sp)
    28fc:	d9814d17 	ldw	r6,1332(sp)
    2900:	00801984 	movi	r2,102
    2904:	2d25883a 	add	r18,r5,r20
    2908:	30808626 	beq	r6,r2,2b24 <___vfprintf_internal_r+0x1cd4>
    290c:	00801184 	movi	r2,70
    2910:	30808426 	beq	r6,r2,2b24 <___vfprintf_internal_r+0x1cd4>
    2914:	000d883a 	mov	r6,zero
    2918:	000f883a 	mov	r7,zero
    291c:	880b883a 	mov	r5,r17
    2920:	8009883a 	mov	r4,r16
    2924:	00091400 	call	9140 <__eqdf2>
    2928:	1000751e 	bne	r2,zero,2b00 <___vfprintf_internal_r+0x1cb0>
    292c:	9005883a 	mov	r2,r18
    2930:	dc800715 	stw	r18,28(sp)
    2934:	d9014117 	ldw	r4,1284(sp)
    2938:	d9414d17 	ldw	r5,1332(sp)
    293c:	00c019c4 	movi	r3,103
    2940:	1125c83a 	sub	r18,r2,r4
    2944:	28c06826 	beq	r5,r3,2ae8 <___vfprintf_internal_r+0x1c98>
    2948:	008011c4 	movi	r2,71
    294c:	28806626 	beq	r5,r2,2ae8 <___vfprintf_internal_r+0x1c98>
    2950:	d9000517 	ldw	r4,20(sp)
    2954:	d8c14d17 	ldw	r3,1332(sp)
    2958:	00801944 	movi	r2,101
    295c:	10c05516 	blt	r2,r3,2ab4 <___vfprintf_internal_r+0x1c64>
    2960:	213fffc4 	addi	r4,r4,-1
    2964:	d9000515 	stw	r4,20(sp)
    2968:	d8c00805 	stb	r3,32(sp)
    296c:	2021883a 	mov	r16,r4
    2970:	2000c116 	blt	r4,zero,2c78 <___vfprintf_internal_r+0x1e28>
    2974:	00800ac4 	movi	r2,43
    2978:	d8800845 	stb	r2,33(sp)
    297c:	00800244 	movi	r2,9
    2980:	1400af0e 	bge	r2,r16,2c40 <___vfprintf_internal_r+0x1df0>
    2984:	1027883a 	mov	r19,r2
    2988:	dc400b84 	addi	r17,sp,46
    298c:	8009883a 	mov	r4,r16
    2990:	01400284 	movi	r5,10
    2994:	00005000 	call	500 <__modsi3>
    2998:	10800c04 	addi	r2,r2,48
    299c:	8c7fffc4 	addi	r17,r17,-1
    29a0:	8009883a 	mov	r4,r16
    29a4:	01400284 	movi	r5,10
    29a8:	88800005 	stb	r2,0(r17)
    29ac:	00004a00 	call	4a0 <__divsi3>
    29b0:	1021883a 	mov	r16,r2
    29b4:	98bff516 	blt	r19,r2,298c <___vfprintf_internal_r+0x1b3c>
    29b8:	10c00c04 	addi	r3,r2,48
    29bc:	d88009c4 	addi	r2,sp,39
    29c0:	108001c4 	addi	r2,r2,7
    29c4:	897fffc4 	addi	r5,r17,-1
    29c8:	88ffffc5 	stb	r3,-1(r17)
    29cc:	2880a72e 	bgeu	r5,r2,2c6c <___vfprintf_internal_r+0x1e1c>
    29d0:	1009883a 	mov	r4,r2
    29d4:	d9800804 	addi	r6,sp,32
    29d8:	d8c00884 	addi	r3,sp,34
    29dc:	28800003 	ldbu	r2,0(r5)
    29e0:	29400044 	addi	r5,r5,1
    29e4:	18800005 	stb	r2,0(r3)
    29e8:	18c00044 	addi	r3,r3,1
    29ec:	293ffb36 	bltu	r5,r4,29dc <___vfprintf_internal_r+0x1b8c>
    29f0:	1987c83a 	sub	r3,r3,r6
    29f4:	00800044 	movi	r2,1
    29f8:	d8c14815 	stw	r3,1312(sp)
    29fc:	90cf883a 	add	r7,r18,r3
    2a00:	1480960e 	bge	r2,r18,2c5c <___vfprintf_internal_r+0x1e0c>
    2a04:	39c00044 	addi	r7,r7,1
    2a08:	d9c14515 	stw	r7,1300(sp)
    2a0c:	38003416 	blt	r7,zero,2ae0 <___vfprintf_internal_r+0x1c90>
    2a10:	e0803fcc 	andi	r2,fp,255
    2a14:	1080201c 	xori	r2,r2,128
    2a18:	10bfe004 	addi	r2,r2,-128
    2a1c:	10004e26 	beq	r2,zero,2b58 <___vfprintf_internal_r+0x1d08>
    2a20:	00800b44 	movi	r2,45
    2a24:	dc814715 	stw	r18,1308(sp)
    2a28:	d8014615 	stw	zero,1304(sp)
    2a2c:	d8800405 	stb	r2,16(sp)
    2a30:	003bab06 	br	18e0 <___vfprintf_internal_r+0xa90>
    2a34:	00800b44 	movi	r2,45
    2a38:	d8800405 	stb	r2,16(sp)
    2a3c:	003d2d06 	br	1ef4 <___vfprintf_internal_r+0x10a4>
    2a40:	d9014f17 	ldw	r4,1340(sp)
    2a44:	b00b883a 	mov	r5,r22
    2a48:	d9800c04 	addi	r6,sp,48
    2a4c:	0000df80 	call	df8 <__sprint_r>
    2a50:	103ab71e 	bne	r2,zero,1530 <___vfprintf_internal_r+0x6e0>
    2a54:	003ab506 	br	152c <___vfprintf_internal_r+0x6dc>
    2a58:	38800017 	ldw	r2,0(r7)
    2a5c:	39c00104 	addi	r7,r7,4
    2a60:	d9c14015 	stw	r7,1280(sp)
    2a64:	d9414b17 	ldw	r5,1324(sp)
    2a68:	d9c14017 	ldw	r7,1280(sp)
    2a6c:	11400015 	stw	r5,0(r2)
    2a70:	00395306 	br	fc0 <___vfprintf_internal_r+0x170>
    2a74:	980f883a 	mov	r7,r19
    2a78:	dcc14515 	stw	r19,1300(sp)
    2a7c:	d8014615 	stw	zero,1304(sp)
    2a80:	003b9506 	br	18d8 <___vfprintf_internal_r+0xa88>
    2a84:	0027883a 	mov	r19,zero
    2a88:	00397206 	br	1054 <___vfprintf_internal_r+0x204>
    2a8c:	00c00074 	movhi	r3,1
    2a90:	18f21f04 	addi	r3,r3,-14212
    2a94:	100f883a 	mov	r7,r2
    2a98:	d8814515 	stw	r2,1300(sp)
    2a9c:	d8c14115 	stw	r3,1284(sp)
    2aa0:	0039da06 	br	120c <___vfprintf_internal_r+0x3bc>
    2aa4:	00800074 	movhi	r2,1
    2aa8:	10b21e04 	addi	r2,r2,-14216
    2aac:	d8814115 	stw	r2,1284(sp)
    2ab0:	003d1606 	br	1f0c <___vfprintf_internal_r+0x10bc>
    2ab4:	d9414d17 	ldw	r5,1332(sp)
    2ab8:	00801984 	movi	r2,102
    2abc:	28804926 	beq	r5,r2,2be4 <___vfprintf_internal_r+0x1d94>
    2ac0:	200f883a 	mov	r7,r4
    2ac4:	24805716 	blt	r4,r18,2c24 <___vfprintf_internal_r+0x1dd4>
    2ac8:	d9414c17 	ldw	r5,1328(sp)
    2acc:	2880004c 	andi	r2,r5,1
    2ad0:	10000126 	beq	r2,zero,2ad8 <___vfprintf_internal_r+0x1c88>
    2ad4:	21c00044 	addi	r7,r4,1
    2ad8:	d9c14515 	stw	r7,1300(sp)
    2adc:	383fcc0e 	bge	r7,zero,2a10 <___vfprintf_internal_r+0x1bc0>
    2ae0:	d8014515 	stw	zero,1300(sp)
    2ae4:	003fca06 	br	2a10 <___vfprintf_internal_r+0x1bc0>
    2ae8:	d9000517 	ldw	r4,20(sp)
    2aec:	00bfff04 	movi	r2,-4
    2af0:	1100480e 	bge	r2,r4,2c14 <___vfprintf_internal_r+0x1dc4>
    2af4:	99004716 	blt	r19,r4,2c14 <___vfprintf_internal_r+0x1dc4>
    2af8:	d8c14d15 	stw	r3,1332(sp)
    2afc:	003ff006 	br	2ac0 <___vfprintf_internal_r+0x1c70>
    2b00:	d8800717 	ldw	r2,28(sp)
    2b04:	14bf8b2e 	bgeu	r2,r18,2934 <___vfprintf_internal_r+0x1ae4>
    2b08:	9007883a 	mov	r3,r18
    2b0c:	01000c04 	movi	r4,48
    2b10:	11000005 	stb	r4,0(r2)
    2b14:	10800044 	addi	r2,r2,1
    2b18:	d8800715 	stw	r2,28(sp)
    2b1c:	18bffc1e 	bne	r3,r2,2b10 <___vfprintf_internal_r+0x1cc0>
    2b20:	003f8406 	br	2934 <___vfprintf_internal_r+0x1ae4>
    2b24:	d8814117 	ldw	r2,1284(sp)
    2b28:	10c00007 	ldb	r3,0(r2)
    2b2c:	00800c04 	movi	r2,48
    2b30:	18805b26 	beq	r3,r2,2ca0 <___vfprintf_internal_r+0x1e50>
    2b34:	d9000517 	ldw	r4,20(sp)
    2b38:	9125883a 	add	r18,r18,r4
    2b3c:	003f7506 	br	2914 <___vfprintf_internal_r+0x1ac4>
    2b40:	d9014c17 	ldw	r4,1328(sp)
    2b44:	2080004c 	andi	r2,r4,1
    2b48:	1005003a 	cmpeq	r2,r2,zero
    2b4c:	103f6a26 	beq	r2,zero,28f8 <___vfprintf_internal_r+0x1aa8>
    2b50:	d8800717 	ldw	r2,28(sp)
    2b54:	003f7706 	br	2934 <___vfprintf_internal_r+0x1ae4>
    2b58:	d9c14515 	stw	r7,1300(sp)
    2b5c:	38004d16 	blt	r7,zero,2c94 <___vfprintf_internal_r+0x1e44>
    2b60:	dc814715 	stw	r18,1308(sp)
    2b64:	d8014615 	stw	zero,1304(sp)
    2b68:	003b5b06 	br	18d8 <___vfprintf_internal_r+0xa88>
    2b6c:	d9014f17 	ldw	r4,1340(sp)
    2b70:	d8800504 	addi	r2,sp,20
    2b74:	d8800115 	stw	r2,4(sp)
    2b78:	d8c00604 	addi	r3,sp,24
    2b7c:	d8800704 	addi	r2,sp,28
    2b80:	800b883a 	mov	r5,r16
    2b84:	880d883a 	mov	r6,r17
    2b88:	01c000c4 	movi	r7,3
    2b8c:	d8c00215 	stw	r3,8(sp)
    2b90:	d8800315 	stw	r2,12(sp)
    2b94:	dcc00015 	stw	r19,0(sp)
    2b98:	9829883a 	mov	r20,r19
    2b9c:	00030b80 	call	30b8 <_dtoa_r>
    2ba0:	d8814115 	stw	r2,1284(sp)
    2ba4:	003f5106 	br	28ec <___vfprintf_internal_r+0x1a9c>
    2ba8:	d8c14217 	ldw	r3,1288(sp)
    2bac:	d9014317 	ldw	r4,1292(sp)
    2bb0:	07000b44 	movi	fp,45
    2bb4:	1821883a 	mov	r16,r3
    2bb8:	2460003c 	xorhi	r17,r4,32768
    2bbc:	003f3106 	br	2884 <___vfprintf_internal_r+0x1a34>
    2bc0:	9d000044 	addi	r20,r19,1
    2bc4:	003f3906 	br	28ac <___vfprintf_internal_r+0x1a5c>
    2bc8:	983f251e 	bne	r19,zero,2860 <___vfprintf_internal_r+0x1a10>
    2bcc:	04c00044 	movi	r19,1
    2bd0:	003f2306 	br	2860 <___vfprintf_internal_r+0x1a10>
    2bd4:	04c00184 	movi	r19,6
    2bd8:	003f2106 	br	2860 <___vfprintf_internal_r+0x1a10>
    2bdc:	d8014515 	stw	zero,1300(sp)
    2be0:	003eee06 	br	279c <___vfprintf_internal_r+0x194c>
    2be4:	200f883a 	mov	r7,r4
    2be8:	0100370e 	bge	zero,r4,2cc8 <___vfprintf_internal_r+0x1e78>
    2bec:	9800031e 	bne	r19,zero,2bfc <___vfprintf_internal_r+0x1dac>
    2bf0:	d9814c17 	ldw	r6,1328(sp)
    2bf4:	3080004c 	andi	r2,r6,1
    2bf8:	103fb726 	beq	r2,zero,2ad8 <___vfprintf_internal_r+0x1c88>
    2bfc:	20800044 	addi	r2,r4,1
    2c00:	98a7883a 	add	r19,r19,r2
    2c04:	dcc14515 	stw	r19,1300(sp)
    2c08:	980f883a 	mov	r7,r19
    2c0c:	983f800e 	bge	r19,zero,2a10 <___vfprintf_internal_r+0x1bc0>
    2c10:	003fb306 	br	2ae0 <___vfprintf_internal_r+0x1c90>
    2c14:	d9814d17 	ldw	r6,1332(sp)
    2c18:	31bfff84 	addi	r6,r6,-2
    2c1c:	d9814d15 	stw	r6,1332(sp)
    2c20:	003f4c06 	br	2954 <___vfprintf_internal_r+0x1b04>
    2c24:	0100180e 	bge	zero,r4,2c88 <___vfprintf_internal_r+0x1e38>
    2c28:	00800044 	movi	r2,1
    2c2c:	1485883a 	add	r2,r2,r18
    2c30:	d8814515 	stw	r2,1300(sp)
    2c34:	100f883a 	mov	r7,r2
    2c38:	103f750e 	bge	r2,zero,2a10 <___vfprintf_internal_r+0x1bc0>
    2c3c:	003fa806 	br	2ae0 <___vfprintf_internal_r+0x1c90>
    2c40:	80c00c04 	addi	r3,r16,48
    2c44:	00800c04 	movi	r2,48
    2c48:	d8c008c5 	stb	r3,35(sp)
    2c4c:	d9800804 	addi	r6,sp,32
    2c50:	d8c00904 	addi	r3,sp,36
    2c54:	d8800885 	stb	r2,34(sp)
    2c58:	003f6506 	br	29f0 <___vfprintf_internal_r+0x1ba0>
    2c5c:	d9014c17 	ldw	r4,1328(sp)
    2c60:	2084703a 	and	r2,r4,r2
    2c64:	103f9c26 	beq	r2,zero,2ad8 <___vfprintf_internal_r+0x1c88>
    2c68:	003f6606 	br	2a04 <___vfprintf_internal_r+0x1bb4>
    2c6c:	d9800804 	addi	r6,sp,32
    2c70:	d8c00884 	addi	r3,sp,34
    2c74:	003f5e06 	br	29f0 <___vfprintf_internal_r+0x1ba0>
    2c78:	00800b44 	movi	r2,45
    2c7c:	0121c83a 	sub	r16,zero,r4
    2c80:	d8800845 	stb	r2,33(sp)
    2c84:	003f3d06 	br	297c <___vfprintf_internal_r+0x1b2c>
    2c88:	00800084 	movi	r2,2
    2c8c:	1105c83a 	sub	r2,r2,r4
    2c90:	003fe606 	br	2c2c <___vfprintf_internal_r+0x1ddc>
    2c94:	d8014515 	stw	zero,1300(sp)
    2c98:	dc814715 	stw	r18,1308(sp)
    2c9c:	003fb106 	br	2b64 <___vfprintf_internal_r+0x1d14>
    2ca0:	000d883a 	mov	r6,zero
    2ca4:	000f883a 	mov	r7,zero
    2ca8:	8009883a 	mov	r4,r16
    2cac:	880b883a 	mov	r5,r17
    2cb0:	00091c80 	call	91c8 <__nedf2>
    2cb4:	103f9f26 	beq	r2,zero,2b34 <___vfprintf_internal_r+0x1ce4>
    2cb8:	00800044 	movi	r2,1
    2cbc:	1509c83a 	sub	r4,r2,r20
    2cc0:	d9000515 	stw	r4,20(sp)
    2cc4:	003f9b06 	br	2b34 <___vfprintf_internal_r+0x1ce4>
    2cc8:	98000d1e 	bne	r19,zero,2d00 <___vfprintf_internal_r+0x1eb0>
    2ccc:	d8c14c17 	ldw	r3,1328(sp)
    2cd0:	1880004c 	andi	r2,r3,1
    2cd4:	10000a1e 	bne	r2,zero,2d00 <___vfprintf_internal_r+0x1eb0>
    2cd8:	01000044 	movi	r4,1
    2cdc:	200f883a 	mov	r7,r4
    2ce0:	d9014515 	stw	r4,1300(sp)
    2ce4:	003f4a06 	br	2a10 <___vfprintf_internal_r+0x1bc0>
    2ce8:	3cc00017 	ldw	r19,0(r7)
    2cec:	39c00104 	addi	r7,r7,4
    2cf0:	983d0e0e 	bge	r19,zero,212c <___vfprintf_internal_r+0x12dc>
    2cf4:	b8c00007 	ldb	r3,0(r23)
    2cf8:	04ffffc4 	movi	r19,-1
    2cfc:	0038d306 	br	104c <___vfprintf_internal_r+0x1fc>
    2d00:	9cc00084 	addi	r19,r19,2
    2d04:	dcc14515 	stw	r19,1300(sp)
    2d08:	980f883a 	mov	r7,r19
    2d0c:	983f400e 	bge	r19,zero,2a10 <___vfprintf_internal_r+0x1bc0>
    2d10:	003f7306 	br	2ae0 <___vfprintf_internal_r+0x1c90>

00002d14 <__vfprintf_internal>:
    2d14:	00800074 	movhi	r2,1
    2d18:	10b96d04 	addi	r2,r2,-6732
    2d1c:	2013883a 	mov	r9,r4
    2d20:	11000017 	ldw	r4,0(r2)
    2d24:	2805883a 	mov	r2,r5
    2d28:	300f883a 	mov	r7,r6
    2d2c:	480b883a 	mov	r5,r9
    2d30:	100d883a 	mov	r6,r2
    2d34:	0000e501 	jmpi	e50 <___vfprintf_internal_r>

00002d38 <__swsetup_r>:
    2d38:	00800074 	movhi	r2,1
    2d3c:	10b96d04 	addi	r2,r2,-6732
    2d40:	10c00017 	ldw	r3,0(r2)
    2d44:	defffd04 	addi	sp,sp,-12
    2d48:	dc400115 	stw	r17,4(sp)
    2d4c:	dc000015 	stw	r16,0(sp)
    2d50:	dfc00215 	stw	ra,8(sp)
    2d54:	2023883a 	mov	r17,r4
    2d58:	2821883a 	mov	r16,r5
    2d5c:	18000226 	beq	r3,zero,2d68 <__swsetup_r+0x30>
    2d60:	18800e17 	ldw	r2,56(r3)
    2d64:	10001f26 	beq	r2,zero,2de4 <__swsetup_r+0xac>
    2d68:	8100030b 	ldhu	r4,12(r16)
    2d6c:	2080020c 	andi	r2,r4,8
    2d70:	10002826 	beq	r2,zero,2e14 <__swsetup_r+0xdc>
    2d74:	81400417 	ldw	r5,16(r16)
    2d78:	28001d26 	beq	r5,zero,2df0 <__swsetup_r+0xb8>
    2d7c:	2080004c 	andi	r2,r4,1
    2d80:	1005003a 	cmpeq	r2,r2,zero
    2d84:	10000b26 	beq	r2,zero,2db4 <__swsetup_r+0x7c>
    2d88:	2080008c 	andi	r2,r4,2
    2d8c:	10001226 	beq	r2,zero,2dd8 <__swsetup_r+0xa0>
    2d90:	0005883a 	mov	r2,zero
    2d94:	80800215 	stw	r2,8(r16)
    2d98:	28000b26 	beq	r5,zero,2dc8 <__swsetup_r+0x90>
    2d9c:	0005883a 	mov	r2,zero
    2da0:	dfc00217 	ldw	ra,8(sp)
    2da4:	dc400117 	ldw	r17,4(sp)
    2da8:	dc000017 	ldw	r16,0(sp)
    2dac:	dec00304 	addi	sp,sp,12
    2db0:	f800283a 	ret
    2db4:	80800517 	ldw	r2,20(r16)
    2db8:	80000215 	stw	zero,8(r16)
    2dbc:	0085c83a 	sub	r2,zero,r2
    2dc0:	80800615 	stw	r2,24(r16)
    2dc4:	283ff51e 	bne	r5,zero,2d9c <__swsetup_r+0x64>
    2dc8:	2080200c 	andi	r2,r4,128
    2dcc:	103ff326 	beq	r2,zero,2d9c <__swsetup_r+0x64>
    2dd0:	00bfffc4 	movi	r2,-1
    2dd4:	003ff206 	br	2da0 <__swsetup_r+0x68>
    2dd8:	80800517 	ldw	r2,20(r16)
    2ddc:	80800215 	stw	r2,8(r16)
    2de0:	003fed06 	br	2d98 <__swsetup_r+0x60>
    2de4:	1809883a 	mov	r4,r3
    2de8:	00049040 	call	4904 <__sinit>
    2dec:	003fde06 	br	2d68 <__swsetup_r+0x30>
    2df0:	20c0a00c 	andi	r3,r4,640
    2df4:	00808004 	movi	r2,512
    2df8:	18bfe026 	beq	r3,r2,2d7c <__swsetup_r+0x44>
    2dfc:	8809883a 	mov	r4,r17
    2e00:	800b883a 	mov	r5,r16
    2e04:	00056b00 	call	56b0 <__smakebuf_r>
    2e08:	8100030b 	ldhu	r4,12(r16)
    2e0c:	81400417 	ldw	r5,16(r16)
    2e10:	003fda06 	br	2d7c <__swsetup_r+0x44>
    2e14:	2080040c 	andi	r2,r4,16
    2e18:	103fed26 	beq	r2,zero,2dd0 <__swsetup_r+0x98>
    2e1c:	2080010c 	andi	r2,r4,4
    2e20:	10001226 	beq	r2,zero,2e6c <__swsetup_r+0x134>
    2e24:	81400c17 	ldw	r5,48(r16)
    2e28:	28000526 	beq	r5,zero,2e40 <__swsetup_r+0x108>
    2e2c:	80801004 	addi	r2,r16,64
    2e30:	28800226 	beq	r5,r2,2e3c <__swsetup_r+0x104>
    2e34:	8809883a 	mov	r4,r17
    2e38:	0004cbc0 	call	4cbc <_free_r>
    2e3c:	80000c15 	stw	zero,48(r16)
    2e40:	8080030b 	ldhu	r2,12(r16)
    2e44:	81400417 	ldw	r5,16(r16)
    2e48:	80000115 	stw	zero,4(r16)
    2e4c:	10bff6cc 	andi	r2,r2,65499
    2e50:	8080030d 	sth	r2,12(r16)
    2e54:	81400015 	stw	r5,0(r16)
    2e58:	8080030b 	ldhu	r2,12(r16)
    2e5c:	10800214 	ori	r2,r2,8
    2e60:	113fffcc 	andi	r4,r2,65535
    2e64:	8080030d 	sth	r2,12(r16)
    2e68:	003fc306 	br	2d78 <__swsetup_r+0x40>
    2e6c:	81400417 	ldw	r5,16(r16)
    2e70:	003ff906 	br	2e58 <__swsetup_r+0x120>

00002e74 <quorem>:
    2e74:	28c00417 	ldw	r3,16(r5)
    2e78:	20800417 	ldw	r2,16(r4)
    2e7c:	defff104 	addi	sp,sp,-60
    2e80:	dfc00e15 	stw	ra,56(sp)
    2e84:	df000d15 	stw	fp,52(sp)
    2e88:	ddc00c15 	stw	r23,48(sp)
    2e8c:	dd800b15 	stw	r22,44(sp)
    2e90:	dd400a15 	stw	r21,40(sp)
    2e94:	dd000915 	stw	r20,36(sp)
    2e98:	dcc00815 	stw	r19,32(sp)
    2e9c:	dc800715 	stw	r18,28(sp)
    2ea0:	dc400615 	stw	r17,24(sp)
    2ea4:	dc000515 	stw	r16,20(sp)
    2ea8:	d9000315 	stw	r4,12(sp)
    2eac:	d9400415 	stw	r5,16(sp)
    2eb0:	10c07f16 	blt	r2,r3,30b0 <quorem+0x23c>
    2eb4:	1d3fffc4 	addi	r20,r3,-1
    2eb8:	d8c00417 	ldw	r3,16(sp)
    2ebc:	d9000317 	ldw	r4,12(sp)
    2ec0:	a505883a 	add	r2,r20,r20
    2ec4:	1085883a 	add	r2,r2,r2
    2ec8:	1cc00504 	addi	r19,r3,20
    2ecc:	25c00504 	addi	r23,r4,20
    2ed0:	98ad883a 	add	r22,r19,r2
    2ed4:	15c7883a 	add	r3,r2,r23
    2ed8:	b1400017 	ldw	r5,0(r22)
    2edc:	19000017 	ldw	r4,0(r3)
    2ee0:	d8c00015 	stw	r3,0(sp)
    2ee4:	29400044 	addi	r5,r5,1
    2ee8:	d9000215 	stw	r4,8(sp)
    2eec:	00005600 	call	560 <__udivsi3>
    2ef0:	1039883a 	mov	fp,r2
    2ef4:	10003d1e 	bne	r2,zero,2fec <quorem+0x178>
    2ef8:	d9400417 	ldw	r5,16(sp)
    2efc:	d9000317 	ldw	r4,12(sp)
    2f00:	0005c9c0 	call	5c9c <__mcmp>
    2f04:	10002c16 	blt	r2,zero,2fb8 <quorem+0x144>
    2f08:	e7000044 	addi	fp,fp,1
    2f0c:	b80f883a 	mov	r7,r23
    2f10:	0011883a 	mov	r8,zero
    2f14:	0009883a 	mov	r4,zero
    2f18:	99400017 	ldw	r5,0(r19)
    2f1c:	38c00017 	ldw	r3,0(r7)
    2f20:	9cc00104 	addi	r19,r19,4
    2f24:	28bfffcc 	andi	r2,r5,65535
    2f28:	2085883a 	add	r2,r4,r2
    2f2c:	11bfffcc 	andi	r6,r2,65535
    2f30:	193fffcc 	andi	r4,r3,65535
    2f34:	1004d43a 	srli	r2,r2,16
    2f38:	280ad43a 	srli	r5,r5,16
    2f3c:	2189c83a 	sub	r4,r4,r6
    2f40:	2209883a 	add	r4,r4,r8
    2f44:	1806d43a 	srli	r3,r3,16
    2f48:	288b883a 	add	r5,r5,r2
    2f4c:	200dd43a 	srai	r6,r4,16
    2f50:	28bfffcc 	andi	r2,r5,65535
    2f54:	1887c83a 	sub	r3,r3,r2
    2f58:	1987883a 	add	r3,r3,r6
    2f5c:	3900000d 	sth	r4,0(r7)
    2f60:	38c0008d 	sth	r3,2(r7)
    2f64:	2808d43a 	srli	r4,r5,16
    2f68:	39c00104 	addi	r7,r7,4
    2f6c:	1811d43a 	srai	r8,r3,16
    2f70:	b4ffe92e 	bgeu	r22,r19,2f18 <quorem+0xa4>
    2f74:	a505883a 	add	r2,r20,r20
    2f78:	1085883a 	add	r2,r2,r2
    2f7c:	b885883a 	add	r2,r23,r2
    2f80:	10c00017 	ldw	r3,0(r2)
    2f84:	18000c1e 	bne	r3,zero,2fb8 <quorem+0x144>
    2f88:	113fff04 	addi	r4,r2,-4
    2f8c:	b900082e 	bgeu	r23,r4,2fb0 <quorem+0x13c>
    2f90:	10bfff17 	ldw	r2,-4(r2)
    2f94:	10000326 	beq	r2,zero,2fa4 <quorem+0x130>
    2f98:	00000506 	br	2fb0 <quorem+0x13c>
    2f9c:	20800017 	ldw	r2,0(r4)
    2fa0:	1000031e 	bne	r2,zero,2fb0 <quorem+0x13c>
    2fa4:	213fff04 	addi	r4,r4,-4
    2fa8:	a53fffc4 	addi	r20,r20,-1
    2fac:	b93ffb36 	bltu	r23,r4,2f9c <quorem+0x128>
    2fb0:	d9000317 	ldw	r4,12(sp)
    2fb4:	25000415 	stw	r20,16(r4)
    2fb8:	e005883a 	mov	r2,fp
    2fbc:	dfc00e17 	ldw	ra,56(sp)
    2fc0:	df000d17 	ldw	fp,52(sp)
    2fc4:	ddc00c17 	ldw	r23,48(sp)
    2fc8:	dd800b17 	ldw	r22,44(sp)
    2fcc:	dd400a17 	ldw	r21,40(sp)
    2fd0:	dd000917 	ldw	r20,36(sp)
    2fd4:	dcc00817 	ldw	r19,32(sp)
    2fd8:	dc800717 	ldw	r18,28(sp)
    2fdc:	dc400617 	ldw	r17,24(sp)
    2fe0:	dc000517 	ldw	r16,20(sp)
    2fe4:	dec00f04 	addi	sp,sp,60
    2fe8:	f800283a 	ret
    2fec:	b823883a 	mov	r17,r23
    2ff0:	9825883a 	mov	r18,r19
    2ff4:	d8000115 	stw	zero,4(sp)
    2ff8:	002b883a 	mov	r21,zero
    2ffc:	94000017 	ldw	r16,0(r18)
    3000:	e009883a 	mov	r4,fp
    3004:	94800104 	addi	r18,r18,4
    3008:	817fffcc 	andi	r5,r16,65535
    300c:	00005700 	call	570 <__mulsi3>
    3010:	800ad43a 	srli	r5,r16,16
    3014:	e009883a 	mov	r4,fp
    3018:	a8a1883a 	add	r16,r21,r2
    301c:	00005700 	call	570 <__mulsi3>
    3020:	89000017 	ldw	r4,0(r17)
    3024:	80ffffcc 	andi	r3,r16,65535
    3028:	8020d43a 	srli	r16,r16,16
    302c:	217fffcc 	andi	r5,r4,65535
    3030:	28cbc83a 	sub	r5,r5,r3
    3034:	d8c00117 	ldw	r3,4(sp)
    3038:	2008d43a 	srli	r4,r4,16
    303c:	1405883a 	add	r2,r2,r16
    3040:	28cb883a 	add	r5,r5,r3
    3044:	280dd43a 	srai	r6,r5,16
    3048:	10ffffcc 	andi	r3,r2,65535
    304c:	20c9c83a 	sub	r4,r4,r3
    3050:	2189883a 	add	r4,r4,r6
    3054:	8900008d 	sth	r4,2(r17)
    3058:	2009d43a 	srai	r4,r4,16
    305c:	8940000d 	sth	r5,0(r17)
    3060:	102ad43a 	srli	r21,r2,16
    3064:	8c400104 	addi	r17,r17,4
    3068:	d9000115 	stw	r4,4(sp)
    306c:	b4bfe32e 	bgeu	r22,r18,2ffc <quorem+0x188>
    3070:	d9000217 	ldw	r4,8(sp)
    3074:	203fa01e 	bne	r4,zero,2ef8 <quorem+0x84>
    3078:	d8800017 	ldw	r2,0(sp)
    307c:	10ffff04 	addi	r3,r2,-4
    3080:	b8c0082e 	bgeu	r23,r3,30a4 <quorem+0x230>
    3084:	10bfff17 	ldw	r2,-4(r2)
    3088:	10000326 	beq	r2,zero,3098 <quorem+0x224>
    308c:	00000506 	br	30a4 <quorem+0x230>
    3090:	18800017 	ldw	r2,0(r3)
    3094:	1000031e 	bne	r2,zero,30a4 <quorem+0x230>
    3098:	18ffff04 	addi	r3,r3,-4
    309c:	a53fffc4 	addi	r20,r20,-1
    30a0:	b8fffb36 	bltu	r23,r3,3090 <quorem+0x21c>
    30a4:	d8c00317 	ldw	r3,12(sp)
    30a8:	1d000415 	stw	r20,16(r3)
    30ac:	003f9206 	br	2ef8 <quorem+0x84>
    30b0:	0005883a 	mov	r2,zero
    30b4:	003fc106 	br	2fbc <quorem+0x148>

000030b8 <_dtoa_r>:
    30b8:	22001017 	ldw	r8,64(r4)
    30bc:	deffda04 	addi	sp,sp,-152
    30c0:	dd402115 	stw	r21,132(sp)
    30c4:	dd002015 	stw	r20,128(sp)
    30c8:	dc801e15 	stw	r18,120(sp)
    30cc:	dc401d15 	stw	r17,116(sp)
    30d0:	dfc02515 	stw	ra,148(sp)
    30d4:	df002415 	stw	fp,144(sp)
    30d8:	ddc02315 	stw	r23,140(sp)
    30dc:	dd802215 	stw	r22,136(sp)
    30e0:	dcc01f15 	stw	r19,124(sp)
    30e4:	dc001c15 	stw	r16,112(sp)
    30e8:	d9001615 	stw	r4,88(sp)
    30ec:	3023883a 	mov	r17,r6
    30f0:	2829883a 	mov	r20,r5
    30f4:	d9c01715 	stw	r7,92(sp)
    30f8:	dc802817 	ldw	r18,160(sp)
    30fc:	302b883a 	mov	r21,r6
    3100:	40000a26 	beq	r8,zero,312c <_dtoa_r+0x74>
    3104:	20801117 	ldw	r2,68(r4)
    3108:	400b883a 	mov	r5,r8
    310c:	40800115 	stw	r2,4(r8)
    3110:	20c01117 	ldw	r3,68(r4)
    3114:	00800044 	movi	r2,1
    3118:	10c4983a 	sll	r2,r2,r3
    311c:	40800215 	stw	r2,8(r8)
    3120:	0005b400 	call	5b40 <_Bfree>
    3124:	d8c01617 	ldw	r3,88(sp)
    3128:	18001015 	stw	zero,64(r3)
    312c:	8800a316 	blt	r17,zero,33bc <_dtoa_r+0x304>
    3130:	90000015 	stw	zero,0(r18)
    3134:	a8dffc2c 	andhi	r3,r21,32752
    3138:	009ffc34 	movhi	r2,32752
    313c:	18809126 	beq	r3,r2,3384 <_dtoa_r+0x2cc>
    3140:	000d883a 	mov	r6,zero
    3144:	000f883a 	mov	r7,zero
    3148:	a009883a 	mov	r4,r20
    314c:	a80b883a 	mov	r5,r21
    3150:	dd001215 	stw	r20,72(sp)
    3154:	dd401315 	stw	r21,76(sp)
    3158:	00091c80 	call	91c8 <__nedf2>
    315c:	1000171e 	bne	r2,zero,31bc <_dtoa_r+0x104>
    3160:	d9802717 	ldw	r6,156(sp)
    3164:	00800044 	movi	r2,1
    3168:	30800015 	stw	r2,0(r6)
    316c:	d8802917 	ldw	r2,164(sp)
    3170:	10029b26 	beq	r2,zero,3be0 <_dtoa_r+0xb28>
    3174:	d9002917 	ldw	r4,164(sp)
    3178:	00800074 	movhi	r2,1
    317c:	10b22d44 	addi	r2,r2,-14155
    3180:	10ffffc4 	addi	r3,r2,-1
    3184:	20800015 	stw	r2,0(r4)
    3188:	1805883a 	mov	r2,r3
    318c:	dfc02517 	ldw	ra,148(sp)
    3190:	df002417 	ldw	fp,144(sp)
    3194:	ddc02317 	ldw	r23,140(sp)
    3198:	dd802217 	ldw	r22,136(sp)
    319c:	dd402117 	ldw	r21,132(sp)
    31a0:	dd002017 	ldw	r20,128(sp)
    31a4:	dcc01f17 	ldw	r19,124(sp)
    31a8:	dc801e17 	ldw	r18,120(sp)
    31ac:	dc401d17 	ldw	r17,116(sp)
    31b0:	dc001c17 	ldw	r16,112(sp)
    31b4:	dec02604 	addi	sp,sp,152
    31b8:	f800283a 	ret
    31bc:	d9001617 	ldw	r4,88(sp)
    31c0:	d9401217 	ldw	r5,72(sp)
    31c4:	d8800104 	addi	r2,sp,4
    31c8:	a80d883a 	mov	r6,r21
    31cc:	d9c00204 	addi	r7,sp,8
    31d0:	d8800015 	stw	r2,0(sp)
    31d4:	000617c0 	call	617c <__d2b>
    31d8:	d8800715 	stw	r2,28(sp)
    31dc:	a804d53a 	srli	r2,r21,20
    31e0:	1101ffcc 	andi	r4,r2,2047
    31e4:	20008626 	beq	r4,zero,3400 <_dtoa_r+0x348>
    31e8:	d8c01217 	ldw	r3,72(sp)
    31ec:	00800434 	movhi	r2,16
    31f0:	10bfffc4 	addi	r2,r2,-1
    31f4:	ddc00117 	ldw	r23,4(sp)
    31f8:	a884703a 	and	r2,r21,r2
    31fc:	1811883a 	mov	r8,r3
    3200:	124ffc34 	orhi	r9,r2,16368
    3204:	25bf0044 	addi	r22,r4,-1023
    3208:	d8000815 	stw	zero,32(sp)
    320c:	0005883a 	mov	r2,zero
    3210:	00cffe34 	movhi	r3,16376
    3214:	480b883a 	mov	r5,r9
    3218:	4009883a 	mov	r4,r8
    321c:	180f883a 	mov	r7,r3
    3220:	100d883a 	mov	r6,r2
    3224:	0008a300 	call	8a30 <__subdf3>
    3228:	0218dbf4 	movhi	r8,25455
    322c:	4210d844 	addi	r8,r8,17249
    3230:	024ff4f4 	movhi	r9,16339
    3234:	4a61e9c4 	addi	r9,r9,-30809
    3238:	480f883a 	mov	r7,r9
    323c:	400d883a 	mov	r6,r8
    3240:	180b883a 	mov	r5,r3
    3244:	1009883a 	mov	r4,r2
    3248:	0008b240 	call	8b24 <__muldf3>
    324c:	0222d874 	movhi	r8,35681
    3250:	42322cc4 	addi	r8,r8,-14157
    3254:	024ff1f4 	movhi	r9,16327
    3258:	4a628a04 	addi	r9,r9,-30168
    325c:	480f883a 	mov	r7,r9
    3260:	400d883a 	mov	r6,r8
    3264:	180b883a 	mov	r5,r3
    3268:	1009883a 	mov	r4,r2
    326c:	0008ab00 	call	8ab0 <__adddf3>
    3270:	b009883a 	mov	r4,r22
    3274:	1021883a 	mov	r16,r2
    3278:	1823883a 	mov	r17,r3
    327c:	00093e80 	call	93e8 <__floatsidf>
    3280:	021427f4 	movhi	r8,20639
    3284:	421e7ec4 	addi	r8,r8,31227
    3288:	024ff4f4 	movhi	r9,16339
    328c:	4a5104c4 	addi	r9,r9,17427
    3290:	480f883a 	mov	r7,r9
    3294:	400d883a 	mov	r6,r8
    3298:	180b883a 	mov	r5,r3
    329c:	1009883a 	mov	r4,r2
    32a0:	0008b240 	call	8b24 <__muldf3>
    32a4:	180f883a 	mov	r7,r3
    32a8:	880b883a 	mov	r5,r17
    32ac:	100d883a 	mov	r6,r2
    32b0:	8009883a 	mov	r4,r16
    32b4:	0008ab00 	call	8ab0 <__adddf3>
    32b8:	1009883a 	mov	r4,r2
    32bc:	180b883a 	mov	r5,r3
    32c0:	1021883a 	mov	r16,r2
    32c4:	1823883a 	mov	r17,r3
    32c8:	00094e00 	call	94e0 <__fixdfsi>
    32cc:	000d883a 	mov	r6,zero
    32d0:	000f883a 	mov	r7,zero
    32d4:	8009883a 	mov	r4,r16
    32d8:	880b883a 	mov	r5,r17
    32dc:	d8800d15 	stw	r2,52(sp)
    32e0:	00093600 	call	9360 <__ltdf2>
    32e4:	10031716 	blt	r2,zero,3f44 <_dtoa_r+0xe8c>
    32e8:	d8c00d17 	ldw	r3,52(sp)
    32ec:	00800584 	movi	r2,22
    32f0:	10c1482e 	bgeu	r2,r3,3814 <_dtoa_r+0x75c>
    32f4:	01000044 	movi	r4,1
    32f8:	d9000c15 	stw	r4,48(sp)
    32fc:	bd85c83a 	sub	r2,r23,r22
    3300:	11bfffc4 	addi	r6,r2,-1
    3304:	30030b16 	blt	r6,zero,3f34 <_dtoa_r+0xe7c>
    3308:	d9800a15 	stw	r6,40(sp)
    330c:	d8001115 	stw	zero,68(sp)
    3310:	d8c00d17 	ldw	r3,52(sp)
    3314:	1802ff16 	blt	r3,zero,3f14 <_dtoa_r+0xe5c>
    3318:	d9000a17 	ldw	r4,40(sp)
    331c:	d8c00915 	stw	r3,36(sp)
    3320:	d8001015 	stw	zero,64(sp)
    3324:	20c9883a 	add	r4,r4,r3
    3328:	d9000a15 	stw	r4,40(sp)
    332c:	d9001717 	ldw	r4,92(sp)
    3330:	00800244 	movi	r2,9
    3334:	11004636 	bltu	r2,r4,3450 <_dtoa_r+0x398>
    3338:	00800144 	movi	r2,5
    333c:	11020416 	blt	r2,r4,3b50 <_dtoa_r+0xa98>
    3340:	04400044 	movi	r17,1
    3344:	d8c01717 	ldw	r3,92(sp)
    3348:	00800144 	movi	r2,5
    334c:	10c1ed36 	bltu	r2,r3,3b04 <_dtoa_r+0xa4c>
    3350:	18c5883a 	add	r2,r3,r3
    3354:	1085883a 	add	r2,r2,r2
    3358:	00c00034 	movhi	r3,0
    335c:	18ccdb04 	addi	r3,r3,13164
    3360:	10c5883a 	add	r2,r2,r3
    3364:	11000017 	ldw	r4,0(r2)
    3368:	2000683a 	jmp	r4
    336c:	00003458 	cmpnei	zero,zero,209
    3370:	00003458 	cmpnei	zero,zero,209
    3374:	00003e58 	cmpnei	zero,zero,249
    3378:	00003e30 	cmpltui	zero,zero,248
    337c:	00003e74 	movhi	zero,249
    3380:	00003e80 	call	3e8 <my_scheduler+0x84>
    3384:	d9002717 	ldw	r4,156(sp)
    3388:	0089c3c4 	movi	r2,9999
    338c:	20800015 	stw	r2,0(r4)
    3390:	a0001026 	beq	r20,zero,33d4 <_dtoa_r+0x31c>
    3394:	00c00074 	movhi	r3,1
    3398:	18f23904 	addi	r3,r3,-14108
    339c:	d9802917 	ldw	r6,164(sp)
    33a0:	303f7926 	beq	r6,zero,3188 <_dtoa_r+0xd0>
    33a4:	188000c7 	ldb	r2,3(r3)
    33a8:	190000c4 	addi	r4,r3,3
    33ac:	1000101e 	bne	r2,zero,33f0 <_dtoa_r+0x338>
    33b0:	d8802917 	ldw	r2,164(sp)
    33b4:	11000015 	stw	r4,0(r2)
    33b8:	003f7306 	br	3188 <_dtoa_r+0xd0>
    33bc:	00a00034 	movhi	r2,32768
    33c0:	10bfffc4 	addi	r2,r2,-1
    33c4:	00c00044 	movi	r3,1
    33c8:	88aa703a 	and	r21,r17,r2
    33cc:	90c00015 	stw	r3,0(r18)
    33d0:	003f5806 	br	3134 <_dtoa_r+0x7c>
    33d4:	00800434 	movhi	r2,16
    33d8:	10bfffc4 	addi	r2,r2,-1
    33dc:	a884703a 	and	r2,r21,r2
    33e0:	103fec1e 	bne	r2,zero,3394 <_dtoa_r+0x2dc>
    33e4:	00c00074 	movhi	r3,1
    33e8:	18f23604 	addi	r3,r3,-14120
    33ec:	003feb06 	br	339c <_dtoa_r+0x2e4>
    33f0:	d8802917 	ldw	r2,164(sp)
    33f4:	19000204 	addi	r4,r3,8
    33f8:	11000015 	stw	r4,0(r2)
    33fc:	003f6206 	br	3188 <_dtoa_r+0xd0>
    3400:	ddc00117 	ldw	r23,4(sp)
    3404:	d8800217 	ldw	r2,8(sp)
    3408:	01000804 	movi	r4,32
    340c:	b8c10c84 	addi	r3,r23,1074
    3410:	18a3883a 	add	r17,r3,r2
    3414:	2441b80e 	bge	r4,r17,3af8 <_dtoa_r+0xa40>
    3418:	00c01004 	movi	r3,64
    341c:	1c47c83a 	sub	r3,r3,r17
    3420:	88bff804 	addi	r2,r17,-32
    3424:	a8c6983a 	sll	r3,r21,r3
    3428:	a084d83a 	srl	r2,r20,r2
    342c:	1888b03a 	or	r4,r3,r2
    3430:	00095b80 	call	95b8 <__floatunsidf>
    3434:	1011883a 	mov	r8,r2
    3438:	00bf8434 	movhi	r2,65040
    343c:	01000044 	movi	r4,1
    3440:	10d3883a 	add	r9,r2,r3
    3444:	8dbef344 	addi	r22,r17,-1075
    3448:	d9000815 	stw	r4,32(sp)
    344c:	003f6f06 	br	320c <_dtoa_r+0x154>
    3450:	d8001715 	stw	zero,92(sp)
    3454:	04400044 	movi	r17,1
    3458:	00bfffc4 	movi	r2,-1
    345c:	00c00044 	movi	r3,1
    3460:	d8800e15 	stw	r2,56(sp)
    3464:	d8002615 	stw	zero,152(sp)
    3468:	d8800f15 	stw	r2,60(sp)
    346c:	d8c00b15 	stw	r3,44(sp)
    3470:	1021883a 	mov	r16,r2
    3474:	d8801617 	ldw	r2,88(sp)
    3478:	10001115 	stw	zero,68(r2)
    347c:	d8801617 	ldw	r2,88(sp)
    3480:	11401117 	ldw	r5,68(r2)
    3484:	1009883a 	mov	r4,r2
    3488:	00060c00 	call	60c0 <_Balloc>
    348c:	d8c01617 	ldw	r3,88(sp)
    3490:	d8800515 	stw	r2,20(sp)
    3494:	18801015 	stw	r2,64(r3)
    3498:	00800384 	movi	r2,14
    349c:	14006836 	bltu	r2,r16,3640 <_dtoa_r+0x588>
    34a0:	8805003a 	cmpeq	r2,r17,zero
    34a4:	1000661e 	bne	r2,zero,3640 <_dtoa_r+0x588>
    34a8:	d9000d17 	ldw	r4,52(sp)
    34ac:	0102300e 	bge	zero,r4,3d70 <_dtoa_r+0xcb8>
    34b0:	208003cc 	andi	r2,r4,15
    34b4:	100490fa 	slli	r2,r2,3
    34b8:	2025d13a 	srai	r18,r4,4
    34bc:	00c00074 	movhi	r3,1
    34c0:	18f24b04 	addi	r3,r3,-14036
    34c4:	10c5883a 	add	r2,r2,r3
    34c8:	90c0040c 	andi	r3,r18,16
    34cc:	14000017 	ldw	r16,0(r2)
    34d0:	14400117 	ldw	r17,4(r2)
    34d4:	18036a1e 	bne	r3,zero,4280 <_dtoa_r+0x11c8>
    34d8:	05800084 	movi	r22,2
    34dc:	90001026 	beq	r18,zero,3520 <_dtoa_r+0x468>
    34e0:	04c00074 	movhi	r19,1
    34e4:	9cf27d04 	addi	r19,r19,-13836
    34e8:	9080004c 	andi	r2,r18,1
    34ec:	1005003a 	cmpeq	r2,r2,zero
    34f0:	1000081e 	bne	r2,zero,3514 <_dtoa_r+0x45c>
    34f4:	99800017 	ldw	r6,0(r19)
    34f8:	99c00117 	ldw	r7,4(r19)
    34fc:	880b883a 	mov	r5,r17
    3500:	8009883a 	mov	r4,r16
    3504:	0008b240 	call	8b24 <__muldf3>
    3508:	1021883a 	mov	r16,r2
    350c:	b5800044 	addi	r22,r22,1
    3510:	1823883a 	mov	r17,r3
    3514:	9025d07a 	srai	r18,r18,1
    3518:	9cc00204 	addi	r19,r19,8
    351c:	903ff21e 	bne	r18,zero,34e8 <_dtoa_r+0x430>
    3520:	a80b883a 	mov	r5,r21
    3524:	a009883a 	mov	r4,r20
    3528:	880f883a 	mov	r7,r17
    352c:	800d883a 	mov	r6,r16
    3530:	0008ee80 	call	8ee8 <__divdf3>
    3534:	1029883a 	mov	r20,r2
    3538:	182b883a 	mov	r21,r3
    353c:	d8c00c17 	ldw	r3,48(sp)
    3540:	1805003a 	cmpeq	r2,r3,zero
    3544:	1000081e 	bne	r2,zero,3568 <_dtoa_r+0x4b0>
    3548:	0005883a 	mov	r2,zero
    354c:	00cffc34 	movhi	r3,16368
    3550:	180f883a 	mov	r7,r3
    3554:	a009883a 	mov	r4,r20
    3558:	a80b883a 	mov	r5,r21
    355c:	100d883a 	mov	r6,r2
    3560:	00093600 	call	9360 <__ltdf2>
    3564:	1003fe16 	blt	r2,zero,4560 <_dtoa_r+0x14a8>
    3568:	b009883a 	mov	r4,r22
    356c:	00093e80 	call	93e8 <__floatsidf>
    3570:	180b883a 	mov	r5,r3
    3574:	1009883a 	mov	r4,r2
    3578:	a00d883a 	mov	r6,r20
    357c:	a80f883a 	mov	r7,r21
    3580:	0008b240 	call	8b24 <__muldf3>
    3584:	0011883a 	mov	r8,zero
    3588:	02500734 	movhi	r9,16412
    358c:	1009883a 	mov	r4,r2
    3590:	180b883a 	mov	r5,r3
    3594:	480f883a 	mov	r7,r9
    3598:	400d883a 	mov	r6,r8
    359c:	0008ab00 	call	8ab0 <__adddf3>
    35a0:	d9000f17 	ldw	r4,60(sp)
    35a4:	102d883a 	mov	r22,r2
    35a8:	00bf3034 	movhi	r2,64704
    35ac:	18b9883a 	add	fp,r3,r2
    35b0:	e02f883a 	mov	r23,fp
    35b4:	20028f1e 	bne	r4,zero,3ff4 <_dtoa_r+0xf3c>
    35b8:	0005883a 	mov	r2,zero
    35bc:	00d00534 	movhi	r3,16404
    35c0:	a009883a 	mov	r4,r20
    35c4:	a80b883a 	mov	r5,r21
    35c8:	180f883a 	mov	r7,r3
    35cc:	100d883a 	mov	r6,r2
    35d0:	0008a300 	call	8a30 <__subdf3>
    35d4:	1009883a 	mov	r4,r2
    35d8:	e00f883a 	mov	r7,fp
    35dc:	180b883a 	mov	r5,r3
    35e0:	b00d883a 	mov	r6,r22
    35e4:	1025883a 	mov	r18,r2
    35e8:	1827883a 	mov	r19,r3
    35ec:	00092500 	call	9250 <__gtdf2>
    35f0:	00834f16 	blt	zero,r2,4330 <_dtoa_r+0x1278>
    35f4:	e0e0003c 	xorhi	r3,fp,32768
    35f8:	9009883a 	mov	r4,r18
    35fc:	980b883a 	mov	r5,r19
    3600:	180f883a 	mov	r7,r3
    3604:	b00d883a 	mov	r6,r22
    3608:	00093600 	call	9360 <__ltdf2>
    360c:	1000080e 	bge	r2,zero,3630 <_dtoa_r+0x578>
    3610:	0027883a 	mov	r19,zero
    3614:	0025883a 	mov	r18,zero
    3618:	d8802617 	ldw	r2,152(sp)
    361c:	df000517 	ldw	fp,20(sp)
    3620:	d8000615 	stw	zero,24(sp)
    3624:	0084303a 	nor	r2,zero,r2
    3628:	d8800d15 	stw	r2,52(sp)
    362c:	00019b06 	br	3c9c <_dtoa_r+0xbe4>
    3630:	d9801217 	ldw	r6,72(sp)
    3634:	d8801317 	ldw	r2,76(sp)
    3638:	3029883a 	mov	r20,r6
    363c:	102b883a 	mov	r21,r2
    3640:	d8c00217 	ldw	r3,8(sp)
    3644:	18008516 	blt	r3,zero,385c <_dtoa_r+0x7a4>
    3648:	d9000d17 	ldw	r4,52(sp)
    364c:	00800384 	movi	r2,14
    3650:	11008216 	blt	r2,r4,385c <_dtoa_r+0x7a4>
    3654:	200490fa 	slli	r2,r4,3
    3658:	d9802617 	ldw	r6,152(sp)
    365c:	00c00074 	movhi	r3,1
    3660:	18f24b04 	addi	r3,r3,-14036
    3664:	10c5883a 	add	r2,r2,r3
    3668:	14800017 	ldw	r18,0(r2)
    366c:	14c00117 	ldw	r19,4(r2)
    3670:	30031e16 	blt	r6,zero,42ec <_dtoa_r+0x1234>
    3674:	d9000517 	ldw	r4,20(sp)
    3678:	d8c00f17 	ldw	r3,60(sp)
    367c:	a823883a 	mov	r17,r21
    3680:	a021883a 	mov	r16,r20
    3684:	192b883a 	add	r21,r3,r4
    3688:	2039883a 	mov	fp,r4
    368c:	00000f06 	br	36cc <_dtoa_r+0x614>
    3690:	0005883a 	mov	r2,zero
    3694:	00d00934 	movhi	r3,16420
    3698:	5009883a 	mov	r4,r10
    369c:	580b883a 	mov	r5,r11
    36a0:	180f883a 	mov	r7,r3
    36a4:	100d883a 	mov	r6,r2
    36a8:	0008b240 	call	8b24 <__muldf3>
    36ac:	180b883a 	mov	r5,r3
    36b0:	000d883a 	mov	r6,zero
    36b4:	000f883a 	mov	r7,zero
    36b8:	1009883a 	mov	r4,r2
    36bc:	1021883a 	mov	r16,r2
    36c0:	1823883a 	mov	r17,r3
    36c4:	00091c80 	call	91c8 <__nedf2>
    36c8:	10004526 	beq	r2,zero,37e0 <_dtoa_r+0x728>
    36cc:	900d883a 	mov	r6,r18
    36d0:	980f883a 	mov	r7,r19
    36d4:	8009883a 	mov	r4,r16
    36d8:	880b883a 	mov	r5,r17
    36dc:	0008ee80 	call	8ee8 <__divdf3>
    36e0:	180b883a 	mov	r5,r3
    36e4:	1009883a 	mov	r4,r2
    36e8:	00094e00 	call	94e0 <__fixdfsi>
    36ec:	1009883a 	mov	r4,r2
    36f0:	1029883a 	mov	r20,r2
    36f4:	00093e80 	call	93e8 <__floatsidf>
    36f8:	180f883a 	mov	r7,r3
    36fc:	9009883a 	mov	r4,r18
    3700:	980b883a 	mov	r5,r19
    3704:	100d883a 	mov	r6,r2
    3708:	0008b240 	call	8b24 <__muldf3>
    370c:	180f883a 	mov	r7,r3
    3710:	880b883a 	mov	r5,r17
    3714:	8009883a 	mov	r4,r16
    3718:	100d883a 	mov	r6,r2
    371c:	0008a300 	call	8a30 <__subdf3>
    3720:	1015883a 	mov	r10,r2
    3724:	a0800c04 	addi	r2,r20,48
    3728:	e0800005 	stb	r2,0(fp)
    372c:	e7000044 	addi	fp,fp,1
    3730:	1817883a 	mov	r11,r3
    3734:	e57fd61e 	bne	fp,r21,3690 <_dtoa_r+0x5d8>
    3738:	500d883a 	mov	r6,r10
    373c:	180f883a 	mov	r7,r3
    3740:	5009883a 	mov	r4,r10
    3744:	180b883a 	mov	r5,r3
    3748:	0008ab00 	call	8ab0 <__adddf3>
    374c:	100d883a 	mov	r6,r2
    3750:	9009883a 	mov	r4,r18
    3754:	980b883a 	mov	r5,r19
    3758:	180f883a 	mov	r7,r3
    375c:	1021883a 	mov	r16,r2
    3760:	1823883a 	mov	r17,r3
    3764:	00093600 	call	9360 <__ltdf2>
    3768:	10000816 	blt	r2,zero,378c <_dtoa_r+0x6d4>
    376c:	980b883a 	mov	r5,r19
    3770:	800d883a 	mov	r6,r16
    3774:	880f883a 	mov	r7,r17
    3778:	9009883a 	mov	r4,r18
    377c:	00091400 	call	9140 <__eqdf2>
    3780:	1000171e 	bne	r2,zero,37e0 <_dtoa_r+0x728>
    3784:	a080004c 	andi	r2,r20,1
    3788:	10001526 	beq	r2,zero,37e0 <_dtoa_r+0x728>
    378c:	d8800d17 	ldw	r2,52(sp)
    3790:	d8800415 	stw	r2,16(sp)
    3794:	e009883a 	mov	r4,fp
    3798:	213fffc4 	addi	r4,r4,-1
    379c:	20c00007 	ldb	r3,0(r4)
    37a0:	00800e44 	movi	r2,57
    37a4:	1880081e 	bne	r3,r2,37c8 <_dtoa_r+0x710>
    37a8:	d8800517 	ldw	r2,20(sp)
    37ac:	113ffa1e 	bne	r2,r4,3798 <_dtoa_r+0x6e0>
    37b0:	d8c00417 	ldw	r3,16(sp)
    37b4:	d9800517 	ldw	r6,20(sp)
    37b8:	00800c04 	movi	r2,48
    37bc:	18c00044 	addi	r3,r3,1
    37c0:	d8c00415 	stw	r3,16(sp)
    37c4:	30800005 	stb	r2,0(r6)
    37c8:	20800003 	ldbu	r2,0(r4)
    37cc:	d8c00417 	ldw	r3,16(sp)
    37d0:	27000044 	addi	fp,r4,1
    37d4:	10800044 	addi	r2,r2,1
    37d8:	d8c00d15 	stw	r3,52(sp)
    37dc:	20800005 	stb	r2,0(r4)
    37e0:	d9001617 	ldw	r4,88(sp)
    37e4:	d9400717 	ldw	r5,28(sp)
    37e8:	0005b400 	call	5b40 <_Bfree>
    37ec:	e0000005 	stb	zero,0(fp)
    37f0:	d9800d17 	ldw	r6,52(sp)
    37f4:	d8c02717 	ldw	r3,156(sp)
    37f8:	d9002917 	ldw	r4,164(sp)
    37fc:	30800044 	addi	r2,r6,1
    3800:	18800015 	stw	r2,0(r3)
    3804:	20029c26 	beq	r4,zero,4278 <_dtoa_r+0x11c0>
    3808:	d8c00517 	ldw	r3,20(sp)
    380c:	27000015 	stw	fp,0(r4)
    3810:	003e5d06 	br	3188 <_dtoa_r+0xd0>
    3814:	d9800d17 	ldw	r6,52(sp)
    3818:	00c00074 	movhi	r3,1
    381c:	18f24b04 	addi	r3,r3,-14036
    3820:	d9001217 	ldw	r4,72(sp)
    3824:	300490fa 	slli	r2,r6,3
    3828:	d9401317 	ldw	r5,76(sp)
    382c:	10c5883a 	add	r2,r2,r3
    3830:	12000017 	ldw	r8,0(r2)
    3834:	12400117 	ldw	r9,4(r2)
    3838:	400d883a 	mov	r6,r8
    383c:	480f883a 	mov	r7,r9
    3840:	00093600 	call	9360 <__ltdf2>
    3844:	1000030e 	bge	r2,zero,3854 <_dtoa_r+0x79c>
    3848:	d8800d17 	ldw	r2,52(sp)
    384c:	10bfffc4 	addi	r2,r2,-1
    3850:	d8800d15 	stw	r2,52(sp)
    3854:	d8000c15 	stw	zero,48(sp)
    3858:	003ea806 	br	32fc <_dtoa_r+0x244>
    385c:	d9000b17 	ldw	r4,44(sp)
    3860:	202cc03a 	cmpne	r22,r4,zero
    3864:	b000c71e 	bne	r22,zero,3b84 <_dtoa_r+0xacc>
    3868:	dc001117 	ldw	r16,68(sp)
    386c:	dc801017 	ldw	r18,64(sp)
    3870:	0027883a 	mov	r19,zero
    3874:	04000b0e 	bge	zero,r16,38a4 <_dtoa_r+0x7ec>
    3878:	d8c00a17 	ldw	r3,40(sp)
    387c:	00c0090e 	bge	zero,r3,38a4 <_dtoa_r+0x7ec>
    3880:	8005883a 	mov	r2,r16
    3884:	1c011316 	blt	r3,r16,3cd4 <_dtoa_r+0xc1c>
    3888:	d9000a17 	ldw	r4,40(sp)
    388c:	d9801117 	ldw	r6,68(sp)
    3890:	80a1c83a 	sub	r16,r16,r2
    3894:	2089c83a 	sub	r4,r4,r2
    3898:	308dc83a 	sub	r6,r6,r2
    389c:	d9000a15 	stw	r4,40(sp)
    38a0:	d9801115 	stw	r6,68(sp)
    38a4:	d8801017 	ldw	r2,64(sp)
    38a8:	0080150e 	bge	zero,r2,3900 <_dtoa_r+0x848>
    38ac:	d8c00b17 	ldw	r3,44(sp)
    38b0:	1805003a 	cmpeq	r2,r3,zero
    38b4:	1001c91e 	bne	r2,zero,3fdc <_dtoa_r+0xf24>
    38b8:	04800e0e 	bge	zero,r18,38f4 <_dtoa_r+0x83c>
    38bc:	d9001617 	ldw	r4,88(sp)
    38c0:	980b883a 	mov	r5,r19
    38c4:	900d883a 	mov	r6,r18
    38c8:	000698c0 	call	698c <__pow5mult>
    38cc:	d9001617 	ldw	r4,88(sp)
    38d0:	d9800717 	ldw	r6,28(sp)
    38d4:	100b883a 	mov	r5,r2
    38d8:	1027883a 	mov	r19,r2
    38dc:	00065d00 	call	65d0 <__multiply>
    38e0:	d9001617 	ldw	r4,88(sp)
    38e4:	d9400717 	ldw	r5,28(sp)
    38e8:	1023883a 	mov	r17,r2
    38ec:	0005b400 	call	5b40 <_Bfree>
    38f0:	dc400715 	stw	r17,28(sp)
    38f4:	d9001017 	ldw	r4,64(sp)
    38f8:	248dc83a 	sub	r6,r4,r18
    38fc:	30010e1e 	bne	r6,zero,3d38 <_dtoa_r+0xc80>
    3900:	d9001617 	ldw	r4,88(sp)
    3904:	04400044 	movi	r17,1
    3908:	880b883a 	mov	r5,r17
    390c:	00068240 	call	6824 <__i2b>
    3910:	d9800917 	ldw	r6,36(sp)
    3914:	1025883a 	mov	r18,r2
    3918:	0180040e 	bge	zero,r6,392c <_dtoa_r+0x874>
    391c:	d9001617 	ldw	r4,88(sp)
    3920:	100b883a 	mov	r5,r2
    3924:	000698c0 	call	698c <__pow5mult>
    3928:	1025883a 	mov	r18,r2
    392c:	d8801717 	ldw	r2,92(sp)
    3930:	8880f30e 	bge	r17,r2,3d00 <_dtoa_r+0xc48>
    3934:	0023883a 	mov	r17,zero
    3938:	d9800917 	ldw	r6,36(sp)
    393c:	30019e1e 	bne	r6,zero,3fb8 <_dtoa_r+0xf00>
    3940:	00c00044 	movi	r3,1
    3944:	d9000a17 	ldw	r4,40(sp)
    3948:	20c5883a 	add	r2,r4,r3
    394c:	10c007cc 	andi	r3,r2,31
    3950:	1800841e 	bne	r3,zero,3b64 <_dtoa_r+0xaac>
    3954:	00800704 	movi	r2,28
    3958:	d9000a17 	ldw	r4,40(sp)
    395c:	d9801117 	ldw	r6,68(sp)
    3960:	80a1883a 	add	r16,r16,r2
    3964:	2089883a 	add	r4,r4,r2
    3968:	308d883a 	add	r6,r6,r2
    396c:	d9000a15 	stw	r4,40(sp)
    3970:	d9801115 	stw	r6,68(sp)
    3974:	d8801117 	ldw	r2,68(sp)
    3978:	0080050e 	bge	zero,r2,3990 <_dtoa_r+0x8d8>
    397c:	d9400717 	ldw	r5,28(sp)
    3980:	d9001617 	ldw	r4,88(sp)
    3984:	100d883a 	mov	r6,r2
    3988:	00064840 	call	6484 <__lshift>
    398c:	d8800715 	stw	r2,28(sp)
    3990:	d8c00a17 	ldw	r3,40(sp)
    3994:	00c0050e 	bge	zero,r3,39ac <_dtoa_r+0x8f4>
    3998:	d9001617 	ldw	r4,88(sp)
    399c:	900b883a 	mov	r5,r18
    39a0:	180d883a 	mov	r6,r3
    39a4:	00064840 	call	6484 <__lshift>
    39a8:	1025883a 	mov	r18,r2
    39ac:	d9000c17 	ldw	r4,48(sp)
    39b0:	2005003a 	cmpeq	r2,r4,zero
    39b4:	10016f26 	beq	r2,zero,3f74 <_dtoa_r+0xebc>
    39b8:	d9000f17 	ldw	r4,60(sp)
    39bc:	0102170e 	bge	zero,r4,421c <_dtoa_r+0x1164>
    39c0:	d9800b17 	ldw	r6,44(sp)
    39c4:	3005003a 	cmpeq	r2,r6,zero
    39c8:	1000881e 	bne	r2,zero,3bec <_dtoa_r+0xb34>
    39cc:	0400050e 	bge	zero,r16,39e4 <_dtoa_r+0x92c>
    39d0:	d9001617 	ldw	r4,88(sp)
    39d4:	980b883a 	mov	r5,r19
    39d8:	800d883a 	mov	r6,r16
    39dc:	00064840 	call	6484 <__lshift>
    39e0:	1027883a 	mov	r19,r2
    39e4:	8804c03a 	cmpne	r2,r17,zero
    39e8:	1002541e 	bne	r2,zero,433c <_dtoa_r+0x1284>
    39ec:	980b883a 	mov	r5,r19
    39f0:	dd800517 	ldw	r22,20(sp)
    39f4:	dcc00615 	stw	r19,24(sp)
    39f8:	a700004c 	andi	fp,r20,1
    39fc:	2827883a 	mov	r19,r5
    3a00:	d9000717 	ldw	r4,28(sp)
    3a04:	900b883a 	mov	r5,r18
    3a08:	0002e740 	call	2e74 <quorem>
    3a0c:	d9000717 	ldw	r4,28(sp)
    3a10:	d9400617 	ldw	r5,24(sp)
    3a14:	1023883a 	mov	r17,r2
    3a18:	8dc00c04 	addi	r23,r17,48
    3a1c:	0005c9c0 	call	5c9c <__mcmp>
    3a20:	d9001617 	ldw	r4,88(sp)
    3a24:	900b883a 	mov	r5,r18
    3a28:	980d883a 	mov	r6,r19
    3a2c:	1029883a 	mov	r20,r2
    3a30:	00062f80 	call	62f8 <__mdiff>
    3a34:	102b883a 	mov	r21,r2
    3a38:	10800317 	ldw	r2,12(r2)
    3a3c:	1001281e 	bne	r2,zero,3ee0 <_dtoa_r+0xe28>
    3a40:	d9000717 	ldw	r4,28(sp)
    3a44:	a80b883a 	mov	r5,r21
    3a48:	0005c9c0 	call	5c9c <__mcmp>
    3a4c:	d9001617 	ldw	r4,88(sp)
    3a50:	1021883a 	mov	r16,r2
    3a54:	a80b883a 	mov	r5,r21
    3a58:	0005b400 	call	5b40 <_Bfree>
    3a5c:	8000041e 	bne	r16,zero,3a70 <_dtoa_r+0x9b8>
    3a60:	d8801717 	ldw	r2,92(sp)
    3a64:	1000021e 	bne	r2,zero,3a70 <_dtoa_r+0x9b8>
    3a68:	e004c03a 	cmpne	r2,fp,zero
    3a6c:	10011726 	beq	r2,zero,3ecc <_dtoa_r+0xe14>
    3a70:	a0010616 	blt	r20,zero,3e8c <_dtoa_r+0xdd4>
    3a74:	a000041e 	bne	r20,zero,3a88 <_dtoa_r+0x9d0>
    3a78:	d8c01717 	ldw	r3,92(sp)
    3a7c:	1800021e 	bne	r3,zero,3a88 <_dtoa_r+0x9d0>
    3a80:	e004c03a 	cmpne	r2,fp,zero
    3a84:	10010126 	beq	r2,zero,3e8c <_dtoa_r+0xdd4>
    3a88:	04023d16 	blt	zero,r16,4380 <_dtoa_r+0x12c8>
    3a8c:	b5c00005 	stb	r23,0(r22)
    3a90:	d9800517 	ldw	r6,20(sp)
    3a94:	d9000f17 	ldw	r4,60(sp)
    3a98:	b5800044 	addi	r22,r22,1
    3a9c:	3105883a 	add	r2,r6,r4
    3aa0:	b0806526 	beq	r22,r2,3c38 <_dtoa_r+0xb80>
    3aa4:	d9400717 	ldw	r5,28(sp)
    3aa8:	d9001617 	ldw	r4,88(sp)
    3aac:	01800284 	movi	r6,10
    3ab0:	000f883a 	mov	r7,zero
    3ab4:	00068600 	call	6860 <__multadd>
    3ab8:	d8800715 	stw	r2,28(sp)
    3abc:	d8800617 	ldw	r2,24(sp)
    3ac0:	14c10c26 	beq	r2,r19,3ef4 <_dtoa_r+0xe3c>
    3ac4:	d9400617 	ldw	r5,24(sp)
    3ac8:	d9001617 	ldw	r4,88(sp)
    3acc:	01800284 	movi	r6,10
    3ad0:	000f883a 	mov	r7,zero
    3ad4:	00068600 	call	6860 <__multadd>
    3ad8:	d9001617 	ldw	r4,88(sp)
    3adc:	980b883a 	mov	r5,r19
    3ae0:	01800284 	movi	r6,10
    3ae4:	000f883a 	mov	r7,zero
    3ae8:	d8800615 	stw	r2,24(sp)
    3aec:	00068600 	call	6860 <__multadd>
    3af0:	1027883a 	mov	r19,r2
    3af4:	003fc206 	br	3a00 <_dtoa_r+0x948>
    3af8:	2445c83a 	sub	r2,r4,r17
    3afc:	a088983a 	sll	r4,r20,r2
    3b00:	003e4b06 	br	3430 <_dtoa_r+0x378>
    3b04:	01bfffc4 	movi	r6,-1
    3b08:	00800044 	movi	r2,1
    3b0c:	d9800e15 	stw	r6,56(sp)
    3b10:	d9800f15 	stw	r6,60(sp)
    3b14:	d8800b15 	stw	r2,44(sp)
    3b18:	d8c01617 	ldw	r3,88(sp)
    3b1c:	008005c4 	movi	r2,23
    3b20:	18001115 	stw	zero,68(r3)
    3b24:	1580082e 	bgeu	r2,r22,3b48 <_dtoa_r+0xa90>
    3b28:	00c00104 	movi	r3,4
    3b2c:	0009883a 	mov	r4,zero
    3b30:	18c7883a 	add	r3,r3,r3
    3b34:	18800504 	addi	r2,r3,20
    3b38:	21000044 	addi	r4,r4,1
    3b3c:	b0bffc2e 	bgeu	r22,r2,3b30 <_dtoa_r+0xa78>
    3b40:	d9801617 	ldw	r6,88(sp)
    3b44:	31001115 	stw	r4,68(r6)
    3b48:	dc000f17 	ldw	r16,60(sp)
    3b4c:	003e4b06 	br	347c <_dtoa_r+0x3c4>
    3b50:	d9801717 	ldw	r6,92(sp)
    3b54:	0023883a 	mov	r17,zero
    3b58:	31bfff04 	addi	r6,r6,-4
    3b5c:	d9801715 	stw	r6,92(sp)
    3b60:	003df806 	br	3344 <_dtoa_r+0x28c>
    3b64:	00800804 	movi	r2,32
    3b68:	10c9c83a 	sub	r4,r2,r3
    3b6c:	00c00104 	movi	r3,4
    3b70:	19005a16 	blt	r3,r4,3cdc <_dtoa_r+0xc24>
    3b74:	008000c4 	movi	r2,3
    3b78:	113f7e16 	blt	r2,r4,3974 <_dtoa_r+0x8bc>
    3b7c:	20800704 	addi	r2,r4,28
    3b80:	003f7506 	br	3958 <_dtoa_r+0x8a0>
    3b84:	d9801717 	ldw	r6,92(sp)
    3b88:	00800044 	movi	r2,1
    3b8c:	1180a10e 	bge	r2,r6,3e14 <_dtoa_r+0xd5c>
    3b90:	d9800f17 	ldw	r6,60(sp)
    3b94:	d8c01017 	ldw	r3,64(sp)
    3b98:	30bfffc4 	addi	r2,r6,-1
    3b9c:	1881c616 	blt	r3,r2,42b8 <_dtoa_r+0x1200>
    3ba0:	18a5c83a 	sub	r18,r3,r2
    3ba4:	d8800f17 	ldw	r2,60(sp)
    3ba8:	10026216 	blt	r2,zero,4534 <_dtoa_r+0x147c>
    3bac:	dc001117 	ldw	r16,68(sp)
    3bb0:	1007883a 	mov	r3,r2
    3bb4:	d9800a17 	ldw	r6,40(sp)
    3bb8:	d8801117 	ldw	r2,68(sp)
    3bbc:	d9001617 	ldw	r4,88(sp)
    3bc0:	30cd883a 	add	r6,r6,r3
    3bc4:	10c5883a 	add	r2,r2,r3
    3bc8:	01400044 	movi	r5,1
    3bcc:	d9800a15 	stw	r6,40(sp)
    3bd0:	d8801115 	stw	r2,68(sp)
    3bd4:	00068240 	call	6824 <__i2b>
    3bd8:	1027883a 	mov	r19,r2
    3bdc:	003f2506 	br	3874 <_dtoa_r+0x7bc>
    3be0:	00c00074 	movhi	r3,1
    3be4:	18f22d04 	addi	r3,r3,-14156
    3be8:	003d6706 	br	3188 <_dtoa_r+0xd0>
    3bec:	dd800517 	ldw	r22,20(sp)
    3bf0:	04000044 	movi	r16,1
    3bf4:	00000706 	br	3c14 <_dtoa_r+0xb5c>
    3bf8:	d9400717 	ldw	r5,28(sp)
    3bfc:	d9001617 	ldw	r4,88(sp)
    3c00:	01800284 	movi	r6,10
    3c04:	000f883a 	mov	r7,zero
    3c08:	00068600 	call	6860 <__multadd>
    3c0c:	d8800715 	stw	r2,28(sp)
    3c10:	84000044 	addi	r16,r16,1
    3c14:	d9000717 	ldw	r4,28(sp)
    3c18:	900b883a 	mov	r5,r18
    3c1c:	0002e740 	call	2e74 <quorem>
    3c20:	15c00c04 	addi	r23,r2,48
    3c24:	b5c00005 	stb	r23,0(r22)
    3c28:	d8c00f17 	ldw	r3,60(sp)
    3c2c:	b5800044 	addi	r22,r22,1
    3c30:	80fff116 	blt	r16,r3,3bf8 <_dtoa_r+0xb40>
    3c34:	d8000615 	stw	zero,24(sp)
    3c38:	d9400717 	ldw	r5,28(sp)
    3c3c:	d9001617 	ldw	r4,88(sp)
    3c40:	01800044 	movi	r6,1
    3c44:	00064840 	call	6484 <__lshift>
    3c48:	1009883a 	mov	r4,r2
    3c4c:	900b883a 	mov	r5,r18
    3c50:	d8800715 	stw	r2,28(sp)
    3c54:	0005c9c0 	call	5c9c <__mcmp>
    3c58:	00803c0e 	bge	zero,r2,3d4c <_dtoa_r+0xc94>
    3c5c:	b009883a 	mov	r4,r22
    3c60:	213fffc4 	addi	r4,r4,-1
    3c64:	21400003 	ldbu	r5,0(r4)
    3c68:	00800e44 	movi	r2,57
    3c6c:	28c03fcc 	andi	r3,r5,255
    3c70:	18c0201c 	xori	r3,r3,128
    3c74:	18ffe004 	addi	r3,r3,-128
    3c78:	1881981e 	bne	r3,r2,42dc <_dtoa_r+0x1224>
    3c7c:	d9800517 	ldw	r6,20(sp)
    3c80:	21bff71e 	bne	r4,r6,3c60 <_dtoa_r+0xba8>
    3c84:	d8800d17 	ldw	r2,52(sp)
    3c88:	37000044 	addi	fp,r6,1
    3c8c:	10800044 	addi	r2,r2,1
    3c90:	d8800d15 	stw	r2,52(sp)
    3c94:	00800c44 	movi	r2,49
    3c98:	30800005 	stb	r2,0(r6)
    3c9c:	d9001617 	ldw	r4,88(sp)
    3ca0:	900b883a 	mov	r5,r18
    3ca4:	0005b400 	call	5b40 <_Bfree>
    3ca8:	983ecd26 	beq	r19,zero,37e0 <_dtoa_r+0x728>
    3cac:	d8c00617 	ldw	r3,24(sp)
    3cb0:	18000426 	beq	r3,zero,3cc4 <_dtoa_r+0xc0c>
    3cb4:	1cc00326 	beq	r3,r19,3cc4 <_dtoa_r+0xc0c>
    3cb8:	d9001617 	ldw	r4,88(sp)
    3cbc:	180b883a 	mov	r5,r3
    3cc0:	0005b400 	call	5b40 <_Bfree>
    3cc4:	d9001617 	ldw	r4,88(sp)
    3cc8:	980b883a 	mov	r5,r19
    3ccc:	0005b400 	call	5b40 <_Bfree>
    3cd0:	003ec306 	br	37e0 <_dtoa_r+0x728>
    3cd4:	1805883a 	mov	r2,r3
    3cd8:	003eeb06 	br	3888 <_dtoa_r+0x7d0>
    3cdc:	d9800a17 	ldw	r6,40(sp)
    3ce0:	d8c01117 	ldw	r3,68(sp)
    3ce4:	20bfff04 	addi	r2,r4,-4
    3ce8:	308d883a 	add	r6,r6,r2
    3cec:	1887883a 	add	r3,r3,r2
    3cf0:	80a1883a 	add	r16,r16,r2
    3cf4:	d9800a15 	stw	r6,40(sp)
    3cf8:	d8c01115 	stw	r3,68(sp)
    3cfc:	003f1d06 	br	3974 <_dtoa_r+0x8bc>
    3d00:	a03f0c1e 	bne	r20,zero,3934 <_dtoa_r+0x87c>
    3d04:	00800434 	movhi	r2,16
    3d08:	10bfffc4 	addi	r2,r2,-1
    3d0c:	a884703a 	and	r2,r21,r2
    3d10:	103f081e 	bne	r2,zero,3934 <_dtoa_r+0x87c>
    3d14:	a89ffc2c 	andhi	r2,r21,32752
    3d18:	103f0626 	beq	r2,zero,3934 <_dtoa_r+0x87c>
    3d1c:	d8c01117 	ldw	r3,68(sp)
    3d20:	d9000a17 	ldw	r4,40(sp)
    3d24:	18c00044 	addi	r3,r3,1
    3d28:	21000044 	addi	r4,r4,1
    3d2c:	d8c01115 	stw	r3,68(sp)
    3d30:	d9000a15 	stw	r4,40(sp)
    3d34:	003f0006 	br	3938 <_dtoa_r+0x880>
    3d38:	d9400717 	ldw	r5,28(sp)
    3d3c:	d9001617 	ldw	r4,88(sp)
    3d40:	000698c0 	call	698c <__pow5mult>
    3d44:	d8800715 	stw	r2,28(sp)
    3d48:	003eed06 	br	3900 <_dtoa_r+0x848>
    3d4c:	1000021e 	bne	r2,zero,3d58 <_dtoa_r+0xca0>
    3d50:	b880004c 	andi	r2,r23,1
    3d54:	103fc11e 	bne	r2,zero,3c5c <_dtoa_r+0xba4>
    3d58:	b5bfffc4 	addi	r22,r22,-1
    3d5c:	b0c00007 	ldb	r3,0(r22)
    3d60:	00800c04 	movi	r2,48
    3d64:	18bffc26 	beq	r3,r2,3d58 <_dtoa_r+0xca0>
    3d68:	b7000044 	addi	fp,r22,1
    3d6c:	003fcb06 	br	3c9c <_dtoa_r+0xbe4>
    3d70:	d9800d17 	ldw	r6,52(sp)
    3d74:	018fc83a 	sub	r7,zero,r6
    3d78:	3801f726 	beq	r7,zero,4558 <_dtoa_r+0x14a0>
    3d7c:	398003cc 	andi	r6,r7,15
    3d80:	300c90fa 	slli	r6,r6,3
    3d84:	01400074 	movhi	r5,1
    3d88:	29724b04 	addi	r5,r5,-14036
    3d8c:	d9001217 	ldw	r4,72(sp)
    3d90:	314d883a 	add	r6,r6,r5
    3d94:	30c00117 	ldw	r3,4(r6)
    3d98:	30800017 	ldw	r2,0(r6)
    3d9c:	d9401317 	ldw	r5,76(sp)
    3da0:	3821d13a 	srai	r16,r7,4
    3da4:	100d883a 	mov	r6,r2
    3da8:	180f883a 	mov	r7,r3
    3dac:	0008b240 	call	8b24 <__muldf3>
    3db0:	1011883a 	mov	r8,r2
    3db4:	1813883a 	mov	r9,r3
    3db8:	1029883a 	mov	r20,r2
    3dbc:	182b883a 	mov	r21,r3
    3dc0:	8001e526 	beq	r16,zero,4558 <_dtoa_r+0x14a0>
    3dc4:	05800084 	movi	r22,2
    3dc8:	04400074 	movhi	r17,1
    3dcc:	8c727d04 	addi	r17,r17,-13836
    3dd0:	8080004c 	andi	r2,r16,1
    3dd4:	1005003a 	cmpeq	r2,r2,zero
    3dd8:	1000081e 	bne	r2,zero,3dfc <_dtoa_r+0xd44>
    3ddc:	89800017 	ldw	r6,0(r17)
    3de0:	89c00117 	ldw	r7,4(r17)
    3de4:	480b883a 	mov	r5,r9
    3de8:	4009883a 	mov	r4,r8
    3dec:	0008b240 	call	8b24 <__muldf3>
    3df0:	1011883a 	mov	r8,r2
    3df4:	b5800044 	addi	r22,r22,1
    3df8:	1813883a 	mov	r9,r3
    3dfc:	8021d07a 	srai	r16,r16,1
    3e00:	8c400204 	addi	r17,r17,8
    3e04:	803ff21e 	bne	r16,zero,3dd0 <_dtoa_r+0xd18>
    3e08:	4029883a 	mov	r20,r8
    3e0c:	482b883a 	mov	r21,r9
    3e10:	003dca06 	br	353c <_dtoa_r+0x484>
    3e14:	d9000817 	ldw	r4,32(sp)
    3e18:	2005003a 	cmpeq	r2,r4,zero
    3e1c:	1001f61e 	bne	r2,zero,45f8 <_dtoa_r+0x1540>
    3e20:	dc001117 	ldw	r16,68(sp)
    3e24:	dc801017 	ldw	r18,64(sp)
    3e28:	18c10cc4 	addi	r3,r3,1075
    3e2c:	003f6106 	br	3bb4 <_dtoa_r+0xafc>
    3e30:	d8000b15 	stw	zero,44(sp)
    3e34:	d9802617 	ldw	r6,152(sp)
    3e38:	d8c00d17 	ldw	r3,52(sp)
    3e3c:	30800044 	addi	r2,r6,1
    3e40:	18ad883a 	add	r22,r3,r2
    3e44:	b13fffc4 	addi	r4,r22,-1
    3e48:	d9000e15 	stw	r4,56(sp)
    3e4c:	0581f60e 	bge	zero,r22,4628 <_dtoa_r+0x1570>
    3e50:	dd800f15 	stw	r22,60(sp)
    3e54:	003f3006 	br	3b18 <_dtoa_r+0xa60>
    3e58:	d8000b15 	stw	zero,44(sp)
    3e5c:	d9002617 	ldw	r4,152(sp)
    3e60:	0101eb0e 	bge	zero,r4,4610 <_dtoa_r+0x1558>
    3e64:	202d883a 	mov	r22,r4
    3e68:	d9000e15 	stw	r4,56(sp)
    3e6c:	d9000f15 	stw	r4,60(sp)
    3e70:	003f2906 	br	3b18 <_dtoa_r+0xa60>
    3e74:	01800044 	movi	r6,1
    3e78:	d9800b15 	stw	r6,44(sp)
    3e7c:	003ff706 	br	3e5c <_dtoa_r+0xda4>
    3e80:	01000044 	movi	r4,1
    3e84:	d9000b15 	stw	r4,44(sp)
    3e88:	003fea06 	br	3e34 <_dtoa_r+0xd7c>
    3e8c:	04000c0e 	bge	zero,r16,3ec0 <_dtoa_r+0xe08>
    3e90:	d9400717 	ldw	r5,28(sp)
    3e94:	d9001617 	ldw	r4,88(sp)
    3e98:	01800044 	movi	r6,1
    3e9c:	00064840 	call	6484 <__lshift>
    3ea0:	1009883a 	mov	r4,r2
    3ea4:	900b883a 	mov	r5,r18
    3ea8:	d8800715 	stw	r2,28(sp)
    3eac:	0005c9c0 	call	5c9c <__mcmp>
    3eb0:	0081e00e 	bge	zero,r2,4634 <_dtoa_r+0x157c>
    3eb4:	bdc00044 	addi	r23,r23,1
    3eb8:	00800e84 	movi	r2,58
    3ebc:	b881a226 	beq	r23,r2,4548 <_dtoa_r+0x1490>
    3ec0:	b7000044 	addi	fp,r22,1
    3ec4:	b5c00005 	stb	r23,0(r22)
    3ec8:	003f7406 	br	3c9c <_dtoa_r+0xbe4>
    3ecc:	00800e44 	movi	r2,57
    3ed0:	b8819d26 	beq	r23,r2,4548 <_dtoa_r+0x1490>
    3ed4:	053ffa0e 	bge	zero,r20,3ec0 <_dtoa_r+0xe08>
    3ed8:	8dc00c44 	addi	r23,r17,49
    3edc:	003ff806 	br	3ec0 <_dtoa_r+0xe08>
    3ee0:	d9001617 	ldw	r4,88(sp)
    3ee4:	a80b883a 	mov	r5,r21
    3ee8:	04000044 	movi	r16,1
    3eec:	0005b400 	call	5b40 <_Bfree>
    3ef0:	003edf06 	br	3a70 <_dtoa_r+0x9b8>
    3ef4:	d9001617 	ldw	r4,88(sp)
    3ef8:	980b883a 	mov	r5,r19
    3efc:	01800284 	movi	r6,10
    3f00:	000f883a 	mov	r7,zero
    3f04:	00068600 	call	6860 <__multadd>
    3f08:	1027883a 	mov	r19,r2
    3f0c:	d8800615 	stw	r2,24(sp)
    3f10:	003ebb06 	br	3a00 <_dtoa_r+0x948>
    3f14:	d9801117 	ldw	r6,68(sp)
    3f18:	d8800d17 	ldw	r2,52(sp)
    3f1c:	d8000915 	stw	zero,36(sp)
    3f20:	308dc83a 	sub	r6,r6,r2
    3f24:	0087c83a 	sub	r3,zero,r2
    3f28:	d9801115 	stw	r6,68(sp)
    3f2c:	d8c01015 	stw	r3,64(sp)
    3f30:	003cfe06 	br	332c <_dtoa_r+0x274>
    3f34:	018dc83a 	sub	r6,zero,r6
    3f38:	d9801115 	stw	r6,68(sp)
    3f3c:	d8000a15 	stw	zero,40(sp)
    3f40:	003cf306 	br	3310 <_dtoa_r+0x258>
    3f44:	d9000d17 	ldw	r4,52(sp)
    3f48:	00093e80 	call	93e8 <__floatsidf>
    3f4c:	880b883a 	mov	r5,r17
    3f50:	8009883a 	mov	r4,r16
    3f54:	180f883a 	mov	r7,r3
    3f58:	100d883a 	mov	r6,r2
    3f5c:	00091c80 	call	91c8 <__nedf2>
    3f60:	103ce126 	beq	r2,zero,32e8 <_dtoa_r+0x230>
    3f64:	d9800d17 	ldw	r6,52(sp)
    3f68:	31bfffc4 	addi	r6,r6,-1
    3f6c:	d9800d15 	stw	r6,52(sp)
    3f70:	003cdd06 	br	32e8 <_dtoa_r+0x230>
    3f74:	d9000717 	ldw	r4,28(sp)
    3f78:	900b883a 	mov	r5,r18
    3f7c:	0005c9c0 	call	5c9c <__mcmp>
    3f80:	103e8d0e 	bge	r2,zero,39b8 <_dtoa_r+0x900>
    3f84:	d9400717 	ldw	r5,28(sp)
    3f88:	d9001617 	ldw	r4,88(sp)
    3f8c:	01800284 	movi	r6,10
    3f90:	000f883a 	mov	r7,zero
    3f94:	00068600 	call	6860 <__multadd>
    3f98:	d9800d17 	ldw	r6,52(sp)
    3f9c:	d8800715 	stw	r2,28(sp)
    3fa0:	31bfffc4 	addi	r6,r6,-1
    3fa4:	d9800d15 	stw	r6,52(sp)
    3fa8:	b001a71e 	bne	r22,zero,4648 <_dtoa_r+0x1590>
    3fac:	d8800e17 	ldw	r2,56(sp)
    3fb0:	d8800f15 	stw	r2,60(sp)
    3fb4:	003e8006 	br	39b8 <_dtoa_r+0x900>
    3fb8:	90800417 	ldw	r2,16(r18)
    3fbc:	1085883a 	add	r2,r2,r2
    3fc0:	1085883a 	add	r2,r2,r2
    3fc4:	1485883a 	add	r2,r2,r18
    3fc8:	11000417 	ldw	r4,16(r2)
    3fcc:	0005b680 	call	5b68 <__hi0bits>
    3fd0:	00c00804 	movi	r3,32
    3fd4:	1887c83a 	sub	r3,r3,r2
    3fd8:	003e5a06 	br	3944 <_dtoa_r+0x88c>
    3fdc:	d9400717 	ldw	r5,28(sp)
    3fe0:	d9801017 	ldw	r6,64(sp)
    3fe4:	d9001617 	ldw	r4,88(sp)
    3fe8:	000698c0 	call	698c <__pow5mult>
    3fec:	d8800715 	stw	r2,28(sp)
    3ff0:	003e4306 	br	3900 <_dtoa_r+0x848>
    3ff4:	d9800f17 	ldw	r6,60(sp)
    3ff8:	d8800d17 	ldw	r2,52(sp)
    3ffc:	d9800315 	stw	r6,12(sp)
    4000:	d8800415 	stw	r2,16(sp)
    4004:	d8c00b17 	ldw	r3,44(sp)
    4008:	1805003a 	cmpeq	r2,r3,zero
    400c:	1000e21e 	bne	r2,zero,4398 <_dtoa_r+0x12e0>
    4010:	d9000317 	ldw	r4,12(sp)
    4014:	0005883a 	mov	r2,zero
    4018:	00cff834 	movhi	r3,16352
    401c:	200c90fa 	slli	r6,r4,3
    4020:	01000074 	movhi	r4,1
    4024:	21324b04 	addi	r4,r4,-14036
    4028:	180b883a 	mov	r5,r3
    402c:	310d883a 	add	r6,r6,r4
    4030:	327fff17 	ldw	r9,-4(r6)
    4034:	323ffe17 	ldw	r8,-8(r6)
    4038:	1009883a 	mov	r4,r2
    403c:	480f883a 	mov	r7,r9
    4040:	400d883a 	mov	r6,r8
    4044:	0008ee80 	call	8ee8 <__divdf3>
    4048:	180b883a 	mov	r5,r3
    404c:	b00d883a 	mov	r6,r22
    4050:	b80f883a 	mov	r7,r23
    4054:	1009883a 	mov	r4,r2
    4058:	0008a300 	call	8a30 <__subdf3>
    405c:	a80b883a 	mov	r5,r21
    4060:	a009883a 	mov	r4,r20
    4064:	d8c01915 	stw	r3,100(sp)
    4068:	d8801815 	stw	r2,96(sp)
    406c:	00094e00 	call	94e0 <__fixdfsi>
    4070:	1009883a 	mov	r4,r2
    4074:	1027883a 	mov	r19,r2
    4078:	00093e80 	call	93e8 <__floatsidf>
    407c:	a80b883a 	mov	r5,r21
    4080:	a009883a 	mov	r4,r20
    4084:	180f883a 	mov	r7,r3
    4088:	100d883a 	mov	r6,r2
    408c:	0008a300 	call	8a30 <__subdf3>
    4090:	d9801817 	ldw	r6,96(sp)
    4094:	1823883a 	mov	r17,r3
    4098:	d8801415 	stw	r2,80(sp)
    409c:	302d883a 	mov	r22,r6
    40a0:	d9800517 	ldw	r6,20(sp)
    40a4:	9cc00c04 	addi	r19,r19,48
    40a8:	dc401515 	stw	r17,84(sp)
    40ac:	d8c01917 	ldw	r3,100(sp)
    40b0:	34c00005 	stb	r19,0(r6)
    40b4:	d8800517 	ldw	r2,20(sp)
    40b8:	d9401917 	ldw	r5,100(sp)
    40bc:	d9801417 	ldw	r6,80(sp)
    40c0:	b009883a 	mov	r4,r22
    40c4:	880f883a 	mov	r7,r17
    40c8:	182f883a 	mov	r23,r3
    40cc:	17000044 	addi	fp,r2,1
    40d0:	00092500 	call	9250 <__gtdf2>
    40d4:	00804e16 	blt	zero,r2,4210 <_dtoa_r+0x1158>
    40d8:	d9801417 	ldw	r6,80(sp)
    40dc:	0005883a 	mov	r2,zero
    40e0:	00cffc34 	movhi	r3,16368
    40e4:	180b883a 	mov	r5,r3
    40e8:	880f883a 	mov	r7,r17
    40ec:	1009883a 	mov	r4,r2
    40f0:	0008a300 	call	8a30 <__subdf3>
    40f4:	d9401917 	ldw	r5,100(sp)
    40f8:	180f883a 	mov	r7,r3
    40fc:	b009883a 	mov	r4,r22
    4100:	100d883a 	mov	r6,r2
    4104:	00092500 	call	9250 <__gtdf2>
    4108:	00bda216 	blt	zero,r2,3794 <_dtoa_r+0x6dc>
    410c:	d8c00317 	ldw	r3,12(sp)
    4110:	00800044 	movi	r2,1
    4114:	10c01216 	blt	r2,r3,4160 <_dtoa_r+0x10a8>
    4118:	003d4506 	br	3630 <_dtoa_r+0x578>
    411c:	d9801417 	ldw	r6,80(sp)
    4120:	0005883a 	mov	r2,zero
    4124:	00cffc34 	movhi	r3,16368
    4128:	180b883a 	mov	r5,r3
    412c:	880f883a 	mov	r7,r17
    4130:	1009883a 	mov	r4,r2
    4134:	0008a300 	call	8a30 <__subdf3>
    4138:	d9c01b17 	ldw	r7,108(sp)
    413c:	180b883a 	mov	r5,r3
    4140:	1009883a 	mov	r4,r2
    4144:	b00d883a 	mov	r6,r22
    4148:	00093600 	call	9360 <__ltdf2>
    414c:	103d9116 	blt	r2,zero,3794 <_dtoa_r+0x6dc>
    4150:	d9800517 	ldw	r6,20(sp)
    4154:	d9000317 	ldw	r4,12(sp)
    4158:	3105883a 	add	r2,r6,r4
    415c:	e0bd3426 	beq	fp,r2,3630 <_dtoa_r+0x578>
    4160:	04500934 	movhi	r17,16420
    4164:	0021883a 	mov	r16,zero
    4168:	b80b883a 	mov	r5,r23
    416c:	b009883a 	mov	r4,r22
    4170:	800d883a 	mov	r6,r16
    4174:	880f883a 	mov	r7,r17
    4178:	0008b240 	call	8b24 <__muldf3>
    417c:	d9401517 	ldw	r5,84(sp)
    4180:	d9001417 	ldw	r4,80(sp)
    4184:	880f883a 	mov	r7,r17
    4188:	000d883a 	mov	r6,zero
    418c:	d8801a15 	stw	r2,104(sp)
    4190:	d8c01b15 	stw	r3,108(sp)
    4194:	0008b240 	call	8b24 <__muldf3>
    4198:	180b883a 	mov	r5,r3
    419c:	1009883a 	mov	r4,r2
    41a0:	1823883a 	mov	r17,r3
    41a4:	1021883a 	mov	r16,r2
    41a8:	00094e00 	call	94e0 <__fixdfsi>
    41ac:	1009883a 	mov	r4,r2
    41b0:	102b883a 	mov	r21,r2
    41b4:	00093e80 	call	93e8 <__floatsidf>
    41b8:	880b883a 	mov	r5,r17
    41bc:	8009883a 	mov	r4,r16
    41c0:	180f883a 	mov	r7,r3
    41c4:	100d883a 	mov	r6,r2
    41c8:	0008a300 	call	8a30 <__subdf3>
    41cc:	1021883a 	mov	r16,r2
    41d0:	d9001b17 	ldw	r4,108(sp)
    41d4:	1823883a 	mov	r17,r3
    41d8:	dc001415 	stw	r16,80(sp)
    41dc:	ad400c04 	addi	r21,r21,48
    41e0:	dc401515 	stw	r17,84(sp)
    41e4:	d8801a17 	ldw	r2,104(sp)
    41e8:	e5400005 	stb	r21,0(fp)
    41ec:	202f883a 	mov	r23,r4
    41f0:	d9c01b17 	ldw	r7,108(sp)
    41f4:	d9001417 	ldw	r4,80(sp)
    41f8:	880b883a 	mov	r5,r17
    41fc:	100d883a 	mov	r6,r2
    4200:	102d883a 	mov	r22,r2
    4204:	e7000044 	addi	fp,fp,1
    4208:	00093600 	call	9360 <__ltdf2>
    420c:	103fc30e 	bge	r2,zero,411c <_dtoa_r+0x1064>
    4210:	d9000417 	ldw	r4,16(sp)
    4214:	d9000d15 	stw	r4,52(sp)
    4218:	003d7106 	br	37e0 <_dtoa_r+0x728>
    421c:	d9801717 	ldw	r6,92(sp)
    4220:	00800084 	movi	r2,2
    4224:	11bde60e 	bge	r2,r6,39c0 <_dtoa_r+0x908>
    4228:	203cfb1e 	bne	r4,zero,3618 <_dtoa_r+0x560>
    422c:	d9001617 	ldw	r4,88(sp)
    4230:	900b883a 	mov	r5,r18
    4234:	01800144 	movi	r6,5
    4238:	000f883a 	mov	r7,zero
    423c:	00068600 	call	6860 <__multadd>
    4240:	d9000717 	ldw	r4,28(sp)
    4244:	100b883a 	mov	r5,r2
    4248:	1025883a 	mov	r18,r2
    424c:	0005c9c0 	call	5c9c <__mcmp>
    4250:	00bcf10e 	bge	zero,r2,3618 <_dtoa_r+0x560>
    4254:	d8c00d17 	ldw	r3,52(sp)
    4258:	d9000517 	ldw	r4,20(sp)
    425c:	d8000615 	stw	zero,24(sp)
    4260:	18c00044 	addi	r3,r3,1
    4264:	d8c00d15 	stw	r3,52(sp)
    4268:	00800c44 	movi	r2,49
    426c:	27000044 	addi	fp,r4,1
    4270:	20800005 	stb	r2,0(r4)
    4274:	003e8906 	br	3c9c <_dtoa_r+0xbe4>
    4278:	d8c00517 	ldw	r3,20(sp)
    427c:	003bc206 	br	3188 <_dtoa_r+0xd0>
    4280:	01800074 	movhi	r6,1
    4284:	31b27d04 	addi	r6,r6,-13836
    4288:	30c00917 	ldw	r3,36(r6)
    428c:	30800817 	ldw	r2,32(r6)
    4290:	d9001217 	ldw	r4,72(sp)
    4294:	d9401317 	ldw	r5,76(sp)
    4298:	180f883a 	mov	r7,r3
    429c:	100d883a 	mov	r6,r2
    42a0:	0008ee80 	call	8ee8 <__divdf3>
    42a4:	948003cc 	andi	r18,r18,15
    42a8:	058000c4 	movi	r22,3
    42ac:	1029883a 	mov	r20,r2
    42b0:	182b883a 	mov	r21,r3
    42b4:	003c8906 	br	34dc <_dtoa_r+0x424>
    42b8:	d9001017 	ldw	r4,64(sp)
    42bc:	d9800917 	ldw	r6,36(sp)
    42c0:	0025883a 	mov	r18,zero
    42c4:	1105c83a 	sub	r2,r2,r4
    42c8:	2089883a 	add	r4,r4,r2
    42cc:	308d883a 	add	r6,r6,r2
    42d0:	d9001015 	stw	r4,64(sp)
    42d4:	d9800915 	stw	r6,36(sp)
    42d8:	003e3206 	br	3ba4 <_dtoa_r+0xaec>
    42dc:	28800044 	addi	r2,r5,1
    42e0:	27000044 	addi	fp,r4,1
    42e4:	20800005 	stb	r2,0(r4)
    42e8:	003e6c06 	br	3c9c <_dtoa_r+0xbe4>
    42ec:	d8800f17 	ldw	r2,60(sp)
    42f0:	00bce016 	blt	zero,r2,3674 <_dtoa_r+0x5bc>
    42f4:	d9800f17 	ldw	r6,60(sp)
    42f8:	303cc51e 	bne	r6,zero,3610 <_dtoa_r+0x558>
    42fc:	0005883a 	mov	r2,zero
    4300:	00d00534 	movhi	r3,16404
    4304:	980b883a 	mov	r5,r19
    4308:	180f883a 	mov	r7,r3
    430c:	9009883a 	mov	r4,r18
    4310:	100d883a 	mov	r6,r2
    4314:	0008b240 	call	8b24 <__muldf3>
    4318:	180b883a 	mov	r5,r3
    431c:	a80f883a 	mov	r7,r21
    4320:	1009883a 	mov	r4,r2
    4324:	a00d883a 	mov	r6,r20
    4328:	00092d80 	call	92d8 <__gedf2>
    432c:	103cb80e 	bge	r2,zero,3610 <_dtoa_r+0x558>
    4330:	0027883a 	mov	r19,zero
    4334:	0025883a 	mov	r18,zero
    4338:	003fc606 	br	4254 <_dtoa_r+0x119c>
    433c:	99400117 	ldw	r5,4(r19)
    4340:	d9001617 	ldw	r4,88(sp)
    4344:	00060c00 	call	60c0 <_Balloc>
    4348:	99800417 	ldw	r6,16(r19)
    434c:	11000304 	addi	r4,r2,12
    4350:	99400304 	addi	r5,r19,12
    4354:	318d883a 	add	r6,r6,r6
    4358:	318d883a 	add	r6,r6,r6
    435c:	31800204 	addi	r6,r6,8
    4360:	1023883a 	mov	r17,r2
    4364:	00059280 	call	5928 <memcpy>
    4368:	d9001617 	ldw	r4,88(sp)
    436c:	880b883a 	mov	r5,r17
    4370:	01800044 	movi	r6,1
    4374:	00064840 	call	6484 <__lshift>
    4378:	100b883a 	mov	r5,r2
    437c:	003d9c06 	br	39f0 <_dtoa_r+0x938>
    4380:	00800e44 	movi	r2,57
    4384:	b8807026 	beq	r23,r2,4548 <_dtoa_r+0x1490>
    4388:	b8800044 	addi	r2,r23,1
    438c:	b7000044 	addi	fp,r22,1
    4390:	b0800005 	stb	r2,0(r22)
    4394:	003e4106 	br	3c9c <_dtoa_r+0xbe4>
    4398:	d8800317 	ldw	r2,12(sp)
    439c:	01800074 	movhi	r6,1
    43a0:	31b24b04 	addi	r6,r6,-14036
    43a4:	b009883a 	mov	r4,r22
    43a8:	100e90fa 	slli	r7,r2,3
    43ac:	b80b883a 	mov	r5,r23
    43b0:	398f883a 	add	r7,r7,r6
    43b4:	38bffe17 	ldw	r2,-8(r7)
    43b8:	d9800517 	ldw	r6,20(sp)
    43bc:	38ffff17 	ldw	r3,-4(r7)
    43c0:	37000044 	addi	fp,r6,1
    43c4:	180f883a 	mov	r7,r3
    43c8:	100d883a 	mov	r6,r2
    43cc:	0008b240 	call	8b24 <__muldf3>
    43d0:	a80b883a 	mov	r5,r21
    43d4:	a009883a 	mov	r4,r20
    43d8:	182f883a 	mov	r23,r3
    43dc:	102d883a 	mov	r22,r2
    43e0:	00094e00 	call	94e0 <__fixdfsi>
    43e4:	1009883a 	mov	r4,r2
    43e8:	1027883a 	mov	r19,r2
    43ec:	00093e80 	call	93e8 <__floatsidf>
    43f0:	a80b883a 	mov	r5,r21
    43f4:	a009883a 	mov	r4,r20
    43f8:	180f883a 	mov	r7,r3
    43fc:	100d883a 	mov	r6,r2
    4400:	0008a300 	call	8a30 <__subdf3>
    4404:	180b883a 	mov	r5,r3
    4408:	d8c00517 	ldw	r3,20(sp)
    440c:	9cc00c04 	addi	r19,r19,48
    4410:	1009883a 	mov	r4,r2
    4414:	1cc00005 	stb	r19,0(r3)
    4418:	2021883a 	mov	r16,r4
    441c:	d9000317 	ldw	r4,12(sp)
    4420:	00800044 	movi	r2,1
    4424:	2823883a 	mov	r17,r5
    4428:	20802226 	beq	r4,r2,44b4 <_dtoa_r+0x13fc>
    442c:	1029883a 	mov	r20,r2
    4430:	0005883a 	mov	r2,zero
    4434:	00d00934 	movhi	r3,16420
    4438:	180f883a 	mov	r7,r3
    443c:	100d883a 	mov	r6,r2
    4440:	880b883a 	mov	r5,r17
    4444:	8009883a 	mov	r4,r16
    4448:	0008b240 	call	8b24 <__muldf3>
    444c:	180b883a 	mov	r5,r3
    4450:	1009883a 	mov	r4,r2
    4454:	1823883a 	mov	r17,r3
    4458:	1021883a 	mov	r16,r2
    445c:	00094e00 	call	94e0 <__fixdfsi>
    4460:	1009883a 	mov	r4,r2
    4464:	102b883a 	mov	r21,r2
    4468:	00093e80 	call	93e8 <__floatsidf>
    446c:	880b883a 	mov	r5,r17
    4470:	8009883a 	mov	r4,r16
    4474:	180f883a 	mov	r7,r3
    4478:	100d883a 	mov	r6,r2
    447c:	0008a300 	call	8a30 <__subdf3>
    4480:	180b883a 	mov	r5,r3
    4484:	d8c00517 	ldw	r3,20(sp)
    4488:	1009883a 	mov	r4,r2
    448c:	ad400c04 	addi	r21,r21,48
    4490:	1d05883a 	add	r2,r3,r20
    4494:	15400005 	stb	r21,0(r2)
    4498:	2021883a 	mov	r16,r4
    449c:	d9000317 	ldw	r4,12(sp)
    44a0:	a5000044 	addi	r20,r20,1
    44a4:	2823883a 	mov	r17,r5
    44a8:	a13fe11e 	bne	r20,r4,4430 <_dtoa_r+0x1378>
    44ac:	e505883a 	add	r2,fp,r20
    44b0:	173fffc4 	addi	fp,r2,-1
    44b4:	0025883a 	mov	r18,zero
    44b8:	04cff834 	movhi	r19,16352
    44bc:	b009883a 	mov	r4,r22
    44c0:	b80b883a 	mov	r5,r23
    44c4:	900d883a 	mov	r6,r18
    44c8:	980f883a 	mov	r7,r19
    44cc:	0008ab00 	call	8ab0 <__adddf3>
    44d0:	180b883a 	mov	r5,r3
    44d4:	1009883a 	mov	r4,r2
    44d8:	800d883a 	mov	r6,r16
    44dc:	880f883a 	mov	r7,r17
    44e0:	00093600 	call	9360 <__ltdf2>
    44e4:	103cab16 	blt	r2,zero,3794 <_dtoa_r+0x6dc>
    44e8:	0009883a 	mov	r4,zero
    44ec:	980b883a 	mov	r5,r19
    44f0:	b80f883a 	mov	r7,r23
    44f4:	b00d883a 	mov	r6,r22
    44f8:	0008a300 	call	8a30 <__subdf3>
    44fc:	180b883a 	mov	r5,r3
    4500:	880f883a 	mov	r7,r17
    4504:	1009883a 	mov	r4,r2
    4508:	800d883a 	mov	r6,r16
    450c:	00092500 	call	9250 <__gtdf2>
    4510:	00bc470e 	bge	zero,r2,3630 <_dtoa_r+0x578>
    4514:	00c00c04 	movi	r3,48
    4518:	e73fffc4 	addi	fp,fp,-1
    451c:	e0800007 	ldb	r2,0(fp)
    4520:	10fffd26 	beq	r2,r3,4518 <_dtoa_r+0x1460>
    4524:	d9800417 	ldw	r6,16(sp)
    4528:	e7000044 	addi	fp,fp,1
    452c:	d9800d15 	stw	r6,52(sp)
    4530:	003cab06 	br	37e0 <_dtoa_r+0x728>
    4534:	d8c00f17 	ldw	r3,60(sp)
    4538:	d9001117 	ldw	r4,68(sp)
    453c:	20e1c83a 	sub	r16,r4,r3
    4540:	0007883a 	mov	r3,zero
    4544:	003d9b06 	br	3bb4 <_dtoa_r+0xafc>
    4548:	00800e44 	movi	r2,57
    454c:	b0800005 	stb	r2,0(r22)
    4550:	b5800044 	addi	r22,r22,1
    4554:	003dc106 	br	3c5c <_dtoa_r+0xba4>
    4558:	05800084 	movi	r22,2
    455c:	003bf706 	br	353c <_dtoa_r+0x484>
    4560:	d9000f17 	ldw	r4,60(sp)
    4564:	013c000e 	bge	zero,r4,3568 <_dtoa_r+0x4b0>
    4568:	d9800e17 	ldw	r6,56(sp)
    456c:	01bc300e 	bge	zero,r6,3630 <_dtoa_r+0x578>
    4570:	0005883a 	mov	r2,zero
    4574:	00d00934 	movhi	r3,16420
    4578:	a80b883a 	mov	r5,r21
    457c:	180f883a 	mov	r7,r3
    4580:	a009883a 	mov	r4,r20
    4584:	100d883a 	mov	r6,r2
    4588:	0008b240 	call	8b24 <__muldf3>
    458c:	b1000044 	addi	r4,r22,1
    4590:	1021883a 	mov	r16,r2
    4594:	1823883a 	mov	r17,r3
    4598:	00093e80 	call	93e8 <__floatsidf>
    459c:	880b883a 	mov	r5,r17
    45a0:	8009883a 	mov	r4,r16
    45a4:	180f883a 	mov	r7,r3
    45a8:	100d883a 	mov	r6,r2
    45ac:	0008b240 	call	8b24 <__muldf3>
    45b0:	0011883a 	mov	r8,zero
    45b4:	02500734 	movhi	r9,16412
    45b8:	180b883a 	mov	r5,r3
    45bc:	480f883a 	mov	r7,r9
    45c0:	1009883a 	mov	r4,r2
    45c4:	400d883a 	mov	r6,r8
    45c8:	0008ab00 	call	8ab0 <__adddf3>
    45cc:	102d883a 	mov	r22,r2
    45d0:	00bf3034 	movhi	r2,64704
    45d4:	10ef883a 	add	r23,r2,r3
    45d8:	d8800d17 	ldw	r2,52(sp)
    45dc:	d8c00e17 	ldw	r3,56(sp)
    45e0:	8029883a 	mov	r20,r16
    45e4:	10bfffc4 	addi	r2,r2,-1
    45e8:	882b883a 	mov	r21,r17
    45ec:	d8800415 	stw	r2,16(sp)
    45f0:	d8c00315 	stw	r3,12(sp)
    45f4:	003e8306 	br	4004 <_dtoa_r+0xf4c>
    45f8:	d8800117 	ldw	r2,4(sp)
    45fc:	dc001117 	ldw	r16,68(sp)
    4600:	dc801017 	ldw	r18,64(sp)
    4604:	00c00d84 	movi	r3,54
    4608:	1887c83a 	sub	r3,r3,r2
    460c:	003d6906 	br	3bb4 <_dtoa_r+0xafc>
    4610:	01800044 	movi	r6,1
    4614:	3021883a 	mov	r16,r6
    4618:	d9800f15 	stw	r6,60(sp)
    461c:	d9802615 	stw	r6,152(sp)
    4620:	d9800e15 	stw	r6,56(sp)
    4624:	003b9306 	br	3474 <_dtoa_r+0x3bc>
    4628:	b021883a 	mov	r16,r22
    462c:	dd800f15 	stw	r22,60(sp)
    4630:	003b9006 	br	3474 <_dtoa_r+0x3bc>
    4634:	103e221e 	bne	r2,zero,3ec0 <_dtoa_r+0xe08>
    4638:	b880004c 	andi	r2,r23,1
    463c:	1005003a 	cmpeq	r2,r2,zero
    4640:	103e1f1e 	bne	r2,zero,3ec0 <_dtoa_r+0xe08>
    4644:	003e1b06 	br	3eb4 <_dtoa_r+0xdfc>
    4648:	d9001617 	ldw	r4,88(sp)
    464c:	980b883a 	mov	r5,r19
    4650:	01800284 	movi	r6,10
    4654:	000f883a 	mov	r7,zero
    4658:	00068600 	call	6860 <__multadd>
    465c:	d8c00e17 	ldw	r3,56(sp)
    4660:	1027883a 	mov	r19,r2
    4664:	d8c00f15 	stw	r3,60(sp)
    4668:	003cd306 	br	39b8 <_dtoa_r+0x900>

0000466c <_fflush_r>:
    466c:	defffb04 	addi	sp,sp,-20
    4670:	dcc00315 	stw	r19,12(sp)
    4674:	dc800215 	stw	r18,8(sp)
    4678:	dfc00415 	stw	ra,16(sp)
    467c:	dc400115 	stw	r17,4(sp)
    4680:	dc000015 	stw	r16,0(sp)
    4684:	2027883a 	mov	r19,r4
    4688:	2825883a 	mov	r18,r5
    468c:	20000226 	beq	r4,zero,4698 <_fflush_r+0x2c>
    4690:	20800e17 	ldw	r2,56(r4)
    4694:	10005626 	beq	r2,zero,47f0 <_fflush_r+0x184>
    4698:	9100030b 	ldhu	r4,12(r18)
    469c:	20ffffcc 	andi	r3,r4,65535
    46a0:	18e0001c 	xori	r3,r3,32768
    46a4:	18e00004 	addi	r3,r3,-32768
    46a8:	1880020c 	andi	r2,r3,8
    46ac:	1000261e 	bne	r2,zero,4748 <_fflush_r+0xdc>
    46b0:	90c00117 	ldw	r3,4(r18)
    46b4:	20820014 	ori	r2,r4,2048
    46b8:	9080030d 	sth	r2,12(r18)
    46bc:	1009883a 	mov	r4,r2
    46c0:	00c0400e 	bge	zero,r3,47c4 <_fflush_r+0x158>
    46c4:	92000a17 	ldw	r8,40(r18)
    46c8:	40004026 	beq	r8,zero,47cc <_fflush_r+0x160>
    46cc:	2084000c 	andi	r2,r4,4096
    46d0:	10005326 	beq	r2,zero,4820 <_fflush_r+0x1b4>
    46d4:	94001417 	ldw	r16,80(r18)
    46d8:	9080030b 	ldhu	r2,12(r18)
    46dc:	1080010c 	andi	r2,r2,4
    46e0:	1000481e 	bne	r2,zero,4804 <_fflush_r+0x198>
    46e4:	91400717 	ldw	r5,28(r18)
    46e8:	9809883a 	mov	r4,r19
    46ec:	800d883a 	mov	r6,r16
    46f0:	000f883a 	mov	r7,zero
    46f4:	403ee83a 	callr	r8
    46f8:	8080261e 	bne	r16,r2,4794 <_fflush_r+0x128>
    46fc:	9080030b 	ldhu	r2,12(r18)
    4700:	91000417 	ldw	r4,16(r18)
    4704:	90000115 	stw	zero,4(r18)
    4708:	10bdffcc 	andi	r2,r2,63487
    470c:	10ffffcc 	andi	r3,r2,65535
    4710:	18c4000c 	andi	r3,r3,4096
    4714:	9080030d 	sth	r2,12(r18)
    4718:	91000015 	stw	r4,0(r18)
    471c:	18002b26 	beq	r3,zero,47cc <_fflush_r+0x160>
    4720:	0007883a 	mov	r3,zero
    4724:	1805883a 	mov	r2,r3
    4728:	94001415 	stw	r16,80(r18)
    472c:	dfc00417 	ldw	ra,16(sp)
    4730:	dcc00317 	ldw	r19,12(sp)
    4734:	dc800217 	ldw	r18,8(sp)
    4738:	dc400117 	ldw	r17,4(sp)
    473c:	dc000017 	ldw	r16,0(sp)
    4740:	dec00504 	addi	sp,sp,20
    4744:	f800283a 	ret
    4748:	94400417 	ldw	r17,16(r18)
    474c:	88001f26 	beq	r17,zero,47cc <_fflush_r+0x160>
    4750:	90800017 	ldw	r2,0(r18)
    4754:	18c000cc 	andi	r3,r3,3
    4758:	94400015 	stw	r17,0(r18)
    475c:	1461c83a 	sub	r16,r2,r17
    4760:	18002526 	beq	r3,zero,47f8 <_fflush_r+0x18c>
    4764:	0005883a 	mov	r2,zero
    4768:	90800215 	stw	r2,8(r18)
    476c:	0400170e 	bge	zero,r16,47cc <_fflush_r+0x160>
    4770:	90c00917 	ldw	r3,36(r18)
    4774:	91400717 	ldw	r5,28(r18)
    4778:	880d883a 	mov	r6,r17
    477c:	800f883a 	mov	r7,r16
    4780:	9809883a 	mov	r4,r19
    4784:	183ee83a 	callr	r3
    4788:	88a3883a 	add	r17,r17,r2
    478c:	80a1c83a 	sub	r16,r16,r2
    4790:	00bff616 	blt	zero,r2,476c <_fflush_r+0x100>
    4794:	9080030b 	ldhu	r2,12(r18)
    4798:	00ffffc4 	movi	r3,-1
    479c:	10801014 	ori	r2,r2,64
    47a0:	9080030d 	sth	r2,12(r18)
    47a4:	1805883a 	mov	r2,r3
    47a8:	dfc00417 	ldw	ra,16(sp)
    47ac:	dcc00317 	ldw	r19,12(sp)
    47b0:	dc800217 	ldw	r18,8(sp)
    47b4:	dc400117 	ldw	r17,4(sp)
    47b8:	dc000017 	ldw	r16,0(sp)
    47bc:	dec00504 	addi	sp,sp,20
    47c0:	f800283a 	ret
    47c4:	90800f17 	ldw	r2,60(r18)
    47c8:	00bfbe16 	blt	zero,r2,46c4 <_fflush_r+0x58>
    47cc:	0007883a 	mov	r3,zero
    47d0:	1805883a 	mov	r2,r3
    47d4:	dfc00417 	ldw	ra,16(sp)
    47d8:	dcc00317 	ldw	r19,12(sp)
    47dc:	dc800217 	ldw	r18,8(sp)
    47e0:	dc400117 	ldw	r17,4(sp)
    47e4:	dc000017 	ldw	r16,0(sp)
    47e8:	dec00504 	addi	sp,sp,20
    47ec:	f800283a 	ret
    47f0:	00049040 	call	4904 <__sinit>
    47f4:	003fa806 	br	4698 <_fflush_r+0x2c>
    47f8:	90800517 	ldw	r2,20(r18)
    47fc:	90800215 	stw	r2,8(r18)
    4800:	003fda06 	br	476c <_fflush_r+0x100>
    4804:	90800117 	ldw	r2,4(r18)
    4808:	90c00c17 	ldw	r3,48(r18)
    480c:	80a1c83a 	sub	r16,r16,r2
    4810:	183fb426 	beq	r3,zero,46e4 <_fflush_r+0x78>
    4814:	90800f17 	ldw	r2,60(r18)
    4818:	80a1c83a 	sub	r16,r16,r2
    481c:	003fb106 	br	46e4 <_fflush_r+0x78>
    4820:	91400717 	ldw	r5,28(r18)
    4824:	9809883a 	mov	r4,r19
    4828:	000d883a 	mov	r6,zero
    482c:	01c00044 	movi	r7,1
    4830:	403ee83a 	callr	r8
    4834:	1021883a 	mov	r16,r2
    4838:	00bfffc4 	movi	r2,-1
    483c:	80800226 	beq	r16,r2,4848 <_fflush_r+0x1dc>
    4840:	92000a17 	ldw	r8,40(r18)
    4844:	003fa406 	br	46d8 <_fflush_r+0x6c>
    4848:	98c00017 	ldw	r3,0(r19)
    484c:	00800744 	movi	r2,29
    4850:	18bfde26 	beq	r3,r2,47cc <_fflush_r+0x160>
    4854:	9080030b 	ldhu	r2,12(r18)
    4858:	8007883a 	mov	r3,r16
    485c:	10801014 	ori	r2,r2,64
    4860:	9080030d 	sth	r2,12(r18)
    4864:	003fcf06 	br	47a4 <_fflush_r+0x138>

00004868 <fflush>:
    4868:	01400034 	movhi	r5,0
    486c:	29519b04 	addi	r5,r5,18028
    4870:	2007883a 	mov	r3,r4
    4874:	20000526 	beq	r4,zero,488c <fflush+0x24>
    4878:	00800074 	movhi	r2,1
    487c:	10b96d04 	addi	r2,r2,-6732
    4880:	11000017 	ldw	r4,0(r2)
    4884:	180b883a 	mov	r5,r3
    4888:	000466c1 	jmpi	466c <_fflush_r>
    488c:	00800074 	movhi	r2,1
    4890:	10b96e04 	addi	r2,r2,-6728
    4894:	11000017 	ldw	r4,0(r2)
    4898:	000546c1 	jmpi	546c <_fwalk_reent>

0000489c <std>:
    489c:	00800034 	movhi	r2,0
    48a0:	109c8c04 	addi	r2,r2,29232
    48a4:	20800b15 	stw	r2,44(r4)
    48a8:	00800034 	movhi	r2,0
    48ac:	109cc704 	addi	r2,r2,29468
    48b0:	20800815 	stw	r2,32(r4)
    48b4:	00c00034 	movhi	r3,0
    48b8:	18dca804 	addi	r3,r3,29344
    48bc:	00800034 	movhi	r2,0
    48c0:	109c8e04 	addi	r2,r2,29240
    48c4:	2140030d 	sth	r5,12(r4)
    48c8:	2180038d 	sth	r6,14(r4)
    48cc:	20c00915 	stw	r3,36(r4)
    48d0:	20800a15 	stw	r2,40(r4)
    48d4:	20000015 	stw	zero,0(r4)
    48d8:	20000115 	stw	zero,4(r4)
    48dc:	20000215 	stw	zero,8(r4)
    48e0:	20000415 	stw	zero,16(r4)
    48e4:	20000515 	stw	zero,20(r4)
    48e8:	20000615 	stw	zero,24(r4)
    48ec:	21000715 	stw	r4,28(r4)
    48f0:	f800283a 	ret

000048f4 <__sfp_lock_acquire>:
    48f4:	f800283a 	ret

000048f8 <__sfp_lock_release>:
    48f8:	f800283a 	ret

000048fc <__sinit_lock_acquire>:
    48fc:	f800283a 	ret

00004900 <__sinit_lock_release>:
    4900:	f800283a 	ret

00004904 <__sinit>:
    4904:	20800e17 	ldw	r2,56(r4)
    4908:	defffd04 	addi	sp,sp,-12
    490c:	dc400115 	stw	r17,4(sp)
    4910:	dc000015 	stw	r16,0(sp)
    4914:	dfc00215 	stw	ra,8(sp)
    4918:	04400044 	movi	r17,1
    491c:	01400104 	movi	r5,4
    4920:	000d883a 	mov	r6,zero
    4924:	2021883a 	mov	r16,r4
    4928:	2200bb04 	addi	r8,r4,748
    492c:	200f883a 	mov	r7,r4
    4930:	10000526 	beq	r2,zero,4948 <__sinit+0x44>
    4934:	dfc00217 	ldw	ra,8(sp)
    4938:	dc400117 	ldw	r17,4(sp)
    493c:	dc000017 	ldw	r16,0(sp)
    4940:	dec00304 	addi	sp,sp,12
    4944:	f800283a 	ret
    4948:	21000117 	ldw	r4,4(r4)
    494c:	00800034 	movhi	r2,0
    4950:	10927a04 	addi	r2,r2,18920
    4954:	00c000c4 	movi	r3,3
    4958:	80800f15 	stw	r2,60(r16)
    495c:	80c0b915 	stw	r3,740(r16)
    4960:	8200ba15 	stw	r8,744(r16)
    4964:	84400e15 	stw	r17,56(r16)
    4968:	8000b815 	stw	zero,736(r16)
    496c:	000489c0 	call	489c <std>
    4970:	81000217 	ldw	r4,8(r16)
    4974:	880d883a 	mov	r6,r17
    4978:	800f883a 	mov	r7,r16
    497c:	01400284 	movi	r5,10
    4980:	000489c0 	call	489c <std>
    4984:	81000317 	ldw	r4,12(r16)
    4988:	800f883a 	mov	r7,r16
    498c:	01400484 	movi	r5,18
    4990:	01800084 	movi	r6,2
    4994:	dfc00217 	ldw	ra,8(sp)
    4998:	dc400117 	ldw	r17,4(sp)
    499c:	dc000017 	ldw	r16,0(sp)
    49a0:	dec00304 	addi	sp,sp,12
    49a4:	000489c1 	jmpi	489c <std>

000049a8 <__fp_lock>:
    49a8:	0005883a 	mov	r2,zero
    49ac:	f800283a 	ret

000049b0 <__fp_unlock>:
    49b0:	0005883a 	mov	r2,zero
    49b4:	f800283a 	ret

000049b8 <__fp_unlock_all>:
    49b8:	00800074 	movhi	r2,1
    49bc:	10b96d04 	addi	r2,r2,-6732
    49c0:	11000017 	ldw	r4,0(r2)
    49c4:	01400034 	movhi	r5,0
    49c8:	29526c04 	addi	r5,r5,18864
    49cc:	00055341 	jmpi	5534 <_fwalk>

000049d0 <__fp_lock_all>:
    49d0:	00800074 	movhi	r2,1
    49d4:	10b96d04 	addi	r2,r2,-6732
    49d8:	11000017 	ldw	r4,0(r2)
    49dc:	01400034 	movhi	r5,0
    49e0:	29526a04 	addi	r5,r5,18856
    49e4:	00055341 	jmpi	5534 <_fwalk>

000049e8 <_cleanup_r>:
    49e8:	01400034 	movhi	r5,0
    49ec:	295ddb04 	addi	r5,r5,30572
    49f0:	00055341 	jmpi	5534 <_fwalk>

000049f4 <_cleanup>:
    49f4:	00800074 	movhi	r2,1
    49f8:	10b96e04 	addi	r2,r2,-6728
    49fc:	11000017 	ldw	r4,0(r2)
    4a00:	00049e81 	jmpi	49e8 <_cleanup_r>

00004a04 <__sfmoreglue>:
    4a04:	defffc04 	addi	sp,sp,-16
    4a08:	dc000015 	stw	r16,0(sp)
    4a0c:	2821883a 	mov	r16,r5
    4a10:	dc400115 	stw	r17,4(sp)
    4a14:	01401704 	movi	r5,92
    4a18:	2023883a 	mov	r17,r4
    4a1c:	8009883a 	mov	r4,r16
    4a20:	dfc00315 	stw	ra,12(sp)
    4a24:	dcc00215 	stw	r19,8(sp)
    4a28:	00005700 	call	570 <__mulsi3>
    4a2c:	11400304 	addi	r5,r2,12
    4a30:	8809883a 	mov	r4,r17
    4a34:	1027883a 	mov	r19,r2
    4a38:	00005d00 	call	5d0 <_malloc_r>
    4a3c:	10c00304 	addi	r3,r2,12
    4a40:	1023883a 	mov	r17,r2
    4a44:	1809883a 	mov	r4,r3
    4a48:	980d883a 	mov	r6,r19
    4a4c:	000b883a 	mov	r5,zero
    4a50:	10000b26 	beq	r2,zero,4a80 <__sfmoreglue+0x7c>
    4a54:	14000115 	stw	r16,4(r2)
    4a58:	10c00215 	stw	r3,8(r2)
    4a5c:	10000015 	stw	zero,0(r2)
    4a60:	0005aa80 	call	5aa8 <memset>
    4a64:	8805883a 	mov	r2,r17
    4a68:	dfc00317 	ldw	ra,12(sp)
    4a6c:	dcc00217 	ldw	r19,8(sp)
    4a70:	dc400117 	ldw	r17,4(sp)
    4a74:	dc000017 	ldw	r16,0(sp)
    4a78:	dec00404 	addi	sp,sp,16
    4a7c:	f800283a 	ret
    4a80:	0023883a 	mov	r17,zero
    4a84:	8805883a 	mov	r2,r17
    4a88:	dfc00317 	ldw	ra,12(sp)
    4a8c:	dcc00217 	ldw	r19,8(sp)
    4a90:	dc400117 	ldw	r17,4(sp)
    4a94:	dc000017 	ldw	r16,0(sp)
    4a98:	dec00404 	addi	sp,sp,16
    4a9c:	f800283a 	ret

00004aa0 <__sfp>:
    4aa0:	defffd04 	addi	sp,sp,-12
    4aa4:	00800074 	movhi	r2,1
    4aa8:	10b96e04 	addi	r2,r2,-6728
    4aac:	dc000015 	stw	r16,0(sp)
    4ab0:	14000017 	ldw	r16,0(r2)
    4ab4:	dc400115 	stw	r17,4(sp)
    4ab8:	dfc00215 	stw	ra,8(sp)
    4abc:	80800e17 	ldw	r2,56(r16)
    4ac0:	2023883a 	mov	r17,r4
    4ac4:	10002626 	beq	r2,zero,4b60 <__sfp+0xc0>
    4ac8:	8400b804 	addi	r16,r16,736
    4acc:	80800117 	ldw	r2,4(r16)
    4ad0:	81000217 	ldw	r4,8(r16)
    4ad4:	10ffffc4 	addi	r3,r2,-1
    4ad8:	18000916 	blt	r3,zero,4b00 <__sfp+0x60>
    4adc:	2080030f 	ldh	r2,12(r4)
    4ae0:	10000b26 	beq	r2,zero,4b10 <__sfp+0x70>
    4ae4:	017fffc4 	movi	r5,-1
    4ae8:	00000206 	br	4af4 <__sfp+0x54>
    4aec:	2080030f 	ldh	r2,12(r4)
    4af0:	10000726 	beq	r2,zero,4b10 <__sfp+0x70>
    4af4:	18ffffc4 	addi	r3,r3,-1
    4af8:	21001704 	addi	r4,r4,92
    4afc:	197ffb1e 	bne	r3,r5,4aec <__sfp+0x4c>
    4b00:	80800017 	ldw	r2,0(r16)
    4b04:	10001926 	beq	r2,zero,4b6c <__sfp+0xcc>
    4b08:	1021883a 	mov	r16,r2
    4b0c:	003fef06 	br	4acc <__sfp+0x2c>
    4b10:	00bfffc4 	movi	r2,-1
    4b14:	00c00044 	movi	r3,1
    4b18:	2080038d 	sth	r2,14(r4)
    4b1c:	20c0030d 	sth	r3,12(r4)
    4b20:	20000015 	stw	zero,0(r4)
    4b24:	20000215 	stw	zero,8(r4)
    4b28:	20000115 	stw	zero,4(r4)
    4b2c:	20000415 	stw	zero,16(r4)
    4b30:	20000515 	stw	zero,20(r4)
    4b34:	20000615 	stw	zero,24(r4)
    4b38:	20000c15 	stw	zero,48(r4)
    4b3c:	20000d15 	stw	zero,52(r4)
    4b40:	20001115 	stw	zero,68(r4)
    4b44:	20001215 	stw	zero,72(r4)
    4b48:	2005883a 	mov	r2,r4
    4b4c:	dfc00217 	ldw	ra,8(sp)
    4b50:	dc400117 	ldw	r17,4(sp)
    4b54:	dc000017 	ldw	r16,0(sp)
    4b58:	dec00304 	addi	sp,sp,12
    4b5c:	f800283a 	ret
    4b60:	8009883a 	mov	r4,r16
    4b64:	00049040 	call	4904 <__sinit>
    4b68:	003fd706 	br	4ac8 <__sfp+0x28>
    4b6c:	8809883a 	mov	r4,r17
    4b70:	01400104 	movi	r5,4
    4b74:	0004a040 	call	4a04 <__sfmoreglue>
    4b78:	80800015 	stw	r2,0(r16)
    4b7c:	103fe21e 	bne	r2,zero,4b08 <__sfp+0x68>
    4b80:	00800304 	movi	r2,12
    4b84:	0009883a 	mov	r4,zero
    4b88:	88800015 	stw	r2,0(r17)
    4b8c:	003fee06 	br	4b48 <__sfp+0xa8>

00004b90 <_malloc_trim_r>:
    4b90:	defffb04 	addi	sp,sp,-20
    4b94:	dcc00315 	stw	r19,12(sp)
    4b98:	04c00074 	movhi	r19,1
    4b9c:	9cf2e404 	addi	r19,r19,-13424
    4ba0:	dc800215 	stw	r18,8(sp)
    4ba4:	dc400115 	stw	r17,4(sp)
    4ba8:	dc000015 	stw	r16,0(sp)
    4bac:	2823883a 	mov	r17,r5
    4bb0:	2025883a 	mov	r18,r4
    4bb4:	dfc00415 	stw	ra,16(sp)
    4bb8:	000a5ec0 	call	a5ec <__malloc_lock>
    4bbc:	98800217 	ldw	r2,8(r19)
    4bc0:	9009883a 	mov	r4,r18
    4bc4:	000b883a 	mov	r5,zero
    4bc8:	10c00117 	ldw	r3,4(r2)
    4bcc:	00bfff04 	movi	r2,-4
    4bd0:	18a0703a 	and	r16,r3,r2
    4bd4:	8463c83a 	sub	r17,r16,r17
    4bd8:	8c43fbc4 	addi	r17,r17,4079
    4bdc:	8822d33a 	srli	r17,r17,12
    4be0:	0083ffc4 	movi	r2,4095
    4be4:	8c7fffc4 	addi	r17,r17,-1
    4be8:	8822933a 	slli	r17,r17,12
    4bec:	1440060e 	bge	r2,r17,4c08 <_malloc_trim_r+0x78>
    4bf0:	0000d880 	call	d88 <_sbrk_r>
    4bf4:	98c00217 	ldw	r3,8(r19)
    4bf8:	9009883a 	mov	r4,r18
    4bfc:	044bc83a 	sub	r5,zero,r17
    4c00:	80c7883a 	add	r3,r16,r3
    4c04:	10c00926 	beq	r2,r3,4c2c <_malloc_trim_r+0x9c>
    4c08:	000a60c0 	call	a60c <__malloc_unlock>
    4c0c:	0005883a 	mov	r2,zero
    4c10:	dfc00417 	ldw	ra,16(sp)
    4c14:	dcc00317 	ldw	r19,12(sp)
    4c18:	dc800217 	ldw	r18,8(sp)
    4c1c:	dc400117 	ldw	r17,4(sp)
    4c20:	dc000017 	ldw	r16,0(sp)
    4c24:	dec00504 	addi	sp,sp,20
    4c28:	f800283a 	ret
    4c2c:	9009883a 	mov	r4,r18
    4c30:	0000d880 	call	d88 <_sbrk_r>
    4c34:	844dc83a 	sub	r6,r16,r17
    4c38:	00ffffc4 	movi	r3,-1
    4c3c:	9009883a 	mov	r4,r18
    4c40:	000b883a 	mov	r5,zero
    4c44:	01c00074 	movhi	r7,1
    4c48:	39c02104 	addi	r7,r7,132
    4c4c:	31800054 	ori	r6,r6,1
    4c50:	10c00926 	beq	r2,r3,4c78 <_malloc_trim_r+0xe8>
    4c54:	38800017 	ldw	r2,0(r7)
    4c58:	98c00217 	ldw	r3,8(r19)
    4c5c:	9009883a 	mov	r4,r18
    4c60:	1445c83a 	sub	r2,r2,r17
    4c64:	38800015 	stw	r2,0(r7)
    4c68:	19800115 	stw	r6,4(r3)
    4c6c:	000a60c0 	call	a60c <__malloc_unlock>
    4c70:	00800044 	movi	r2,1
    4c74:	003fe606 	br	4c10 <_malloc_trim_r+0x80>
    4c78:	0000d880 	call	d88 <_sbrk_r>
    4c7c:	99800217 	ldw	r6,8(r19)
    4c80:	100f883a 	mov	r7,r2
    4c84:	9009883a 	mov	r4,r18
    4c88:	1187c83a 	sub	r3,r2,r6
    4c8c:	008003c4 	movi	r2,15
    4c90:	19400054 	ori	r5,r3,1
    4c94:	10ffdc0e 	bge	r2,r3,4c08 <_malloc_trim_r+0x78>
    4c98:	00800074 	movhi	r2,1
    4c9c:	10b96c04 	addi	r2,r2,-6736
    4ca0:	10c00017 	ldw	r3,0(r2)
    4ca4:	00800074 	movhi	r2,1
    4ca8:	10802104 	addi	r2,r2,132
    4cac:	31400115 	stw	r5,4(r6)
    4cb0:	38c7c83a 	sub	r3,r7,r3
    4cb4:	10c00015 	stw	r3,0(r2)
    4cb8:	003fd306 	br	4c08 <_malloc_trim_r+0x78>

00004cbc <_free_r>:
    4cbc:	defffd04 	addi	sp,sp,-12
    4cc0:	dc400115 	stw	r17,4(sp)
    4cc4:	dc000015 	stw	r16,0(sp)
    4cc8:	dfc00215 	stw	ra,8(sp)
    4ccc:	2821883a 	mov	r16,r5
    4cd0:	2023883a 	mov	r17,r4
    4cd4:	28005a26 	beq	r5,zero,4e40 <_free_r+0x184>
    4cd8:	000a5ec0 	call	a5ec <__malloc_lock>
    4cdc:	823ffe04 	addi	r8,r16,-8
    4ce0:	41400117 	ldw	r5,4(r8)
    4ce4:	00bfff84 	movi	r2,-2
    4ce8:	02800074 	movhi	r10,1
    4cec:	52b2e404 	addi	r10,r10,-13424
    4cf0:	288e703a 	and	r7,r5,r2
    4cf4:	41cd883a 	add	r6,r8,r7
    4cf8:	30c00117 	ldw	r3,4(r6)
    4cfc:	51000217 	ldw	r4,8(r10)
    4d00:	00bfff04 	movi	r2,-4
    4d04:	1892703a 	and	r9,r3,r2
    4d08:	5017883a 	mov	r11,r10
    4d0c:	31006726 	beq	r6,r4,4eac <_free_r+0x1f0>
    4d10:	2880004c 	andi	r2,r5,1
    4d14:	1005003a 	cmpeq	r2,r2,zero
    4d18:	32400115 	stw	r9,4(r6)
    4d1c:	10001a1e 	bne	r2,zero,4d88 <_free_r+0xcc>
    4d20:	000b883a 	mov	r5,zero
    4d24:	3247883a 	add	r3,r6,r9
    4d28:	18800117 	ldw	r2,4(r3)
    4d2c:	1080004c 	andi	r2,r2,1
    4d30:	1000231e 	bne	r2,zero,4dc0 <_free_r+0x104>
    4d34:	280ac03a 	cmpne	r5,r5,zero
    4d38:	3a4f883a 	add	r7,r7,r9
    4d3c:	2800451e 	bne	r5,zero,4e54 <_free_r+0x198>
    4d40:	31000217 	ldw	r4,8(r6)
    4d44:	00800074 	movhi	r2,1
    4d48:	10b2e604 	addi	r2,r2,-13416
    4d4c:	20807b26 	beq	r4,r2,4f3c <_free_r+0x280>
    4d50:	30800317 	ldw	r2,12(r6)
    4d54:	3a07883a 	add	r3,r7,r8
    4d58:	19c00015 	stw	r7,0(r3)
    4d5c:	11000215 	stw	r4,8(r2)
    4d60:	20800315 	stw	r2,12(r4)
    4d64:	38800054 	ori	r2,r7,1
    4d68:	40800115 	stw	r2,4(r8)
    4d6c:	28001a26 	beq	r5,zero,4dd8 <_free_r+0x11c>
    4d70:	8809883a 	mov	r4,r17
    4d74:	dfc00217 	ldw	ra,8(sp)
    4d78:	dc400117 	ldw	r17,4(sp)
    4d7c:	dc000017 	ldw	r16,0(sp)
    4d80:	dec00304 	addi	sp,sp,12
    4d84:	000a60c1 	jmpi	a60c <__malloc_unlock>
    4d88:	80bffe17 	ldw	r2,-8(r16)
    4d8c:	50c00204 	addi	r3,r10,8
    4d90:	4091c83a 	sub	r8,r8,r2
    4d94:	41000217 	ldw	r4,8(r8)
    4d98:	388f883a 	add	r7,r7,r2
    4d9c:	20c06126 	beq	r4,r3,4f24 <_free_r+0x268>
    4da0:	40800317 	ldw	r2,12(r8)
    4da4:	3247883a 	add	r3,r6,r9
    4da8:	000b883a 	mov	r5,zero
    4dac:	11000215 	stw	r4,8(r2)
    4db0:	20800315 	stw	r2,12(r4)
    4db4:	18800117 	ldw	r2,4(r3)
    4db8:	1080004c 	andi	r2,r2,1
    4dbc:	103fdd26 	beq	r2,zero,4d34 <_free_r+0x78>
    4dc0:	38800054 	ori	r2,r7,1
    4dc4:	3a07883a 	add	r3,r7,r8
    4dc8:	280ac03a 	cmpne	r5,r5,zero
    4dcc:	40800115 	stw	r2,4(r8)
    4dd0:	19c00015 	stw	r7,0(r3)
    4dd4:	283fe61e 	bne	r5,zero,4d70 <_free_r+0xb4>
    4dd8:	00807fc4 	movi	r2,511
    4ddc:	11c01f2e 	bgeu	r2,r7,4e5c <_free_r+0x1a0>
    4de0:	3806d27a 	srli	r3,r7,9
    4de4:	1800481e 	bne	r3,zero,4f08 <_free_r+0x24c>
    4de8:	3804d0fa 	srli	r2,r7,3
    4dec:	100690fa 	slli	r3,r2,3
    4df0:	1acd883a 	add	r6,r3,r11
    4df4:	31400217 	ldw	r5,8(r6)
    4df8:	31405926 	beq	r6,r5,4f60 <_free_r+0x2a4>
    4dfc:	28800117 	ldw	r2,4(r5)
    4e00:	00ffff04 	movi	r3,-4
    4e04:	10c4703a 	and	r2,r2,r3
    4e08:	3880022e 	bgeu	r7,r2,4e14 <_free_r+0x158>
    4e0c:	29400217 	ldw	r5,8(r5)
    4e10:	317ffa1e 	bne	r6,r5,4dfc <_free_r+0x140>
    4e14:	29800317 	ldw	r6,12(r5)
    4e18:	41800315 	stw	r6,12(r8)
    4e1c:	41400215 	stw	r5,8(r8)
    4e20:	8809883a 	mov	r4,r17
    4e24:	2a000315 	stw	r8,12(r5)
    4e28:	32000215 	stw	r8,8(r6)
    4e2c:	dfc00217 	ldw	ra,8(sp)
    4e30:	dc400117 	ldw	r17,4(sp)
    4e34:	dc000017 	ldw	r16,0(sp)
    4e38:	dec00304 	addi	sp,sp,12
    4e3c:	000a60c1 	jmpi	a60c <__malloc_unlock>
    4e40:	dfc00217 	ldw	ra,8(sp)
    4e44:	dc400117 	ldw	r17,4(sp)
    4e48:	dc000017 	ldw	r16,0(sp)
    4e4c:	dec00304 	addi	sp,sp,12
    4e50:	f800283a 	ret
    4e54:	31000217 	ldw	r4,8(r6)
    4e58:	003fbd06 	br	4d50 <_free_r+0x94>
    4e5c:	3806d0fa 	srli	r3,r7,3
    4e60:	00800044 	movi	r2,1
    4e64:	51400117 	ldw	r5,4(r10)
    4e68:	180890fa 	slli	r4,r3,3
    4e6c:	1807d0ba 	srai	r3,r3,2
    4e70:	22c9883a 	add	r4,r4,r11
    4e74:	21800217 	ldw	r6,8(r4)
    4e78:	10c4983a 	sll	r2,r2,r3
    4e7c:	41000315 	stw	r4,12(r8)
    4e80:	41800215 	stw	r6,8(r8)
    4e84:	288ab03a 	or	r5,r5,r2
    4e88:	22000215 	stw	r8,8(r4)
    4e8c:	8809883a 	mov	r4,r17
    4e90:	51400115 	stw	r5,4(r10)
    4e94:	32000315 	stw	r8,12(r6)
    4e98:	dfc00217 	ldw	ra,8(sp)
    4e9c:	dc400117 	ldw	r17,4(sp)
    4ea0:	dc000017 	ldw	r16,0(sp)
    4ea4:	dec00304 	addi	sp,sp,12
    4ea8:	000a60c1 	jmpi	a60c <__malloc_unlock>
    4eac:	2880004c 	andi	r2,r5,1
    4eb0:	3a4d883a 	add	r6,r7,r9
    4eb4:	1000071e 	bne	r2,zero,4ed4 <_free_r+0x218>
    4eb8:	80bffe17 	ldw	r2,-8(r16)
    4ebc:	4091c83a 	sub	r8,r8,r2
    4ec0:	41000317 	ldw	r4,12(r8)
    4ec4:	40c00217 	ldw	r3,8(r8)
    4ec8:	308d883a 	add	r6,r6,r2
    4ecc:	20c00215 	stw	r3,8(r4)
    4ed0:	19000315 	stw	r4,12(r3)
    4ed4:	00800074 	movhi	r2,1
    4ed8:	10b96b04 	addi	r2,r2,-6740
    4edc:	11000017 	ldw	r4,0(r2)
    4ee0:	30c00054 	ori	r3,r6,1
    4ee4:	52000215 	stw	r8,8(r10)
    4ee8:	40c00115 	stw	r3,4(r8)
    4eec:	313fa036 	bltu	r6,r4,4d70 <_free_r+0xb4>
    4ef0:	00800074 	movhi	r2,1
    4ef4:	10801404 	addi	r2,r2,80
    4ef8:	11400017 	ldw	r5,0(r2)
    4efc:	8809883a 	mov	r4,r17
    4f00:	0004b900 	call	4b90 <_malloc_trim_r>
    4f04:	003f9a06 	br	4d70 <_free_r+0xb4>
    4f08:	00800104 	movi	r2,4
    4f0c:	10c0072e 	bgeu	r2,r3,4f2c <_free_r+0x270>
    4f10:	00800504 	movi	r2,20
    4f14:	10c01936 	bltu	r2,r3,4f7c <_free_r+0x2c0>
    4f18:	188016c4 	addi	r2,r3,91
    4f1c:	100690fa 	slli	r3,r2,3
    4f20:	003fb306 	br	4df0 <_free_r+0x134>
    4f24:	01400044 	movi	r5,1
    4f28:	003f7e06 	br	4d24 <_free_r+0x68>
    4f2c:	3804d1ba 	srli	r2,r7,6
    4f30:	10800e04 	addi	r2,r2,56
    4f34:	100690fa 	slli	r3,r2,3
    4f38:	003fad06 	br	4df0 <_free_r+0x134>
    4f3c:	22000315 	stw	r8,12(r4)
    4f40:	22000215 	stw	r8,8(r4)
    4f44:	3a05883a 	add	r2,r7,r8
    4f48:	38c00054 	ori	r3,r7,1
    4f4c:	11c00015 	stw	r7,0(r2)
    4f50:	41000215 	stw	r4,8(r8)
    4f54:	40c00115 	stw	r3,4(r8)
    4f58:	41000315 	stw	r4,12(r8)
    4f5c:	003f8406 	br	4d70 <_free_r+0xb4>
    4f60:	1005d0ba 	srai	r2,r2,2
    4f64:	00c00044 	movi	r3,1
    4f68:	51000117 	ldw	r4,4(r10)
    4f6c:	1886983a 	sll	r3,r3,r2
    4f70:	20c8b03a 	or	r4,r4,r3
    4f74:	51000115 	stw	r4,4(r10)
    4f78:	003fa706 	br	4e18 <_free_r+0x15c>
    4f7c:	00801504 	movi	r2,84
    4f80:	10c00436 	bltu	r2,r3,4f94 <_free_r+0x2d8>
    4f84:	3804d33a 	srli	r2,r7,12
    4f88:	10801b84 	addi	r2,r2,110
    4f8c:	100690fa 	slli	r3,r2,3
    4f90:	003f9706 	br	4df0 <_free_r+0x134>
    4f94:	00805504 	movi	r2,340
    4f98:	10c00436 	bltu	r2,r3,4fac <_free_r+0x2f0>
    4f9c:	3804d3fa 	srli	r2,r7,15
    4fa0:	10801dc4 	addi	r2,r2,119
    4fa4:	100690fa 	slli	r3,r2,3
    4fa8:	003f9106 	br	4df0 <_free_r+0x134>
    4fac:	00815504 	movi	r2,1364
    4fb0:	10c0032e 	bgeu	r2,r3,4fc0 <_free_r+0x304>
    4fb4:	00801f84 	movi	r2,126
    4fb8:	00c0fc04 	movi	r3,1008
    4fbc:	003f8c06 	br	4df0 <_free_r+0x134>
    4fc0:	3804d4ba 	srli	r2,r7,18
    4fc4:	10801f04 	addi	r2,r2,124
    4fc8:	100690fa 	slli	r3,r2,3
    4fcc:	003f8806 	br	4df0 <_free_r+0x134>

00004fd0 <__sfvwrite_r>:
    4fd0:	30800217 	ldw	r2,8(r6)
    4fd4:	defff504 	addi	sp,sp,-44
    4fd8:	df000915 	stw	fp,36(sp)
    4fdc:	dd800715 	stw	r22,28(sp)
    4fe0:	dc800315 	stw	r18,12(sp)
    4fe4:	dfc00a15 	stw	ra,40(sp)
    4fe8:	ddc00815 	stw	r23,32(sp)
    4fec:	dd400615 	stw	r21,24(sp)
    4ff0:	dd000515 	stw	r20,20(sp)
    4ff4:	dcc00415 	stw	r19,16(sp)
    4ff8:	dc400215 	stw	r17,8(sp)
    4ffc:	dc000115 	stw	r16,4(sp)
    5000:	302d883a 	mov	r22,r6
    5004:	2039883a 	mov	fp,r4
    5008:	2825883a 	mov	r18,r5
    500c:	10001c26 	beq	r2,zero,5080 <__sfvwrite_r+0xb0>
    5010:	29c0030b 	ldhu	r7,12(r5)
    5014:	3880020c 	andi	r2,r7,8
    5018:	10002726 	beq	r2,zero,50b8 <__sfvwrite_r+0xe8>
    501c:	28800417 	ldw	r2,16(r5)
    5020:	10002526 	beq	r2,zero,50b8 <__sfvwrite_r+0xe8>
    5024:	3880008c 	andi	r2,r7,2
    5028:	b5400017 	ldw	r21,0(r22)
    502c:	10002826 	beq	r2,zero,50d0 <__sfvwrite_r+0x100>
    5030:	0021883a 	mov	r16,zero
    5034:	0023883a 	mov	r17,zero
    5038:	880d883a 	mov	r6,r17
    503c:	e009883a 	mov	r4,fp
    5040:	00810004 	movi	r2,1024
    5044:	80006e26 	beq	r16,zero,5200 <__sfvwrite_r+0x230>
    5048:	800f883a 	mov	r7,r16
    504c:	91400717 	ldw	r5,28(r18)
    5050:	1400012e 	bgeu	r2,r16,5058 <__sfvwrite_r+0x88>
    5054:	100f883a 	mov	r7,r2
    5058:	90c00917 	ldw	r3,36(r18)
    505c:	183ee83a 	callr	r3
    5060:	1007883a 	mov	r3,r2
    5064:	80a1c83a 	sub	r16,r16,r2
    5068:	88a3883a 	add	r17,r17,r2
    506c:	00806d0e 	bge	zero,r2,5224 <__sfvwrite_r+0x254>
    5070:	b0800217 	ldw	r2,8(r22)
    5074:	10c5c83a 	sub	r2,r2,r3
    5078:	b0800215 	stw	r2,8(r22)
    507c:	103fee1e 	bne	r2,zero,5038 <__sfvwrite_r+0x68>
    5080:	0009883a 	mov	r4,zero
    5084:	2005883a 	mov	r2,r4
    5088:	dfc00a17 	ldw	ra,40(sp)
    508c:	df000917 	ldw	fp,36(sp)
    5090:	ddc00817 	ldw	r23,32(sp)
    5094:	dd800717 	ldw	r22,28(sp)
    5098:	dd400617 	ldw	r21,24(sp)
    509c:	dd000517 	ldw	r20,20(sp)
    50a0:	dcc00417 	ldw	r19,16(sp)
    50a4:	dc800317 	ldw	r18,12(sp)
    50a8:	dc400217 	ldw	r17,8(sp)
    50ac:	dc000117 	ldw	r16,4(sp)
    50b0:	dec00b04 	addi	sp,sp,44
    50b4:	f800283a 	ret
    50b8:	0002d380 	call	2d38 <__swsetup_r>
    50bc:	1000e41e 	bne	r2,zero,5450 <__sfvwrite_r+0x480>
    50c0:	91c0030b 	ldhu	r7,12(r18)
    50c4:	b5400017 	ldw	r21,0(r22)
    50c8:	3880008c 	andi	r2,r7,2
    50cc:	103fd81e 	bne	r2,zero,5030 <__sfvwrite_r+0x60>
    50d0:	3880004c 	andi	r2,r7,1
    50d4:	1005003a 	cmpeq	r2,r2,zero
    50d8:	10005726 	beq	r2,zero,5238 <__sfvwrite_r+0x268>
    50dc:	0029883a 	mov	r20,zero
    50e0:	002f883a 	mov	r23,zero
    50e4:	a0004226 	beq	r20,zero,51f0 <__sfvwrite_r+0x220>
    50e8:	3880800c 	andi	r2,r7,512
    50ec:	94000217 	ldw	r16,8(r18)
    50f0:	10008b26 	beq	r2,zero,5320 <__sfvwrite_r+0x350>
    50f4:	800d883a 	mov	r6,r16
    50f8:	a400a536 	bltu	r20,r16,5390 <__sfvwrite_r+0x3c0>
    50fc:	3881200c 	andi	r2,r7,1152
    5100:	10002726 	beq	r2,zero,51a0 <__sfvwrite_r+0x1d0>
    5104:	90800517 	ldw	r2,20(r18)
    5108:	92000417 	ldw	r8,16(r18)
    510c:	91400017 	ldw	r5,0(r18)
    5110:	1087883a 	add	r3,r2,r2
    5114:	1887883a 	add	r3,r3,r2
    5118:	1808d7fa 	srli	r4,r3,31
    511c:	2a21c83a 	sub	r16,r5,r8
    5120:	80800044 	addi	r2,r16,1
    5124:	20c9883a 	add	r4,r4,r3
    5128:	2027d07a 	srai	r19,r4,1
    512c:	a085883a 	add	r2,r20,r2
    5130:	980d883a 	mov	r6,r19
    5134:	9880022e 	bgeu	r19,r2,5140 <__sfvwrite_r+0x170>
    5138:	1027883a 	mov	r19,r2
    513c:	100d883a 	mov	r6,r2
    5140:	3881000c 	andi	r2,r7,1024
    5144:	1000b826 	beq	r2,zero,5428 <__sfvwrite_r+0x458>
    5148:	300b883a 	mov	r5,r6
    514c:	e009883a 	mov	r4,fp
    5150:	00005d00 	call	5d0 <_malloc_r>
    5154:	10003126 	beq	r2,zero,521c <__sfvwrite_r+0x24c>
    5158:	91400417 	ldw	r5,16(r18)
    515c:	1009883a 	mov	r4,r2
    5160:	800d883a 	mov	r6,r16
    5164:	1023883a 	mov	r17,r2
    5168:	00059280 	call	5928 <memcpy>
    516c:	90c0030b 	ldhu	r3,12(r18)
    5170:	00beffc4 	movi	r2,-1025
    5174:	1886703a 	and	r3,r3,r2
    5178:	18c02014 	ori	r3,r3,128
    517c:	90c0030d 	sth	r3,12(r18)
    5180:	9c07c83a 	sub	r3,r19,r16
    5184:	8c05883a 	add	r2,r17,r16
    5188:	a00d883a 	mov	r6,r20
    518c:	a021883a 	mov	r16,r20
    5190:	90800015 	stw	r2,0(r18)
    5194:	90c00215 	stw	r3,8(r18)
    5198:	94400415 	stw	r17,16(r18)
    519c:	94c00515 	stw	r19,20(r18)
    51a0:	91000017 	ldw	r4,0(r18)
    51a4:	b80b883a 	mov	r5,r23
    51a8:	a023883a 	mov	r17,r20
    51ac:	00059c80 	call	59c8 <memmove>
    51b0:	90c00217 	ldw	r3,8(r18)
    51b4:	90800017 	ldw	r2,0(r18)
    51b8:	a027883a 	mov	r19,r20
    51bc:	1c07c83a 	sub	r3,r3,r16
    51c0:	1405883a 	add	r2,r2,r16
    51c4:	90c00215 	stw	r3,8(r18)
    51c8:	a021883a 	mov	r16,r20
    51cc:	90800015 	stw	r2,0(r18)
    51d0:	b0800217 	ldw	r2,8(r22)
    51d4:	1405c83a 	sub	r2,r2,r16
    51d8:	b0800215 	stw	r2,8(r22)
    51dc:	103fa826 	beq	r2,zero,5080 <__sfvwrite_r+0xb0>
    51e0:	a469c83a 	sub	r20,r20,r17
    51e4:	91c0030b 	ldhu	r7,12(r18)
    51e8:	bcef883a 	add	r23,r23,r19
    51ec:	a03fbe1e 	bne	r20,zero,50e8 <__sfvwrite_r+0x118>
    51f0:	adc00017 	ldw	r23,0(r21)
    51f4:	ad000117 	ldw	r20,4(r21)
    51f8:	ad400204 	addi	r21,r21,8
    51fc:	003fb906 	br	50e4 <__sfvwrite_r+0x114>
    5200:	ac400017 	ldw	r17,0(r21)
    5204:	ac000117 	ldw	r16,4(r21)
    5208:	ad400204 	addi	r21,r21,8
    520c:	003f8a06 	br	5038 <__sfvwrite_r+0x68>
    5210:	91400417 	ldw	r5,16(r18)
    5214:	e009883a 	mov	r4,fp
    5218:	0004cbc0 	call	4cbc <_free_r>
    521c:	00800304 	movi	r2,12
    5220:	e0800015 	stw	r2,0(fp)
    5224:	9080030b 	ldhu	r2,12(r18)
    5228:	013fffc4 	movi	r4,-1
    522c:	10801014 	ori	r2,r2,64
    5230:	9080030d 	sth	r2,12(r18)
    5234:	003f9306 	br	5084 <__sfvwrite_r+0xb4>
    5238:	0027883a 	mov	r19,zero
    523c:	002f883a 	mov	r23,zero
    5240:	d8000015 	stw	zero,0(sp)
    5244:	0029883a 	mov	r20,zero
    5248:	98001e26 	beq	r19,zero,52c4 <__sfvwrite_r+0x2f4>
    524c:	d8c00017 	ldw	r3,0(sp)
    5250:	1804c03a 	cmpne	r2,r3,zero
    5254:	10005e26 	beq	r2,zero,53d0 <__sfvwrite_r+0x400>
    5258:	9821883a 	mov	r16,r19
    525c:	a4c0012e 	bgeu	r20,r19,5264 <__sfvwrite_r+0x294>
    5260:	a021883a 	mov	r16,r20
    5264:	91000017 	ldw	r4,0(r18)
    5268:	90800417 	ldw	r2,16(r18)
    526c:	91800217 	ldw	r6,8(r18)
    5270:	91c00517 	ldw	r7,20(r18)
    5274:	1100022e 	bgeu	r2,r4,5280 <__sfvwrite_r+0x2b0>
    5278:	31e3883a 	add	r17,r6,r7
    527c:	8c001616 	blt	r17,r16,52d8 <__sfvwrite_r+0x308>
    5280:	81c03816 	blt	r16,r7,5364 <__sfvwrite_r+0x394>
    5284:	90c00917 	ldw	r3,36(r18)
    5288:	91400717 	ldw	r5,28(r18)
    528c:	e009883a 	mov	r4,fp
    5290:	b80d883a 	mov	r6,r23
    5294:	183ee83a 	callr	r3
    5298:	1023883a 	mov	r17,r2
    529c:	00bfe10e 	bge	zero,r2,5224 <__sfvwrite_r+0x254>
    52a0:	a469c83a 	sub	r20,r20,r17
    52a4:	a0001826 	beq	r20,zero,5308 <__sfvwrite_r+0x338>
    52a8:	b0800217 	ldw	r2,8(r22)
    52ac:	1445c83a 	sub	r2,r2,r17
    52b0:	b0800215 	stw	r2,8(r22)
    52b4:	103f7226 	beq	r2,zero,5080 <__sfvwrite_r+0xb0>
    52b8:	9c67c83a 	sub	r19,r19,r17
    52bc:	bc6f883a 	add	r23,r23,r17
    52c0:	983fe21e 	bne	r19,zero,524c <__sfvwrite_r+0x27c>
    52c4:	adc00017 	ldw	r23,0(r21)
    52c8:	acc00117 	ldw	r19,4(r21)
    52cc:	ad400204 	addi	r21,r21,8
    52d0:	d8000015 	stw	zero,0(sp)
    52d4:	003fdc06 	br	5248 <__sfvwrite_r+0x278>
    52d8:	b80b883a 	mov	r5,r23
    52dc:	880d883a 	mov	r6,r17
    52e0:	00059c80 	call	59c8 <memmove>
    52e4:	90c00017 	ldw	r3,0(r18)
    52e8:	e009883a 	mov	r4,fp
    52ec:	900b883a 	mov	r5,r18
    52f0:	1c47883a 	add	r3,r3,r17
    52f4:	90c00015 	stw	r3,0(r18)
    52f8:	000466c0 	call	466c <_fflush_r>
    52fc:	103fc91e 	bne	r2,zero,5224 <__sfvwrite_r+0x254>
    5300:	a469c83a 	sub	r20,r20,r17
    5304:	a03fe81e 	bne	r20,zero,52a8 <__sfvwrite_r+0x2d8>
    5308:	e009883a 	mov	r4,fp
    530c:	900b883a 	mov	r5,r18
    5310:	000466c0 	call	466c <_fflush_r>
    5314:	103fc31e 	bne	r2,zero,5224 <__sfvwrite_r+0x254>
    5318:	d8000015 	stw	zero,0(sp)
    531c:	003fe206 	br	52a8 <__sfvwrite_r+0x2d8>
    5320:	91000017 	ldw	r4,0(r18)
    5324:	90800417 	ldw	r2,16(r18)
    5328:	1100022e 	bgeu	r2,r4,5334 <__sfvwrite_r+0x364>
    532c:	8023883a 	mov	r17,r16
    5330:	85003136 	bltu	r16,r20,53f8 <__sfvwrite_r+0x428>
    5334:	91c00517 	ldw	r7,20(r18)
    5338:	a1c01836 	bltu	r20,r7,539c <__sfvwrite_r+0x3cc>
    533c:	90c00917 	ldw	r3,36(r18)
    5340:	91400717 	ldw	r5,28(r18)
    5344:	e009883a 	mov	r4,fp
    5348:	b80d883a 	mov	r6,r23
    534c:	183ee83a 	callr	r3
    5350:	1021883a 	mov	r16,r2
    5354:	00bfb30e 	bge	zero,r2,5224 <__sfvwrite_r+0x254>
    5358:	1023883a 	mov	r17,r2
    535c:	1027883a 	mov	r19,r2
    5360:	003f9b06 	br	51d0 <__sfvwrite_r+0x200>
    5364:	b80b883a 	mov	r5,r23
    5368:	800d883a 	mov	r6,r16
    536c:	00059c80 	call	59c8 <memmove>
    5370:	90c00217 	ldw	r3,8(r18)
    5374:	90800017 	ldw	r2,0(r18)
    5378:	8023883a 	mov	r17,r16
    537c:	1c07c83a 	sub	r3,r3,r16
    5380:	1405883a 	add	r2,r2,r16
    5384:	90c00215 	stw	r3,8(r18)
    5388:	90800015 	stw	r2,0(r18)
    538c:	003fc406 	br	52a0 <__sfvwrite_r+0x2d0>
    5390:	a00d883a 	mov	r6,r20
    5394:	a021883a 	mov	r16,r20
    5398:	003f8106 	br	51a0 <__sfvwrite_r+0x1d0>
    539c:	b80b883a 	mov	r5,r23
    53a0:	a00d883a 	mov	r6,r20
    53a4:	00059c80 	call	59c8 <memmove>
    53a8:	90c00217 	ldw	r3,8(r18)
    53ac:	90800017 	ldw	r2,0(r18)
    53b0:	a021883a 	mov	r16,r20
    53b4:	1d07c83a 	sub	r3,r3,r20
    53b8:	1505883a 	add	r2,r2,r20
    53bc:	a023883a 	mov	r17,r20
    53c0:	a027883a 	mov	r19,r20
    53c4:	90c00215 	stw	r3,8(r18)
    53c8:	90800015 	stw	r2,0(r18)
    53cc:	003f8006 	br	51d0 <__sfvwrite_r+0x200>
    53d0:	b809883a 	mov	r4,r23
    53d4:	01400284 	movi	r5,10
    53d8:	980d883a 	mov	r6,r19
    53dc:	00058440 	call	5844 <memchr>
    53e0:	10001726 	beq	r2,zero,5440 <__sfvwrite_r+0x470>
    53e4:	15c5c83a 	sub	r2,r2,r23
    53e8:	15000044 	addi	r20,r2,1
    53ec:	00800044 	movi	r2,1
    53f0:	d8800015 	stw	r2,0(sp)
    53f4:	003f9806 	br	5258 <__sfvwrite_r+0x288>
    53f8:	b80b883a 	mov	r5,r23
    53fc:	800d883a 	mov	r6,r16
    5400:	00059c80 	call	59c8 <memmove>
    5404:	90c00017 	ldw	r3,0(r18)
    5408:	e009883a 	mov	r4,fp
    540c:	900b883a 	mov	r5,r18
    5410:	1c07883a 	add	r3,r3,r16
    5414:	90c00015 	stw	r3,0(r18)
    5418:	8027883a 	mov	r19,r16
    541c:	000466c0 	call	466c <_fflush_r>
    5420:	103f6b26 	beq	r2,zero,51d0 <__sfvwrite_r+0x200>
    5424:	003f7f06 	br	5224 <__sfvwrite_r+0x254>
    5428:	400b883a 	mov	r5,r8
    542c:	e009883a 	mov	r4,fp
    5430:	0006bcc0 	call	6bcc <_realloc_r>
    5434:	103f7626 	beq	r2,zero,5210 <__sfvwrite_r+0x240>
    5438:	1023883a 	mov	r17,r2
    543c:	003f5006 	br	5180 <__sfvwrite_r+0x1b0>
    5440:	00c00044 	movi	r3,1
    5444:	9d000044 	addi	r20,r19,1
    5448:	d8c00015 	stw	r3,0(sp)
    544c:	003f8206 	br	5258 <__sfvwrite_r+0x288>
    5450:	9080030b 	ldhu	r2,12(r18)
    5454:	00c00244 	movi	r3,9
    5458:	013fffc4 	movi	r4,-1
    545c:	10801014 	ori	r2,r2,64
    5460:	9080030d 	sth	r2,12(r18)
    5464:	e0c00015 	stw	r3,0(fp)
    5468:	003f0606 	br	5084 <__sfvwrite_r+0xb4>

0000546c <_fwalk_reent>:
    546c:	defff704 	addi	sp,sp,-36
    5470:	dcc00315 	stw	r19,12(sp)
    5474:	24c0b804 	addi	r19,r4,736
    5478:	dd800615 	stw	r22,24(sp)
    547c:	dd400515 	stw	r21,20(sp)
    5480:	dfc00815 	stw	ra,32(sp)
    5484:	ddc00715 	stw	r23,28(sp)
    5488:	dd000415 	stw	r20,16(sp)
    548c:	dc800215 	stw	r18,8(sp)
    5490:	dc400115 	stw	r17,4(sp)
    5494:	dc000015 	stw	r16,0(sp)
    5498:	202b883a 	mov	r21,r4
    549c:	282d883a 	mov	r22,r5
    54a0:	00048f40 	call	48f4 <__sfp_lock_acquire>
    54a4:	98002126 	beq	r19,zero,552c <_fwalk_reent+0xc0>
    54a8:	002f883a 	mov	r23,zero
    54ac:	9c800117 	ldw	r18,4(r19)
    54b0:	9c000217 	ldw	r16,8(r19)
    54b4:	90bfffc4 	addi	r2,r18,-1
    54b8:	10000d16 	blt	r2,zero,54f0 <_fwalk_reent+0x84>
    54bc:	0023883a 	mov	r17,zero
    54c0:	053fffc4 	movi	r20,-1
    54c4:	8080030f 	ldh	r2,12(r16)
    54c8:	8c400044 	addi	r17,r17,1
    54cc:	10000626 	beq	r2,zero,54e8 <_fwalk_reent+0x7c>
    54d0:	8080038f 	ldh	r2,14(r16)
    54d4:	800b883a 	mov	r5,r16
    54d8:	a809883a 	mov	r4,r21
    54dc:	15000226 	beq	r2,r20,54e8 <_fwalk_reent+0x7c>
    54e0:	b03ee83a 	callr	r22
    54e4:	b8aeb03a 	or	r23,r23,r2
    54e8:	84001704 	addi	r16,r16,92
    54ec:	947ff51e 	bne	r18,r17,54c4 <_fwalk_reent+0x58>
    54f0:	9cc00017 	ldw	r19,0(r19)
    54f4:	983fed1e 	bne	r19,zero,54ac <_fwalk_reent+0x40>
    54f8:	00048f80 	call	48f8 <__sfp_lock_release>
    54fc:	b805883a 	mov	r2,r23
    5500:	dfc00817 	ldw	ra,32(sp)
    5504:	ddc00717 	ldw	r23,28(sp)
    5508:	dd800617 	ldw	r22,24(sp)
    550c:	dd400517 	ldw	r21,20(sp)
    5510:	dd000417 	ldw	r20,16(sp)
    5514:	dcc00317 	ldw	r19,12(sp)
    5518:	dc800217 	ldw	r18,8(sp)
    551c:	dc400117 	ldw	r17,4(sp)
    5520:	dc000017 	ldw	r16,0(sp)
    5524:	dec00904 	addi	sp,sp,36
    5528:	f800283a 	ret
    552c:	002f883a 	mov	r23,zero
    5530:	003ff106 	br	54f8 <_fwalk_reent+0x8c>

00005534 <_fwalk>:
    5534:	defff804 	addi	sp,sp,-32
    5538:	dcc00315 	stw	r19,12(sp)
    553c:	24c0b804 	addi	r19,r4,736
    5540:	dd400515 	stw	r21,20(sp)
    5544:	dfc00715 	stw	ra,28(sp)
    5548:	dd800615 	stw	r22,24(sp)
    554c:	dd000415 	stw	r20,16(sp)
    5550:	dc800215 	stw	r18,8(sp)
    5554:	dc400115 	stw	r17,4(sp)
    5558:	dc000015 	stw	r16,0(sp)
    555c:	282b883a 	mov	r21,r5
    5560:	00048f40 	call	48f4 <__sfp_lock_acquire>
    5564:	98001f26 	beq	r19,zero,55e4 <_fwalk+0xb0>
    5568:	002d883a 	mov	r22,zero
    556c:	9c800117 	ldw	r18,4(r19)
    5570:	9c000217 	ldw	r16,8(r19)
    5574:	90bfffc4 	addi	r2,r18,-1
    5578:	10000c16 	blt	r2,zero,55ac <_fwalk+0x78>
    557c:	0023883a 	mov	r17,zero
    5580:	053fffc4 	movi	r20,-1
    5584:	8080030f 	ldh	r2,12(r16)
    5588:	8c400044 	addi	r17,r17,1
    558c:	10000526 	beq	r2,zero,55a4 <_fwalk+0x70>
    5590:	8080038f 	ldh	r2,14(r16)
    5594:	8009883a 	mov	r4,r16
    5598:	15000226 	beq	r2,r20,55a4 <_fwalk+0x70>
    559c:	a83ee83a 	callr	r21
    55a0:	b0acb03a 	or	r22,r22,r2
    55a4:	84001704 	addi	r16,r16,92
    55a8:	947ff61e 	bne	r18,r17,5584 <_fwalk+0x50>
    55ac:	9cc00017 	ldw	r19,0(r19)
    55b0:	983fee1e 	bne	r19,zero,556c <_fwalk+0x38>
    55b4:	00048f80 	call	48f8 <__sfp_lock_release>
    55b8:	b005883a 	mov	r2,r22
    55bc:	dfc00717 	ldw	ra,28(sp)
    55c0:	dd800617 	ldw	r22,24(sp)
    55c4:	dd400517 	ldw	r21,20(sp)
    55c8:	dd000417 	ldw	r20,16(sp)
    55cc:	dcc00317 	ldw	r19,12(sp)
    55d0:	dc800217 	ldw	r18,8(sp)
    55d4:	dc400117 	ldw	r17,4(sp)
    55d8:	dc000017 	ldw	r16,0(sp)
    55dc:	dec00804 	addi	sp,sp,32
    55e0:	f800283a 	ret
    55e4:	002d883a 	mov	r22,zero
    55e8:	003ff206 	br	55b4 <_fwalk+0x80>

000055ec <__locale_charset>:
    55ec:	d0a00517 	ldw	r2,-32748(gp)
    55f0:	f800283a 	ret

000055f4 <_localeconv_r>:
    55f4:	00800074 	movhi	r2,1
    55f8:	10b23f04 	addi	r2,r2,-14084
    55fc:	f800283a 	ret

00005600 <localeconv>:
    5600:	00800074 	movhi	r2,1
    5604:	10b96d04 	addi	r2,r2,-6732
    5608:	11000017 	ldw	r4,0(r2)
    560c:	00055f41 	jmpi	55f4 <_localeconv_r>

00005610 <_setlocale_r>:
    5610:	defffc04 	addi	sp,sp,-16
    5614:	00c00074 	movhi	r3,1
    5618:	18f23a04 	addi	r3,r3,-14104
    561c:	dc800215 	stw	r18,8(sp)
    5620:	dc400115 	stw	r17,4(sp)
    5624:	dc000015 	stw	r16,0(sp)
    5628:	2023883a 	mov	r17,r4
    562c:	2825883a 	mov	r18,r5
    5630:	dfc00315 	stw	ra,12(sp)
    5634:	3021883a 	mov	r16,r6
    5638:	3009883a 	mov	r4,r6
    563c:	180b883a 	mov	r5,r3
    5640:	30000926 	beq	r6,zero,5668 <_setlocale_r+0x58>
    5644:	000737c0 	call	737c <strcmp>
    5648:	8009883a 	mov	r4,r16
    564c:	01400074 	movhi	r5,1
    5650:	29722504 	addi	r5,r5,-14188
    5654:	10000b1e 	bne	r2,zero,5684 <_setlocale_r+0x74>
    5658:	8c000d15 	stw	r16,52(r17)
    565c:	8c800c15 	stw	r18,48(r17)
    5660:	00c00074 	movhi	r3,1
    5664:	18f23a04 	addi	r3,r3,-14104
    5668:	1805883a 	mov	r2,r3
    566c:	dfc00317 	ldw	ra,12(sp)
    5670:	dc800217 	ldw	r18,8(sp)
    5674:	dc400117 	ldw	r17,4(sp)
    5678:	dc000017 	ldw	r16,0(sp)
    567c:	dec00404 	addi	sp,sp,16
    5680:	f800283a 	ret
    5684:	000737c0 	call	737c <strcmp>
    5688:	0007883a 	mov	r3,zero
    568c:	103ff226 	beq	r2,zero,5658 <_setlocale_r+0x48>
    5690:	003ff506 	br	5668 <_setlocale_r+0x58>

00005694 <setlocale>:
    5694:	01800074 	movhi	r6,1
    5698:	31b96d04 	addi	r6,r6,-6732
    569c:	2007883a 	mov	r3,r4
    56a0:	31000017 	ldw	r4,0(r6)
    56a4:	280d883a 	mov	r6,r5
    56a8:	180b883a 	mov	r5,r3
    56ac:	00056101 	jmpi	5610 <_setlocale_r>

000056b0 <__smakebuf_r>:
    56b0:	2880030b 	ldhu	r2,12(r5)
    56b4:	deffed04 	addi	sp,sp,-76
    56b8:	dc401015 	stw	r17,64(sp)
    56bc:	1080008c 	andi	r2,r2,2
    56c0:	dc000f15 	stw	r16,60(sp)
    56c4:	dfc01215 	stw	ra,72(sp)
    56c8:	dc801115 	stw	r18,68(sp)
    56cc:	2821883a 	mov	r16,r5
    56d0:	2023883a 	mov	r17,r4
    56d4:	10000b26 	beq	r2,zero,5704 <__smakebuf_r+0x54>
    56d8:	28c010c4 	addi	r3,r5,67
    56dc:	00800044 	movi	r2,1
    56e0:	28800515 	stw	r2,20(r5)
    56e4:	28c00415 	stw	r3,16(r5)
    56e8:	28c00015 	stw	r3,0(r5)
    56ec:	dfc01217 	ldw	ra,72(sp)
    56f0:	dc801117 	ldw	r18,68(sp)
    56f4:	dc401017 	ldw	r17,64(sp)
    56f8:	dc000f17 	ldw	r16,60(sp)
    56fc:	dec01304 	addi	sp,sp,76
    5700:	f800283a 	ret
    5704:	2940038f 	ldh	r5,14(r5)
    5708:	28002116 	blt	r5,zero,5790 <__smakebuf_r+0xe0>
    570c:	d80d883a 	mov	r6,sp
    5710:	00077800 	call	7780 <_fstat_r>
    5714:	10001e16 	blt	r2,zero,5790 <__smakebuf_r+0xe0>
    5718:	d8800117 	ldw	r2,4(sp)
    571c:	00e00014 	movui	r3,32768
    5720:	113c000c 	andi	r4,r2,61440
    5724:	20c03126 	beq	r4,r3,57ec <__smakebuf_r+0x13c>
    5728:	8080030b 	ldhu	r2,12(r16)
    572c:	00c80004 	movi	r3,8192
    5730:	10820014 	ori	r2,r2,2048
    5734:	8080030d 	sth	r2,12(r16)
    5738:	20c01e26 	beq	r4,r3,57b4 <__smakebuf_r+0x104>
    573c:	04810004 	movi	r18,1024
    5740:	8809883a 	mov	r4,r17
    5744:	900b883a 	mov	r5,r18
    5748:	00005d00 	call	5d0 <_malloc_r>
    574c:	1009883a 	mov	r4,r2
    5750:	10003126 	beq	r2,zero,5818 <__smakebuf_r+0x168>
    5754:	80c0030b 	ldhu	r3,12(r16)
    5758:	00800034 	movhi	r2,0
    575c:	10927a04 	addi	r2,r2,18920
    5760:	88800f15 	stw	r2,60(r17)
    5764:	18c02014 	ori	r3,r3,128
    5768:	84800515 	stw	r18,20(r16)
    576c:	80c0030d 	sth	r3,12(r16)
    5770:	81000415 	stw	r4,16(r16)
    5774:	81000015 	stw	r4,0(r16)
    5778:	dfc01217 	ldw	ra,72(sp)
    577c:	dc801117 	ldw	r18,68(sp)
    5780:	dc401017 	ldw	r17,64(sp)
    5784:	dc000f17 	ldw	r16,60(sp)
    5788:	dec01304 	addi	sp,sp,76
    578c:	f800283a 	ret
    5790:	80c0030b 	ldhu	r3,12(r16)
    5794:	1880200c 	andi	r2,r3,128
    5798:	10000426 	beq	r2,zero,57ac <__smakebuf_r+0xfc>
    579c:	04801004 	movi	r18,64
    57a0:	18820014 	ori	r2,r3,2048
    57a4:	8080030d 	sth	r2,12(r16)
    57a8:	003fe506 	br	5740 <__smakebuf_r+0x90>
    57ac:	04810004 	movi	r18,1024
    57b0:	003ffb06 	br	57a0 <__smakebuf_r+0xf0>
    57b4:	8140038f 	ldh	r5,14(r16)
    57b8:	8809883a 	mov	r4,r17
    57bc:	00077f40 	call	77f4 <_isatty_r>
    57c0:	103fde26 	beq	r2,zero,573c <__smakebuf_r+0x8c>
    57c4:	8080030b 	ldhu	r2,12(r16)
    57c8:	80c010c4 	addi	r3,r16,67
    57cc:	04810004 	movi	r18,1024
    57d0:	10800054 	ori	r2,r2,1
    57d4:	8080030d 	sth	r2,12(r16)
    57d8:	00800044 	movi	r2,1
    57dc:	80c00415 	stw	r3,16(r16)
    57e0:	80800515 	stw	r2,20(r16)
    57e4:	80c00015 	stw	r3,0(r16)
    57e8:	003fd506 	br	5740 <__smakebuf_r+0x90>
    57ec:	80c00a17 	ldw	r3,40(r16)
    57f0:	00800034 	movhi	r2,0
    57f4:	109c8e04 	addi	r2,r2,29240
    57f8:	18bfcb1e 	bne	r3,r2,5728 <__smakebuf_r+0x78>
    57fc:	8080030b 	ldhu	r2,12(r16)
    5800:	00c10004 	movi	r3,1024
    5804:	1825883a 	mov	r18,r3
    5808:	10c4b03a 	or	r2,r2,r3
    580c:	8080030d 	sth	r2,12(r16)
    5810:	80c01315 	stw	r3,76(r16)
    5814:	003fca06 	br	5740 <__smakebuf_r+0x90>
    5818:	8100030b 	ldhu	r4,12(r16)
    581c:	2080800c 	andi	r2,r4,512
    5820:	103fb21e 	bne	r2,zero,56ec <__smakebuf_r+0x3c>
    5824:	80c010c4 	addi	r3,r16,67
    5828:	21000094 	ori	r4,r4,2
    582c:	00800044 	movi	r2,1
    5830:	80800515 	stw	r2,20(r16)
    5834:	8100030d 	sth	r4,12(r16)
    5838:	80c00415 	stw	r3,16(r16)
    583c:	80c00015 	stw	r3,0(r16)
    5840:	003faa06 	br	56ec <__smakebuf_r+0x3c>

00005844 <memchr>:
    5844:	008000c4 	movi	r2,3
    5848:	29403fcc 	andi	r5,r5,255
    584c:	2007883a 	mov	r3,r4
    5850:	1180022e 	bgeu	r2,r6,585c <memchr+0x18>
    5854:	2084703a 	and	r2,r4,r2
    5858:	10000b26 	beq	r2,zero,5888 <memchr+0x44>
    585c:	313fffc4 	addi	r4,r6,-1
    5860:	3000051e 	bne	r6,zero,5878 <memchr+0x34>
    5864:	00002c06 	br	5918 <memchr+0xd4>
    5868:	213fffc4 	addi	r4,r4,-1
    586c:	00bfffc4 	movi	r2,-1
    5870:	18c00044 	addi	r3,r3,1
    5874:	20802826 	beq	r4,r2,5918 <memchr+0xd4>
    5878:	18800003 	ldbu	r2,0(r3)
    587c:	28bffa1e 	bne	r5,r2,5868 <memchr+0x24>
    5880:	1805883a 	mov	r2,r3
    5884:	f800283a 	ret
    5888:	0011883a 	mov	r8,zero
    588c:	0007883a 	mov	r3,zero
    5890:	01c00104 	movi	r7,4
    5894:	4004923a 	slli	r2,r8,8
    5898:	18c00044 	addi	r3,r3,1
    589c:	1151883a 	add	r8,r2,r5
    58a0:	19fffc1e 	bne	r3,r7,5894 <memchr+0x50>
    58a4:	02bfbff4 	movhi	r10,65279
    58a8:	52bfbfc4 	addi	r10,r10,-257
    58ac:	02602074 	movhi	r9,32897
    58b0:	4a602004 	addi	r9,r9,-32640
    58b4:	02c000c4 	movi	r11,3
    58b8:	20800017 	ldw	r2,0(r4)
    58bc:	31bfff04 	addi	r6,r6,-4
    58c0:	200f883a 	mov	r7,r4
    58c4:	1204f03a 	xor	r2,r2,r8
    58c8:	1287883a 	add	r3,r2,r10
    58cc:	1a46703a 	and	r3,r3,r9
    58d0:	0084303a 	nor	r2,zero,r2
    58d4:	10c4703a 	and	r2,r2,r3
    58d8:	10000b26 	beq	r2,zero,5908 <memchr+0xc4>
    58dc:	20800003 	ldbu	r2,0(r4)
    58e0:	28800f26 	beq	r5,r2,5920 <memchr+0xdc>
    58e4:	20800043 	ldbu	r2,1(r4)
    58e8:	21c00044 	addi	r7,r4,1
    58ec:	28800c26 	beq	r5,r2,5920 <memchr+0xdc>
    58f0:	20800083 	ldbu	r2,2(r4)
    58f4:	21c00084 	addi	r7,r4,2
    58f8:	28800926 	beq	r5,r2,5920 <memchr+0xdc>
    58fc:	208000c3 	ldbu	r2,3(r4)
    5900:	21c000c4 	addi	r7,r4,3
    5904:	28800626 	beq	r5,r2,5920 <memchr+0xdc>
    5908:	21000104 	addi	r4,r4,4
    590c:	59bfea36 	bltu	r11,r6,58b8 <memchr+0x74>
    5910:	2007883a 	mov	r3,r4
    5914:	003fd106 	br	585c <memchr+0x18>
    5918:	0005883a 	mov	r2,zero
    591c:	f800283a 	ret
    5920:	3805883a 	mov	r2,r7
    5924:	f800283a 	ret

00005928 <memcpy>:
    5928:	01c003c4 	movi	r7,15
    592c:	2007883a 	mov	r3,r4
    5930:	3980032e 	bgeu	r7,r6,5940 <memcpy+0x18>
    5934:	2904b03a 	or	r2,r5,r4
    5938:	108000cc 	andi	r2,r2,3
    593c:	10000926 	beq	r2,zero,5964 <memcpy+0x3c>
    5940:	30000626 	beq	r6,zero,595c <memcpy+0x34>
    5944:	30cd883a 	add	r6,r6,r3
    5948:	28800003 	ldbu	r2,0(r5)
    594c:	29400044 	addi	r5,r5,1
    5950:	18800005 	stb	r2,0(r3)
    5954:	18c00044 	addi	r3,r3,1
    5958:	30fffb1e 	bne	r6,r3,5948 <memcpy+0x20>
    595c:	2005883a 	mov	r2,r4
    5960:	f800283a 	ret
    5964:	3811883a 	mov	r8,r7
    5968:	200f883a 	mov	r7,r4
    596c:	28c00017 	ldw	r3,0(r5)
    5970:	31bffc04 	addi	r6,r6,-16
    5974:	38c00015 	stw	r3,0(r7)
    5978:	28800117 	ldw	r2,4(r5)
    597c:	38800115 	stw	r2,4(r7)
    5980:	28c00217 	ldw	r3,8(r5)
    5984:	38c00215 	stw	r3,8(r7)
    5988:	28800317 	ldw	r2,12(r5)
    598c:	29400404 	addi	r5,r5,16
    5990:	38800315 	stw	r2,12(r7)
    5994:	39c00404 	addi	r7,r7,16
    5998:	41bff436 	bltu	r8,r6,596c <memcpy+0x44>
    599c:	008000c4 	movi	r2,3
    59a0:	1180072e 	bgeu	r2,r6,59c0 <memcpy+0x98>
    59a4:	1007883a 	mov	r3,r2
    59a8:	28800017 	ldw	r2,0(r5)
    59ac:	31bfff04 	addi	r6,r6,-4
    59b0:	29400104 	addi	r5,r5,4
    59b4:	38800015 	stw	r2,0(r7)
    59b8:	39c00104 	addi	r7,r7,4
    59bc:	19bffa36 	bltu	r3,r6,59a8 <memcpy+0x80>
    59c0:	3807883a 	mov	r3,r7
    59c4:	003fde06 	br	5940 <memcpy+0x18>

000059c8 <memmove>:
    59c8:	2807883a 	mov	r3,r5
    59cc:	2011883a 	mov	r8,r4
    59d0:	29000c2e 	bgeu	r5,r4,5a04 <memmove+0x3c>
    59d4:	298f883a 	add	r7,r5,r6
    59d8:	21c00a2e 	bgeu	r4,r7,5a04 <memmove+0x3c>
    59dc:	30000726 	beq	r6,zero,59fc <memmove+0x34>
    59e0:	2187883a 	add	r3,r4,r6
    59e4:	198dc83a 	sub	r6,r3,r6
    59e8:	39ffffc4 	addi	r7,r7,-1
    59ec:	38800003 	ldbu	r2,0(r7)
    59f0:	18ffffc4 	addi	r3,r3,-1
    59f4:	18800005 	stb	r2,0(r3)
    59f8:	19bffb1e 	bne	r3,r6,59e8 <memmove+0x20>
    59fc:	2005883a 	mov	r2,r4
    5a00:	f800283a 	ret
    5a04:	01c003c4 	movi	r7,15
    5a08:	39800a36 	bltu	r7,r6,5a34 <memmove+0x6c>
    5a0c:	303ffb26 	beq	r6,zero,59fc <memmove+0x34>
    5a10:	400f883a 	mov	r7,r8
    5a14:	320d883a 	add	r6,r6,r8
    5a18:	28800003 	ldbu	r2,0(r5)
    5a1c:	29400044 	addi	r5,r5,1
    5a20:	38800005 	stb	r2,0(r7)
    5a24:	39c00044 	addi	r7,r7,1
    5a28:	39bffb1e 	bne	r7,r6,5a18 <memmove+0x50>
    5a2c:	2005883a 	mov	r2,r4
    5a30:	f800283a 	ret
    5a34:	1904b03a 	or	r2,r3,r4
    5a38:	108000cc 	andi	r2,r2,3
    5a3c:	103ff31e 	bne	r2,zero,5a0c <memmove+0x44>
    5a40:	3811883a 	mov	r8,r7
    5a44:	180b883a 	mov	r5,r3
    5a48:	200f883a 	mov	r7,r4
    5a4c:	28c00017 	ldw	r3,0(r5)
    5a50:	31bffc04 	addi	r6,r6,-16
    5a54:	38c00015 	stw	r3,0(r7)
    5a58:	28800117 	ldw	r2,4(r5)
    5a5c:	38800115 	stw	r2,4(r7)
    5a60:	28c00217 	ldw	r3,8(r5)
    5a64:	38c00215 	stw	r3,8(r7)
    5a68:	28800317 	ldw	r2,12(r5)
    5a6c:	29400404 	addi	r5,r5,16
    5a70:	38800315 	stw	r2,12(r7)
    5a74:	39c00404 	addi	r7,r7,16
    5a78:	41bff436 	bltu	r8,r6,5a4c <memmove+0x84>
    5a7c:	008000c4 	movi	r2,3
    5a80:	1180072e 	bgeu	r2,r6,5aa0 <memmove+0xd8>
    5a84:	1007883a 	mov	r3,r2
    5a88:	28800017 	ldw	r2,0(r5)
    5a8c:	31bfff04 	addi	r6,r6,-4
    5a90:	29400104 	addi	r5,r5,4
    5a94:	38800015 	stw	r2,0(r7)
    5a98:	39c00104 	addi	r7,r7,4
    5a9c:	19bffa36 	bltu	r3,r6,5a88 <memmove+0xc0>
    5aa0:	3811883a 	mov	r8,r7
    5aa4:	003fd906 	br	5a0c <memmove+0x44>

00005aa8 <memset>:
    5aa8:	008000c4 	movi	r2,3
    5aac:	29403fcc 	andi	r5,r5,255
    5ab0:	2007883a 	mov	r3,r4
    5ab4:	1180022e 	bgeu	r2,r6,5ac0 <memset+0x18>
    5ab8:	2084703a 	and	r2,r4,r2
    5abc:	10000826 	beq	r2,zero,5ae0 <memset+0x38>
    5ac0:	30000526 	beq	r6,zero,5ad8 <memset+0x30>
    5ac4:	2805883a 	mov	r2,r5
    5ac8:	30cd883a 	add	r6,r6,r3
    5acc:	18800005 	stb	r2,0(r3)
    5ad0:	18c00044 	addi	r3,r3,1
    5ad4:	19bffd1e 	bne	r3,r6,5acc <memset+0x24>
    5ad8:	2005883a 	mov	r2,r4
    5adc:	f800283a 	ret
    5ae0:	2804923a 	slli	r2,r5,8
    5ae4:	020003c4 	movi	r8,15
    5ae8:	200f883a 	mov	r7,r4
    5aec:	2884b03a 	or	r2,r5,r2
    5af0:	1006943a 	slli	r3,r2,16
    5af4:	10c6b03a 	or	r3,r2,r3
    5af8:	41800a2e 	bgeu	r8,r6,5b24 <memset+0x7c>
    5afc:	4005883a 	mov	r2,r8
    5b00:	31bffc04 	addi	r6,r6,-16
    5b04:	38c00015 	stw	r3,0(r7)
    5b08:	38c00115 	stw	r3,4(r7)
    5b0c:	38c00215 	stw	r3,8(r7)
    5b10:	38c00315 	stw	r3,12(r7)
    5b14:	39c00404 	addi	r7,r7,16
    5b18:	11bff936 	bltu	r2,r6,5b00 <memset+0x58>
    5b1c:	008000c4 	movi	r2,3
    5b20:	1180052e 	bgeu	r2,r6,5b38 <memset+0x90>
    5b24:	31bfff04 	addi	r6,r6,-4
    5b28:	008000c4 	movi	r2,3
    5b2c:	38c00015 	stw	r3,0(r7)
    5b30:	39c00104 	addi	r7,r7,4
    5b34:	11bffb36 	bltu	r2,r6,5b24 <memset+0x7c>
    5b38:	3807883a 	mov	r3,r7
    5b3c:	003fe006 	br	5ac0 <memset+0x18>

00005b40 <_Bfree>:
    5b40:	28000826 	beq	r5,zero,5b64 <_Bfree+0x24>
    5b44:	28800117 	ldw	r2,4(r5)
    5b48:	21001317 	ldw	r4,76(r4)
    5b4c:	1085883a 	add	r2,r2,r2
    5b50:	1085883a 	add	r2,r2,r2
    5b54:	1105883a 	add	r2,r2,r4
    5b58:	10c00017 	ldw	r3,0(r2)
    5b5c:	28c00015 	stw	r3,0(r5)
    5b60:	11400015 	stw	r5,0(r2)
    5b64:	f800283a 	ret

00005b68 <__hi0bits>:
    5b68:	20bfffec 	andhi	r2,r4,65535
    5b6c:	10001426 	beq	r2,zero,5bc0 <__hi0bits+0x58>
    5b70:	0007883a 	mov	r3,zero
    5b74:	20bfc02c 	andhi	r2,r4,65280
    5b78:	1000021e 	bne	r2,zero,5b84 <__hi0bits+0x1c>
    5b7c:	2008923a 	slli	r4,r4,8
    5b80:	18c00204 	addi	r3,r3,8
    5b84:	20bc002c 	andhi	r2,r4,61440
    5b88:	1000021e 	bne	r2,zero,5b94 <__hi0bits+0x2c>
    5b8c:	2008913a 	slli	r4,r4,4
    5b90:	18c00104 	addi	r3,r3,4
    5b94:	20b0002c 	andhi	r2,r4,49152
    5b98:	1000031e 	bne	r2,zero,5ba8 <__hi0bits+0x40>
    5b9c:	2105883a 	add	r2,r4,r4
    5ba0:	18c00084 	addi	r3,r3,2
    5ba4:	1089883a 	add	r4,r2,r2
    5ba8:	20000316 	blt	r4,zero,5bb8 <__hi0bits+0x50>
    5bac:	2090002c 	andhi	r2,r4,16384
    5bb0:	10000626 	beq	r2,zero,5bcc <__hi0bits+0x64>
    5bb4:	18c00044 	addi	r3,r3,1
    5bb8:	1805883a 	mov	r2,r3
    5bbc:	f800283a 	ret
    5bc0:	2008943a 	slli	r4,r4,16
    5bc4:	00c00404 	movi	r3,16
    5bc8:	003fea06 	br	5b74 <__hi0bits+0xc>
    5bcc:	00c00804 	movi	r3,32
    5bd0:	1805883a 	mov	r2,r3
    5bd4:	f800283a 	ret

00005bd8 <__lo0bits>:
    5bd8:	20c00017 	ldw	r3,0(r4)
    5bdc:	188001cc 	andi	r2,r3,7
    5be0:	10000a26 	beq	r2,zero,5c0c <__lo0bits+0x34>
    5be4:	1880004c 	andi	r2,r3,1
    5be8:	1005003a 	cmpeq	r2,r2,zero
    5bec:	10002126 	beq	r2,zero,5c74 <__lo0bits+0x9c>
    5bf0:	1880008c 	andi	r2,r3,2
    5bf4:	1000251e 	bne	r2,zero,5c8c <__lo0bits+0xb4>
    5bf8:	1804d0ba 	srli	r2,r3,2
    5bfc:	01400084 	movi	r5,2
    5c00:	20800015 	stw	r2,0(r4)
    5c04:	2805883a 	mov	r2,r5
    5c08:	f800283a 	ret
    5c0c:	18bfffcc 	andi	r2,r3,65535
    5c10:	10001526 	beq	r2,zero,5c68 <__lo0bits+0x90>
    5c14:	000b883a 	mov	r5,zero
    5c18:	18803fcc 	andi	r2,r3,255
    5c1c:	1000021e 	bne	r2,zero,5c28 <__lo0bits+0x50>
    5c20:	1806d23a 	srli	r3,r3,8
    5c24:	29400204 	addi	r5,r5,8
    5c28:	188003cc 	andi	r2,r3,15
    5c2c:	1000021e 	bne	r2,zero,5c38 <__lo0bits+0x60>
    5c30:	1806d13a 	srli	r3,r3,4
    5c34:	29400104 	addi	r5,r5,4
    5c38:	188000cc 	andi	r2,r3,3
    5c3c:	1000021e 	bne	r2,zero,5c48 <__lo0bits+0x70>
    5c40:	1806d0ba 	srli	r3,r3,2
    5c44:	29400084 	addi	r5,r5,2
    5c48:	1880004c 	andi	r2,r3,1
    5c4c:	1000031e 	bne	r2,zero,5c5c <__lo0bits+0x84>
    5c50:	1806d07a 	srli	r3,r3,1
    5c54:	18000a26 	beq	r3,zero,5c80 <__lo0bits+0xa8>
    5c58:	29400044 	addi	r5,r5,1
    5c5c:	2805883a 	mov	r2,r5
    5c60:	20c00015 	stw	r3,0(r4)
    5c64:	f800283a 	ret
    5c68:	1806d43a 	srli	r3,r3,16
    5c6c:	01400404 	movi	r5,16
    5c70:	003fe906 	br	5c18 <__lo0bits+0x40>
    5c74:	000b883a 	mov	r5,zero
    5c78:	2805883a 	mov	r2,r5
    5c7c:	f800283a 	ret
    5c80:	01400804 	movi	r5,32
    5c84:	2805883a 	mov	r2,r5
    5c88:	f800283a 	ret
    5c8c:	1804d07a 	srli	r2,r3,1
    5c90:	01400044 	movi	r5,1
    5c94:	20800015 	stw	r2,0(r4)
    5c98:	003fda06 	br	5c04 <__lo0bits+0x2c>

00005c9c <__mcmp>:
    5c9c:	20800417 	ldw	r2,16(r4)
    5ca0:	28c00417 	ldw	r3,16(r5)
    5ca4:	10cfc83a 	sub	r7,r2,r3
    5ca8:	38000c1e 	bne	r7,zero,5cdc <__mcmp+0x40>
    5cac:	18c5883a 	add	r2,r3,r3
    5cb0:	1085883a 	add	r2,r2,r2
    5cb4:	10c00504 	addi	r3,r2,20
    5cb8:	21000504 	addi	r4,r4,20
    5cbc:	28cb883a 	add	r5,r5,r3
    5cc0:	2085883a 	add	r2,r4,r2
    5cc4:	10bfff04 	addi	r2,r2,-4
    5cc8:	297fff04 	addi	r5,r5,-4
    5ccc:	11800017 	ldw	r6,0(r2)
    5cd0:	28c00017 	ldw	r3,0(r5)
    5cd4:	30c0031e 	bne	r6,r3,5ce4 <__mcmp+0x48>
    5cd8:	20bffa36 	bltu	r4,r2,5cc4 <__mcmp+0x28>
    5cdc:	3805883a 	mov	r2,r7
    5ce0:	f800283a 	ret
    5ce4:	30c00336 	bltu	r6,r3,5cf4 <__mcmp+0x58>
    5ce8:	01c00044 	movi	r7,1
    5cec:	3805883a 	mov	r2,r7
    5cf0:	f800283a 	ret
    5cf4:	01ffffc4 	movi	r7,-1
    5cf8:	003ff806 	br	5cdc <__mcmp+0x40>

00005cfc <__ulp>:
    5cfc:	295ffc2c 	andhi	r5,r5,32752
    5d00:	013f3034 	movhi	r4,64704
    5d04:	290b883a 	add	r5,r5,r4
    5d08:	0145c83a 	sub	r2,zero,r5
    5d0c:	1007d53a 	srai	r3,r2,20
    5d10:	000d883a 	mov	r6,zero
    5d14:	0140040e 	bge	zero,r5,5d28 <__ulp+0x2c>
    5d18:	280f883a 	mov	r7,r5
    5d1c:	3807883a 	mov	r3,r7
    5d20:	3005883a 	mov	r2,r6
    5d24:	f800283a 	ret
    5d28:	008004c4 	movi	r2,19
    5d2c:	193ffb04 	addi	r4,r3,-20
    5d30:	10c00c0e 	bge	r2,r3,5d64 <__ulp+0x68>
    5d34:	008007c4 	movi	r2,31
    5d38:	1107c83a 	sub	r3,r2,r4
    5d3c:	00800784 	movi	r2,30
    5d40:	01400044 	movi	r5,1
    5d44:	11000216 	blt	r2,r4,5d50 <__ulp+0x54>
    5d48:	00800044 	movi	r2,1
    5d4c:	10ca983a 	sll	r5,r2,r3
    5d50:	000f883a 	mov	r7,zero
    5d54:	280d883a 	mov	r6,r5
    5d58:	3807883a 	mov	r3,r7
    5d5c:	3005883a 	mov	r2,r6
    5d60:	f800283a 	ret
    5d64:	00800234 	movhi	r2,8
    5d68:	10cfd83a 	sra	r7,r2,r3
    5d6c:	000d883a 	mov	r6,zero
    5d70:	3005883a 	mov	r2,r6
    5d74:	3807883a 	mov	r3,r7
    5d78:	f800283a 	ret

00005d7c <__b2d>:
    5d7c:	20800417 	ldw	r2,16(r4)
    5d80:	defff904 	addi	sp,sp,-28
    5d84:	dd000415 	stw	r20,16(sp)
    5d88:	1085883a 	add	r2,r2,r2
    5d8c:	25000504 	addi	r20,r4,20
    5d90:	1085883a 	add	r2,r2,r2
    5d94:	dc000015 	stw	r16,0(sp)
    5d98:	a0a1883a 	add	r16,r20,r2
    5d9c:	dd400515 	stw	r21,20(sp)
    5da0:	857fff17 	ldw	r21,-4(r16)
    5da4:	dc400115 	stw	r17,4(sp)
    5da8:	dfc00615 	stw	ra,24(sp)
    5dac:	a809883a 	mov	r4,r21
    5db0:	2823883a 	mov	r17,r5
    5db4:	dcc00315 	stw	r19,12(sp)
    5db8:	dc800215 	stw	r18,8(sp)
    5dbc:	0005b680 	call	5b68 <__hi0bits>
    5dc0:	100b883a 	mov	r5,r2
    5dc4:	00800804 	movi	r2,32
    5dc8:	1145c83a 	sub	r2,r2,r5
    5dcc:	88800015 	stw	r2,0(r17)
    5dd0:	00800284 	movi	r2,10
    5dd4:	80ffff04 	addi	r3,r16,-4
    5dd8:	11401416 	blt	r2,r5,5e2c <__b2d+0xb0>
    5ddc:	008002c4 	movi	r2,11
    5de0:	1149c83a 	sub	r4,r2,r5
    5de4:	a0c02736 	bltu	r20,r3,5e84 <__b2d+0x108>
    5de8:	000d883a 	mov	r6,zero
    5dec:	28800544 	addi	r2,r5,21
    5df0:	a906d83a 	srl	r3,r21,r4
    5df4:	a884983a 	sll	r2,r21,r2
    5df8:	1ccffc34 	orhi	r19,r3,16368
    5dfc:	11a4b03a 	or	r18,r2,r6
    5e00:	9005883a 	mov	r2,r18
    5e04:	9807883a 	mov	r3,r19
    5e08:	dfc00617 	ldw	ra,24(sp)
    5e0c:	dd400517 	ldw	r21,20(sp)
    5e10:	dd000417 	ldw	r20,16(sp)
    5e14:	dcc00317 	ldw	r19,12(sp)
    5e18:	dc800217 	ldw	r18,8(sp)
    5e1c:	dc400117 	ldw	r17,4(sp)
    5e20:	dc000017 	ldw	r16,0(sp)
    5e24:	dec00704 	addi	sp,sp,28
    5e28:	f800283a 	ret
    5e2c:	a0c00e36 	bltu	r20,r3,5e68 <__b2d+0xec>
    5e30:	293ffd44 	addi	r4,r5,-11
    5e34:	000d883a 	mov	r6,zero
    5e38:	20000f26 	beq	r4,zero,5e78 <__b2d+0xfc>
    5e3c:	00800804 	movi	r2,32
    5e40:	110bc83a 	sub	r5,r2,r4
    5e44:	a0c01236 	bltu	r20,r3,5e90 <__b2d+0x114>
    5e48:	000f883a 	mov	r7,zero
    5e4c:	a904983a 	sll	r2,r21,r4
    5e50:	3146d83a 	srl	r3,r6,r5
    5e54:	3108983a 	sll	r4,r6,r4
    5e58:	108ffc34 	orhi	r2,r2,16368
    5e5c:	18a6b03a 	or	r19,r3,r2
    5e60:	3924b03a 	or	r18,r7,r4
    5e64:	003fe606 	br	5e00 <__b2d+0x84>
    5e68:	293ffd44 	addi	r4,r5,-11
    5e6c:	81bffe17 	ldw	r6,-8(r16)
    5e70:	80fffe04 	addi	r3,r16,-8
    5e74:	203ff11e 	bne	r4,zero,5e3c <__b2d+0xc0>
    5e78:	accffc34 	orhi	r19,r21,16368
    5e7c:	3025883a 	mov	r18,r6
    5e80:	003fdf06 	br	5e00 <__b2d+0x84>
    5e84:	18bfff17 	ldw	r2,-4(r3)
    5e88:	110cd83a 	srl	r6,r2,r4
    5e8c:	003fd706 	br	5dec <__b2d+0x70>
    5e90:	18bfff17 	ldw	r2,-4(r3)
    5e94:	114ed83a 	srl	r7,r2,r5
    5e98:	003fec06 	br	5e4c <__b2d+0xd0>

00005e9c <__ratio>:
    5e9c:	defff904 	addi	sp,sp,-28
    5ea0:	dc400215 	stw	r17,8(sp)
    5ea4:	2823883a 	mov	r17,r5
    5ea8:	d80b883a 	mov	r5,sp
    5eac:	dfc00615 	stw	ra,24(sp)
    5eb0:	dd000515 	stw	r20,20(sp)
    5eb4:	dcc00415 	stw	r19,16(sp)
    5eb8:	dc800315 	stw	r18,12(sp)
    5ebc:	2025883a 	mov	r18,r4
    5ec0:	0005d7c0 	call	5d7c <__b2d>
    5ec4:	8809883a 	mov	r4,r17
    5ec8:	d9400104 	addi	r5,sp,4
    5ecc:	1027883a 	mov	r19,r2
    5ed0:	1829883a 	mov	r20,r3
    5ed4:	0005d7c0 	call	5d7c <__b2d>
    5ed8:	89000417 	ldw	r4,16(r17)
    5edc:	91c00417 	ldw	r7,16(r18)
    5ee0:	d9800117 	ldw	r6,4(sp)
    5ee4:	180b883a 	mov	r5,r3
    5ee8:	390fc83a 	sub	r7,r7,r4
    5eec:	1009883a 	mov	r4,r2
    5ef0:	d8800017 	ldw	r2,0(sp)
    5ef4:	380e917a 	slli	r7,r7,5
    5ef8:	2011883a 	mov	r8,r4
    5efc:	1185c83a 	sub	r2,r2,r6
    5f00:	11c5883a 	add	r2,r2,r7
    5f04:	1006953a 	slli	r3,r2,20
    5f08:	2813883a 	mov	r9,r5
    5f0c:	00800d0e 	bge	zero,r2,5f44 <__ratio+0xa8>
    5f10:	1d29883a 	add	r20,r3,r20
    5f14:	a00b883a 	mov	r5,r20
    5f18:	480f883a 	mov	r7,r9
    5f1c:	9809883a 	mov	r4,r19
    5f20:	400d883a 	mov	r6,r8
    5f24:	0008ee80 	call	8ee8 <__divdf3>
    5f28:	dfc00617 	ldw	ra,24(sp)
    5f2c:	dd000517 	ldw	r20,20(sp)
    5f30:	dcc00417 	ldw	r19,16(sp)
    5f34:	dc800317 	ldw	r18,12(sp)
    5f38:	dc400217 	ldw	r17,8(sp)
    5f3c:	dec00704 	addi	sp,sp,28
    5f40:	f800283a 	ret
    5f44:	28d3c83a 	sub	r9,r5,r3
    5f48:	003ff206 	br	5f14 <__ratio+0x78>

00005f4c <_mprec_log10>:
    5f4c:	defffe04 	addi	sp,sp,-8
    5f50:	008005c4 	movi	r2,23
    5f54:	dc000015 	stw	r16,0(sp)
    5f58:	dfc00115 	stw	ra,4(sp)
    5f5c:	2021883a 	mov	r16,r4
    5f60:	11000c16 	blt	r2,r4,5f94 <_mprec_log10+0x48>
    5f64:	200490fa 	slli	r2,r4,3
    5f68:	00c00074 	movhi	r3,1
    5f6c:	18f24b04 	addi	r3,r3,-14036
    5f70:	10c5883a 	add	r2,r2,r3
    5f74:	12400117 	ldw	r9,4(r2)
    5f78:	12000017 	ldw	r8,0(r2)
    5f7c:	4807883a 	mov	r3,r9
    5f80:	4005883a 	mov	r2,r8
    5f84:	dfc00117 	ldw	ra,4(sp)
    5f88:	dc000017 	ldw	r16,0(sp)
    5f8c:	dec00204 	addi	sp,sp,8
    5f90:	f800283a 	ret
    5f94:	0011883a 	mov	r8,zero
    5f98:	024ffc34 	movhi	r9,16368
    5f9c:	0005883a 	mov	r2,zero
    5fa0:	00d00934 	movhi	r3,16420
    5fa4:	480b883a 	mov	r5,r9
    5fa8:	4009883a 	mov	r4,r8
    5fac:	180f883a 	mov	r7,r3
    5fb0:	100d883a 	mov	r6,r2
    5fb4:	0008b240 	call	8b24 <__muldf3>
    5fb8:	843fffc4 	addi	r16,r16,-1
    5fbc:	1011883a 	mov	r8,r2
    5fc0:	1813883a 	mov	r9,r3
    5fc4:	803ff51e 	bne	r16,zero,5f9c <_mprec_log10+0x50>
    5fc8:	4005883a 	mov	r2,r8
    5fcc:	4807883a 	mov	r3,r9
    5fd0:	dfc00117 	ldw	ra,4(sp)
    5fd4:	dc000017 	ldw	r16,0(sp)
    5fd8:	dec00204 	addi	sp,sp,8
    5fdc:	f800283a 	ret

00005fe0 <__copybits>:
    5fe0:	297fffc4 	addi	r5,r5,-1
    5fe4:	30800417 	ldw	r2,16(r6)
    5fe8:	280bd17a 	srai	r5,r5,5
    5fec:	31800504 	addi	r6,r6,20
    5ff0:	1085883a 	add	r2,r2,r2
    5ff4:	294b883a 	add	r5,r5,r5
    5ff8:	294b883a 	add	r5,r5,r5
    5ffc:	1085883a 	add	r2,r2,r2
    6000:	290b883a 	add	r5,r5,r4
    6004:	3087883a 	add	r3,r6,r2
    6008:	29400104 	addi	r5,r5,4
    600c:	30c0052e 	bgeu	r6,r3,6024 <__copybits+0x44>
    6010:	30800017 	ldw	r2,0(r6)
    6014:	31800104 	addi	r6,r6,4
    6018:	20800015 	stw	r2,0(r4)
    601c:	21000104 	addi	r4,r4,4
    6020:	30fffb36 	bltu	r6,r3,6010 <__copybits+0x30>
    6024:	2140032e 	bgeu	r4,r5,6034 <__copybits+0x54>
    6028:	20000015 	stw	zero,0(r4)
    602c:	21000104 	addi	r4,r4,4
    6030:	217ffd36 	bltu	r4,r5,6028 <__copybits+0x48>
    6034:	f800283a 	ret

00006038 <__any_on>:
    6038:	20800417 	ldw	r2,16(r4)
    603c:	2807d17a 	srai	r3,r5,5
    6040:	21000504 	addi	r4,r4,20
    6044:	10c00d0e 	bge	r2,r3,607c <__any_on+0x44>
    6048:	1085883a 	add	r2,r2,r2
    604c:	1085883a 	add	r2,r2,r2
    6050:	208d883a 	add	r6,r4,r2
    6054:	2180182e 	bgeu	r4,r6,60b8 <__any_on+0x80>
    6058:	30bfff17 	ldw	r2,-4(r6)
    605c:	30ffff04 	addi	r3,r6,-4
    6060:	1000041e 	bne	r2,zero,6074 <__any_on+0x3c>
    6064:	20c0142e 	bgeu	r4,r3,60b8 <__any_on+0x80>
    6068:	18ffff04 	addi	r3,r3,-4
    606c:	18800017 	ldw	r2,0(r3)
    6070:	103ffc26 	beq	r2,zero,6064 <__any_on+0x2c>
    6074:	00800044 	movi	r2,1
    6078:	f800283a 	ret
    607c:	18800a0e 	bge	r3,r2,60a8 <__any_on+0x70>
    6080:	294007cc 	andi	r5,r5,31
    6084:	28000826 	beq	r5,zero,60a8 <__any_on+0x70>
    6088:	18c5883a 	add	r2,r3,r3
    608c:	1085883a 	add	r2,r2,r2
    6090:	208d883a 	add	r6,r4,r2
    6094:	30c00017 	ldw	r3,0(r6)
    6098:	1944d83a 	srl	r2,r3,r5
    609c:	1144983a 	sll	r2,r2,r5
    60a0:	18bff41e 	bne	r3,r2,6074 <__any_on+0x3c>
    60a4:	003feb06 	br	6054 <__any_on+0x1c>
    60a8:	18c5883a 	add	r2,r3,r3
    60ac:	1085883a 	add	r2,r2,r2
    60b0:	208d883a 	add	r6,r4,r2
    60b4:	003fe706 	br	6054 <__any_on+0x1c>
    60b8:	0005883a 	mov	r2,zero
    60bc:	f800283a 	ret

000060c0 <_Balloc>:
    60c0:	20c01317 	ldw	r3,76(r4)
    60c4:	defffb04 	addi	sp,sp,-20
    60c8:	dcc00315 	stw	r19,12(sp)
    60cc:	dc800215 	stw	r18,8(sp)
    60d0:	dfc00415 	stw	ra,16(sp)
    60d4:	2825883a 	mov	r18,r5
    60d8:	dc400115 	stw	r17,4(sp)
    60dc:	dc000015 	stw	r16,0(sp)
    60e0:	2027883a 	mov	r19,r4
    60e4:	01800404 	movi	r6,16
    60e8:	01400104 	movi	r5,4
    60ec:	18001726 	beq	r3,zero,614c <_Balloc+0x8c>
    60f0:	01400044 	movi	r5,1
    60f4:	9485883a 	add	r2,r18,r18
    60f8:	2ca2983a 	sll	r17,r5,r18
    60fc:	1085883a 	add	r2,r2,r2
    6100:	10c7883a 	add	r3,r2,r3
    6104:	1c000017 	ldw	r16,0(r3)
    6108:	8c4d883a 	add	r6,r17,r17
    610c:	318d883a 	add	r6,r6,r6
    6110:	9809883a 	mov	r4,r19
    6114:	31800504 	addi	r6,r6,20
    6118:	80001226 	beq	r16,zero,6164 <_Balloc+0xa4>
    611c:	80800017 	ldw	r2,0(r16)
    6120:	18800015 	stw	r2,0(r3)
    6124:	80000415 	stw	zero,16(r16)
    6128:	80000315 	stw	zero,12(r16)
    612c:	8005883a 	mov	r2,r16
    6130:	dfc00417 	ldw	ra,16(sp)
    6134:	dcc00317 	ldw	r19,12(sp)
    6138:	dc800217 	ldw	r18,8(sp)
    613c:	dc400117 	ldw	r17,4(sp)
    6140:	dc000017 	ldw	r16,0(sp)
    6144:	dec00504 	addi	sp,sp,20
    6148:	f800283a 	ret
    614c:	00075240 	call	7524 <_calloc_r>
    6150:	1007883a 	mov	r3,r2
    6154:	0021883a 	mov	r16,zero
    6158:	98801315 	stw	r2,76(r19)
    615c:	103fe41e 	bne	r2,zero,60f0 <_Balloc+0x30>
    6160:	003ff206 	br	612c <_Balloc+0x6c>
    6164:	00075240 	call	7524 <_calloc_r>
    6168:	103ff026 	beq	r2,zero,612c <_Balloc+0x6c>
    616c:	1021883a 	mov	r16,r2
    6170:	14800115 	stw	r18,4(r2)
    6174:	14400215 	stw	r17,8(r2)
    6178:	003fea06 	br	6124 <_Balloc+0x64>

0000617c <__d2b>:
    617c:	defff504 	addi	sp,sp,-44
    6180:	dcc00515 	stw	r19,20(sp)
    6184:	04c00044 	movi	r19,1
    6188:	dc000215 	stw	r16,8(sp)
    618c:	2821883a 	mov	r16,r5
    6190:	980b883a 	mov	r5,r19
    6194:	ddc00915 	stw	r23,36(sp)
    6198:	dd800815 	stw	r22,32(sp)
    619c:	dd400715 	stw	r21,28(sp)
    61a0:	dd000615 	stw	r20,24(sp)
    61a4:	dc800415 	stw	r18,16(sp)
    61a8:	dc400315 	stw	r17,12(sp)
    61ac:	dfc00a15 	stw	ra,40(sp)
    61b0:	3023883a 	mov	r17,r6
    61b4:	382d883a 	mov	r22,r7
    61b8:	ddc00b17 	ldw	r23,44(sp)
    61bc:	00060c00 	call	60c0 <_Balloc>
    61c0:	1025883a 	mov	r18,r2
    61c4:	00a00034 	movhi	r2,32768
    61c8:	10bfffc4 	addi	r2,r2,-1
    61cc:	8888703a 	and	r4,r17,r2
    61d0:	202ad53a 	srli	r21,r4,20
    61d4:	00800434 	movhi	r2,16
    61d8:	10bfffc4 	addi	r2,r2,-1
    61dc:	8886703a 	and	r3,r17,r2
    61e0:	a829003a 	cmpeq	r20,r21,zero
    61e4:	800b883a 	mov	r5,r16
    61e8:	d8c00115 	stw	r3,4(sp)
    61ec:	94000504 	addi	r16,r18,20
    61f0:	a000021e 	bne	r20,zero,61fc <__d2b+0x80>
    61f4:	18c00434 	orhi	r3,r3,16
    61f8:	d8c00115 	stw	r3,4(sp)
    61fc:	28002726 	beq	r5,zero,629c <__d2b+0x120>
    6200:	d809883a 	mov	r4,sp
    6204:	d9400015 	stw	r5,0(sp)
    6208:	0005bd80 	call	5bd8 <__lo0bits>
    620c:	100d883a 	mov	r6,r2
    6210:	10003526 	beq	r2,zero,62e8 <__d2b+0x16c>
    6214:	d8c00117 	ldw	r3,4(sp)
    6218:	00800804 	movi	r2,32
    621c:	1185c83a 	sub	r2,r2,r6
    6220:	d9000017 	ldw	r4,0(sp)
    6224:	1886983a 	sll	r3,r3,r2
    6228:	1906b03a 	or	r3,r3,r4
    622c:	90c00515 	stw	r3,20(r18)
    6230:	d8c00117 	ldw	r3,4(sp)
    6234:	1986d83a 	srl	r3,r3,r6
    6238:	d8c00115 	stw	r3,4(sp)
    623c:	180b003a 	cmpeq	r5,r3,zero
    6240:	00800084 	movi	r2,2
    6244:	114bc83a 	sub	r5,r2,r5
    6248:	80c00115 	stw	r3,4(r16)
    624c:	91400415 	stw	r5,16(r18)
    6250:	a0001a1e 	bne	r20,zero,62bc <__d2b+0x140>
    6254:	3545883a 	add	r2,r6,r21
    6258:	10bef344 	addi	r2,r2,-1075
    625c:	00c00d44 	movi	r3,53
    6260:	b0800015 	stw	r2,0(r22)
    6264:	1987c83a 	sub	r3,r3,r6
    6268:	b8c00015 	stw	r3,0(r23)
    626c:	9005883a 	mov	r2,r18
    6270:	dfc00a17 	ldw	ra,40(sp)
    6274:	ddc00917 	ldw	r23,36(sp)
    6278:	dd800817 	ldw	r22,32(sp)
    627c:	dd400717 	ldw	r21,28(sp)
    6280:	dd000617 	ldw	r20,24(sp)
    6284:	dcc00517 	ldw	r19,20(sp)
    6288:	dc800417 	ldw	r18,16(sp)
    628c:	dc400317 	ldw	r17,12(sp)
    6290:	dc000217 	ldw	r16,8(sp)
    6294:	dec00b04 	addi	sp,sp,44
    6298:	f800283a 	ret
    629c:	d9000104 	addi	r4,sp,4
    62a0:	0005bd80 	call	5bd8 <__lo0bits>
    62a4:	11800804 	addi	r6,r2,32
    62a8:	d8800117 	ldw	r2,4(sp)
    62ac:	94c00415 	stw	r19,16(r18)
    62b0:	980b883a 	mov	r5,r19
    62b4:	90800515 	stw	r2,20(r18)
    62b8:	a03fe626 	beq	r20,zero,6254 <__d2b+0xd8>
    62bc:	2945883a 	add	r2,r5,r5
    62c0:	1085883a 	add	r2,r2,r2
    62c4:	1405883a 	add	r2,r2,r16
    62c8:	113fff17 	ldw	r4,-4(r2)
    62cc:	30fef384 	addi	r3,r6,-1074
    62d0:	2820917a 	slli	r16,r5,5
    62d4:	b0c00015 	stw	r3,0(r22)
    62d8:	0005b680 	call	5b68 <__hi0bits>
    62dc:	80a1c83a 	sub	r16,r16,r2
    62e0:	bc000015 	stw	r16,0(r23)
    62e4:	003fe106 	br	626c <__d2b+0xf0>
    62e8:	d8800017 	ldw	r2,0(sp)
    62ec:	90800515 	stw	r2,20(r18)
    62f0:	d8c00117 	ldw	r3,4(sp)
    62f4:	003fd106 	br	623c <__d2b+0xc0>

000062f8 <__mdiff>:
    62f8:	defffb04 	addi	sp,sp,-20
    62fc:	dc000015 	stw	r16,0(sp)
    6300:	2821883a 	mov	r16,r5
    6304:	dc800215 	stw	r18,8(sp)
    6308:	300b883a 	mov	r5,r6
    630c:	2025883a 	mov	r18,r4
    6310:	8009883a 	mov	r4,r16
    6314:	dc400115 	stw	r17,4(sp)
    6318:	dfc00415 	stw	ra,16(sp)
    631c:	dcc00315 	stw	r19,12(sp)
    6320:	3023883a 	mov	r17,r6
    6324:	0005c9c0 	call	5c9c <__mcmp>
    6328:	10004226 	beq	r2,zero,6434 <__mdiff+0x13c>
    632c:	10005016 	blt	r2,zero,6470 <__mdiff+0x178>
    6330:	0027883a 	mov	r19,zero
    6334:	81400117 	ldw	r5,4(r16)
    6338:	9009883a 	mov	r4,r18
    633c:	00060c00 	call	60c0 <_Balloc>
    6340:	1019883a 	mov	r12,r2
    6344:	82800417 	ldw	r10,16(r16)
    6348:	88800417 	ldw	r2,16(r17)
    634c:	81800504 	addi	r6,r16,20
    6350:	5287883a 	add	r3,r10,r10
    6354:	1085883a 	add	r2,r2,r2
    6358:	18c7883a 	add	r3,r3,r3
    635c:	1085883a 	add	r2,r2,r2
    6360:	8a000504 	addi	r8,r17,20
    6364:	64c00315 	stw	r19,12(r12)
    6368:	30db883a 	add	r13,r6,r3
    636c:	4097883a 	add	r11,r8,r2
    6370:	61c00504 	addi	r7,r12,20
    6374:	0013883a 	mov	r9,zero
    6378:	31000017 	ldw	r4,0(r6)
    637c:	41400017 	ldw	r5,0(r8)
    6380:	42000104 	addi	r8,r8,4
    6384:	20bfffcc 	andi	r2,r4,65535
    6388:	28ffffcc 	andi	r3,r5,65535
    638c:	10c5c83a 	sub	r2,r2,r3
    6390:	1245883a 	add	r2,r2,r9
    6394:	2008d43a 	srli	r4,r4,16
    6398:	280ad43a 	srli	r5,r5,16
    639c:	1007d43a 	srai	r3,r2,16
    63a0:	3880000d 	sth	r2,0(r7)
    63a4:	2149c83a 	sub	r4,r4,r5
    63a8:	20c9883a 	add	r4,r4,r3
    63ac:	3900008d 	sth	r4,2(r7)
    63b0:	31800104 	addi	r6,r6,4
    63b4:	39c00104 	addi	r7,r7,4
    63b8:	2013d43a 	srai	r9,r4,16
    63bc:	42ffee36 	bltu	r8,r11,6378 <__mdiff+0x80>
    63c0:	33400c2e 	bgeu	r6,r13,63f4 <__mdiff+0xfc>
    63c4:	30800017 	ldw	r2,0(r6)
    63c8:	31800104 	addi	r6,r6,4
    63cc:	10ffffcc 	andi	r3,r2,65535
    63d0:	1a47883a 	add	r3,r3,r9
    63d4:	1004d43a 	srli	r2,r2,16
    63d8:	1809d43a 	srai	r4,r3,16
    63dc:	38c0000d 	sth	r3,0(r7)
    63e0:	1105883a 	add	r2,r2,r4
    63e4:	3880008d 	sth	r2,2(r7)
    63e8:	1013d43a 	srai	r9,r2,16
    63ec:	39c00104 	addi	r7,r7,4
    63f0:	337ff436 	bltu	r6,r13,63c4 <__mdiff+0xcc>
    63f4:	38bfff17 	ldw	r2,-4(r7)
    63f8:	38ffff04 	addi	r3,r7,-4
    63fc:	1000041e 	bne	r2,zero,6410 <__mdiff+0x118>
    6400:	18ffff04 	addi	r3,r3,-4
    6404:	18800017 	ldw	r2,0(r3)
    6408:	52bfffc4 	addi	r10,r10,-1
    640c:	103ffc26 	beq	r2,zero,6400 <__mdiff+0x108>
    6410:	6005883a 	mov	r2,r12
    6414:	62800415 	stw	r10,16(r12)
    6418:	dfc00417 	ldw	ra,16(sp)
    641c:	dcc00317 	ldw	r19,12(sp)
    6420:	dc800217 	ldw	r18,8(sp)
    6424:	dc400117 	ldw	r17,4(sp)
    6428:	dc000017 	ldw	r16,0(sp)
    642c:	dec00504 	addi	sp,sp,20
    6430:	f800283a 	ret
    6434:	9009883a 	mov	r4,r18
    6438:	000b883a 	mov	r5,zero
    643c:	00060c00 	call	60c0 <_Balloc>
    6440:	1019883a 	mov	r12,r2
    6444:	00800044 	movi	r2,1
    6448:	60800415 	stw	r2,16(r12)
    644c:	6005883a 	mov	r2,r12
    6450:	60000515 	stw	zero,20(r12)
    6454:	dfc00417 	ldw	ra,16(sp)
    6458:	dcc00317 	ldw	r19,12(sp)
    645c:	dc800217 	ldw	r18,8(sp)
    6460:	dc400117 	ldw	r17,4(sp)
    6464:	dc000017 	ldw	r16,0(sp)
    6468:	dec00504 	addi	sp,sp,20
    646c:	f800283a 	ret
    6470:	880d883a 	mov	r6,r17
    6474:	04c00044 	movi	r19,1
    6478:	8023883a 	mov	r17,r16
    647c:	3021883a 	mov	r16,r6
    6480:	003fac06 	br	6334 <__mdiff+0x3c>

00006484 <__lshift>:
    6484:	defff904 	addi	sp,sp,-28
    6488:	28800417 	ldw	r2,16(r5)
    648c:	dc000015 	stw	r16,0(sp)
    6490:	3021d17a 	srai	r16,r6,5
    6494:	28c00217 	ldw	r3,8(r5)
    6498:	10800044 	addi	r2,r2,1
    649c:	dc400115 	stw	r17,4(sp)
    64a0:	80a3883a 	add	r17,r16,r2
    64a4:	dd400515 	stw	r21,20(sp)
    64a8:	dd000415 	stw	r20,16(sp)
    64ac:	dc800215 	stw	r18,8(sp)
    64b0:	dfc00615 	stw	ra,24(sp)
    64b4:	2825883a 	mov	r18,r5
    64b8:	dcc00315 	stw	r19,12(sp)
    64bc:	3029883a 	mov	r20,r6
    64c0:	202b883a 	mov	r21,r4
    64c4:	29400117 	ldw	r5,4(r5)
    64c8:	1c40030e 	bge	r3,r17,64d8 <__lshift+0x54>
    64cc:	18c7883a 	add	r3,r3,r3
    64d0:	29400044 	addi	r5,r5,1
    64d4:	1c7ffd16 	blt	r3,r17,64cc <__lshift+0x48>
    64d8:	a809883a 	mov	r4,r21
    64dc:	00060c00 	call	60c0 <_Balloc>
    64e0:	1027883a 	mov	r19,r2
    64e4:	11400504 	addi	r5,r2,20
    64e8:	0400090e 	bge	zero,r16,6510 <__lshift+0x8c>
    64ec:	2805883a 	mov	r2,r5
    64f0:	0007883a 	mov	r3,zero
    64f4:	18c00044 	addi	r3,r3,1
    64f8:	10000015 	stw	zero,0(r2)
    64fc:	10800104 	addi	r2,r2,4
    6500:	80fffc1e 	bne	r16,r3,64f4 <__lshift+0x70>
    6504:	8405883a 	add	r2,r16,r16
    6508:	1085883a 	add	r2,r2,r2
    650c:	288b883a 	add	r5,r5,r2
    6510:	90800417 	ldw	r2,16(r18)
    6514:	91000504 	addi	r4,r18,20
    6518:	a18007cc 	andi	r6,r20,31
    651c:	1085883a 	add	r2,r2,r2
    6520:	1085883a 	add	r2,r2,r2
    6524:	208f883a 	add	r7,r4,r2
    6528:	30001e26 	beq	r6,zero,65a4 <__lshift+0x120>
    652c:	00800804 	movi	r2,32
    6530:	1191c83a 	sub	r8,r2,r6
    6534:	0007883a 	mov	r3,zero
    6538:	20800017 	ldw	r2,0(r4)
    653c:	1184983a 	sll	r2,r2,r6
    6540:	1884b03a 	or	r2,r3,r2
    6544:	28800015 	stw	r2,0(r5)
    6548:	20c00017 	ldw	r3,0(r4)
    654c:	21000104 	addi	r4,r4,4
    6550:	29400104 	addi	r5,r5,4
    6554:	1a06d83a 	srl	r3,r3,r8
    6558:	21fff736 	bltu	r4,r7,6538 <__lshift+0xb4>
    655c:	28c00015 	stw	r3,0(r5)
    6560:	18000126 	beq	r3,zero,6568 <__lshift+0xe4>
    6564:	8c400044 	addi	r17,r17,1
    6568:	88bfffc4 	addi	r2,r17,-1
    656c:	98800415 	stw	r2,16(r19)
    6570:	a809883a 	mov	r4,r21
    6574:	900b883a 	mov	r5,r18
    6578:	0005b400 	call	5b40 <_Bfree>
    657c:	9805883a 	mov	r2,r19
    6580:	dfc00617 	ldw	ra,24(sp)
    6584:	dd400517 	ldw	r21,20(sp)
    6588:	dd000417 	ldw	r20,16(sp)
    658c:	dcc00317 	ldw	r19,12(sp)
    6590:	dc800217 	ldw	r18,8(sp)
    6594:	dc400117 	ldw	r17,4(sp)
    6598:	dc000017 	ldw	r16,0(sp)
    659c:	dec00704 	addi	sp,sp,28
    65a0:	f800283a 	ret
    65a4:	20800017 	ldw	r2,0(r4)
    65a8:	21000104 	addi	r4,r4,4
    65ac:	28800015 	stw	r2,0(r5)
    65b0:	29400104 	addi	r5,r5,4
    65b4:	21ffec2e 	bgeu	r4,r7,6568 <__lshift+0xe4>
    65b8:	20800017 	ldw	r2,0(r4)
    65bc:	21000104 	addi	r4,r4,4
    65c0:	28800015 	stw	r2,0(r5)
    65c4:	29400104 	addi	r5,r5,4
    65c8:	21fff636 	bltu	r4,r7,65a4 <__lshift+0x120>
    65cc:	003fe606 	br	6568 <__lshift+0xe4>

000065d0 <__multiply>:
    65d0:	defff004 	addi	sp,sp,-64
    65d4:	dc800815 	stw	r18,32(sp)
    65d8:	dc400715 	stw	r17,28(sp)
    65dc:	2c800417 	ldw	r18,16(r5)
    65e0:	34400417 	ldw	r17,16(r6)
    65e4:	dcc00915 	stw	r19,36(sp)
    65e8:	dc000615 	stw	r16,24(sp)
    65ec:	dfc00f15 	stw	ra,60(sp)
    65f0:	df000e15 	stw	fp,56(sp)
    65f4:	ddc00d15 	stw	r23,52(sp)
    65f8:	dd800c15 	stw	r22,48(sp)
    65fc:	dd400b15 	stw	r21,44(sp)
    6600:	dd000a15 	stw	r20,40(sp)
    6604:	2821883a 	mov	r16,r5
    6608:	3027883a 	mov	r19,r6
    660c:	9440040e 	bge	r18,r17,6620 <__multiply+0x50>
    6610:	8825883a 	mov	r18,r17
    6614:	2c400417 	ldw	r17,16(r5)
    6618:	2827883a 	mov	r19,r5
    661c:	3021883a 	mov	r16,r6
    6620:	80800217 	ldw	r2,8(r16)
    6624:	9447883a 	add	r3,r18,r17
    6628:	d8c00415 	stw	r3,16(sp)
    662c:	81400117 	ldw	r5,4(r16)
    6630:	10c0010e 	bge	r2,r3,6638 <__multiply+0x68>
    6634:	29400044 	addi	r5,r5,1
    6638:	00060c00 	call	60c0 <_Balloc>
    663c:	d8800515 	stw	r2,20(sp)
    6640:	d9000417 	ldw	r4,16(sp)
    6644:	d8c00517 	ldw	r3,20(sp)
    6648:	2105883a 	add	r2,r4,r4
    664c:	1085883a 	add	r2,r2,r2
    6650:	19000504 	addi	r4,r3,20
    6654:	2085883a 	add	r2,r4,r2
    6658:	d8800315 	stw	r2,12(sp)
    665c:	2080052e 	bgeu	r4,r2,6674 <__multiply+0xa4>
    6660:	2005883a 	mov	r2,r4
    6664:	d8c00317 	ldw	r3,12(sp)
    6668:	10000015 	stw	zero,0(r2)
    666c:	10800104 	addi	r2,r2,4
    6670:	10fffc36 	bltu	r2,r3,6664 <__multiply+0x94>
    6674:	8c45883a 	add	r2,r17,r17
    6678:	9487883a 	add	r3,r18,r18
    667c:	9dc00504 	addi	r23,r19,20
    6680:	1085883a 	add	r2,r2,r2
    6684:	84000504 	addi	r16,r16,20
    6688:	18c7883a 	add	r3,r3,r3
    668c:	b885883a 	add	r2,r23,r2
    6690:	dc000015 	stw	r16,0(sp)
    6694:	d8800215 	stw	r2,8(sp)
    6698:	80f9883a 	add	fp,r16,r3
    669c:	b880432e 	bgeu	r23,r2,67ac <__multiply+0x1dc>
    66a0:	d9000115 	stw	r4,4(sp)
    66a4:	b9000017 	ldw	r4,0(r23)
    66a8:	253fffcc 	andi	r20,r4,65535
    66ac:	a0001a26 	beq	r20,zero,6718 <__multiply+0x148>
    66b0:	dcc00017 	ldw	r19,0(sp)
    66b4:	dc800117 	ldw	r18,4(sp)
    66b8:	002b883a 	mov	r21,zero
    66bc:	9c400017 	ldw	r17,0(r19)
    66c0:	94000017 	ldw	r16,0(r18)
    66c4:	a009883a 	mov	r4,r20
    66c8:	897fffcc 	andi	r5,r17,65535
    66cc:	00005700 	call	570 <__mulsi3>
    66d0:	880ad43a 	srli	r5,r17,16
    66d4:	80ffffcc 	andi	r3,r16,65535
    66d8:	a8c7883a 	add	r3,r21,r3
    66dc:	a009883a 	mov	r4,r20
    66e0:	10e3883a 	add	r17,r2,r3
    66e4:	8020d43a 	srli	r16,r16,16
    66e8:	00005700 	call	570 <__mulsi3>
    66ec:	8806d43a 	srli	r3,r17,16
    66f0:	1405883a 	add	r2,r2,r16
    66f4:	9cc00104 	addi	r19,r19,4
    66f8:	1887883a 	add	r3,r3,r2
    66fc:	90c0008d 	sth	r3,2(r18)
    6700:	9440000d 	sth	r17,0(r18)
    6704:	182ad43a 	srli	r21,r3,16
    6708:	94800104 	addi	r18,r18,4
    670c:	9f3feb36 	bltu	r19,fp,66bc <__multiply+0xec>
    6710:	95400015 	stw	r21,0(r18)
    6714:	b9000017 	ldw	r4,0(r23)
    6718:	202ad43a 	srli	r21,r4,16
    671c:	a8001c26 	beq	r21,zero,6790 <__multiply+0x1c0>
    6720:	d9000117 	ldw	r4,4(sp)
    6724:	dd000017 	ldw	r20,0(sp)
    6728:	002d883a 	mov	r22,zero
    672c:	24c00017 	ldw	r19,0(r4)
    6730:	2025883a 	mov	r18,r4
    6734:	9823883a 	mov	r17,r19
    6738:	a4000017 	ldw	r16,0(r20)
    673c:	a809883a 	mov	r4,r21
    6740:	a5000104 	addi	r20,r20,4
    6744:	817fffcc 	andi	r5,r16,65535
    6748:	00005700 	call	570 <__mulsi3>
    674c:	8806d43a 	srli	r3,r17,16
    6750:	800ad43a 	srli	r5,r16,16
    6754:	94c0000d 	sth	r19,0(r18)
    6758:	b0c7883a 	add	r3,r22,r3
    675c:	10e1883a 	add	r16,r2,r3
    6760:	9400008d 	sth	r16,2(r18)
    6764:	a809883a 	mov	r4,r21
    6768:	94800104 	addi	r18,r18,4
    676c:	00005700 	call	570 <__mulsi3>
    6770:	94400017 	ldw	r17,0(r18)
    6774:	8020d43a 	srli	r16,r16,16
    6778:	88ffffcc 	andi	r3,r17,65535
    677c:	10c5883a 	add	r2,r2,r3
    6780:	80a7883a 	add	r19,r16,r2
    6784:	982cd43a 	srli	r22,r19,16
    6788:	a73feb36 	bltu	r20,fp,6738 <__multiply+0x168>
    678c:	94c00015 	stw	r19,0(r18)
    6790:	d8800217 	ldw	r2,8(sp)
    6794:	bdc00104 	addi	r23,r23,4
    6798:	b880042e 	bgeu	r23,r2,67ac <__multiply+0x1dc>
    679c:	d8c00117 	ldw	r3,4(sp)
    67a0:	18c00104 	addi	r3,r3,4
    67a4:	d8c00115 	stw	r3,4(sp)
    67a8:	003fbe06 	br	66a4 <__multiply+0xd4>
    67ac:	d9000417 	ldw	r4,16(sp)
    67b0:	01000c0e 	bge	zero,r4,67e4 <__multiply+0x214>
    67b4:	d8c00317 	ldw	r3,12(sp)
    67b8:	18bfff17 	ldw	r2,-4(r3)
    67bc:	18ffff04 	addi	r3,r3,-4
    67c0:	10000326 	beq	r2,zero,67d0 <__multiply+0x200>
    67c4:	00000706 	br	67e4 <__multiply+0x214>
    67c8:	18800017 	ldw	r2,0(r3)
    67cc:	1000051e 	bne	r2,zero,67e4 <__multiply+0x214>
    67d0:	d9000417 	ldw	r4,16(sp)
    67d4:	18ffff04 	addi	r3,r3,-4
    67d8:	213fffc4 	addi	r4,r4,-1
    67dc:	d9000415 	stw	r4,16(sp)
    67e0:	203ff91e 	bne	r4,zero,67c8 <__multiply+0x1f8>
    67e4:	d8800417 	ldw	r2,16(sp)
    67e8:	d8c00517 	ldw	r3,20(sp)
    67ec:	18800415 	stw	r2,16(r3)
    67f0:	1805883a 	mov	r2,r3
    67f4:	dfc00f17 	ldw	ra,60(sp)
    67f8:	df000e17 	ldw	fp,56(sp)
    67fc:	ddc00d17 	ldw	r23,52(sp)
    6800:	dd800c17 	ldw	r22,48(sp)
    6804:	dd400b17 	ldw	r21,44(sp)
    6808:	dd000a17 	ldw	r20,40(sp)
    680c:	dcc00917 	ldw	r19,36(sp)
    6810:	dc800817 	ldw	r18,32(sp)
    6814:	dc400717 	ldw	r17,28(sp)
    6818:	dc000617 	ldw	r16,24(sp)
    681c:	dec01004 	addi	sp,sp,64
    6820:	f800283a 	ret

00006824 <__i2b>:
    6824:	defffd04 	addi	sp,sp,-12
    6828:	dc000015 	stw	r16,0(sp)
    682c:	04000044 	movi	r16,1
    6830:	dc800115 	stw	r18,4(sp)
    6834:	2825883a 	mov	r18,r5
    6838:	800b883a 	mov	r5,r16
    683c:	dfc00215 	stw	ra,8(sp)
    6840:	00060c00 	call	60c0 <_Balloc>
    6844:	14000415 	stw	r16,16(r2)
    6848:	14800515 	stw	r18,20(r2)
    684c:	dfc00217 	ldw	ra,8(sp)
    6850:	dc800117 	ldw	r18,4(sp)
    6854:	dc000017 	ldw	r16,0(sp)
    6858:	dec00304 	addi	sp,sp,12
    685c:	f800283a 	ret

00006860 <__multadd>:
    6860:	defff604 	addi	sp,sp,-40
    6864:	dd800615 	stw	r22,24(sp)
    6868:	2d800417 	ldw	r22,16(r5)
    686c:	df000815 	stw	fp,32(sp)
    6870:	ddc00715 	stw	r23,28(sp)
    6874:	dd400515 	stw	r21,20(sp)
    6878:	dd000415 	stw	r20,16(sp)
    687c:	dcc00315 	stw	r19,12(sp)
    6880:	dc800215 	stw	r18,8(sp)
    6884:	dfc00915 	stw	ra,36(sp)
    6888:	dc400115 	stw	r17,4(sp)
    688c:	dc000015 	stw	r16,0(sp)
    6890:	282f883a 	mov	r23,r5
    6894:	2039883a 	mov	fp,r4
    6898:	302b883a 	mov	r21,r6
    689c:	3829883a 	mov	r20,r7
    68a0:	2c800504 	addi	r18,r5,20
    68a4:	0027883a 	mov	r19,zero
    68a8:	94400017 	ldw	r17,0(r18)
    68ac:	a80b883a 	mov	r5,r21
    68b0:	9cc00044 	addi	r19,r19,1
    68b4:	893fffcc 	andi	r4,r17,65535
    68b8:	00005700 	call	570 <__mulsi3>
    68bc:	8808d43a 	srli	r4,r17,16
    68c0:	1521883a 	add	r16,r2,r20
    68c4:	a80b883a 	mov	r5,r21
    68c8:	00005700 	call	570 <__mulsi3>
    68cc:	8008d43a 	srli	r4,r16,16
    68d0:	843fffcc 	andi	r16,r16,65535
    68d4:	1105883a 	add	r2,r2,r4
    68d8:	1006943a 	slli	r3,r2,16
    68dc:	1028d43a 	srli	r20,r2,16
    68e0:	1c07883a 	add	r3,r3,r16
    68e4:	90c00015 	stw	r3,0(r18)
    68e8:	94800104 	addi	r18,r18,4
    68ec:	9dbfee16 	blt	r19,r22,68a8 <__multadd+0x48>
    68f0:	a0000826 	beq	r20,zero,6914 <__multadd+0xb4>
    68f4:	b8800217 	ldw	r2,8(r23)
    68f8:	b080130e 	bge	r22,r2,6948 <__multadd+0xe8>
    68fc:	b585883a 	add	r2,r22,r22
    6900:	1085883a 	add	r2,r2,r2
    6904:	15c5883a 	add	r2,r2,r23
    6908:	b0c00044 	addi	r3,r22,1
    690c:	15000515 	stw	r20,20(r2)
    6910:	b8c00415 	stw	r3,16(r23)
    6914:	b805883a 	mov	r2,r23
    6918:	dfc00917 	ldw	ra,36(sp)
    691c:	df000817 	ldw	fp,32(sp)
    6920:	ddc00717 	ldw	r23,28(sp)
    6924:	dd800617 	ldw	r22,24(sp)
    6928:	dd400517 	ldw	r21,20(sp)
    692c:	dd000417 	ldw	r20,16(sp)
    6930:	dcc00317 	ldw	r19,12(sp)
    6934:	dc800217 	ldw	r18,8(sp)
    6938:	dc400117 	ldw	r17,4(sp)
    693c:	dc000017 	ldw	r16,0(sp)
    6940:	dec00a04 	addi	sp,sp,40
    6944:	f800283a 	ret
    6948:	b9400117 	ldw	r5,4(r23)
    694c:	e009883a 	mov	r4,fp
    6950:	29400044 	addi	r5,r5,1
    6954:	00060c00 	call	60c0 <_Balloc>
    6958:	b9800417 	ldw	r6,16(r23)
    695c:	b9400304 	addi	r5,r23,12
    6960:	11000304 	addi	r4,r2,12
    6964:	318d883a 	add	r6,r6,r6
    6968:	318d883a 	add	r6,r6,r6
    696c:	31800204 	addi	r6,r6,8
    6970:	1023883a 	mov	r17,r2
    6974:	00059280 	call	5928 <memcpy>
    6978:	b80b883a 	mov	r5,r23
    697c:	e009883a 	mov	r4,fp
    6980:	0005b400 	call	5b40 <_Bfree>
    6984:	882f883a 	mov	r23,r17
    6988:	003fdc06 	br	68fc <__multadd+0x9c>

0000698c <__pow5mult>:
    698c:	defffa04 	addi	sp,sp,-24
    6990:	308000cc 	andi	r2,r6,3
    6994:	dd000415 	stw	r20,16(sp)
    6998:	dcc00315 	stw	r19,12(sp)
    699c:	dc000015 	stw	r16,0(sp)
    69a0:	dfc00515 	stw	ra,20(sp)
    69a4:	dc800215 	stw	r18,8(sp)
    69a8:	dc400115 	stw	r17,4(sp)
    69ac:	3021883a 	mov	r16,r6
    69b0:	2027883a 	mov	r19,r4
    69b4:	2829883a 	mov	r20,r5
    69b8:	10002b1e 	bne	r2,zero,6a68 <__pow5mult+0xdc>
    69bc:	8025d0ba 	srai	r18,r16,2
    69c0:	90001b26 	beq	r18,zero,6a30 <__pow5mult+0xa4>
    69c4:	9c001217 	ldw	r16,72(r19)
    69c8:	8000081e 	bne	r16,zero,69ec <__pow5mult+0x60>
    69cc:	00003006 	br	6a90 <__pow5mult+0x104>
    69d0:	800b883a 	mov	r5,r16
    69d4:	800d883a 	mov	r6,r16
    69d8:	9809883a 	mov	r4,r19
    69dc:	90001426 	beq	r18,zero,6a30 <__pow5mult+0xa4>
    69e0:	80800017 	ldw	r2,0(r16)
    69e4:	10001b26 	beq	r2,zero,6a54 <__pow5mult+0xc8>
    69e8:	1021883a 	mov	r16,r2
    69ec:	9080004c 	andi	r2,r18,1
    69f0:	1005003a 	cmpeq	r2,r2,zero
    69f4:	9025d07a 	srai	r18,r18,1
    69f8:	800d883a 	mov	r6,r16
    69fc:	9809883a 	mov	r4,r19
    6a00:	a00b883a 	mov	r5,r20
    6a04:	103ff21e 	bne	r2,zero,69d0 <__pow5mult+0x44>
    6a08:	00065d00 	call	65d0 <__multiply>
    6a0c:	a00b883a 	mov	r5,r20
    6a10:	9809883a 	mov	r4,r19
    6a14:	1023883a 	mov	r17,r2
    6a18:	0005b400 	call	5b40 <_Bfree>
    6a1c:	8829883a 	mov	r20,r17
    6a20:	800b883a 	mov	r5,r16
    6a24:	800d883a 	mov	r6,r16
    6a28:	9809883a 	mov	r4,r19
    6a2c:	903fec1e 	bne	r18,zero,69e0 <__pow5mult+0x54>
    6a30:	a005883a 	mov	r2,r20
    6a34:	dfc00517 	ldw	ra,20(sp)
    6a38:	dd000417 	ldw	r20,16(sp)
    6a3c:	dcc00317 	ldw	r19,12(sp)
    6a40:	dc800217 	ldw	r18,8(sp)
    6a44:	dc400117 	ldw	r17,4(sp)
    6a48:	dc000017 	ldw	r16,0(sp)
    6a4c:	dec00604 	addi	sp,sp,24
    6a50:	f800283a 	ret
    6a54:	00065d00 	call	65d0 <__multiply>
    6a58:	80800015 	stw	r2,0(r16)
    6a5c:	1021883a 	mov	r16,r2
    6a60:	10000015 	stw	zero,0(r2)
    6a64:	003fe106 	br	69ec <__pow5mult+0x60>
    6a68:	1085883a 	add	r2,r2,r2
    6a6c:	00c00074 	movhi	r3,1
    6a70:	18f29104 	addi	r3,r3,-13756
    6a74:	1085883a 	add	r2,r2,r2
    6a78:	10c5883a 	add	r2,r2,r3
    6a7c:	11bfff17 	ldw	r6,-4(r2)
    6a80:	000f883a 	mov	r7,zero
    6a84:	00068600 	call	6860 <__multadd>
    6a88:	1029883a 	mov	r20,r2
    6a8c:	003fcb06 	br	69bc <__pow5mult+0x30>
    6a90:	9809883a 	mov	r4,r19
    6a94:	01409c44 	movi	r5,625
    6a98:	00068240 	call	6824 <__i2b>
    6a9c:	98801215 	stw	r2,72(r19)
    6aa0:	1021883a 	mov	r16,r2
    6aa4:	10000015 	stw	zero,0(r2)
    6aa8:	003fd006 	br	69ec <__pow5mult+0x60>

00006aac <__s2b>:
    6aac:	defff904 	addi	sp,sp,-28
    6ab0:	dcc00315 	stw	r19,12(sp)
    6ab4:	dc800215 	stw	r18,8(sp)
    6ab8:	2827883a 	mov	r19,r5
    6abc:	2025883a 	mov	r18,r4
    6ac0:	01400244 	movi	r5,9
    6ac4:	39000204 	addi	r4,r7,8
    6ac8:	dd000415 	stw	r20,16(sp)
    6acc:	dc400115 	stw	r17,4(sp)
    6ad0:	dfc00615 	stw	ra,24(sp)
    6ad4:	dd400515 	stw	r21,20(sp)
    6ad8:	dc000015 	stw	r16,0(sp)
    6adc:	3829883a 	mov	r20,r7
    6ae0:	3023883a 	mov	r17,r6
    6ae4:	00004a00 	call	4a0 <__divsi3>
    6ae8:	00c00044 	movi	r3,1
    6aec:	1880350e 	bge	r3,r2,6bc4 <__s2b+0x118>
    6af0:	000b883a 	mov	r5,zero
    6af4:	18c7883a 	add	r3,r3,r3
    6af8:	29400044 	addi	r5,r5,1
    6afc:	18bffd16 	blt	r3,r2,6af4 <__s2b+0x48>
    6b00:	9009883a 	mov	r4,r18
    6b04:	00060c00 	call	60c0 <_Balloc>
    6b08:	1011883a 	mov	r8,r2
    6b0c:	d8800717 	ldw	r2,28(sp)
    6b10:	00c00044 	movi	r3,1
    6b14:	01800244 	movi	r6,9
    6b18:	40800515 	stw	r2,20(r8)
    6b1c:	40c00415 	stw	r3,16(r8)
    6b20:	3440260e 	bge	r6,r17,6bbc <__s2b+0x110>
    6b24:	3021883a 	mov	r16,r6
    6b28:	99ab883a 	add	r21,r19,r6
    6b2c:	9c05883a 	add	r2,r19,r16
    6b30:	11c00007 	ldb	r7,0(r2)
    6b34:	400b883a 	mov	r5,r8
    6b38:	9009883a 	mov	r4,r18
    6b3c:	39fff404 	addi	r7,r7,-48
    6b40:	01800284 	movi	r6,10
    6b44:	00068600 	call	6860 <__multadd>
    6b48:	84000044 	addi	r16,r16,1
    6b4c:	1011883a 	mov	r8,r2
    6b50:	8c3ff61e 	bne	r17,r16,6b2c <__s2b+0x80>
    6b54:	ac45883a 	add	r2,r21,r17
    6b58:	117ffe04 	addi	r5,r2,-8
    6b5c:	880d883a 	mov	r6,r17
    6b60:	35000c0e 	bge	r6,r20,6b94 <__s2b+0xe8>
    6b64:	a185c83a 	sub	r2,r20,r6
    6b68:	2821883a 	mov	r16,r5
    6b6c:	28a3883a 	add	r17,r5,r2
    6b70:	81c00007 	ldb	r7,0(r16)
    6b74:	400b883a 	mov	r5,r8
    6b78:	9009883a 	mov	r4,r18
    6b7c:	39fff404 	addi	r7,r7,-48
    6b80:	01800284 	movi	r6,10
    6b84:	00068600 	call	6860 <__multadd>
    6b88:	84000044 	addi	r16,r16,1
    6b8c:	1011883a 	mov	r8,r2
    6b90:	847ff71e 	bne	r16,r17,6b70 <__s2b+0xc4>
    6b94:	4005883a 	mov	r2,r8
    6b98:	dfc00617 	ldw	ra,24(sp)
    6b9c:	dd400517 	ldw	r21,20(sp)
    6ba0:	dd000417 	ldw	r20,16(sp)
    6ba4:	dcc00317 	ldw	r19,12(sp)
    6ba8:	dc800217 	ldw	r18,8(sp)
    6bac:	dc400117 	ldw	r17,4(sp)
    6bb0:	dc000017 	ldw	r16,0(sp)
    6bb4:	dec00704 	addi	sp,sp,28
    6bb8:	f800283a 	ret
    6bbc:	99400284 	addi	r5,r19,10
    6bc0:	003fe706 	br	6b60 <__s2b+0xb4>
    6bc4:	000b883a 	mov	r5,zero
    6bc8:	003fcd06 	br	6b00 <__s2b+0x54>

00006bcc <_realloc_r>:
    6bcc:	defff404 	addi	sp,sp,-48
    6bd0:	dd800815 	stw	r22,32(sp)
    6bd4:	dc800415 	stw	r18,16(sp)
    6bd8:	dc400315 	stw	r17,12(sp)
    6bdc:	dfc00b15 	stw	ra,44(sp)
    6be0:	df000a15 	stw	fp,40(sp)
    6be4:	ddc00915 	stw	r23,36(sp)
    6be8:	dd400715 	stw	r21,28(sp)
    6bec:	dd000615 	stw	r20,24(sp)
    6bf0:	dcc00515 	stw	r19,20(sp)
    6bf4:	dc000215 	stw	r16,8(sp)
    6bf8:	2825883a 	mov	r18,r5
    6bfc:	3023883a 	mov	r17,r6
    6c00:	202d883a 	mov	r22,r4
    6c04:	2800c926 	beq	r5,zero,6f2c <_realloc_r+0x360>
    6c08:	000a5ec0 	call	a5ec <__malloc_lock>
    6c0c:	943ffe04 	addi	r16,r18,-8
    6c10:	88c002c4 	addi	r3,r17,11
    6c14:	00800584 	movi	r2,22
    6c18:	82000117 	ldw	r8,4(r16)
    6c1c:	10c01b2e 	bgeu	r2,r3,6c8c <_realloc_r+0xc0>
    6c20:	00bffe04 	movi	r2,-8
    6c24:	188e703a 	and	r7,r3,r2
    6c28:	3839883a 	mov	fp,r7
    6c2c:	38001a16 	blt	r7,zero,6c98 <_realloc_r+0xcc>
    6c30:	e4401936 	bltu	fp,r17,6c98 <_realloc_r+0xcc>
    6c34:	013fff04 	movi	r4,-4
    6c38:	4126703a 	and	r19,r8,r4
    6c3c:	99c02616 	blt	r19,r7,6cd8 <_realloc_r+0x10c>
    6c40:	802b883a 	mov	r21,r16
    6c44:	9829883a 	mov	r20,r19
    6c48:	84000204 	addi	r16,r16,8
    6c4c:	a80f883a 	mov	r7,r21
    6c50:	a70dc83a 	sub	r6,r20,fp
    6c54:	008003c4 	movi	r2,15
    6c58:	1180c136 	bltu	r2,r6,6f60 <_realloc_r+0x394>
    6c5c:	38800117 	ldw	r2,4(r7)
    6c60:	a549883a 	add	r4,r20,r21
    6c64:	1080004c 	andi	r2,r2,1
    6c68:	a084b03a 	or	r2,r20,r2
    6c6c:	38800115 	stw	r2,4(r7)
    6c70:	20c00117 	ldw	r3,4(r4)
    6c74:	18c00054 	ori	r3,r3,1
    6c78:	20c00115 	stw	r3,4(r4)
    6c7c:	b009883a 	mov	r4,r22
    6c80:	000a60c0 	call	a60c <__malloc_unlock>
    6c84:	8023883a 	mov	r17,r16
    6c88:	00000606 	br	6ca4 <_realloc_r+0xd8>
    6c8c:	01c00404 	movi	r7,16
    6c90:	3839883a 	mov	fp,r7
    6c94:	e47fe72e 	bgeu	fp,r17,6c34 <_realloc_r+0x68>
    6c98:	00800304 	movi	r2,12
    6c9c:	0023883a 	mov	r17,zero
    6ca0:	b0800015 	stw	r2,0(r22)
    6ca4:	8805883a 	mov	r2,r17
    6ca8:	dfc00b17 	ldw	ra,44(sp)
    6cac:	df000a17 	ldw	fp,40(sp)
    6cb0:	ddc00917 	ldw	r23,36(sp)
    6cb4:	dd800817 	ldw	r22,32(sp)
    6cb8:	dd400717 	ldw	r21,28(sp)
    6cbc:	dd000617 	ldw	r20,24(sp)
    6cc0:	dcc00517 	ldw	r19,20(sp)
    6cc4:	dc800417 	ldw	r18,16(sp)
    6cc8:	dc400317 	ldw	r17,12(sp)
    6ccc:	dc000217 	ldw	r16,8(sp)
    6cd0:	dec00c04 	addi	sp,sp,48
    6cd4:	f800283a 	ret
    6cd8:	00800074 	movhi	r2,1
    6cdc:	10b2e404 	addi	r2,r2,-13424
    6ce0:	12400217 	ldw	r9,8(r2)
    6ce4:	84cd883a 	add	r6,r16,r19
    6ce8:	802b883a 	mov	r21,r16
    6cec:	3240b926 	beq	r6,r9,6fd4 <_realloc_r+0x408>
    6cf0:	31400117 	ldw	r5,4(r6)
    6cf4:	00bfff84 	movi	r2,-2
    6cf8:	2884703a 	and	r2,r5,r2
    6cfc:	1185883a 	add	r2,r2,r6
    6d00:	10c00117 	ldw	r3,4(r2)
    6d04:	18c0004c 	andi	r3,r3,1
    6d08:	1807003a 	cmpeq	r3,r3,zero
    6d0c:	1800a326 	beq	r3,zero,6f9c <_realloc_r+0x3d0>
    6d10:	2908703a 	and	r4,r5,r4
    6d14:	9929883a 	add	r20,r19,r4
    6d18:	a1c0a30e 	bge	r20,r7,6fa8 <_realloc_r+0x3dc>
    6d1c:	4080004c 	andi	r2,r8,1
    6d20:	1000551e 	bne	r2,zero,6e78 <_realloc_r+0x2ac>
    6d24:	80800017 	ldw	r2,0(r16)
    6d28:	80afc83a 	sub	r23,r16,r2
    6d2c:	b8c00117 	ldw	r3,4(r23)
    6d30:	00bfff04 	movi	r2,-4
    6d34:	1884703a 	and	r2,r3,r2
    6d38:	30002e26 	beq	r6,zero,6df4 <_realloc_r+0x228>
    6d3c:	3240b926 	beq	r6,r9,7024 <_realloc_r+0x458>
    6d40:	98a9883a 	add	r20,r19,r2
    6d44:	2509883a 	add	r4,r4,r20
    6d48:	d9000015 	stw	r4,0(sp)
    6d4c:	21c02a16 	blt	r4,r7,6df8 <_realloc_r+0x22c>
    6d50:	30800317 	ldw	r2,12(r6)
    6d54:	30c00217 	ldw	r3,8(r6)
    6d58:	01400904 	movi	r5,36
    6d5c:	99bfff04 	addi	r6,r19,-4
    6d60:	18800315 	stw	r2,12(r3)
    6d64:	10c00215 	stw	r3,8(r2)
    6d68:	b9000317 	ldw	r4,12(r23)
    6d6c:	b8800217 	ldw	r2,8(r23)
    6d70:	b82b883a 	mov	r21,r23
    6d74:	bc000204 	addi	r16,r23,8
    6d78:	20800215 	stw	r2,8(r4)
    6d7c:	11000315 	stw	r4,12(r2)
    6d80:	2980e436 	bltu	r5,r6,7114 <_realloc_r+0x548>
    6d84:	008004c4 	movi	r2,19
    6d88:	9009883a 	mov	r4,r18
    6d8c:	8011883a 	mov	r8,r16
    6d90:	11800f2e 	bgeu	r2,r6,6dd0 <_realloc_r+0x204>
    6d94:	90800017 	ldw	r2,0(r18)
    6d98:	ba000404 	addi	r8,r23,16
    6d9c:	91000204 	addi	r4,r18,8
    6da0:	b8800215 	stw	r2,8(r23)
    6da4:	90c00117 	ldw	r3,4(r18)
    6da8:	008006c4 	movi	r2,27
    6dac:	b8c00315 	stw	r3,12(r23)
    6db0:	1180072e 	bgeu	r2,r6,6dd0 <_realloc_r+0x204>
    6db4:	90c00217 	ldw	r3,8(r18)
    6db8:	ba000604 	addi	r8,r23,24
    6dbc:	91000404 	addi	r4,r18,16
    6dc0:	b8c00415 	stw	r3,16(r23)
    6dc4:	90800317 	ldw	r2,12(r18)
    6dc8:	b8800515 	stw	r2,20(r23)
    6dcc:	3140e726 	beq	r6,r5,716c <_realloc_r+0x5a0>
    6dd0:	20800017 	ldw	r2,0(r4)
    6dd4:	dd000017 	ldw	r20,0(sp)
    6dd8:	b80f883a 	mov	r7,r23
    6ddc:	40800015 	stw	r2,0(r8)
    6de0:	20c00117 	ldw	r3,4(r4)
    6de4:	40c00115 	stw	r3,4(r8)
    6de8:	20800217 	ldw	r2,8(r4)
    6dec:	40800215 	stw	r2,8(r8)
    6df0:	003f9706 	br	6c50 <_realloc_r+0x84>
    6df4:	98a9883a 	add	r20,r19,r2
    6df8:	a1c01f16 	blt	r20,r7,6e78 <_realloc_r+0x2ac>
    6dfc:	b8c00317 	ldw	r3,12(r23)
    6e00:	b8800217 	ldw	r2,8(r23)
    6e04:	99bfff04 	addi	r6,r19,-4
    6e08:	01400904 	movi	r5,36
    6e0c:	b82b883a 	mov	r21,r23
    6e10:	18800215 	stw	r2,8(r3)
    6e14:	10c00315 	stw	r3,12(r2)
    6e18:	bc000204 	addi	r16,r23,8
    6e1c:	2980c336 	bltu	r5,r6,712c <_realloc_r+0x560>
    6e20:	008004c4 	movi	r2,19
    6e24:	9009883a 	mov	r4,r18
    6e28:	8011883a 	mov	r8,r16
    6e2c:	11800f2e 	bgeu	r2,r6,6e6c <_realloc_r+0x2a0>
    6e30:	90800017 	ldw	r2,0(r18)
    6e34:	ba000404 	addi	r8,r23,16
    6e38:	91000204 	addi	r4,r18,8
    6e3c:	b8800215 	stw	r2,8(r23)
    6e40:	90c00117 	ldw	r3,4(r18)
    6e44:	008006c4 	movi	r2,27
    6e48:	b8c00315 	stw	r3,12(r23)
    6e4c:	1180072e 	bgeu	r2,r6,6e6c <_realloc_r+0x2a0>
    6e50:	90c00217 	ldw	r3,8(r18)
    6e54:	ba000604 	addi	r8,r23,24
    6e58:	91000404 	addi	r4,r18,16
    6e5c:	b8c00415 	stw	r3,16(r23)
    6e60:	90800317 	ldw	r2,12(r18)
    6e64:	b8800515 	stw	r2,20(r23)
    6e68:	3140c726 	beq	r6,r5,7188 <_realloc_r+0x5bc>
    6e6c:	20800017 	ldw	r2,0(r4)
    6e70:	b80f883a 	mov	r7,r23
    6e74:	003fd906 	br	6ddc <_realloc_r+0x210>
    6e78:	880b883a 	mov	r5,r17
    6e7c:	b009883a 	mov	r4,r22
    6e80:	00005d00 	call	5d0 <_malloc_r>
    6e84:	1023883a 	mov	r17,r2
    6e88:	10002526 	beq	r2,zero,6f20 <_realloc_r+0x354>
    6e8c:	80800117 	ldw	r2,4(r16)
    6e90:	00ffff84 	movi	r3,-2
    6e94:	893ffe04 	addi	r4,r17,-8
    6e98:	10c4703a 	and	r2,r2,r3
    6e9c:	8085883a 	add	r2,r16,r2
    6ea0:	20809526 	beq	r4,r2,70f8 <_realloc_r+0x52c>
    6ea4:	99bfff04 	addi	r6,r19,-4
    6ea8:	01c00904 	movi	r7,36
    6eac:	39804536 	bltu	r7,r6,6fc4 <_realloc_r+0x3f8>
    6eb0:	008004c4 	movi	r2,19
    6eb4:	9009883a 	mov	r4,r18
    6eb8:	880b883a 	mov	r5,r17
    6ebc:	11800f2e 	bgeu	r2,r6,6efc <_realloc_r+0x330>
    6ec0:	90800017 	ldw	r2,0(r18)
    6ec4:	89400204 	addi	r5,r17,8
    6ec8:	91000204 	addi	r4,r18,8
    6ecc:	88800015 	stw	r2,0(r17)
    6ed0:	90c00117 	ldw	r3,4(r18)
    6ed4:	008006c4 	movi	r2,27
    6ed8:	88c00115 	stw	r3,4(r17)
    6edc:	1180072e 	bgeu	r2,r6,6efc <_realloc_r+0x330>
    6ee0:	90c00217 	ldw	r3,8(r18)
    6ee4:	89400404 	addi	r5,r17,16
    6ee8:	91000404 	addi	r4,r18,16
    6eec:	88c00215 	stw	r3,8(r17)
    6ef0:	90800317 	ldw	r2,12(r18)
    6ef4:	88800315 	stw	r2,12(r17)
    6ef8:	31c09126 	beq	r6,r7,7140 <_realloc_r+0x574>
    6efc:	20800017 	ldw	r2,0(r4)
    6f00:	28800015 	stw	r2,0(r5)
    6f04:	20c00117 	ldw	r3,4(r4)
    6f08:	28c00115 	stw	r3,4(r5)
    6f0c:	20800217 	ldw	r2,8(r4)
    6f10:	28800215 	stw	r2,8(r5)
    6f14:	900b883a 	mov	r5,r18
    6f18:	b009883a 	mov	r4,r22
    6f1c:	0004cbc0 	call	4cbc <_free_r>
    6f20:	b009883a 	mov	r4,r22
    6f24:	000a60c0 	call	a60c <__malloc_unlock>
    6f28:	003f5e06 	br	6ca4 <_realloc_r+0xd8>
    6f2c:	300b883a 	mov	r5,r6
    6f30:	dfc00b17 	ldw	ra,44(sp)
    6f34:	df000a17 	ldw	fp,40(sp)
    6f38:	ddc00917 	ldw	r23,36(sp)
    6f3c:	dd800817 	ldw	r22,32(sp)
    6f40:	dd400717 	ldw	r21,28(sp)
    6f44:	dd000617 	ldw	r20,24(sp)
    6f48:	dcc00517 	ldw	r19,20(sp)
    6f4c:	dc800417 	ldw	r18,16(sp)
    6f50:	dc400317 	ldw	r17,12(sp)
    6f54:	dc000217 	ldw	r16,8(sp)
    6f58:	dec00c04 	addi	sp,sp,48
    6f5c:	00005d01 	jmpi	5d0 <_malloc_r>
    6f60:	38800117 	ldw	r2,4(r7)
    6f64:	e54b883a 	add	r5,fp,r21
    6f68:	31000054 	ori	r4,r6,1
    6f6c:	1080004c 	andi	r2,r2,1
    6f70:	1704b03a 	or	r2,r2,fp
    6f74:	38800115 	stw	r2,4(r7)
    6f78:	29000115 	stw	r4,4(r5)
    6f7c:	2987883a 	add	r3,r5,r6
    6f80:	18800117 	ldw	r2,4(r3)
    6f84:	29400204 	addi	r5,r5,8
    6f88:	b009883a 	mov	r4,r22
    6f8c:	10800054 	ori	r2,r2,1
    6f90:	18800115 	stw	r2,4(r3)
    6f94:	0004cbc0 	call	4cbc <_free_r>
    6f98:	003f3806 	br	6c7c <_realloc_r+0xb0>
    6f9c:	000d883a 	mov	r6,zero
    6fa0:	0009883a 	mov	r4,zero
    6fa4:	003f5d06 	br	6d1c <_realloc_r+0x150>
    6fa8:	30c00217 	ldw	r3,8(r6)
    6fac:	30800317 	ldw	r2,12(r6)
    6fb0:	800f883a 	mov	r7,r16
    6fb4:	84000204 	addi	r16,r16,8
    6fb8:	10c00215 	stw	r3,8(r2)
    6fbc:	18800315 	stw	r2,12(r3)
    6fc0:	003f2306 	br	6c50 <_realloc_r+0x84>
    6fc4:	8809883a 	mov	r4,r17
    6fc8:	900b883a 	mov	r5,r18
    6fcc:	00059c80 	call	59c8 <memmove>
    6fd0:	003fd006 	br	6f14 <_realloc_r+0x348>
    6fd4:	30800117 	ldw	r2,4(r6)
    6fd8:	e0c00404 	addi	r3,fp,16
    6fdc:	1108703a 	and	r4,r2,r4
    6fe0:	9905883a 	add	r2,r19,r4
    6fe4:	10ff4d16 	blt	r2,r3,6d1c <_realloc_r+0x150>
    6fe8:	1705c83a 	sub	r2,r2,fp
    6fec:	870b883a 	add	r5,r16,fp
    6ff0:	10800054 	ori	r2,r2,1
    6ff4:	28800115 	stw	r2,4(r5)
    6ff8:	80c00117 	ldw	r3,4(r16)
    6ffc:	00800074 	movhi	r2,1
    7000:	10b2e404 	addi	r2,r2,-13424
    7004:	b009883a 	mov	r4,r22
    7008:	18c0004c 	andi	r3,r3,1
    700c:	e0c6b03a 	or	r3,fp,r3
    7010:	11400215 	stw	r5,8(r2)
    7014:	80c00115 	stw	r3,4(r16)
    7018:	000a60c0 	call	a60c <__malloc_unlock>
    701c:	84400204 	addi	r17,r16,8
    7020:	003f2006 	br	6ca4 <_realloc_r+0xd8>
    7024:	98a9883a 	add	r20,r19,r2
    7028:	2509883a 	add	r4,r4,r20
    702c:	e0800404 	addi	r2,fp,16
    7030:	d9000115 	stw	r4,4(sp)
    7034:	20bf7016 	blt	r4,r2,6df8 <_realloc_r+0x22c>
    7038:	b8c00317 	ldw	r3,12(r23)
    703c:	b8800217 	ldw	r2,8(r23)
    7040:	99bfff04 	addi	r6,r19,-4
    7044:	01400904 	movi	r5,36
    7048:	18800215 	stw	r2,8(r3)
    704c:	10c00315 	stw	r3,12(r2)
    7050:	bc400204 	addi	r17,r23,8
    7054:	29804136 	bltu	r5,r6,715c <_realloc_r+0x590>
    7058:	008004c4 	movi	r2,19
    705c:	9009883a 	mov	r4,r18
    7060:	880f883a 	mov	r7,r17
    7064:	11800f2e 	bgeu	r2,r6,70a4 <_realloc_r+0x4d8>
    7068:	90800017 	ldw	r2,0(r18)
    706c:	b9c00404 	addi	r7,r23,16
    7070:	91000204 	addi	r4,r18,8
    7074:	b8800215 	stw	r2,8(r23)
    7078:	90c00117 	ldw	r3,4(r18)
    707c:	008006c4 	movi	r2,27
    7080:	b8c00315 	stw	r3,12(r23)
    7084:	1180072e 	bgeu	r2,r6,70a4 <_realloc_r+0x4d8>
    7088:	90c00217 	ldw	r3,8(r18)
    708c:	b9c00604 	addi	r7,r23,24
    7090:	91000404 	addi	r4,r18,16
    7094:	b8c00415 	stw	r3,16(r23)
    7098:	90800317 	ldw	r2,12(r18)
    709c:	b8800515 	stw	r2,20(r23)
    70a0:	31404026 	beq	r6,r5,71a4 <_realloc_r+0x5d8>
    70a4:	20800017 	ldw	r2,0(r4)
    70a8:	38800015 	stw	r2,0(r7)
    70ac:	20c00117 	ldw	r3,4(r4)
    70b0:	38c00115 	stw	r3,4(r7)
    70b4:	20800217 	ldw	r2,8(r4)
    70b8:	38800215 	stw	r2,8(r7)
    70bc:	d8c00117 	ldw	r3,4(sp)
    70c0:	bf0b883a 	add	r5,r23,fp
    70c4:	b009883a 	mov	r4,r22
    70c8:	1f05c83a 	sub	r2,r3,fp
    70cc:	10800054 	ori	r2,r2,1
    70d0:	28800115 	stw	r2,4(r5)
    70d4:	b8c00117 	ldw	r3,4(r23)
    70d8:	00800074 	movhi	r2,1
    70dc:	10b2e404 	addi	r2,r2,-13424
    70e0:	11400215 	stw	r5,8(r2)
    70e4:	18c0004c 	andi	r3,r3,1
    70e8:	e0c6b03a 	or	r3,fp,r3
    70ec:	b8c00115 	stw	r3,4(r23)
    70f0:	000a60c0 	call	a60c <__malloc_unlock>
    70f4:	003eeb06 	br	6ca4 <_realloc_r+0xd8>
    70f8:	20800117 	ldw	r2,4(r4)
    70fc:	00ffff04 	movi	r3,-4
    7100:	800f883a 	mov	r7,r16
    7104:	10c4703a 	and	r2,r2,r3
    7108:	98a9883a 	add	r20,r19,r2
    710c:	84000204 	addi	r16,r16,8
    7110:	003ecf06 	br	6c50 <_realloc_r+0x84>
    7114:	900b883a 	mov	r5,r18
    7118:	8009883a 	mov	r4,r16
    711c:	00059c80 	call	59c8 <memmove>
    7120:	dd000017 	ldw	r20,0(sp)
    7124:	b80f883a 	mov	r7,r23
    7128:	003ec906 	br	6c50 <_realloc_r+0x84>
    712c:	900b883a 	mov	r5,r18
    7130:	8009883a 	mov	r4,r16
    7134:	00059c80 	call	59c8 <memmove>
    7138:	b80f883a 	mov	r7,r23
    713c:	003ec406 	br	6c50 <_realloc_r+0x84>
    7140:	90c00417 	ldw	r3,16(r18)
    7144:	89400604 	addi	r5,r17,24
    7148:	91000604 	addi	r4,r18,24
    714c:	88c00415 	stw	r3,16(r17)
    7150:	90800517 	ldw	r2,20(r18)
    7154:	88800515 	stw	r2,20(r17)
    7158:	003f6806 	br	6efc <_realloc_r+0x330>
    715c:	900b883a 	mov	r5,r18
    7160:	8809883a 	mov	r4,r17
    7164:	00059c80 	call	59c8 <memmove>
    7168:	003fd406 	br	70bc <_realloc_r+0x4f0>
    716c:	90c00417 	ldw	r3,16(r18)
    7170:	91000604 	addi	r4,r18,24
    7174:	ba000804 	addi	r8,r23,32
    7178:	b8c00615 	stw	r3,24(r23)
    717c:	90800517 	ldw	r2,20(r18)
    7180:	b8800715 	stw	r2,28(r23)
    7184:	003f1206 	br	6dd0 <_realloc_r+0x204>
    7188:	90c00417 	ldw	r3,16(r18)
    718c:	91000604 	addi	r4,r18,24
    7190:	ba000804 	addi	r8,r23,32
    7194:	b8c00615 	stw	r3,24(r23)
    7198:	90800517 	ldw	r2,20(r18)
    719c:	b8800715 	stw	r2,28(r23)
    71a0:	003f3206 	br	6e6c <_realloc_r+0x2a0>
    71a4:	90c00417 	ldw	r3,16(r18)
    71a8:	91000604 	addi	r4,r18,24
    71ac:	b9c00804 	addi	r7,r23,32
    71b0:	b8c00615 	stw	r3,24(r23)
    71b4:	90800517 	ldw	r2,20(r18)
    71b8:	b8800715 	stw	r2,28(r23)
    71bc:	003fb906 	br	70a4 <_realloc_r+0x4d8>

000071c0 <__isinfd>:
    71c0:	200d883a 	mov	r6,r4
    71c4:	0109c83a 	sub	r4,zero,r4
    71c8:	2188b03a 	or	r4,r4,r6
    71cc:	2008d7fa 	srli	r4,r4,31
    71d0:	00a00034 	movhi	r2,32768
    71d4:	10bfffc4 	addi	r2,r2,-1
    71d8:	1144703a 	and	r2,r2,r5
    71dc:	2088b03a 	or	r4,r4,r2
    71e0:	009ffc34 	movhi	r2,32752
    71e4:	1105c83a 	sub	r2,r2,r4
    71e8:	0087c83a 	sub	r3,zero,r2
    71ec:	10c4b03a 	or	r2,r2,r3
    71f0:	1004d7fa 	srli	r2,r2,31
    71f4:	00c00044 	movi	r3,1
    71f8:	1885c83a 	sub	r2,r3,r2
    71fc:	f800283a 	ret

00007200 <__isnand>:
    7200:	200d883a 	mov	r6,r4
    7204:	0109c83a 	sub	r4,zero,r4
    7208:	2188b03a 	or	r4,r4,r6
    720c:	2008d7fa 	srli	r4,r4,31
    7210:	00a00034 	movhi	r2,32768
    7214:	10bfffc4 	addi	r2,r2,-1
    7218:	1144703a 	and	r2,r2,r5
    721c:	2088b03a 	or	r4,r4,r2
    7220:	009ffc34 	movhi	r2,32752
    7224:	1105c83a 	sub	r2,r2,r4
    7228:	1004d7fa 	srli	r2,r2,31
    722c:	f800283a 	ret

00007230 <__sclose>:
    7230:	2940038f 	ldh	r5,14(r5)
    7234:	00075ec1 	jmpi	75ec <_close_r>

00007238 <__sseek>:
    7238:	defffe04 	addi	sp,sp,-8
    723c:	dc000015 	stw	r16,0(sp)
    7240:	2821883a 	mov	r16,r5
    7244:	2940038f 	ldh	r5,14(r5)
    7248:	dfc00115 	stw	ra,4(sp)
    724c:	00078640 	call	7864 <_lseek_r>
    7250:	1007883a 	mov	r3,r2
    7254:	00bfffc4 	movi	r2,-1
    7258:	18800926 	beq	r3,r2,7280 <__sseek+0x48>
    725c:	8080030b 	ldhu	r2,12(r16)
    7260:	80c01415 	stw	r3,80(r16)
    7264:	10840014 	ori	r2,r2,4096
    7268:	8080030d 	sth	r2,12(r16)
    726c:	1805883a 	mov	r2,r3
    7270:	dfc00117 	ldw	ra,4(sp)
    7274:	dc000017 	ldw	r16,0(sp)
    7278:	dec00204 	addi	sp,sp,8
    727c:	f800283a 	ret
    7280:	8080030b 	ldhu	r2,12(r16)
    7284:	10bbffcc 	andi	r2,r2,61439
    7288:	8080030d 	sth	r2,12(r16)
    728c:	1805883a 	mov	r2,r3
    7290:	dfc00117 	ldw	ra,4(sp)
    7294:	dc000017 	ldw	r16,0(sp)
    7298:	dec00204 	addi	sp,sp,8
    729c:	f800283a 	ret

000072a0 <__swrite>:
    72a0:	2880030b 	ldhu	r2,12(r5)
    72a4:	defffb04 	addi	sp,sp,-20
    72a8:	dcc00315 	stw	r19,12(sp)
    72ac:	1080400c 	andi	r2,r2,256
    72b0:	dc800215 	stw	r18,8(sp)
    72b4:	dc400115 	stw	r17,4(sp)
    72b8:	dc000015 	stw	r16,0(sp)
    72bc:	3027883a 	mov	r19,r6
    72c0:	3825883a 	mov	r18,r7
    72c4:	dfc00415 	stw	ra,16(sp)
    72c8:	2821883a 	mov	r16,r5
    72cc:	000d883a 	mov	r6,zero
    72d0:	01c00084 	movi	r7,2
    72d4:	2023883a 	mov	r17,r4
    72d8:	10000226 	beq	r2,zero,72e4 <__swrite+0x44>
    72dc:	2940038f 	ldh	r5,14(r5)
    72e0:	00078640 	call	7864 <_lseek_r>
    72e4:	8080030b 	ldhu	r2,12(r16)
    72e8:	8140038f 	ldh	r5,14(r16)
    72ec:	8809883a 	mov	r4,r17
    72f0:	10bbffcc 	andi	r2,r2,61439
    72f4:	980d883a 	mov	r6,r19
    72f8:	900f883a 	mov	r7,r18
    72fc:	8080030d 	sth	r2,12(r16)
    7300:	dfc00417 	ldw	ra,16(sp)
    7304:	dcc00317 	ldw	r19,12(sp)
    7308:	dc800217 	ldw	r18,8(sp)
    730c:	dc400117 	ldw	r17,4(sp)
    7310:	dc000017 	ldw	r16,0(sp)
    7314:	dec00504 	addi	sp,sp,20
    7318:	00074ac1 	jmpi	74ac <_write_r>

0000731c <__sread>:
    731c:	defffe04 	addi	sp,sp,-8
    7320:	dc000015 	stw	r16,0(sp)
    7324:	2821883a 	mov	r16,r5
    7328:	2940038f 	ldh	r5,14(r5)
    732c:	dfc00115 	stw	ra,4(sp)
    7330:	00078dc0 	call	78dc <_read_r>
    7334:	1007883a 	mov	r3,r2
    7338:	10000816 	blt	r2,zero,735c <__sread+0x40>
    733c:	80801417 	ldw	r2,80(r16)
    7340:	10c5883a 	add	r2,r2,r3
    7344:	80801415 	stw	r2,80(r16)
    7348:	1805883a 	mov	r2,r3
    734c:	dfc00117 	ldw	ra,4(sp)
    7350:	dc000017 	ldw	r16,0(sp)
    7354:	dec00204 	addi	sp,sp,8
    7358:	f800283a 	ret
    735c:	8080030b 	ldhu	r2,12(r16)
    7360:	10bbffcc 	andi	r2,r2,61439
    7364:	8080030d 	sth	r2,12(r16)
    7368:	1805883a 	mov	r2,r3
    736c:	dfc00117 	ldw	ra,4(sp)
    7370:	dc000017 	ldw	r16,0(sp)
    7374:	dec00204 	addi	sp,sp,8
    7378:	f800283a 	ret

0000737c <strcmp>:
    737c:	2144b03a 	or	r2,r4,r5
    7380:	108000cc 	andi	r2,r2,3
    7384:	10001d1e 	bne	r2,zero,73fc <strcmp+0x80>
    7388:	200f883a 	mov	r7,r4
    738c:	28800017 	ldw	r2,0(r5)
    7390:	21000017 	ldw	r4,0(r4)
    7394:	280d883a 	mov	r6,r5
    7398:	2080161e 	bne	r4,r2,73f4 <strcmp+0x78>
    739c:	023fbff4 	movhi	r8,65279
    73a0:	423fbfc4 	addi	r8,r8,-257
    73a4:	2207883a 	add	r3,r4,r8
    73a8:	01602074 	movhi	r5,32897
    73ac:	29602004 	addi	r5,r5,-32640
    73b0:	1946703a 	and	r3,r3,r5
    73b4:	0104303a 	nor	r2,zero,r4
    73b8:	10c4703a 	and	r2,r2,r3
    73bc:	10001c1e 	bne	r2,zero,7430 <strcmp+0xb4>
    73c0:	4013883a 	mov	r9,r8
    73c4:	2811883a 	mov	r8,r5
    73c8:	00000106 	br	73d0 <strcmp+0x54>
    73cc:	1800181e 	bne	r3,zero,7430 <strcmp+0xb4>
    73d0:	39c00104 	addi	r7,r7,4
    73d4:	39000017 	ldw	r4,0(r7)
    73d8:	31800104 	addi	r6,r6,4
    73dc:	31400017 	ldw	r5,0(r6)
    73e0:	2245883a 	add	r2,r4,r9
    73e4:	1204703a 	and	r2,r2,r8
    73e8:	0106303a 	nor	r3,zero,r4
    73ec:	1886703a 	and	r3,r3,r2
    73f0:	217ff626 	beq	r4,r5,73cc <strcmp+0x50>
    73f4:	3809883a 	mov	r4,r7
    73f8:	300b883a 	mov	r5,r6
    73fc:	20c00007 	ldb	r3,0(r4)
    7400:	1800051e 	bne	r3,zero,7418 <strcmp+0x9c>
    7404:	00000606 	br	7420 <strcmp+0xa4>
    7408:	21000044 	addi	r4,r4,1
    740c:	20c00007 	ldb	r3,0(r4)
    7410:	29400044 	addi	r5,r5,1
    7414:	18000226 	beq	r3,zero,7420 <strcmp+0xa4>
    7418:	28800007 	ldb	r2,0(r5)
    741c:	18bffa26 	beq	r3,r2,7408 <strcmp+0x8c>
    7420:	20c00003 	ldbu	r3,0(r4)
    7424:	28800003 	ldbu	r2,0(r5)
    7428:	1885c83a 	sub	r2,r3,r2
    742c:	f800283a 	ret
    7430:	0005883a 	mov	r2,zero
    7434:	f800283a 	ret

00007438 <strlen>:
    7438:	208000cc 	andi	r2,r4,3
    743c:	2011883a 	mov	r8,r4
    7440:	1000161e 	bne	r2,zero,749c <strlen+0x64>
    7444:	20c00017 	ldw	r3,0(r4)
    7448:	017fbff4 	movhi	r5,65279
    744c:	297fbfc4 	addi	r5,r5,-257
    7450:	01e02074 	movhi	r7,32897
    7454:	39e02004 	addi	r7,r7,-32640
    7458:	1945883a 	add	r2,r3,r5
    745c:	11c4703a 	and	r2,r2,r7
    7460:	00c6303a 	nor	r3,zero,r3
    7464:	1886703a 	and	r3,r3,r2
    7468:	18000c1e 	bne	r3,zero,749c <strlen+0x64>
    746c:	280d883a 	mov	r6,r5
    7470:	380b883a 	mov	r5,r7
    7474:	21000104 	addi	r4,r4,4
    7478:	20800017 	ldw	r2,0(r4)
    747c:	1187883a 	add	r3,r2,r6
    7480:	1946703a 	and	r3,r3,r5
    7484:	0084303a 	nor	r2,zero,r2
    7488:	10c4703a 	and	r2,r2,r3
    748c:	103ff926 	beq	r2,zero,7474 <strlen+0x3c>
    7490:	20800007 	ldb	r2,0(r4)
    7494:	10000326 	beq	r2,zero,74a4 <strlen+0x6c>
    7498:	21000044 	addi	r4,r4,1
    749c:	20800007 	ldb	r2,0(r4)
    74a0:	103ffd1e 	bne	r2,zero,7498 <strlen+0x60>
    74a4:	2205c83a 	sub	r2,r4,r8
    74a8:	f800283a 	ret

000074ac <_write_r>:
    74ac:	defffd04 	addi	sp,sp,-12
    74b0:	dc000015 	stw	r16,0(sp)
    74b4:	04000074 	movhi	r16,1
    74b8:	84001704 	addi	r16,r16,92
    74bc:	dc400115 	stw	r17,4(sp)
    74c0:	80000015 	stw	zero,0(r16)
    74c4:	2023883a 	mov	r17,r4
    74c8:	2809883a 	mov	r4,r5
    74cc:	300b883a 	mov	r5,r6
    74d0:	380d883a 	mov	r6,r7
    74d4:	dfc00215 	stw	ra,8(sp)
    74d8:	000aa880 	call	aa88 <write>
    74dc:	1007883a 	mov	r3,r2
    74e0:	00bfffc4 	movi	r2,-1
    74e4:	18800626 	beq	r3,r2,7500 <_write_r+0x54>
    74e8:	1805883a 	mov	r2,r3
    74ec:	dfc00217 	ldw	ra,8(sp)
    74f0:	dc400117 	ldw	r17,4(sp)
    74f4:	dc000017 	ldw	r16,0(sp)
    74f8:	dec00304 	addi	sp,sp,12
    74fc:	f800283a 	ret
    7500:	80800017 	ldw	r2,0(r16)
    7504:	103ff826 	beq	r2,zero,74e8 <_write_r+0x3c>
    7508:	88800015 	stw	r2,0(r17)
    750c:	1805883a 	mov	r2,r3
    7510:	dfc00217 	ldw	ra,8(sp)
    7514:	dc400117 	ldw	r17,4(sp)
    7518:	dc000017 	ldw	r16,0(sp)
    751c:	dec00304 	addi	sp,sp,12
    7520:	f800283a 	ret

00007524 <_calloc_r>:
    7524:	defffe04 	addi	sp,sp,-8
    7528:	dc400015 	stw	r17,0(sp)
    752c:	2023883a 	mov	r17,r4
    7530:	2809883a 	mov	r4,r5
    7534:	300b883a 	mov	r5,r6
    7538:	dfc00115 	stw	ra,4(sp)
    753c:	00005700 	call	570 <__mulsi3>
    7540:	100b883a 	mov	r5,r2
    7544:	8809883a 	mov	r4,r17
    7548:	00005d00 	call	5d0 <_malloc_r>
    754c:	1023883a 	mov	r17,r2
    7550:	01c00904 	movi	r7,36
    7554:	10000d26 	beq	r2,zero,758c <_calloc_r+0x68>
    7558:	10ffff17 	ldw	r3,-4(r2)
    755c:	1009883a 	mov	r4,r2
    7560:	00bfff04 	movi	r2,-4
    7564:	1886703a 	and	r3,r3,r2
    7568:	1887883a 	add	r3,r3,r2
    756c:	180d883a 	mov	r6,r3
    7570:	000b883a 	mov	r5,zero
    7574:	38c01736 	bltu	r7,r3,75d4 <_calloc_r+0xb0>
    7578:	008004c4 	movi	r2,19
    757c:	10c00836 	bltu	r2,r3,75a0 <_calloc_r+0x7c>
    7580:	20000215 	stw	zero,8(r4)
    7584:	20000015 	stw	zero,0(r4)
    7588:	20000115 	stw	zero,4(r4)
    758c:	8805883a 	mov	r2,r17
    7590:	dfc00117 	ldw	ra,4(sp)
    7594:	dc400017 	ldw	r17,0(sp)
    7598:	dec00204 	addi	sp,sp,8
    759c:	f800283a 	ret
    75a0:	008006c4 	movi	r2,27
    75a4:	88000015 	stw	zero,0(r17)
    75a8:	88000115 	stw	zero,4(r17)
    75ac:	89000204 	addi	r4,r17,8
    75b0:	10fff32e 	bgeu	r2,r3,7580 <_calloc_r+0x5c>
    75b4:	88000215 	stw	zero,8(r17)
    75b8:	88000315 	stw	zero,12(r17)
    75bc:	89000404 	addi	r4,r17,16
    75c0:	19ffef1e 	bne	r3,r7,7580 <_calloc_r+0x5c>
    75c4:	89000604 	addi	r4,r17,24
    75c8:	88000415 	stw	zero,16(r17)
    75cc:	88000515 	stw	zero,20(r17)
    75d0:	003feb06 	br	7580 <_calloc_r+0x5c>
    75d4:	0005aa80 	call	5aa8 <memset>
    75d8:	8805883a 	mov	r2,r17
    75dc:	dfc00117 	ldw	ra,4(sp)
    75e0:	dc400017 	ldw	r17,0(sp)
    75e4:	dec00204 	addi	sp,sp,8
    75e8:	f800283a 	ret

000075ec <_close_r>:
    75ec:	defffd04 	addi	sp,sp,-12
    75f0:	dc000015 	stw	r16,0(sp)
    75f4:	04000074 	movhi	r16,1
    75f8:	84001704 	addi	r16,r16,92
    75fc:	dc400115 	stw	r17,4(sp)
    7600:	80000015 	stw	zero,0(r16)
    7604:	2023883a 	mov	r17,r4
    7608:	2809883a 	mov	r4,r5
    760c:	dfc00215 	stw	ra,8(sp)
    7610:	0009f580 	call	9f58 <close>
    7614:	1007883a 	mov	r3,r2
    7618:	00bfffc4 	movi	r2,-1
    761c:	18800626 	beq	r3,r2,7638 <_close_r+0x4c>
    7620:	1805883a 	mov	r2,r3
    7624:	dfc00217 	ldw	ra,8(sp)
    7628:	dc400117 	ldw	r17,4(sp)
    762c:	dc000017 	ldw	r16,0(sp)
    7630:	dec00304 	addi	sp,sp,12
    7634:	f800283a 	ret
    7638:	80800017 	ldw	r2,0(r16)
    763c:	103ff826 	beq	r2,zero,7620 <_close_r+0x34>
    7640:	88800015 	stw	r2,0(r17)
    7644:	1805883a 	mov	r2,r3
    7648:	dfc00217 	ldw	ra,8(sp)
    764c:	dc400117 	ldw	r17,4(sp)
    7650:	dc000017 	ldw	r16,0(sp)
    7654:	dec00304 	addi	sp,sp,12
    7658:	f800283a 	ret

0000765c <_fclose_r>:
    765c:	defffc04 	addi	sp,sp,-16
    7660:	dc400115 	stw	r17,4(sp)
    7664:	dc000015 	stw	r16,0(sp)
    7668:	dfc00315 	stw	ra,12(sp)
    766c:	dc800215 	stw	r18,8(sp)
    7670:	2821883a 	mov	r16,r5
    7674:	2023883a 	mov	r17,r4
    7678:	28002926 	beq	r5,zero,7720 <_fclose_r+0xc4>
    767c:	00048f40 	call	48f4 <__sfp_lock_acquire>
    7680:	88000226 	beq	r17,zero,768c <_fclose_r+0x30>
    7684:	88800e17 	ldw	r2,56(r17)
    7688:	10002d26 	beq	r2,zero,7740 <_fclose_r+0xe4>
    768c:	8080030f 	ldh	r2,12(r16)
    7690:	10002226 	beq	r2,zero,771c <_fclose_r+0xc0>
    7694:	8809883a 	mov	r4,r17
    7698:	800b883a 	mov	r5,r16
    769c:	000466c0 	call	466c <_fflush_r>
    76a0:	1025883a 	mov	r18,r2
    76a4:	80800b17 	ldw	r2,44(r16)
    76a8:	10000426 	beq	r2,zero,76bc <_fclose_r+0x60>
    76ac:	81400717 	ldw	r5,28(r16)
    76b0:	8809883a 	mov	r4,r17
    76b4:	103ee83a 	callr	r2
    76b8:	10002a16 	blt	r2,zero,7764 <_fclose_r+0x108>
    76bc:	8080030b 	ldhu	r2,12(r16)
    76c0:	1080200c 	andi	r2,r2,128
    76c4:	1000231e 	bne	r2,zero,7754 <_fclose_r+0xf8>
    76c8:	81400c17 	ldw	r5,48(r16)
    76cc:	28000526 	beq	r5,zero,76e4 <_fclose_r+0x88>
    76d0:	80801004 	addi	r2,r16,64
    76d4:	28800226 	beq	r5,r2,76e0 <_fclose_r+0x84>
    76d8:	8809883a 	mov	r4,r17
    76dc:	0004cbc0 	call	4cbc <_free_r>
    76e0:	80000c15 	stw	zero,48(r16)
    76e4:	81401117 	ldw	r5,68(r16)
    76e8:	28000326 	beq	r5,zero,76f8 <_fclose_r+0x9c>
    76ec:	8809883a 	mov	r4,r17
    76f0:	0004cbc0 	call	4cbc <_free_r>
    76f4:	80001115 	stw	zero,68(r16)
    76f8:	8000030d 	sth	zero,12(r16)
    76fc:	00048f80 	call	48f8 <__sfp_lock_release>
    7700:	9005883a 	mov	r2,r18
    7704:	dfc00317 	ldw	ra,12(sp)
    7708:	dc800217 	ldw	r18,8(sp)
    770c:	dc400117 	ldw	r17,4(sp)
    7710:	dc000017 	ldw	r16,0(sp)
    7714:	dec00404 	addi	sp,sp,16
    7718:	f800283a 	ret
    771c:	00048f80 	call	48f8 <__sfp_lock_release>
    7720:	0025883a 	mov	r18,zero
    7724:	9005883a 	mov	r2,r18
    7728:	dfc00317 	ldw	ra,12(sp)
    772c:	dc800217 	ldw	r18,8(sp)
    7730:	dc400117 	ldw	r17,4(sp)
    7734:	dc000017 	ldw	r16,0(sp)
    7738:	dec00404 	addi	sp,sp,16
    773c:	f800283a 	ret
    7740:	8809883a 	mov	r4,r17
    7744:	00049040 	call	4904 <__sinit>
    7748:	8080030f 	ldh	r2,12(r16)
    774c:	103fd11e 	bne	r2,zero,7694 <_fclose_r+0x38>
    7750:	003ff206 	br	771c <_fclose_r+0xc0>
    7754:	81400417 	ldw	r5,16(r16)
    7758:	8809883a 	mov	r4,r17
    775c:	0004cbc0 	call	4cbc <_free_r>
    7760:	003fd906 	br	76c8 <_fclose_r+0x6c>
    7764:	04bfffc4 	movi	r18,-1
    7768:	003fd406 	br	76bc <_fclose_r+0x60>

0000776c <fclose>:
    776c:	00800074 	movhi	r2,1
    7770:	10b96d04 	addi	r2,r2,-6732
    7774:	200b883a 	mov	r5,r4
    7778:	11000017 	ldw	r4,0(r2)
    777c:	000765c1 	jmpi	765c <_fclose_r>

00007780 <_fstat_r>:
    7780:	defffd04 	addi	sp,sp,-12
    7784:	dc000015 	stw	r16,0(sp)
    7788:	04000074 	movhi	r16,1
    778c:	84001704 	addi	r16,r16,92
    7790:	dc400115 	stw	r17,4(sp)
    7794:	80000015 	stw	zero,0(r16)
    7798:	2023883a 	mov	r17,r4
    779c:	2809883a 	mov	r4,r5
    77a0:	300b883a 	mov	r5,r6
    77a4:	dfc00215 	stw	ra,8(sp)
    77a8:	000a0e40 	call	a0e4 <fstat>
    77ac:	1007883a 	mov	r3,r2
    77b0:	00bfffc4 	movi	r2,-1
    77b4:	18800626 	beq	r3,r2,77d0 <_fstat_r+0x50>
    77b8:	1805883a 	mov	r2,r3
    77bc:	dfc00217 	ldw	ra,8(sp)
    77c0:	dc400117 	ldw	r17,4(sp)
    77c4:	dc000017 	ldw	r16,0(sp)
    77c8:	dec00304 	addi	sp,sp,12
    77cc:	f800283a 	ret
    77d0:	80800017 	ldw	r2,0(r16)
    77d4:	103ff826 	beq	r2,zero,77b8 <_fstat_r+0x38>
    77d8:	88800015 	stw	r2,0(r17)
    77dc:	1805883a 	mov	r2,r3
    77e0:	dfc00217 	ldw	ra,8(sp)
    77e4:	dc400117 	ldw	r17,4(sp)
    77e8:	dc000017 	ldw	r16,0(sp)
    77ec:	dec00304 	addi	sp,sp,12
    77f0:	f800283a 	ret

000077f4 <_isatty_r>:
    77f4:	defffd04 	addi	sp,sp,-12
    77f8:	dc000015 	stw	r16,0(sp)
    77fc:	04000074 	movhi	r16,1
    7800:	84001704 	addi	r16,r16,92
    7804:	dc400115 	stw	r17,4(sp)
    7808:	80000015 	stw	zero,0(r16)
    780c:	2023883a 	mov	r17,r4
    7810:	2809883a 	mov	r4,r5
    7814:	dfc00215 	stw	ra,8(sp)
    7818:	000a21c0 	call	a21c <isatty>
    781c:	1007883a 	mov	r3,r2
    7820:	00bfffc4 	movi	r2,-1
    7824:	18800626 	beq	r3,r2,7840 <_isatty_r+0x4c>
    7828:	1805883a 	mov	r2,r3
    782c:	dfc00217 	ldw	ra,8(sp)
    7830:	dc400117 	ldw	r17,4(sp)
    7834:	dc000017 	ldw	r16,0(sp)
    7838:	dec00304 	addi	sp,sp,12
    783c:	f800283a 	ret
    7840:	80800017 	ldw	r2,0(r16)
    7844:	103ff826 	beq	r2,zero,7828 <_isatty_r+0x34>
    7848:	88800015 	stw	r2,0(r17)
    784c:	1805883a 	mov	r2,r3
    7850:	dfc00217 	ldw	ra,8(sp)
    7854:	dc400117 	ldw	r17,4(sp)
    7858:	dc000017 	ldw	r16,0(sp)
    785c:	dec00304 	addi	sp,sp,12
    7860:	f800283a 	ret

00007864 <_lseek_r>:
    7864:	defffd04 	addi	sp,sp,-12
    7868:	dc000015 	stw	r16,0(sp)
    786c:	04000074 	movhi	r16,1
    7870:	84001704 	addi	r16,r16,92
    7874:	dc400115 	stw	r17,4(sp)
    7878:	80000015 	stw	zero,0(r16)
    787c:	2023883a 	mov	r17,r4
    7880:	2809883a 	mov	r4,r5
    7884:	300b883a 	mov	r5,r6
    7888:	380d883a 	mov	r6,r7
    788c:	dfc00215 	stw	ra,8(sp)
    7890:	000a42c0 	call	a42c <lseek>
    7894:	1007883a 	mov	r3,r2
    7898:	00bfffc4 	movi	r2,-1
    789c:	18800626 	beq	r3,r2,78b8 <_lseek_r+0x54>
    78a0:	1805883a 	mov	r2,r3
    78a4:	dfc00217 	ldw	ra,8(sp)
    78a8:	dc400117 	ldw	r17,4(sp)
    78ac:	dc000017 	ldw	r16,0(sp)
    78b0:	dec00304 	addi	sp,sp,12
    78b4:	f800283a 	ret
    78b8:	80800017 	ldw	r2,0(r16)
    78bc:	103ff826 	beq	r2,zero,78a0 <_lseek_r+0x3c>
    78c0:	88800015 	stw	r2,0(r17)
    78c4:	1805883a 	mov	r2,r3
    78c8:	dfc00217 	ldw	ra,8(sp)
    78cc:	dc400117 	ldw	r17,4(sp)
    78d0:	dc000017 	ldw	r16,0(sp)
    78d4:	dec00304 	addi	sp,sp,12
    78d8:	f800283a 	ret

000078dc <_read_r>:
    78dc:	defffd04 	addi	sp,sp,-12
    78e0:	dc000015 	stw	r16,0(sp)
    78e4:	04000074 	movhi	r16,1
    78e8:	84001704 	addi	r16,r16,92
    78ec:	dc400115 	stw	r17,4(sp)
    78f0:	80000015 	stw	zero,0(r16)
    78f4:	2023883a 	mov	r17,r4
    78f8:	2809883a 	mov	r4,r5
    78fc:	300b883a 	mov	r5,r6
    7900:	380d883a 	mov	r6,r7
    7904:	dfc00215 	stw	ra,8(sp)
    7908:	000a62c0 	call	a62c <read>
    790c:	1007883a 	mov	r3,r2
    7910:	00bfffc4 	movi	r2,-1
    7914:	18800626 	beq	r3,r2,7930 <_read_r+0x54>
    7918:	1805883a 	mov	r2,r3
    791c:	dfc00217 	ldw	ra,8(sp)
    7920:	dc400117 	ldw	r17,4(sp)
    7924:	dc000017 	ldw	r16,0(sp)
    7928:	dec00304 	addi	sp,sp,12
    792c:	f800283a 	ret
    7930:	80800017 	ldw	r2,0(r16)
    7934:	103ff826 	beq	r2,zero,7918 <_read_r+0x3c>
    7938:	88800015 	stw	r2,0(r17)
    793c:	1805883a 	mov	r2,r3
    7940:	dfc00217 	ldw	ra,8(sp)
    7944:	dc400117 	ldw	r17,4(sp)
    7948:	dc000017 	ldw	r16,0(sp)
    794c:	dec00304 	addi	sp,sp,12
    7950:	f800283a 	ret

00007954 <__udivdi3>:
    7954:	defff104 	addi	sp,sp,-60
    7958:	0015883a 	mov	r10,zero
    795c:	2005883a 	mov	r2,r4
    7960:	3011883a 	mov	r8,r6
    7964:	df000d15 	stw	fp,52(sp)
    7968:	dd400a15 	stw	r21,40(sp)
    796c:	dcc00815 	stw	r19,32(sp)
    7970:	dfc00e15 	stw	ra,56(sp)
    7974:	ddc00c15 	stw	r23,48(sp)
    7978:	dd800b15 	stw	r22,44(sp)
    797c:	dd000915 	stw	r20,36(sp)
    7980:	dc800715 	stw	r18,28(sp)
    7984:	dc400615 	stw	r17,24(sp)
    7988:	dc000515 	stw	r16,20(sp)
    798c:	da800315 	stw	r10,12(sp)
    7990:	4027883a 	mov	r19,r8
    7994:	1039883a 	mov	fp,r2
    7998:	282b883a 	mov	r21,r5
    799c:	da800415 	stw	r10,16(sp)
    79a0:	3800401e 	bne	r7,zero,7aa4 <__udivdi3+0x150>
    79a4:	2a006536 	bltu	r5,r8,7b3c <__udivdi3+0x1e8>
    79a8:	4000b526 	beq	r8,zero,7c80 <__udivdi3+0x32c>
    79ac:	00bfffd4 	movui	r2,65535
    79b0:	14c0ad36 	bltu	r2,r19,7c68 <__udivdi3+0x314>
    79b4:	00803fc4 	movi	r2,255
    79b8:	14c15e36 	bltu	r2,r19,7f34 <__udivdi3+0x5e0>
    79bc:	000b883a 	mov	r5,zero
    79c0:	0005883a 	mov	r2,zero
    79c4:	9884d83a 	srl	r2,r19,r2
    79c8:	01000074 	movhi	r4,1
    79cc:	21329904 	addi	r4,r4,-13724
    79d0:	01800804 	movi	r6,32
    79d4:	1105883a 	add	r2,r2,r4
    79d8:	10c00003 	ldbu	r3,0(r2)
    79dc:	28c7883a 	add	r3,r5,r3
    79e0:	30e9c83a 	sub	r20,r6,r3
    79e4:	a0010a1e 	bne	r20,zero,7e10 <__udivdi3+0x4bc>
    79e8:	982ed43a 	srli	r23,r19,16
    79ec:	acebc83a 	sub	r21,r21,r19
    79f0:	9dbfffcc 	andi	r22,r19,65535
    79f4:	05000044 	movi	r20,1
    79f8:	a809883a 	mov	r4,r21
    79fc:	b80b883a 	mov	r5,r23
    7a00:	00005600 	call	560 <__udivsi3>
    7a04:	100b883a 	mov	r5,r2
    7a08:	b009883a 	mov	r4,r22
    7a0c:	1021883a 	mov	r16,r2
    7a10:	00005700 	call	570 <__mulsi3>
    7a14:	a809883a 	mov	r4,r21
    7a18:	b80b883a 	mov	r5,r23
    7a1c:	1023883a 	mov	r17,r2
    7a20:	00005680 	call	568 <__umodsi3>
    7a24:	1004943a 	slli	r2,r2,16
    7a28:	e006d43a 	srli	r3,fp,16
    7a2c:	10c4b03a 	or	r2,r2,r3
    7a30:	1440042e 	bgeu	r2,r17,7a44 <__udivdi3+0xf0>
    7a34:	14c5883a 	add	r2,r2,r19
    7a38:	843fffc4 	addi	r16,r16,-1
    7a3c:	14c00136 	bltu	r2,r19,7a44 <__udivdi3+0xf0>
    7a40:	14415c36 	bltu	r2,r17,7fb4 <__udivdi3+0x660>
    7a44:	1463c83a 	sub	r17,r2,r17
    7a48:	8809883a 	mov	r4,r17
    7a4c:	b80b883a 	mov	r5,r23
    7a50:	00005600 	call	560 <__udivsi3>
    7a54:	100b883a 	mov	r5,r2
    7a58:	b009883a 	mov	r4,r22
    7a5c:	102b883a 	mov	r21,r2
    7a60:	00005700 	call	570 <__mulsi3>
    7a64:	8809883a 	mov	r4,r17
    7a68:	b80b883a 	mov	r5,r23
    7a6c:	1025883a 	mov	r18,r2
    7a70:	00005680 	call	568 <__umodsi3>
    7a74:	1004943a 	slli	r2,r2,16
    7a78:	e0ffffcc 	andi	r3,fp,65535
    7a7c:	10c4b03a 	or	r2,r2,r3
    7a80:	1480042e 	bgeu	r2,r18,7a94 <__udivdi3+0x140>
    7a84:	9885883a 	add	r2,r19,r2
    7a88:	ad7fffc4 	addi	r21,r21,-1
    7a8c:	14c00136 	bltu	r2,r19,7a94 <__udivdi3+0x140>
    7a90:	14813c36 	bltu	r2,r18,7f84 <__udivdi3+0x630>
    7a94:	8004943a 	slli	r2,r16,16
    7a98:	a009883a 	mov	r4,r20
    7a9c:	a884b03a 	or	r2,r21,r2
    7aa0:	00001506 	br	7af8 <__udivdi3+0x1a4>
    7aa4:	380d883a 	mov	r6,r7
    7aa8:	29c06c36 	bltu	r5,r7,7c5c <__udivdi3+0x308>
    7aac:	00bfffd4 	movui	r2,65535
    7ab0:	11c06436 	bltu	r2,r7,7c44 <__udivdi3+0x2f0>
    7ab4:	00803fc4 	movi	r2,255
    7ab8:	11c11836 	bltu	r2,r7,7f1c <__udivdi3+0x5c8>
    7abc:	000b883a 	mov	r5,zero
    7ac0:	0005883a 	mov	r2,zero
    7ac4:	3084d83a 	srl	r2,r6,r2
    7ac8:	01000074 	movhi	r4,1
    7acc:	21329904 	addi	r4,r4,-13724
    7ad0:	01c00804 	movi	r7,32
    7ad4:	1105883a 	add	r2,r2,r4
    7ad8:	10c00003 	ldbu	r3,0(r2)
    7adc:	28c7883a 	add	r3,r5,r3
    7ae0:	38edc83a 	sub	r22,r7,r3
    7ae4:	b000731e 	bne	r22,zero,7cb4 <__udivdi3+0x360>
    7ae8:	35400136 	bltu	r6,r21,7af0 <__udivdi3+0x19c>
    7aec:	e4c05b36 	bltu	fp,r19,7c5c <__udivdi3+0x308>
    7af0:	00800044 	movi	r2,1
    7af4:	0009883a 	mov	r4,zero
    7af8:	d8800315 	stw	r2,12(sp)
    7afc:	d9400317 	ldw	r5,12(sp)
    7b00:	2007883a 	mov	r3,r4
    7b04:	d9000415 	stw	r4,16(sp)
    7b08:	2805883a 	mov	r2,r5
    7b0c:	dfc00e17 	ldw	ra,56(sp)
    7b10:	df000d17 	ldw	fp,52(sp)
    7b14:	ddc00c17 	ldw	r23,48(sp)
    7b18:	dd800b17 	ldw	r22,44(sp)
    7b1c:	dd400a17 	ldw	r21,40(sp)
    7b20:	dd000917 	ldw	r20,36(sp)
    7b24:	dcc00817 	ldw	r19,32(sp)
    7b28:	dc800717 	ldw	r18,28(sp)
    7b2c:	dc400617 	ldw	r17,24(sp)
    7b30:	dc000517 	ldw	r16,20(sp)
    7b34:	dec00f04 	addi	sp,sp,60
    7b38:	f800283a 	ret
    7b3c:	00bfffd4 	movui	r2,65535
    7b40:	12005636 	bltu	r2,r8,7c9c <__udivdi3+0x348>
    7b44:	00803fc4 	movi	r2,255
    7b48:	12010036 	bltu	r2,r8,7f4c <__udivdi3+0x5f8>
    7b4c:	000b883a 	mov	r5,zero
    7b50:	0005883a 	mov	r2,zero
    7b54:	9884d83a 	srl	r2,r19,r2
    7b58:	01000074 	movhi	r4,1
    7b5c:	21329904 	addi	r4,r4,-13724
    7b60:	01800804 	movi	r6,32
    7b64:	1105883a 	add	r2,r2,r4
    7b68:	10c00003 	ldbu	r3,0(r2)
    7b6c:	28c7883a 	add	r3,r5,r3
    7b70:	30cbc83a 	sub	r5,r6,r3
    7b74:	28000626 	beq	r5,zero,7b90 <__udivdi3+0x23c>
    7b78:	3145c83a 	sub	r2,r6,r5
    7b7c:	e084d83a 	srl	r2,fp,r2
    7b80:	a946983a 	sll	r3,r21,r5
    7b84:	e178983a 	sll	fp,fp,r5
    7b88:	9966983a 	sll	r19,r19,r5
    7b8c:	18aab03a 	or	r21,r3,r2
    7b90:	982ed43a 	srli	r23,r19,16
    7b94:	a809883a 	mov	r4,r21
    7b98:	9cbfffcc 	andi	r18,r19,65535
    7b9c:	b80b883a 	mov	r5,r23
    7ba0:	00005600 	call	560 <__udivsi3>
    7ba4:	100b883a 	mov	r5,r2
    7ba8:	9009883a 	mov	r4,r18
    7bac:	1021883a 	mov	r16,r2
    7bb0:	00005700 	call	570 <__mulsi3>
    7bb4:	a809883a 	mov	r4,r21
    7bb8:	b80b883a 	mov	r5,r23
    7bbc:	1023883a 	mov	r17,r2
    7bc0:	00005680 	call	568 <__umodsi3>
    7bc4:	1004943a 	slli	r2,r2,16
    7bc8:	e006d43a 	srli	r3,fp,16
    7bcc:	10c4b03a 	or	r2,r2,r3
    7bd0:	1440042e 	bgeu	r2,r17,7be4 <__udivdi3+0x290>
    7bd4:	14c5883a 	add	r2,r2,r19
    7bd8:	843fffc4 	addi	r16,r16,-1
    7bdc:	14c00136 	bltu	r2,r19,7be4 <__udivdi3+0x290>
    7be0:	1440ea36 	bltu	r2,r17,7f8c <__udivdi3+0x638>
    7be4:	1463c83a 	sub	r17,r2,r17
    7be8:	8809883a 	mov	r4,r17
    7bec:	b80b883a 	mov	r5,r23
    7bf0:	00005600 	call	560 <__udivsi3>
    7bf4:	100b883a 	mov	r5,r2
    7bf8:	9009883a 	mov	r4,r18
    7bfc:	102b883a 	mov	r21,r2
    7c00:	00005700 	call	570 <__mulsi3>
    7c04:	8809883a 	mov	r4,r17
    7c08:	b80b883a 	mov	r5,r23
    7c0c:	1025883a 	mov	r18,r2
    7c10:	00005680 	call	568 <__umodsi3>
    7c14:	1004943a 	slli	r2,r2,16
    7c18:	e0ffffcc 	andi	r3,fp,65535
    7c1c:	10c4b03a 	or	r2,r2,r3
    7c20:	1480042e 	bgeu	r2,r18,7c34 <__udivdi3+0x2e0>
    7c24:	9885883a 	add	r2,r19,r2
    7c28:	ad7fffc4 	addi	r21,r21,-1
    7c2c:	14c00136 	bltu	r2,r19,7c34 <__udivdi3+0x2e0>
    7c30:	1480d936 	bltu	r2,r18,7f98 <__udivdi3+0x644>
    7c34:	8004943a 	slli	r2,r16,16
    7c38:	0009883a 	mov	r4,zero
    7c3c:	a884b03a 	or	r2,r21,r2
    7c40:	003fad06 	br	7af8 <__udivdi3+0x1a4>
    7c44:	00804034 	movhi	r2,256
    7c48:	10bfffc4 	addi	r2,r2,-1
    7c4c:	11c0b636 	bltu	r2,r7,7f28 <__udivdi3+0x5d4>
    7c50:	01400404 	movi	r5,16
    7c54:	2805883a 	mov	r2,r5
    7c58:	003f9a06 	br	7ac4 <__udivdi3+0x170>
    7c5c:	0005883a 	mov	r2,zero
    7c60:	0009883a 	mov	r4,zero
    7c64:	003fa406 	br	7af8 <__udivdi3+0x1a4>
    7c68:	00804034 	movhi	r2,256
    7c6c:	10bfffc4 	addi	r2,r2,-1
    7c70:	14c0b336 	bltu	r2,r19,7f40 <__udivdi3+0x5ec>
    7c74:	01400404 	movi	r5,16
    7c78:	2805883a 	mov	r2,r5
    7c7c:	003f5106 	br	79c4 <__udivdi3+0x70>
    7c80:	01000044 	movi	r4,1
    7c84:	000b883a 	mov	r5,zero
    7c88:	00005600 	call	560 <__udivsi3>
    7c8c:	1027883a 	mov	r19,r2
    7c90:	00bfffd4 	movui	r2,65535
    7c94:	14fff436 	bltu	r2,r19,7c68 <__udivdi3+0x314>
    7c98:	003f4606 	br	79b4 <__udivdi3+0x60>
    7c9c:	00804034 	movhi	r2,256
    7ca0:	10bfffc4 	addi	r2,r2,-1
    7ca4:	1200ac36 	bltu	r2,r8,7f58 <__udivdi3+0x604>
    7ca8:	01400404 	movi	r5,16
    7cac:	2805883a 	mov	r2,r5
    7cb0:	003fa806 	br	7b54 <__udivdi3+0x200>
    7cb4:	3d85c83a 	sub	r2,r7,r22
    7cb8:	3588983a 	sll	r4,r6,r22
    7cbc:	9886d83a 	srl	r3,r19,r2
    7cc0:	a8a2d83a 	srl	r17,r21,r2
    7cc4:	e084d83a 	srl	r2,fp,r2
    7cc8:	20eeb03a 	or	r23,r4,r3
    7ccc:	b824d43a 	srli	r18,r23,16
    7cd0:	ad86983a 	sll	r3,r21,r22
    7cd4:	8809883a 	mov	r4,r17
    7cd8:	900b883a 	mov	r5,r18
    7cdc:	1886b03a 	or	r3,r3,r2
    7ce0:	d8c00115 	stw	r3,4(sp)
    7ce4:	bc3fffcc 	andi	r16,r23,65535
    7ce8:	00005600 	call	560 <__udivsi3>
    7cec:	100b883a 	mov	r5,r2
    7cf0:	8009883a 	mov	r4,r16
    7cf4:	1029883a 	mov	r20,r2
    7cf8:	00005700 	call	570 <__mulsi3>
    7cfc:	900b883a 	mov	r5,r18
    7d00:	8809883a 	mov	r4,r17
    7d04:	102b883a 	mov	r21,r2
    7d08:	00005680 	call	568 <__umodsi3>
    7d0c:	d9400117 	ldw	r5,4(sp)
    7d10:	1004943a 	slli	r2,r2,16
    7d14:	9da6983a 	sll	r19,r19,r22
    7d18:	2806d43a 	srli	r3,r5,16
    7d1c:	10c4b03a 	or	r2,r2,r3
    7d20:	1540032e 	bgeu	r2,r21,7d30 <__udivdi3+0x3dc>
    7d24:	15c5883a 	add	r2,r2,r23
    7d28:	a53fffc4 	addi	r20,r20,-1
    7d2c:	15c0912e 	bgeu	r2,r23,7f74 <__udivdi3+0x620>
    7d30:	1563c83a 	sub	r17,r2,r21
    7d34:	8809883a 	mov	r4,r17
    7d38:	900b883a 	mov	r5,r18
    7d3c:	00005600 	call	560 <__udivsi3>
    7d40:	100b883a 	mov	r5,r2
    7d44:	8009883a 	mov	r4,r16
    7d48:	102b883a 	mov	r21,r2
    7d4c:	00005700 	call	570 <__mulsi3>
    7d50:	8809883a 	mov	r4,r17
    7d54:	900b883a 	mov	r5,r18
    7d58:	1021883a 	mov	r16,r2
    7d5c:	00005680 	call	568 <__umodsi3>
    7d60:	da800117 	ldw	r10,4(sp)
    7d64:	1004943a 	slli	r2,r2,16
    7d68:	50ffffcc 	andi	r3,r10,65535
    7d6c:	10c6b03a 	or	r3,r2,r3
    7d70:	1c00032e 	bgeu	r3,r16,7d80 <__udivdi3+0x42c>
    7d74:	1dc7883a 	add	r3,r3,r23
    7d78:	ad7fffc4 	addi	r21,r21,-1
    7d7c:	1dc0792e 	bgeu	r3,r23,7f64 <__udivdi3+0x610>
    7d80:	a004943a 	slli	r2,r20,16
    7d84:	982ed43a 	srli	r23,r19,16
    7d88:	9cffffcc 	andi	r19,r19,65535
    7d8c:	a8a4b03a 	or	r18,r21,r2
    7d90:	947fffcc 	andi	r17,r18,65535
    7d94:	902ad43a 	srli	r21,r18,16
    7d98:	8809883a 	mov	r4,r17
    7d9c:	980b883a 	mov	r5,r19
    7da0:	1c21c83a 	sub	r16,r3,r16
    7da4:	00005700 	call	570 <__mulsi3>
    7da8:	8809883a 	mov	r4,r17
    7dac:	b80b883a 	mov	r5,r23
    7db0:	1029883a 	mov	r20,r2
    7db4:	00005700 	call	570 <__mulsi3>
    7db8:	980b883a 	mov	r5,r19
    7dbc:	a809883a 	mov	r4,r21
    7dc0:	1023883a 	mov	r17,r2
    7dc4:	00005700 	call	570 <__mulsi3>
    7dc8:	a809883a 	mov	r4,r21
    7dcc:	b80b883a 	mov	r5,r23
    7dd0:	1027883a 	mov	r19,r2
    7dd4:	00005700 	call	570 <__mulsi3>
    7dd8:	1009883a 	mov	r4,r2
    7ddc:	a004d43a 	srli	r2,r20,16
    7de0:	8ce3883a 	add	r17,r17,r19
    7de4:	1447883a 	add	r3,r2,r17
    7de8:	1cc0022e 	bgeu	r3,r19,7df4 <__udivdi3+0x4a0>
    7dec:	00800074 	movhi	r2,1
    7df0:	2089883a 	add	r4,r4,r2
    7df4:	1804d43a 	srli	r2,r3,16
    7df8:	2085883a 	add	r2,r4,r2
    7dfc:	80804436 	bltu	r16,r2,7f10 <__udivdi3+0x5bc>
    7e00:	80803e26 	beq	r16,r2,7efc <__udivdi3+0x5a8>
    7e04:	9005883a 	mov	r2,r18
    7e08:	0009883a 	mov	r4,zero
    7e0c:	003f3a06 	br	7af8 <__udivdi3+0x1a4>
    7e10:	9d26983a 	sll	r19,r19,r20
    7e14:	3505c83a 	sub	r2,r6,r20
    7e18:	a8a2d83a 	srl	r17,r21,r2
    7e1c:	982ed43a 	srli	r23,r19,16
    7e20:	e084d83a 	srl	r2,fp,r2
    7e24:	ad06983a 	sll	r3,r21,r20
    7e28:	8809883a 	mov	r4,r17
    7e2c:	b80b883a 	mov	r5,r23
    7e30:	1886b03a 	or	r3,r3,r2
    7e34:	d8c00015 	stw	r3,0(sp)
    7e38:	9dbfffcc 	andi	r22,r19,65535
    7e3c:	00005600 	call	560 <__udivsi3>
    7e40:	100b883a 	mov	r5,r2
    7e44:	b009883a 	mov	r4,r22
    7e48:	d8800215 	stw	r2,8(sp)
    7e4c:	00005700 	call	570 <__mulsi3>
    7e50:	8809883a 	mov	r4,r17
    7e54:	b80b883a 	mov	r5,r23
    7e58:	102b883a 	mov	r21,r2
    7e5c:	00005680 	call	568 <__umodsi3>
    7e60:	d9000017 	ldw	r4,0(sp)
    7e64:	1004943a 	slli	r2,r2,16
    7e68:	2006d43a 	srli	r3,r4,16
    7e6c:	10c4b03a 	or	r2,r2,r3
    7e70:	1540052e 	bgeu	r2,r21,7e88 <__udivdi3+0x534>
    7e74:	d9400217 	ldw	r5,8(sp)
    7e78:	14c5883a 	add	r2,r2,r19
    7e7c:	297fffc4 	addi	r5,r5,-1
    7e80:	d9400215 	stw	r5,8(sp)
    7e84:	14c0462e 	bgeu	r2,r19,7fa0 <__udivdi3+0x64c>
    7e88:	1563c83a 	sub	r17,r2,r21
    7e8c:	8809883a 	mov	r4,r17
    7e90:	b80b883a 	mov	r5,r23
    7e94:	00005600 	call	560 <__udivsi3>
    7e98:	100b883a 	mov	r5,r2
    7e9c:	b009883a 	mov	r4,r22
    7ea0:	1025883a 	mov	r18,r2
    7ea4:	00005700 	call	570 <__mulsi3>
    7ea8:	8809883a 	mov	r4,r17
    7eac:	b80b883a 	mov	r5,r23
    7eb0:	1021883a 	mov	r16,r2
    7eb4:	00005680 	call	568 <__umodsi3>
    7eb8:	da800017 	ldw	r10,0(sp)
    7ebc:	1004943a 	slli	r2,r2,16
    7ec0:	50ffffcc 	andi	r3,r10,65535
    7ec4:	10c6b03a 	or	r3,r2,r3
    7ec8:	1c00062e 	bgeu	r3,r16,7ee4 <__udivdi3+0x590>
    7ecc:	1cc7883a 	add	r3,r3,r19
    7ed0:	94bfffc4 	addi	r18,r18,-1
    7ed4:	1cc00336 	bltu	r3,r19,7ee4 <__udivdi3+0x590>
    7ed8:	1c00022e 	bgeu	r3,r16,7ee4 <__udivdi3+0x590>
    7edc:	94bfffc4 	addi	r18,r18,-1
    7ee0:	1cc7883a 	add	r3,r3,r19
    7ee4:	d9000217 	ldw	r4,8(sp)
    7ee8:	e538983a 	sll	fp,fp,r20
    7eec:	1c2bc83a 	sub	r21,r3,r16
    7ef0:	2004943a 	slli	r2,r4,16
    7ef4:	90a8b03a 	or	r20,r18,r2
    7ef8:	003ebf06 	br	79f8 <__udivdi3+0xa4>
    7efc:	1804943a 	slli	r2,r3,16
    7f00:	e588983a 	sll	r4,fp,r22
    7f04:	a0ffffcc 	andi	r3,r20,65535
    7f08:	10c5883a 	add	r2,r2,r3
    7f0c:	20bfbd2e 	bgeu	r4,r2,7e04 <__udivdi3+0x4b0>
    7f10:	90bfffc4 	addi	r2,r18,-1
    7f14:	0009883a 	mov	r4,zero
    7f18:	003ef706 	br	7af8 <__udivdi3+0x1a4>
    7f1c:	01400204 	movi	r5,8
    7f20:	2805883a 	mov	r2,r5
    7f24:	003ee706 	br	7ac4 <__udivdi3+0x170>
    7f28:	01400604 	movi	r5,24
    7f2c:	2805883a 	mov	r2,r5
    7f30:	003ee406 	br	7ac4 <__udivdi3+0x170>
    7f34:	01400204 	movi	r5,8
    7f38:	2805883a 	mov	r2,r5
    7f3c:	003ea106 	br	79c4 <__udivdi3+0x70>
    7f40:	01400604 	movi	r5,24
    7f44:	2805883a 	mov	r2,r5
    7f48:	003e9e06 	br	79c4 <__udivdi3+0x70>
    7f4c:	01400204 	movi	r5,8
    7f50:	2805883a 	mov	r2,r5
    7f54:	003eff06 	br	7b54 <__udivdi3+0x200>
    7f58:	01400604 	movi	r5,24
    7f5c:	2805883a 	mov	r2,r5
    7f60:	003efc06 	br	7b54 <__udivdi3+0x200>
    7f64:	1c3f862e 	bgeu	r3,r16,7d80 <__udivdi3+0x42c>
    7f68:	1dc7883a 	add	r3,r3,r23
    7f6c:	ad7fffc4 	addi	r21,r21,-1
    7f70:	003f8306 	br	7d80 <__udivdi3+0x42c>
    7f74:	157f6e2e 	bgeu	r2,r21,7d30 <__udivdi3+0x3dc>
    7f78:	a53fffc4 	addi	r20,r20,-1
    7f7c:	15c5883a 	add	r2,r2,r23
    7f80:	003f6b06 	br	7d30 <__udivdi3+0x3dc>
    7f84:	ad7fffc4 	addi	r21,r21,-1
    7f88:	003ec206 	br	7a94 <__udivdi3+0x140>
    7f8c:	843fffc4 	addi	r16,r16,-1
    7f90:	14c5883a 	add	r2,r2,r19
    7f94:	003f1306 	br	7be4 <__udivdi3+0x290>
    7f98:	ad7fffc4 	addi	r21,r21,-1
    7f9c:	003f2506 	br	7c34 <__udivdi3+0x2e0>
    7fa0:	157fb92e 	bgeu	r2,r21,7e88 <__udivdi3+0x534>
    7fa4:	297fffc4 	addi	r5,r5,-1
    7fa8:	14c5883a 	add	r2,r2,r19
    7fac:	d9400215 	stw	r5,8(sp)
    7fb0:	003fb506 	br	7e88 <__udivdi3+0x534>
    7fb4:	843fffc4 	addi	r16,r16,-1
    7fb8:	14c5883a 	add	r2,r2,r19
    7fbc:	003ea106 	br	7a44 <__udivdi3+0xf0>

00007fc0 <__umoddi3>:
    7fc0:	defff004 	addi	sp,sp,-64
    7fc4:	3011883a 	mov	r8,r6
    7fc8:	000d883a 	mov	r6,zero
    7fcc:	dd400b15 	stw	r21,44(sp)
    7fd0:	dcc00915 	stw	r19,36(sp)
    7fd4:	dc000615 	stw	r16,24(sp)
    7fd8:	dfc00f15 	stw	ra,60(sp)
    7fdc:	df000e15 	stw	fp,56(sp)
    7fe0:	ddc00d15 	stw	r23,52(sp)
    7fe4:	dd800c15 	stw	r22,48(sp)
    7fe8:	dd000a15 	stw	r20,40(sp)
    7fec:	dc800815 	stw	r18,32(sp)
    7ff0:	dc400715 	stw	r17,28(sp)
    7ff4:	2817883a 	mov	r11,r5
    7ff8:	d9800415 	stw	r6,16(sp)
    7ffc:	4027883a 	mov	r19,r8
    8000:	d9800515 	stw	r6,20(sp)
    8004:	2021883a 	mov	r16,r4
    8008:	282b883a 	mov	r21,r5
    800c:	38002c1e 	bne	r7,zero,80c0 <__umoddi3+0x100>
    8010:	2a005636 	bltu	r5,r8,816c <__umoddi3+0x1ac>
    8014:	40009a26 	beq	r8,zero,8280 <__umoddi3+0x2c0>
    8018:	00bfffd4 	movui	r2,65535
    801c:	14c09236 	bltu	r2,r19,8268 <__umoddi3+0x2a8>
    8020:	00803fc4 	movi	r2,255
    8024:	14c15c36 	bltu	r2,r19,8598 <__umoddi3+0x5d8>
    8028:	000b883a 	mov	r5,zero
    802c:	0005883a 	mov	r2,zero
    8030:	9884d83a 	srl	r2,r19,r2
    8034:	01000074 	movhi	r4,1
    8038:	21329904 	addi	r4,r4,-13724
    803c:	01800804 	movi	r6,32
    8040:	1105883a 	add	r2,r2,r4
    8044:	10c00003 	ldbu	r3,0(r2)
    8048:	28c7883a 	add	r3,r5,r3
    804c:	30e5c83a 	sub	r18,r6,r3
    8050:	9000a41e 	bne	r18,zero,82e4 <__umoddi3+0x324>
    8054:	982ed43a 	srli	r23,r19,16
    8058:	acebc83a 	sub	r21,r21,r19
    805c:	9d3fffcc 	andi	r20,r19,65535
    8060:	002d883a 	mov	r22,zero
    8064:	a809883a 	mov	r4,r21
    8068:	b80b883a 	mov	r5,r23
    806c:	00005600 	call	560 <__udivsi3>
    8070:	100b883a 	mov	r5,r2
    8074:	a009883a 	mov	r4,r20
    8078:	00005700 	call	570 <__mulsi3>
    807c:	a809883a 	mov	r4,r21
    8080:	b80b883a 	mov	r5,r23
    8084:	1023883a 	mov	r17,r2
    8088:	00005680 	call	568 <__umodsi3>
    808c:	1004943a 	slli	r2,r2,16
    8090:	8006d43a 	srli	r3,r16,16
    8094:	10c4b03a 	or	r2,r2,r3
    8098:	1440032e 	bgeu	r2,r17,80a8 <__umoddi3+0xe8>
    809c:	14c5883a 	add	r2,r2,r19
    80a0:	14c00136 	bltu	r2,r19,80a8 <__umoddi3+0xe8>
    80a4:	14415836 	bltu	r2,r17,8608 <__umoddi3+0x648>
    80a8:	1463c83a 	sub	r17,r2,r17
    80ac:	8809883a 	mov	r4,r17
    80b0:	b80b883a 	mov	r5,r23
    80b4:	00005600 	call	560 <__udivsi3>
    80b8:	a009883a 	mov	r4,r20
    80bc:	00005306 	br	820c <__umoddi3+0x24c>
    80c0:	380d883a 	mov	r6,r7
    80c4:	29c0132e 	bgeu	r5,r7,8114 <__umoddi3+0x154>
    80c8:	d9000415 	stw	r4,16(sp)
    80cc:	d9400515 	stw	r5,20(sp)
    80d0:	d9400417 	ldw	r5,16(sp)
    80d4:	5813883a 	mov	r9,r11
    80d8:	2811883a 	mov	r8,r5
    80dc:	4005883a 	mov	r2,r8
    80e0:	4807883a 	mov	r3,r9
    80e4:	dfc00f17 	ldw	ra,60(sp)
    80e8:	df000e17 	ldw	fp,56(sp)
    80ec:	ddc00d17 	ldw	r23,52(sp)
    80f0:	dd800c17 	ldw	r22,48(sp)
    80f4:	dd400b17 	ldw	r21,44(sp)
    80f8:	dd000a17 	ldw	r20,40(sp)
    80fc:	dcc00917 	ldw	r19,36(sp)
    8100:	dc800817 	ldw	r18,32(sp)
    8104:	dc400717 	ldw	r17,28(sp)
    8108:	dc000617 	ldw	r16,24(sp)
    810c:	dec01004 	addi	sp,sp,64
    8110:	f800283a 	ret
    8114:	00bfffd4 	movui	r2,65535
    8118:	11c06636 	bltu	r2,r7,82b4 <__umoddi3+0x2f4>
    811c:	00803fc4 	movi	r2,255
    8120:	11c12036 	bltu	r2,r7,85a4 <__umoddi3+0x5e4>
    8124:	000b883a 	mov	r5,zero
    8128:	0005883a 	mov	r2,zero
    812c:	3084d83a 	srl	r2,r6,r2
    8130:	01000074 	movhi	r4,1
    8134:	21329904 	addi	r4,r4,-13724
    8138:	01c00804 	movi	r7,32
    813c:	1105883a 	add	r2,r2,r4
    8140:	10c00003 	ldbu	r3,0(r2)
    8144:	28c7883a 	add	r3,r5,r3
    8148:	38e5c83a 	sub	r18,r7,r3
    814c:	9000941e 	bne	r18,zero,83a0 <__umoddi3+0x3e0>
    8150:	35405e36 	bltu	r6,r21,82cc <__umoddi3+0x30c>
    8154:	84c05d2e 	bgeu	r16,r19,82cc <__umoddi3+0x30c>
    8158:	8011883a 	mov	r8,r16
    815c:	a813883a 	mov	r9,r21
    8160:	dc000415 	stw	r16,16(sp)
    8164:	dd400515 	stw	r21,20(sp)
    8168:	003fdc06 	br	80dc <__umoddi3+0x11c>
    816c:	00bfffd4 	movui	r2,65535
    8170:	12004a36 	bltu	r2,r8,829c <__umoddi3+0x2dc>
    8174:	00803fc4 	movi	r2,255
    8178:	12010d36 	bltu	r2,r8,85b0 <__umoddi3+0x5f0>
    817c:	000b883a 	mov	r5,zero
    8180:	0005883a 	mov	r2,zero
    8184:	9884d83a 	srl	r2,r19,r2
    8188:	01000074 	movhi	r4,1
    818c:	21329904 	addi	r4,r4,-13724
    8190:	01800804 	movi	r6,32
    8194:	1105883a 	add	r2,r2,r4
    8198:	10c00003 	ldbu	r3,0(r2)
    819c:	28c7883a 	add	r3,r5,r3
    81a0:	30c7c83a 	sub	r3,r6,r3
    81a4:	1800dc1e 	bne	r3,zero,8518 <__umoddi3+0x558>
    81a8:	002d883a 	mov	r22,zero
    81ac:	982ed43a 	srli	r23,r19,16
    81b0:	a809883a 	mov	r4,r21
    81b4:	9cbfffcc 	andi	r18,r19,65535
    81b8:	b80b883a 	mov	r5,r23
    81bc:	00005600 	call	560 <__udivsi3>
    81c0:	100b883a 	mov	r5,r2
    81c4:	9009883a 	mov	r4,r18
    81c8:	00005700 	call	570 <__mulsi3>
    81cc:	a809883a 	mov	r4,r21
    81d0:	b80b883a 	mov	r5,r23
    81d4:	1023883a 	mov	r17,r2
    81d8:	00005680 	call	568 <__umodsi3>
    81dc:	1004943a 	slli	r2,r2,16
    81e0:	8006d43a 	srli	r3,r16,16
    81e4:	10c4b03a 	or	r2,r2,r3
    81e8:	1440032e 	bgeu	r2,r17,81f8 <__umoddi3+0x238>
    81ec:	14c5883a 	add	r2,r2,r19
    81f0:	14c00136 	bltu	r2,r19,81f8 <__umoddi3+0x238>
    81f4:	14410236 	bltu	r2,r17,8600 <__umoddi3+0x640>
    81f8:	1463c83a 	sub	r17,r2,r17
    81fc:	8809883a 	mov	r4,r17
    8200:	b80b883a 	mov	r5,r23
    8204:	00005600 	call	560 <__udivsi3>
    8208:	9009883a 	mov	r4,r18
    820c:	100b883a 	mov	r5,r2
    8210:	00005700 	call	570 <__mulsi3>
    8214:	8809883a 	mov	r4,r17
    8218:	b80b883a 	mov	r5,r23
    821c:	102b883a 	mov	r21,r2
    8220:	00005680 	call	568 <__umodsi3>
    8224:	1004943a 	slli	r2,r2,16
    8228:	80ffffcc 	andi	r3,r16,65535
    822c:	10c4b03a 	or	r2,r2,r3
    8230:	1540042e 	bgeu	r2,r21,8244 <__umoddi3+0x284>
    8234:	14c5883a 	add	r2,r2,r19
    8238:	14c00236 	bltu	r2,r19,8244 <__umoddi3+0x284>
    823c:	1540012e 	bgeu	r2,r21,8244 <__umoddi3+0x284>
    8240:	14c5883a 	add	r2,r2,r19
    8244:	1545c83a 	sub	r2,r2,r21
    8248:	1584d83a 	srl	r2,r2,r22
    824c:	0013883a 	mov	r9,zero
    8250:	d8800415 	stw	r2,16(sp)
    8254:	d8c00417 	ldw	r3,16(sp)
    8258:	0005883a 	mov	r2,zero
    825c:	d8800515 	stw	r2,20(sp)
    8260:	1811883a 	mov	r8,r3
    8264:	003f9d06 	br	80dc <__umoddi3+0x11c>
    8268:	00804034 	movhi	r2,256
    826c:	10bfffc4 	addi	r2,r2,-1
    8270:	14c0c636 	bltu	r2,r19,858c <__umoddi3+0x5cc>
    8274:	01400404 	movi	r5,16
    8278:	2805883a 	mov	r2,r5
    827c:	003f6c06 	br	8030 <__umoddi3+0x70>
    8280:	01000044 	movi	r4,1
    8284:	000b883a 	mov	r5,zero
    8288:	00005600 	call	560 <__udivsi3>
    828c:	1027883a 	mov	r19,r2
    8290:	00bfffd4 	movui	r2,65535
    8294:	14fff436 	bltu	r2,r19,8268 <__umoddi3+0x2a8>
    8298:	003f6106 	br	8020 <__umoddi3+0x60>
    829c:	00804034 	movhi	r2,256
    82a0:	10bfffc4 	addi	r2,r2,-1
    82a4:	1200c536 	bltu	r2,r8,85bc <__umoddi3+0x5fc>
    82a8:	01400404 	movi	r5,16
    82ac:	2805883a 	mov	r2,r5
    82b0:	003fb406 	br	8184 <__umoddi3+0x1c4>
    82b4:	00804034 	movhi	r2,256
    82b8:	10bfffc4 	addi	r2,r2,-1
    82bc:	11c0c236 	bltu	r2,r7,85c8 <__umoddi3+0x608>
    82c0:	01400404 	movi	r5,16
    82c4:	2805883a 	mov	r2,r5
    82c8:	003f9806 	br	812c <__umoddi3+0x16c>
    82cc:	84c9c83a 	sub	r4,r16,r19
    82d0:	8105803a 	cmpltu	r2,r16,r4
    82d4:	a987c83a 	sub	r3,r21,r6
    82d8:	18abc83a 	sub	r21,r3,r2
    82dc:	2021883a 	mov	r16,r4
    82e0:	003f9d06 	br	8158 <__umoddi3+0x198>
    82e4:	9ca6983a 	sll	r19,r19,r18
    82e8:	3485c83a 	sub	r2,r6,r18
    82ec:	a8a2d83a 	srl	r17,r21,r2
    82f0:	982ed43a 	srli	r23,r19,16
    82f4:	ac86983a 	sll	r3,r21,r18
    82f8:	8084d83a 	srl	r2,r16,r2
    82fc:	8809883a 	mov	r4,r17
    8300:	b80b883a 	mov	r5,r23
    8304:	18b8b03a 	or	fp,r3,r2
    8308:	9d3fffcc 	andi	r20,r19,65535
    830c:	00005600 	call	560 <__udivsi3>
    8310:	100b883a 	mov	r5,r2
    8314:	a009883a 	mov	r4,r20
    8318:	00005700 	call	570 <__mulsi3>
    831c:	8809883a 	mov	r4,r17
    8320:	b80b883a 	mov	r5,r23
    8324:	102b883a 	mov	r21,r2
    8328:	00005680 	call	568 <__umodsi3>
    832c:	1004943a 	slli	r2,r2,16
    8330:	e006d43a 	srli	r3,fp,16
    8334:	902d883a 	mov	r22,r18
    8338:	10c4b03a 	or	r2,r2,r3
    833c:	1540022e 	bgeu	r2,r21,8348 <__umoddi3+0x388>
    8340:	14c5883a 	add	r2,r2,r19
    8344:	14c0ab2e 	bgeu	r2,r19,85f4 <__umoddi3+0x634>
    8348:	1563c83a 	sub	r17,r2,r21
    834c:	8809883a 	mov	r4,r17
    8350:	b80b883a 	mov	r5,r23
    8354:	00005600 	call	560 <__udivsi3>
    8358:	100b883a 	mov	r5,r2
    835c:	a009883a 	mov	r4,r20
    8360:	00005700 	call	570 <__mulsi3>
    8364:	8809883a 	mov	r4,r17
    8368:	b80b883a 	mov	r5,r23
    836c:	102b883a 	mov	r21,r2
    8370:	00005680 	call	568 <__umodsi3>
    8374:	1004943a 	slli	r2,r2,16
    8378:	e0ffffcc 	andi	r3,fp,65535
    837c:	10c4b03a 	or	r2,r2,r3
    8380:	1540042e 	bgeu	r2,r21,8394 <__umoddi3+0x3d4>
    8384:	14c5883a 	add	r2,r2,r19
    8388:	14c00236 	bltu	r2,r19,8394 <__umoddi3+0x3d4>
    838c:	1540012e 	bgeu	r2,r21,8394 <__umoddi3+0x3d4>
    8390:	14c5883a 	add	r2,r2,r19
    8394:	84a0983a 	sll	r16,r16,r18
    8398:	156bc83a 	sub	r21,r2,r21
    839c:	003f3106 	br	8064 <__umoddi3+0xa4>
    83a0:	3c8fc83a 	sub	r7,r7,r18
    83a4:	3486983a 	sll	r3,r6,r18
    83a8:	99c4d83a 	srl	r2,r19,r7
    83ac:	a9e2d83a 	srl	r17,r21,r7
    83b0:	ac8c983a 	sll	r6,r21,r18
    83b4:	18acb03a 	or	r22,r3,r2
    83b8:	b02ed43a 	srli	r23,r22,16
    83bc:	81c4d83a 	srl	r2,r16,r7
    83c0:	8809883a 	mov	r4,r17
    83c4:	b80b883a 	mov	r5,r23
    83c8:	308cb03a 	or	r6,r6,r2
    83cc:	d9c00315 	stw	r7,12(sp)
    83d0:	d9800215 	stw	r6,8(sp)
    83d4:	b53fffcc 	andi	r20,r22,65535
    83d8:	00005600 	call	560 <__udivsi3>
    83dc:	100b883a 	mov	r5,r2
    83e0:	a009883a 	mov	r4,r20
    83e4:	1039883a 	mov	fp,r2
    83e8:	00005700 	call	570 <__mulsi3>
    83ec:	8809883a 	mov	r4,r17
    83f0:	b80b883a 	mov	r5,r23
    83f4:	102b883a 	mov	r21,r2
    83f8:	00005680 	call	568 <__umodsi3>
    83fc:	d9000217 	ldw	r4,8(sp)
    8400:	1004943a 	slli	r2,r2,16
    8404:	9ca6983a 	sll	r19,r19,r18
    8408:	2006d43a 	srli	r3,r4,16
    840c:	84a0983a 	sll	r16,r16,r18
    8410:	dcc00015 	stw	r19,0(sp)
    8414:	10c4b03a 	or	r2,r2,r3
    8418:	dc000115 	stw	r16,4(sp)
    841c:	1540032e 	bgeu	r2,r21,842c <__umoddi3+0x46c>
    8420:	1585883a 	add	r2,r2,r22
    8424:	e73fffc4 	addi	fp,fp,-1
    8428:	15806e2e 	bgeu	r2,r22,85e4 <__umoddi3+0x624>
    842c:	1563c83a 	sub	r17,r2,r21
    8430:	8809883a 	mov	r4,r17
    8434:	b80b883a 	mov	r5,r23
    8438:	00005600 	call	560 <__udivsi3>
    843c:	100b883a 	mov	r5,r2
    8440:	a009883a 	mov	r4,r20
    8444:	1021883a 	mov	r16,r2
    8448:	00005700 	call	570 <__mulsi3>
    844c:	b80b883a 	mov	r5,r23
    8450:	8809883a 	mov	r4,r17
    8454:	1029883a 	mov	r20,r2
    8458:	00005680 	call	568 <__umodsi3>
    845c:	d9400217 	ldw	r5,8(sp)
    8460:	1004943a 	slli	r2,r2,16
    8464:	28ffffcc 	andi	r3,r5,65535
    8468:	10c4b03a 	or	r2,r2,r3
    846c:	1500032e 	bgeu	r2,r20,847c <__umoddi3+0x4bc>
    8470:	1585883a 	add	r2,r2,r22
    8474:	843fffc4 	addi	r16,r16,-1
    8478:	1580562e 	bgeu	r2,r22,85d4 <__umoddi3+0x614>
    847c:	d9800017 	ldw	r6,0(sp)
    8480:	e022943a 	slli	r17,fp,16
    8484:	302ed43a 	srli	r23,r6,16
    8488:	8462b03a 	or	r17,r16,r17
    848c:	34ffffcc 	andi	r19,r6,65535
    8490:	882ad43a 	srli	r21,r17,16
    8494:	8c7fffcc 	andi	r17,r17,65535
    8498:	8809883a 	mov	r4,r17
    849c:	980b883a 	mov	r5,r19
    84a0:	1521c83a 	sub	r16,r2,r20
    84a4:	00005700 	call	570 <__mulsi3>
    84a8:	8809883a 	mov	r4,r17
    84ac:	b80b883a 	mov	r5,r23
    84b0:	1029883a 	mov	r20,r2
    84b4:	00005700 	call	570 <__mulsi3>
    84b8:	980b883a 	mov	r5,r19
    84bc:	a809883a 	mov	r4,r21
    84c0:	1023883a 	mov	r17,r2
    84c4:	00005700 	call	570 <__mulsi3>
    84c8:	a809883a 	mov	r4,r21
    84cc:	b80b883a 	mov	r5,r23
    84d0:	1027883a 	mov	r19,r2
    84d4:	00005700 	call	570 <__mulsi3>
    84d8:	100b883a 	mov	r5,r2
    84dc:	a004d43a 	srli	r2,r20,16
    84e0:	8ce3883a 	add	r17,r17,r19
    84e4:	1449883a 	add	r4,r2,r17
    84e8:	24c0022e 	bgeu	r4,r19,84f4 <__umoddi3+0x534>
    84ec:	00800074 	movhi	r2,1
    84f0:	288b883a 	add	r5,r5,r2
    84f4:	2004d43a 	srli	r2,r4,16
    84f8:	2008943a 	slli	r4,r4,16
    84fc:	a0ffffcc 	andi	r3,r20,65535
    8500:	288d883a 	add	r6,r5,r2
    8504:	20c9883a 	add	r4,r4,r3
    8508:	81800b36 	bltu	r16,r6,8538 <__umoddi3+0x578>
    850c:	81804026 	beq	r16,r6,8610 <__umoddi3+0x650>
    8510:	818dc83a 	sub	r6,r16,r6
    8514:	00000f06 	br	8554 <__umoddi3+0x594>
    8518:	30c5c83a 	sub	r2,r6,r3
    851c:	182d883a 	mov	r22,r3
    8520:	8084d83a 	srl	r2,r16,r2
    8524:	a8c6983a 	sll	r3,r21,r3
    8528:	9da6983a 	sll	r19,r19,r22
    852c:	85a0983a 	sll	r16,r16,r22
    8530:	18aab03a 	or	r21,r3,r2
    8534:	003f1d06 	br	81ac <__umoddi3+0x1ec>
    8538:	d8c00017 	ldw	r3,0(sp)
    853c:	20c5c83a 	sub	r2,r4,r3
    8540:	2089803a 	cmpltu	r4,r4,r2
    8544:	3587c83a 	sub	r3,r6,r22
    8548:	1907c83a 	sub	r3,r3,r4
    854c:	80cdc83a 	sub	r6,r16,r3
    8550:	1009883a 	mov	r4,r2
    8554:	d9400117 	ldw	r5,4(sp)
    8558:	2905c83a 	sub	r2,r5,r4
    855c:	2887803a 	cmpltu	r3,r5,r2
    8560:	30c7c83a 	sub	r3,r6,r3
    8564:	d9800317 	ldw	r6,12(sp)
    8568:	1484d83a 	srl	r2,r2,r18
    856c:	1988983a 	sll	r4,r3,r6
    8570:	1c86d83a 	srl	r3,r3,r18
    8574:	2088b03a 	or	r4,r4,r2
    8578:	2011883a 	mov	r8,r4
    857c:	1813883a 	mov	r9,r3
    8580:	d9000415 	stw	r4,16(sp)
    8584:	d8c00515 	stw	r3,20(sp)
    8588:	003ed406 	br	80dc <__umoddi3+0x11c>
    858c:	01400604 	movi	r5,24
    8590:	2805883a 	mov	r2,r5
    8594:	003ea606 	br	8030 <__umoddi3+0x70>
    8598:	01400204 	movi	r5,8
    859c:	2805883a 	mov	r2,r5
    85a0:	003ea306 	br	8030 <__umoddi3+0x70>
    85a4:	01400204 	movi	r5,8
    85a8:	2805883a 	mov	r2,r5
    85ac:	003edf06 	br	812c <__umoddi3+0x16c>
    85b0:	01400204 	movi	r5,8
    85b4:	2805883a 	mov	r2,r5
    85b8:	003ef206 	br	8184 <__umoddi3+0x1c4>
    85bc:	01400604 	movi	r5,24
    85c0:	2805883a 	mov	r2,r5
    85c4:	003eef06 	br	8184 <__umoddi3+0x1c4>
    85c8:	01400604 	movi	r5,24
    85cc:	2805883a 	mov	r2,r5
    85d0:	003ed606 	br	812c <__umoddi3+0x16c>
    85d4:	153fa92e 	bgeu	r2,r20,847c <__umoddi3+0x4bc>
    85d8:	843fffc4 	addi	r16,r16,-1
    85dc:	1585883a 	add	r2,r2,r22
    85e0:	003fa606 	br	847c <__umoddi3+0x4bc>
    85e4:	157f912e 	bgeu	r2,r21,842c <__umoddi3+0x46c>
    85e8:	e73fffc4 	addi	fp,fp,-1
    85ec:	1585883a 	add	r2,r2,r22
    85f0:	003f8e06 	br	842c <__umoddi3+0x46c>
    85f4:	157f542e 	bgeu	r2,r21,8348 <__umoddi3+0x388>
    85f8:	14c5883a 	add	r2,r2,r19
    85fc:	003f5206 	br	8348 <__umoddi3+0x388>
    8600:	14c5883a 	add	r2,r2,r19
    8604:	003efc06 	br	81f8 <__umoddi3+0x238>
    8608:	14c5883a 	add	r2,r2,r19
    860c:	003ea606 	br	80a8 <__umoddi3+0xe8>
    8610:	d8800117 	ldw	r2,4(sp)
    8614:	113fc836 	bltu	r2,r4,8538 <__umoddi3+0x578>
    8618:	000d883a 	mov	r6,zero
    861c:	003fcd06 	br	8554 <__umoddi3+0x594>

00008620 <_fpadd_parts>:
    8620:	defff804 	addi	sp,sp,-32
    8624:	dcc00315 	stw	r19,12(sp)
    8628:	2027883a 	mov	r19,r4
    862c:	21000017 	ldw	r4,0(r4)
    8630:	00c00044 	movi	r3,1
    8634:	dd400515 	stw	r21,20(sp)
    8638:	dd000415 	stw	r20,16(sp)
    863c:	ddc00715 	stw	r23,28(sp)
    8640:	dd800615 	stw	r22,24(sp)
    8644:	dc800215 	stw	r18,8(sp)
    8648:	dc400115 	stw	r17,4(sp)
    864c:	dc000015 	stw	r16,0(sp)
    8650:	282b883a 	mov	r21,r5
    8654:	3029883a 	mov	r20,r6
    8658:	1900632e 	bgeu	r3,r4,87e8 <_fpadd_parts+0x1c8>
    865c:	28800017 	ldw	r2,0(r5)
    8660:	1880812e 	bgeu	r3,r2,8868 <_fpadd_parts+0x248>
    8664:	00c00104 	movi	r3,4
    8668:	20c0dc26 	beq	r4,r3,89dc <_fpadd_parts+0x3bc>
    866c:	10c07e26 	beq	r2,r3,8868 <_fpadd_parts+0x248>
    8670:	00c00084 	movi	r3,2
    8674:	10c06726 	beq	r2,r3,8814 <_fpadd_parts+0x1f4>
    8678:	20c07b26 	beq	r4,r3,8868 <_fpadd_parts+0x248>
    867c:	9dc00217 	ldw	r23,8(r19)
    8680:	28c00217 	ldw	r3,8(r5)
    8684:	9c400317 	ldw	r17,12(r19)
    8688:	2bc00317 	ldw	r15,12(r5)
    868c:	b8cdc83a 	sub	r6,r23,r3
    8690:	9c800417 	ldw	r18,16(r19)
    8694:	2c000417 	ldw	r16,16(r5)
    8698:	3009883a 	mov	r4,r6
    869c:	30009716 	blt	r6,zero,88fc <_fpadd_parts+0x2dc>
    86a0:	00800fc4 	movi	r2,63
    86a4:	11806b16 	blt	r2,r6,8854 <_fpadd_parts+0x234>
    86a8:	0100a40e 	bge	zero,r4,893c <_fpadd_parts+0x31c>
    86ac:	35bff804 	addi	r22,r6,-32
    86b0:	b000bc16 	blt	r22,zero,89a4 <_fpadd_parts+0x384>
    86b4:	8596d83a 	srl	r11,r16,r22
    86b8:	0019883a 	mov	r12,zero
    86bc:	0013883a 	mov	r9,zero
    86c0:	01000044 	movi	r4,1
    86c4:	0015883a 	mov	r10,zero
    86c8:	b000be16 	blt	r22,zero,89c4 <_fpadd_parts+0x3a4>
    86cc:	2590983a 	sll	r8,r4,r22
    86d0:	000f883a 	mov	r7,zero
    86d4:	00bfffc4 	movi	r2,-1
    86d8:	3889883a 	add	r4,r7,r2
    86dc:	408b883a 	add	r5,r8,r2
    86e0:	21cd803a 	cmpltu	r6,r4,r7
    86e4:	314b883a 	add	r5,r6,r5
    86e8:	7904703a 	and	r2,r15,r4
    86ec:	8146703a 	and	r3,r16,r5
    86f0:	10c4b03a 	or	r2,r2,r3
    86f4:	10000226 	beq	r2,zero,8700 <_fpadd_parts+0xe0>
    86f8:	02400044 	movi	r9,1
    86fc:	0015883a 	mov	r10,zero
    8700:	5a5eb03a 	or	r15,r11,r9
    8704:	62a0b03a 	or	r16,r12,r10
    8708:	99400117 	ldw	r5,4(r19)
    870c:	a8800117 	ldw	r2,4(r21)
    8710:	28806e26 	beq	r5,r2,88cc <_fpadd_parts+0x2ac>
    8714:	28006626 	beq	r5,zero,88b0 <_fpadd_parts+0x290>
    8718:	7c45c83a 	sub	r2,r15,r17
    871c:	7889803a 	cmpltu	r4,r15,r2
    8720:	8487c83a 	sub	r3,r16,r18
    8724:	1909c83a 	sub	r4,r3,r4
    8728:	100d883a 	mov	r6,r2
    872c:	200f883a 	mov	r7,r4
    8730:	38007716 	blt	r7,zero,8910 <_fpadd_parts+0x2f0>
    8734:	a5c00215 	stw	r23,8(r20)
    8738:	a1c00415 	stw	r7,16(r20)
    873c:	a0000115 	stw	zero,4(r20)
    8740:	a1800315 	stw	r6,12(r20)
    8744:	a2000317 	ldw	r8,12(r20)
    8748:	a2400417 	ldw	r9,16(r20)
    874c:	00bfffc4 	movi	r2,-1
    8750:	408b883a 	add	r5,r8,r2
    8754:	2a09803a 	cmpltu	r4,r5,r8
    8758:	488d883a 	add	r6,r9,r2
    875c:	01c40034 	movhi	r7,4096
    8760:	39ffffc4 	addi	r7,r7,-1
    8764:	218d883a 	add	r6,r4,r6
    8768:	39801736 	bltu	r7,r6,87c8 <_fpadd_parts+0x1a8>
    876c:	31c06526 	beq	r6,r7,8904 <_fpadd_parts+0x2e4>
    8770:	a3000217 	ldw	r12,8(r20)
    8774:	4209883a 	add	r4,r8,r8
    8778:	00bfffc4 	movi	r2,-1
    877c:	220f803a 	cmpltu	r7,r4,r8
    8780:	4a4b883a 	add	r5,r9,r9
    8784:	394f883a 	add	r7,r7,r5
    8788:	2095883a 	add	r10,r4,r2
    878c:	3897883a 	add	r11,r7,r2
    8790:	510d803a 	cmpltu	r6,r10,r4
    8794:	6099883a 	add	r12,r12,r2
    8798:	32d7883a 	add	r11,r6,r11
    879c:	00840034 	movhi	r2,4096
    87a0:	10bfffc4 	addi	r2,r2,-1
    87a4:	2011883a 	mov	r8,r4
    87a8:	3813883a 	mov	r9,r7
    87ac:	a1000315 	stw	r4,12(r20)
    87b0:	a1c00415 	stw	r7,16(r20)
    87b4:	a3000215 	stw	r12,8(r20)
    87b8:	12c00336 	bltu	r2,r11,87c8 <_fpadd_parts+0x1a8>
    87bc:	58bfed1e 	bne	r11,r2,8774 <_fpadd_parts+0x154>
    87c0:	00bfff84 	movi	r2,-2
    87c4:	12bfeb2e 	bgeu	r2,r10,8774 <_fpadd_parts+0x154>
    87c8:	a2800417 	ldw	r10,16(r20)
    87cc:	008000c4 	movi	r2,3
    87d0:	00c80034 	movhi	r3,8192
    87d4:	18ffffc4 	addi	r3,r3,-1
    87d8:	a2400317 	ldw	r9,12(r20)
    87dc:	a0800015 	stw	r2,0(r20)
    87e0:	1a802336 	bltu	r3,r10,8870 <_fpadd_parts+0x250>
    87e4:	a027883a 	mov	r19,r20
    87e8:	9805883a 	mov	r2,r19
    87ec:	ddc00717 	ldw	r23,28(sp)
    87f0:	dd800617 	ldw	r22,24(sp)
    87f4:	dd400517 	ldw	r21,20(sp)
    87f8:	dd000417 	ldw	r20,16(sp)
    87fc:	dcc00317 	ldw	r19,12(sp)
    8800:	dc800217 	ldw	r18,8(sp)
    8804:	dc400117 	ldw	r17,4(sp)
    8808:	dc000017 	ldw	r16,0(sp)
    880c:	dec00804 	addi	sp,sp,32
    8810:	f800283a 	ret
    8814:	20fff41e 	bne	r4,r3,87e8 <_fpadd_parts+0x1c8>
    8818:	31000015 	stw	r4,0(r6)
    881c:	98800117 	ldw	r2,4(r19)
    8820:	30800115 	stw	r2,4(r6)
    8824:	98c00217 	ldw	r3,8(r19)
    8828:	30c00215 	stw	r3,8(r6)
    882c:	98800317 	ldw	r2,12(r19)
    8830:	30800315 	stw	r2,12(r6)
    8834:	98c00417 	ldw	r3,16(r19)
    8838:	30c00415 	stw	r3,16(r6)
    883c:	98800117 	ldw	r2,4(r19)
    8840:	28c00117 	ldw	r3,4(r5)
    8844:	3027883a 	mov	r19,r6
    8848:	10c4703a 	and	r2,r2,r3
    884c:	30800115 	stw	r2,4(r6)
    8850:	003fe506 	br	87e8 <_fpadd_parts+0x1c8>
    8854:	1dc02616 	blt	r3,r23,88f0 <_fpadd_parts+0x2d0>
    8858:	0023883a 	mov	r17,zero
    885c:	182f883a 	mov	r23,r3
    8860:	0025883a 	mov	r18,zero
    8864:	003fa806 	br	8708 <_fpadd_parts+0xe8>
    8868:	a827883a 	mov	r19,r21
    886c:	003fde06 	br	87e8 <_fpadd_parts+0x1c8>
    8870:	01800044 	movi	r6,1
    8874:	500497fa 	slli	r2,r10,31
    8878:	4808d07a 	srli	r4,r9,1
    887c:	518ad83a 	srl	r5,r10,r6
    8880:	a2000217 	ldw	r8,8(r20)
    8884:	1108b03a 	or	r4,r2,r4
    8888:	0007883a 	mov	r3,zero
    888c:	4984703a 	and	r2,r9,r6
    8890:	208cb03a 	or	r6,r4,r2
    8894:	28ceb03a 	or	r7,r5,r3
    8898:	42000044 	addi	r8,r8,1
    889c:	a027883a 	mov	r19,r20
    88a0:	a1c00415 	stw	r7,16(r20)
    88a4:	a2000215 	stw	r8,8(r20)
    88a8:	a1800315 	stw	r6,12(r20)
    88ac:	003fce06 	br	87e8 <_fpadd_parts+0x1c8>
    88b0:	8bc5c83a 	sub	r2,r17,r15
    88b4:	8889803a 	cmpltu	r4,r17,r2
    88b8:	9407c83a 	sub	r3,r18,r16
    88bc:	1909c83a 	sub	r4,r3,r4
    88c0:	100d883a 	mov	r6,r2
    88c4:	200f883a 	mov	r7,r4
    88c8:	003f9906 	br	8730 <_fpadd_parts+0x110>
    88cc:	7c45883a 	add	r2,r15,r17
    88d0:	13c9803a 	cmpltu	r4,r2,r15
    88d4:	8487883a 	add	r3,r16,r18
    88d8:	20c9883a 	add	r4,r4,r3
    88dc:	a1400115 	stw	r5,4(r20)
    88e0:	a5c00215 	stw	r23,8(r20)
    88e4:	a0800315 	stw	r2,12(r20)
    88e8:	a1000415 	stw	r4,16(r20)
    88ec:	003fb606 	br	87c8 <_fpadd_parts+0x1a8>
    88f0:	001f883a 	mov	r15,zero
    88f4:	0021883a 	mov	r16,zero
    88f8:	003f8306 	br	8708 <_fpadd_parts+0xe8>
    88fc:	018dc83a 	sub	r6,zero,r6
    8900:	003f6706 	br	86a0 <_fpadd_parts+0x80>
    8904:	00bfff84 	movi	r2,-2
    8908:	117faf36 	bltu	r2,r5,87c8 <_fpadd_parts+0x1a8>
    890c:	003f9806 	br	8770 <_fpadd_parts+0x150>
    8910:	0005883a 	mov	r2,zero
    8914:	1189c83a 	sub	r4,r2,r6
    8918:	1105803a 	cmpltu	r2,r2,r4
    891c:	01cbc83a 	sub	r5,zero,r7
    8920:	2885c83a 	sub	r2,r5,r2
    8924:	01800044 	movi	r6,1
    8928:	a1800115 	stw	r6,4(r20)
    892c:	a5c00215 	stw	r23,8(r20)
    8930:	a1000315 	stw	r4,12(r20)
    8934:	a0800415 	stw	r2,16(r20)
    8938:	003f8206 	br	8744 <_fpadd_parts+0x124>
    893c:	203f7226 	beq	r4,zero,8708 <_fpadd_parts+0xe8>
    8940:	35bff804 	addi	r22,r6,-32
    8944:	b9af883a 	add	r23,r23,r6
    8948:	b0003116 	blt	r22,zero,8a10 <_fpadd_parts+0x3f0>
    894c:	959ad83a 	srl	r13,r18,r22
    8950:	001d883a 	mov	r14,zero
    8954:	000f883a 	mov	r7,zero
    8958:	01000044 	movi	r4,1
    895c:	0011883a 	mov	r8,zero
    8960:	b0002516 	blt	r22,zero,89f8 <_fpadd_parts+0x3d8>
    8964:	2594983a 	sll	r10,r4,r22
    8968:	0013883a 	mov	r9,zero
    896c:	00bfffc4 	movi	r2,-1
    8970:	4889883a 	add	r4,r9,r2
    8974:	508b883a 	add	r5,r10,r2
    8978:	224d803a 	cmpltu	r6,r4,r9
    897c:	314b883a 	add	r5,r6,r5
    8980:	8904703a 	and	r2,r17,r4
    8984:	9146703a 	and	r3,r18,r5
    8988:	10c4b03a 	or	r2,r2,r3
    898c:	10000226 	beq	r2,zero,8998 <_fpadd_parts+0x378>
    8990:	01c00044 	movi	r7,1
    8994:	0011883a 	mov	r8,zero
    8998:	69e2b03a 	or	r17,r13,r7
    899c:	7224b03a 	or	r18,r14,r8
    89a0:	003f5906 	br	8708 <_fpadd_parts+0xe8>
    89a4:	8407883a 	add	r3,r16,r16
    89a8:	008007c4 	movi	r2,31
    89ac:	1185c83a 	sub	r2,r2,r6
    89b0:	1886983a 	sll	r3,r3,r2
    89b4:	7996d83a 	srl	r11,r15,r6
    89b8:	8198d83a 	srl	r12,r16,r6
    89bc:	1ad6b03a 	or	r11,r3,r11
    89c0:	003f3e06 	br	86bc <_fpadd_parts+0x9c>
    89c4:	2006d07a 	srli	r3,r4,1
    89c8:	008007c4 	movi	r2,31
    89cc:	1185c83a 	sub	r2,r2,r6
    89d0:	1890d83a 	srl	r8,r3,r2
    89d4:	218e983a 	sll	r7,r4,r6
    89d8:	003f3e06 	br	86d4 <_fpadd_parts+0xb4>
    89dc:	113f821e 	bne	r2,r4,87e8 <_fpadd_parts+0x1c8>
    89e0:	28c00117 	ldw	r3,4(r5)
    89e4:	98800117 	ldw	r2,4(r19)
    89e8:	10ff7f26 	beq	r2,r3,87e8 <_fpadd_parts+0x1c8>
    89ec:	04c00074 	movhi	r19,1
    89f0:	9cf29404 	addi	r19,r19,-13744
    89f4:	003f7c06 	br	87e8 <_fpadd_parts+0x1c8>
    89f8:	2006d07a 	srli	r3,r4,1
    89fc:	008007c4 	movi	r2,31
    8a00:	1185c83a 	sub	r2,r2,r6
    8a04:	1894d83a 	srl	r10,r3,r2
    8a08:	2192983a 	sll	r9,r4,r6
    8a0c:	003fd706 	br	896c <_fpadd_parts+0x34c>
    8a10:	9487883a 	add	r3,r18,r18
    8a14:	008007c4 	movi	r2,31
    8a18:	1185c83a 	sub	r2,r2,r6
    8a1c:	1886983a 	sll	r3,r3,r2
    8a20:	899ad83a 	srl	r13,r17,r6
    8a24:	919cd83a 	srl	r14,r18,r6
    8a28:	1b5ab03a 	or	r13,r3,r13
    8a2c:	003fc906 	br	8954 <_fpadd_parts+0x334>

00008a30 <__subdf3>:
    8a30:	deffea04 	addi	sp,sp,-88
    8a34:	dcc01415 	stw	r19,80(sp)
    8a38:	dcc00404 	addi	r19,sp,16
    8a3c:	2011883a 	mov	r8,r4
    8a40:	2813883a 	mov	r9,r5
    8a44:	dc401315 	stw	r17,76(sp)
    8a48:	d809883a 	mov	r4,sp
    8a4c:	980b883a 	mov	r5,r19
    8a50:	dc400904 	addi	r17,sp,36
    8a54:	dfc01515 	stw	ra,84(sp)
    8a58:	da400115 	stw	r9,4(sp)
    8a5c:	d9c00315 	stw	r7,12(sp)
    8a60:	da000015 	stw	r8,0(sp)
    8a64:	d9800215 	stw	r6,8(sp)
    8a68:	0009c040 	call	9c04 <__unpack_d>
    8a6c:	d9000204 	addi	r4,sp,8
    8a70:	880b883a 	mov	r5,r17
    8a74:	0009c040 	call	9c04 <__unpack_d>
    8a78:	d8800a17 	ldw	r2,40(sp)
    8a7c:	880b883a 	mov	r5,r17
    8a80:	9809883a 	mov	r4,r19
    8a84:	d9800e04 	addi	r6,sp,56
    8a88:	1080005c 	xori	r2,r2,1
    8a8c:	d8800a15 	stw	r2,40(sp)
    8a90:	00086200 	call	8620 <_fpadd_parts>
    8a94:	1009883a 	mov	r4,r2
    8a98:	00098f00 	call	98f0 <__pack_d>
    8a9c:	dfc01517 	ldw	ra,84(sp)
    8aa0:	dcc01417 	ldw	r19,80(sp)
    8aa4:	dc401317 	ldw	r17,76(sp)
    8aa8:	dec01604 	addi	sp,sp,88
    8aac:	f800283a 	ret

00008ab0 <__adddf3>:
    8ab0:	deffea04 	addi	sp,sp,-88
    8ab4:	dcc01415 	stw	r19,80(sp)
    8ab8:	dcc00404 	addi	r19,sp,16
    8abc:	2011883a 	mov	r8,r4
    8ac0:	2813883a 	mov	r9,r5
    8ac4:	dc401315 	stw	r17,76(sp)
    8ac8:	d809883a 	mov	r4,sp
    8acc:	980b883a 	mov	r5,r19
    8ad0:	dc400904 	addi	r17,sp,36
    8ad4:	dfc01515 	stw	ra,84(sp)
    8ad8:	da400115 	stw	r9,4(sp)
    8adc:	d9c00315 	stw	r7,12(sp)
    8ae0:	da000015 	stw	r8,0(sp)
    8ae4:	d9800215 	stw	r6,8(sp)
    8ae8:	0009c040 	call	9c04 <__unpack_d>
    8aec:	d9000204 	addi	r4,sp,8
    8af0:	880b883a 	mov	r5,r17
    8af4:	0009c040 	call	9c04 <__unpack_d>
    8af8:	d9800e04 	addi	r6,sp,56
    8afc:	9809883a 	mov	r4,r19
    8b00:	880b883a 	mov	r5,r17
    8b04:	00086200 	call	8620 <_fpadd_parts>
    8b08:	1009883a 	mov	r4,r2
    8b0c:	00098f00 	call	98f0 <__pack_d>
    8b10:	dfc01517 	ldw	ra,84(sp)
    8b14:	dcc01417 	ldw	r19,80(sp)
    8b18:	dc401317 	ldw	r17,76(sp)
    8b1c:	dec01604 	addi	sp,sp,88
    8b20:	f800283a 	ret

00008b24 <__muldf3>:
    8b24:	deffe004 	addi	sp,sp,-128
    8b28:	dc401815 	stw	r17,96(sp)
    8b2c:	dc400404 	addi	r17,sp,16
    8b30:	2011883a 	mov	r8,r4
    8b34:	2813883a 	mov	r9,r5
    8b38:	dc001715 	stw	r16,92(sp)
    8b3c:	d809883a 	mov	r4,sp
    8b40:	880b883a 	mov	r5,r17
    8b44:	dc000904 	addi	r16,sp,36
    8b48:	dfc01f15 	stw	ra,124(sp)
    8b4c:	da400115 	stw	r9,4(sp)
    8b50:	d9c00315 	stw	r7,12(sp)
    8b54:	da000015 	stw	r8,0(sp)
    8b58:	d9800215 	stw	r6,8(sp)
    8b5c:	ddc01e15 	stw	r23,120(sp)
    8b60:	dd801d15 	stw	r22,116(sp)
    8b64:	dd401c15 	stw	r21,112(sp)
    8b68:	dd001b15 	stw	r20,108(sp)
    8b6c:	dcc01a15 	stw	r19,104(sp)
    8b70:	dc801915 	stw	r18,100(sp)
    8b74:	0009c040 	call	9c04 <__unpack_d>
    8b78:	d9000204 	addi	r4,sp,8
    8b7c:	800b883a 	mov	r5,r16
    8b80:	0009c040 	call	9c04 <__unpack_d>
    8b84:	d9000417 	ldw	r4,16(sp)
    8b88:	00800044 	movi	r2,1
    8b8c:	1100102e 	bgeu	r2,r4,8bd0 <__muldf3+0xac>
    8b90:	d8c00917 	ldw	r3,36(sp)
    8b94:	10c0062e 	bgeu	r2,r3,8bb0 <__muldf3+0x8c>
    8b98:	00800104 	movi	r2,4
    8b9c:	20800a26 	beq	r4,r2,8bc8 <__muldf3+0xa4>
    8ba0:	1880cc26 	beq	r3,r2,8ed4 <__muldf3+0x3b0>
    8ba4:	00800084 	movi	r2,2
    8ba8:	20800926 	beq	r4,r2,8bd0 <__muldf3+0xac>
    8bac:	1880191e 	bne	r3,r2,8c14 <__muldf3+0xf0>
    8bb0:	d8c00a17 	ldw	r3,40(sp)
    8bb4:	d8800517 	ldw	r2,20(sp)
    8bb8:	8009883a 	mov	r4,r16
    8bbc:	10c4c03a 	cmpne	r2,r2,r3
    8bc0:	d8800a15 	stw	r2,40(sp)
    8bc4:	00000706 	br	8be4 <__muldf3+0xc0>
    8bc8:	00800084 	movi	r2,2
    8bcc:	1880c326 	beq	r3,r2,8edc <__muldf3+0x3b8>
    8bd0:	d8800517 	ldw	r2,20(sp)
    8bd4:	d8c00a17 	ldw	r3,40(sp)
    8bd8:	8809883a 	mov	r4,r17
    8bdc:	10c4c03a 	cmpne	r2,r2,r3
    8be0:	d8800515 	stw	r2,20(sp)
    8be4:	00098f00 	call	98f0 <__pack_d>
    8be8:	dfc01f17 	ldw	ra,124(sp)
    8bec:	ddc01e17 	ldw	r23,120(sp)
    8bf0:	dd801d17 	ldw	r22,116(sp)
    8bf4:	dd401c17 	ldw	r21,112(sp)
    8bf8:	dd001b17 	ldw	r20,108(sp)
    8bfc:	dcc01a17 	ldw	r19,104(sp)
    8c00:	dc801917 	ldw	r18,100(sp)
    8c04:	dc401817 	ldw	r17,96(sp)
    8c08:	dc001717 	ldw	r16,92(sp)
    8c0c:	dec02004 	addi	sp,sp,128
    8c10:	f800283a 	ret
    8c14:	dd800717 	ldw	r22,28(sp)
    8c18:	dc800c17 	ldw	r18,48(sp)
    8c1c:	002b883a 	mov	r21,zero
    8c20:	0023883a 	mov	r17,zero
    8c24:	a80b883a 	mov	r5,r21
    8c28:	b00d883a 	mov	r6,r22
    8c2c:	880f883a 	mov	r7,r17
    8c30:	ddc00817 	ldw	r23,32(sp)
    8c34:	dcc00d17 	ldw	r19,52(sp)
    8c38:	9009883a 	mov	r4,r18
    8c3c:	000974c0 	call	974c <__muldi3>
    8c40:	001b883a 	mov	r13,zero
    8c44:	680f883a 	mov	r7,r13
    8c48:	b009883a 	mov	r4,r22
    8c4c:	000b883a 	mov	r5,zero
    8c50:	980d883a 	mov	r6,r19
    8c54:	b82d883a 	mov	r22,r23
    8c58:	002f883a 	mov	r23,zero
    8c5c:	db401615 	stw	r13,88(sp)
    8c60:	d8801315 	stw	r2,76(sp)
    8c64:	d8c01415 	stw	r3,80(sp)
    8c68:	dcc01515 	stw	r19,84(sp)
    8c6c:	000974c0 	call	974c <__muldi3>
    8c70:	b00d883a 	mov	r6,r22
    8c74:	000b883a 	mov	r5,zero
    8c78:	9009883a 	mov	r4,r18
    8c7c:	b80f883a 	mov	r7,r23
    8c80:	1021883a 	mov	r16,r2
    8c84:	1823883a 	mov	r17,r3
    8c88:	000974c0 	call	974c <__muldi3>
    8c8c:	8085883a 	add	r2,r16,r2
    8c90:	140d803a 	cmpltu	r6,r2,r16
    8c94:	88c7883a 	add	r3,r17,r3
    8c98:	30cd883a 	add	r6,r6,r3
    8c9c:	1029883a 	mov	r20,r2
    8ca0:	302b883a 	mov	r21,r6
    8ca4:	da801317 	ldw	r10,76(sp)
    8ca8:	dac01417 	ldw	r11,80(sp)
    8cac:	db001517 	ldw	r12,84(sp)
    8cb0:	db401617 	ldw	r13,88(sp)
    8cb4:	3440612e 	bgeu	r6,r17,8e3c <__muldf3+0x318>
    8cb8:	0009883a 	mov	r4,zero
    8cbc:	5105883a 	add	r2,r10,r4
    8cc0:	128d803a 	cmpltu	r6,r2,r10
    8cc4:	5d07883a 	add	r3,r11,r20
    8cc8:	30cd883a 	add	r6,r6,r3
    8ccc:	0021883a 	mov	r16,zero
    8cd0:	04400044 	movi	r17,1
    8cd4:	1025883a 	mov	r18,r2
    8cd8:	3027883a 	mov	r19,r6
    8cdc:	32c06236 	bltu	r6,r11,8e68 <__muldf3+0x344>
    8ce0:	59807a26 	beq	r11,r6,8ecc <__muldf3+0x3a8>
    8ce4:	680b883a 	mov	r5,r13
    8ce8:	b80f883a 	mov	r7,r23
    8cec:	6009883a 	mov	r4,r12
    8cf0:	b00d883a 	mov	r6,r22
    8cf4:	000974c0 	call	974c <__muldi3>
    8cf8:	1009883a 	mov	r4,r2
    8cfc:	000f883a 	mov	r7,zero
    8d00:	1545883a 	add	r2,r2,r21
    8d04:	1111803a 	cmpltu	r8,r2,r4
    8d08:	19c7883a 	add	r3,r3,r7
    8d0c:	40c7883a 	add	r3,r8,r3
    8d10:	88cb883a 	add	r5,r17,r3
    8d14:	d8c00617 	ldw	r3,24(sp)
    8d18:	8089883a 	add	r4,r16,r2
    8d1c:	d8800b17 	ldw	r2,44(sp)
    8d20:	18c00104 	addi	r3,r3,4
    8d24:	240d803a 	cmpltu	r6,r4,r16
    8d28:	10c7883a 	add	r3,r2,r3
    8d2c:	2013883a 	mov	r9,r4
    8d30:	d8800a17 	ldw	r2,40(sp)
    8d34:	d9000517 	ldw	r4,20(sp)
    8d38:	314d883a 	add	r6,r6,r5
    8d3c:	3015883a 	mov	r10,r6
    8d40:	2088c03a 	cmpne	r4,r4,r2
    8d44:	00880034 	movhi	r2,8192
    8d48:	10bfffc4 	addi	r2,r2,-1
    8d4c:	d9000f15 	stw	r4,60(sp)
    8d50:	d8c01015 	stw	r3,64(sp)
    8d54:	1180162e 	bgeu	r2,r6,8db0 <__muldf3+0x28c>
    8d58:	1811883a 	mov	r8,r3
    8d5c:	101f883a 	mov	r15,r2
    8d60:	980497fa 	slli	r2,r19,31
    8d64:	9016d07a 	srli	r11,r18,1
    8d68:	500697fa 	slli	r3,r10,31
    8d6c:	480cd07a 	srli	r6,r9,1
    8d70:	500ed07a 	srli	r7,r10,1
    8d74:	12d6b03a 	or	r11,r2,r11
    8d78:	00800044 	movi	r2,1
    8d7c:	198cb03a 	or	r6,r3,r6
    8d80:	4888703a 	and	r4,r9,r2
    8d84:	9818d07a 	srli	r12,r19,1
    8d88:	001b883a 	mov	r13,zero
    8d8c:	03a00034 	movhi	r14,32768
    8d90:	3013883a 	mov	r9,r6
    8d94:	3815883a 	mov	r10,r7
    8d98:	4091883a 	add	r8,r8,r2
    8d9c:	20000226 	beq	r4,zero,8da8 <__muldf3+0x284>
    8da0:	5b64b03a 	or	r18,r11,r13
    8da4:	63a6b03a 	or	r19,r12,r14
    8da8:	7abfed36 	bltu	r15,r10,8d60 <__muldf3+0x23c>
    8dac:	da001015 	stw	r8,64(sp)
    8db0:	00840034 	movhi	r2,4096
    8db4:	10bfffc4 	addi	r2,r2,-1
    8db8:	12801436 	bltu	r2,r10,8e0c <__muldf3+0x2e8>
    8dbc:	da001017 	ldw	r8,64(sp)
    8dc0:	101f883a 	mov	r15,r2
    8dc4:	4a45883a 	add	r2,r9,r9
    8dc8:	124d803a 	cmpltu	r6,r2,r9
    8dcc:	5287883a 	add	r3,r10,r10
    8dd0:	9497883a 	add	r11,r18,r18
    8dd4:	5c8f803a 	cmpltu	r7,r11,r18
    8dd8:	9cd9883a 	add	r12,r19,r19
    8ddc:	01000044 	movi	r4,1
    8de0:	30cd883a 	add	r6,r6,r3
    8de4:	3b0f883a 	add	r7,r7,r12
    8de8:	423fffc4 	addi	r8,r8,-1
    8dec:	1013883a 	mov	r9,r2
    8df0:	3015883a 	mov	r10,r6
    8df4:	111ab03a 	or	r13,r2,r4
    8df8:	98003016 	blt	r19,zero,8ebc <__muldf3+0x398>
    8dfc:	5825883a 	mov	r18,r11
    8e00:	3827883a 	mov	r19,r7
    8e04:	7abfef2e 	bgeu	r15,r10,8dc4 <__muldf3+0x2a0>
    8e08:	da001015 	stw	r8,64(sp)
    8e0c:	00803fc4 	movi	r2,255
    8e10:	488e703a 	and	r7,r9,r2
    8e14:	00802004 	movi	r2,128
    8e18:	0007883a 	mov	r3,zero
    8e1c:	0011883a 	mov	r8,zero
    8e20:	38801826 	beq	r7,r2,8e84 <__muldf3+0x360>
    8e24:	008000c4 	movi	r2,3
    8e28:	d9000e04 	addi	r4,sp,56
    8e2c:	da801215 	stw	r10,72(sp)
    8e30:	d8800e15 	stw	r2,56(sp)
    8e34:	da401115 	stw	r9,68(sp)
    8e38:	003f6a06 	br	8be4 <__muldf3+0xc0>
    8e3c:	89802126 	beq	r17,r6,8ec4 <__muldf3+0x3a0>
    8e40:	0009883a 	mov	r4,zero
    8e44:	5105883a 	add	r2,r10,r4
    8e48:	128d803a 	cmpltu	r6,r2,r10
    8e4c:	5d07883a 	add	r3,r11,r20
    8e50:	30cd883a 	add	r6,r6,r3
    8e54:	0021883a 	mov	r16,zero
    8e58:	0023883a 	mov	r17,zero
    8e5c:	1025883a 	mov	r18,r2
    8e60:	3027883a 	mov	r19,r6
    8e64:	32ff9e2e 	bgeu	r6,r11,8ce0 <__muldf3+0x1bc>
    8e68:	00800044 	movi	r2,1
    8e6c:	8089883a 	add	r4,r16,r2
    8e70:	240d803a 	cmpltu	r6,r4,r16
    8e74:	344d883a 	add	r6,r6,r17
    8e78:	2021883a 	mov	r16,r4
    8e7c:	3023883a 	mov	r17,r6
    8e80:	003f9806 	br	8ce4 <__muldf3+0x1c0>
    8e84:	403fe71e 	bne	r8,zero,8e24 <__muldf3+0x300>
    8e88:	01004004 	movi	r4,256
    8e8c:	4904703a 	and	r2,r9,r4
    8e90:	10c4b03a 	or	r2,r2,r3
    8e94:	103fe31e 	bne	r2,zero,8e24 <__muldf3+0x300>
    8e98:	94c4b03a 	or	r2,r18,r19
    8e9c:	103fe126 	beq	r2,zero,8e24 <__muldf3+0x300>
    8ea0:	49c5883a 	add	r2,r9,r7
    8ea4:	1251803a 	cmpltu	r8,r2,r9
    8ea8:	4291883a 	add	r8,r8,r10
    8eac:	013fc004 	movi	r4,-256
    8eb0:	1112703a 	and	r9,r2,r4
    8eb4:	4015883a 	mov	r10,r8
    8eb8:	003fda06 	br	8e24 <__muldf3+0x300>
    8ebc:	6813883a 	mov	r9,r13
    8ec0:	003fce06 	br	8dfc <__muldf3+0x2d8>
    8ec4:	143f7c36 	bltu	r2,r16,8cb8 <__muldf3+0x194>
    8ec8:	003fdd06 	br	8e40 <__muldf3+0x31c>
    8ecc:	12bf852e 	bgeu	r2,r10,8ce4 <__muldf3+0x1c0>
    8ed0:	003fe506 	br	8e68 <__muldf3+0x344>
    8ed4:	00800084 	movi	r2,2
    8ed8:	20bf351e 	bne	r4,r2,8bb0 <__muldf3+0x8c>
    8edc:	01000074 	movhi	r4,1
    8ee0:	21329404 	addi	r4,r4,-13744
    8ee4:	003f3f06 	br	8be4 <__muldf3+0xc0>

00008ee8 <__divdf3>:
    8ee8:	deffed04 	addi	sp,sp,-76
    8eec:	dcc01115 	stw	r19,68(sp)
    8ef0:	dcc00404 	addi	r19,sp,16
    8ef4:	2011883a 	mov	r8,r4
    8ef8:	2813883a 	mov	r9,r5
    8efc:	dc000e15 	stw	r16,56(sp)
    8f00:	d809883a 	mov	r4,sp
    8f04:	980b883a 	mov	r5,r19
    8f08:	dc000904 	addi	r16,sp,36
    8f0c:	dfc01215 	stw	ra,72(sp)
    8f10:	da400115 	stw	r9,4(sp)
    8f14:	d9c00315 	stw	r7,12(sp)
    8f18:	da000015 	stw	r8,0(sp)
    8f1c:	d9800215 	stw	r6,8(sp)
    8f20:	dc801015 	stw	r18,64(sp)
    8f24:	dc400f15 	stw	r17,60(sp)
    8f28:	0009c040 	call	9c04 <__unpack_d>
    8f2c:	d9000204 	addi	r4,sp,8
    8f30:	800b883a 	mov	r5,r16
    8f34:	0009c040 	call	9c04 <__unpack_d>
    8f38:	d9000417 	ldw	r4,16(sp)
    8f3c:	00800044 	movi	r2,1
    8f40:	11000b2e 	bgeu	r2,r4,8f70 <__divdf3+0x88>
    8f44:	d9400917 	ldw	r5,36(sp)
    8f48:	1140762e 	bgeu	r2,r5,9124 <__divdf3+0x23c>
    8f4c:	d8800517 	ldw	r2,20(sp)
    8f50:	d8c00a17 	ldw	r3,40(sp)
    8f54:	01800104 	movi	r6,4
    8f58:	10c4f03a 	xor	r2,r2,r3
    8f5c:	d8800515 	stw	r2,20(sp)
    8f60:	21800226 	beq	r4,r6,8f6c <__divdf3+0x84>
    8f64:	00800084 	movi	r2,2
    8f68:	2080141e 	bne	r4,r2,8fbc <__divdf3+0xd4>
    8f6c:	29000926 	beq	r5,r4,8f94 <__divdf3+0xac>
    8f70:	9809883a 	mov	r4,r19
    8f74:	00098f00 	call	98f0 <__pack_d>
    8f78:	dfc01217 	ldw	ra,72(sp)
    8f7c:	dcc01117 	ldw	r19,68(sp)
    8f80:	dc801017 	ldw	r18,64(sp)
    8f84:	dc400f17 	ldw	r17,60(sp)
    8f88:	dc000e17 	ldw	r16,56(sp)
    8f8c:	dec01304 	addi	sp,sp,76
    8f90:	f800283a 	ret
    8f94:	01000074 	movhi	r4,1
    8f98:	21329404 	addi	r4,r4,-13744
    8f9c:	00098f00 	call	98f0 <__pack_d>
    8fa0:	dfc01217 	ldw	ra,72(sp)
    8fa4:	dcc01117 	ldw	r19,68(sp)
    8fa8:	dc801017 	ldw	r18,64(sp)
    8fac:	dc400f17 	ldw	r17,60(sp)
    8fb0:	dc000e17 	ldw	r16,56(sp)
    8fb4:	dec01304 	addi	sp,sp,76
    8fb8:	f800283a 	ret
    8fbc:	29805b26 	beq	r5,r6,912c <__divdf3+0x244>
    8fc0:	28802d26 	beq	r5,r2,9078 <__divdf3+0x190>
    8fc4:	d8c00617 	ldw	r3,24(sp)
    8fc8:	d8800b17 	ldw	r2,44(sp)
    8fcc:	d9c00817 	ldw	r7,32(sp)
    8fd0:	dc400d17 	ldw	r17,52(sp)
    8fd4:	188bc83a 	sub	r5,r3,r2
    8fd8:	d9800717 	ldw	r6,28(sp)
    8fdc:	dc000c17 	ldw	r16,48(sp)
    8fe0:	d9400615 	stw	r5,24(sp)
    8fe4:	3c403836 	bltu	r7,r17,90c8 <__divdf3+0x1e0>
    8fe8:	89c03626 	beq	r17,r7,90c4 <__divdf3+0x1dc>
    8fec:	0015883a 	mov	r10,zero
    8ff0:	001d883a 	mov	r14,zero
    8ff4:	02c40034 	movhi	r11,4096
    8ff8:	001f883a 	mov	r15,zero
    8ffc:	003f883a 	mov	ra,zero
    9000:	04800f44 	movi	r18,61
    9004:	00000f06 	br	9044 <__divdf3+0x15c>
    9008:	601d883a 	mov	r14,r12
    900c:	681f883a 	mov	r15,r13
    9010:	400d883a 	mov	r6,r8
    9014:	100f883a 	mov	r7,r2
    9018:	3191883a 	add	r8,r6,r6
    901c:	5808d07a 	srli	r4,r11,1
    9020:	4185803a 	cmpltu	r2,r8,r6
    9024:	39d3883a 	add	r9,r7,r7
    9028:	28c6b03a 	or	r3,r5,r3
    902c:	1245883a 	add	r2,r2,r9
    9030:	1815883a 	mov	r10,r3
    9034:	2017883a 	mov	r11,r4
    9038:	400d883a 	mov	r6,r8
    903c:	100f883a 	mov	r7,r2
    9040:	fc801726 	beq	ra,r18,90a0 <__divdf3+0x1b8>
    9044:	580a97fa 	slli	r5,r11,31
    9048:	5006d07a 	srli	r3,r10,1
    904c:	ffc00044 	addi	ra,ra,1
    9050:	3c7ff136 	bltu	r7,r17,9018 <__divdf3+0x130>
    9054:	3411c83a 	sub	r8,r6,r16
    9058:	3205803a 	cmpltu	r2,r6,r8
    905c:	3c53c83a 	sub	r9,r7,r17
    9060:	7298b03a 	or	r12,r14,r10
    9064:	7adab03a 	or	r13,r15,r11
    9068:	4885c83a 	sub	r2,r9,r2
    906c:	89ffe61e 	bne	r17,r7,9008 <__divdf3+0x120>
    9070:	343fe936 	bltu	r6,r16,9018 <__divdf3+0x130>
    9074:	003fe406 	br	9008 <__divdf3+0x120>
    9078:	9809883a 	mov	r4,r19
    907c:	d9800415 	stw	r6,16(sp)
    9080:	00098f00 	call	98f0 <__pack_d>
    9084:	dfc01217 	ldw	ra,72(sp)
    9088:	dcc01117 	ldw	r19,68(sp)
    908c:	dc801017 	ldw	r18,64(sp)
    9090:	dc400f17 	ldw	r17,60(sp)
    9094:	dc000e17 	ldw	r16,56(sp)
    9098:	dec01304 	addi	sp,sp,76
    909c:	f800283a 	ret
    90a0:	00803fc4 	movi	r2,255
    90a4:	7090703a 	and	r8,r14,r2
    90a8:	00802004 	movi	r2,128
    90ac:	0007883a 	mov	r3,zero
    90b0:	0013883a 	mov	r9,zero
    90b4:	40800d26 	beq	r8,r2,90ec <__divdf3+0x204>
    90b8:	dbc00815 	stw	r15,32(sp)
    90bc:	db800715 	stw	r14,28(sp)
    90c0:	003fab06 	br	8f70 <__divdf3+0x88>
    90c4:	343fc92e 	bgeu	r6,r16,8fec <__divdf3+0x104>
    90c8:	3185883a 	add	r2,r6,r6
    90cc:	1189803a 	cmpltu	r4,r2,r6
    90d0:	39c7883a 	add	r3,r7,r7
    90d4:	20c9883a 	add	r4,r4,r3
    90d8:	297fffc4 	addi	r5,r5,-1
    90dc:	100d883a 	mov	r6,r2
    90e0:	200f883a 	mov	r7,r4
    90e4:	d9400615 	stw	r5,24(sp)
    90e8:	003fc006 	br	8fec <__divdf3+0x104>
    90ec:	483ff21e 	bne	r9,zero,90b8 <__divdf3+0x1d0>
    90f0:	01004004 	movi	r4,256
    90f4:	7104703a 	and	r2,r14,r4
    90f8:	10c4b03a 	or	r2,r2,r3
    90fc:	103fee1e 	bne	r2,zero,90b8 <__divdf3+0x1d0>
    9100:	31c4b03a 	or	r2,r6,r7
    9104:	103fec26 	beq	r2,zero,90b8 <__divdf3+0x1d0>
    9108:	7205883a 	add	r2,r14,r8
    910c:	1391803a 	cmpltu	r8,r2,r14
    9110:	43d1883a 	add	r8,r8,r15
    9114:	013fc004 	movi	r4,-256
    9118:	111c703a 	and	r14,r2,r4
    911c:	401f883a 	mov	r15,r8
    9120:	003fe506 	br	90b8 <__divdf3+0x1d0>
    9124:	8009883a 	mov	r4,r16
    9128:	003f9206 	br	8f74 <__divdf3+0x8c>
    912c:	9809883a 	mov	r4,r19
    9130:	d8000715 	stw	zero,28(sp)
    9134:	d8000815 	stw	zero,32(sp)
    9138:	d8000615 	stw	zero,24(sp)
    913c:	003f8d06 	br	8f74 <__divdf3+0x8c>

00009140 <__eqdf2>:
    9140:	deffef04 	addi	sp,sp,-68
    9144:	dc400f15 	stw	r17,60(sp)
    9148:	dc400404 	addi	r17,sp,16
    914c:	2005883a 	mov	r2,r4
    9150:	2807883a 	mov	r3,r5
    9154:	dc000e15 	stw	r16,56(sp)
    9158:	d809883a 	mov	r4,sp
    915c:	880b883a 	mov	r5,r17
    9160:	dc000904 	addi	r16,sp,36
    9164:	d8c00115 	stw	r3,4(sp)
    9168:	d8800015 	stw	r2,0(sp)
    916c:	d9800215 	stw	r6,8(sp)
    9170:	dfc01015 	stw	ra,64(sp)
    9174:	d9c00315 	stw	r7,12(sp)
    9178:	0009c040 	call	9c04 <__unpack_d>
    917c:	d9000204 	addi	r4,sp,8
    9180:	800b883a 	mov	r5,r16
    9184:	0009c040 	call	9c04 <__unpack_d>
    9188:	d8800417 	ldw	r2,16(sp)
    918c:	00c00044 	movi	r3,1
    9190:	180d883a 	mov	r6,r3
    9194:	1880062e 	bgeu	r3,r2,91b0 <__eqdf2+0x70>
    9198:	d8800917 	ldw	r2,36(sp)
    919c:	8809883a 	mov	r4,r17
    91a0:	800b883a 	mov	r5,r16
    91a4:	1880022e 	bgeu	r3,r2,91b0 <__eqdf2+0x70>
    91a8:	0009d3c0 	call	9d3c <__fpcmp_parts_d>
    91ac:	100d883a 	mov	r6,r2
    91b0:	3005883a 	mov	r2,r6
    91b4:	dfc01017 	ldw	ra,64(sp)
    91b8:	dc400f17 	ldw	r17,60(sp)
    91bc:	dc000e17 	ldw	r16,56(sp)
    91c0:	dec01104 	addi	sp,sp,68
    91c4:	f800283a 	ret

000091c8 <__nedf2>:
    91c8:	deffef04 	addi	sp,sp,-68
    91cc:	dc400f15 	stw	r17,60(sp)
    91d0:	dc400404 	addi	r17,sp,16
    91d4:	2005883a 	mov	r2,r4
    91d8:	2807883a 	mov	r3,r5
    91dc:	dc000e15 	stw	r16,56(sp)
    91e0:	d809883a 	mov	r4,sp
    91e4:	880b883a 	mov	r5,r17
    91e8:	dc000904 	addi	r16,sp,36
    91ec:	d8c00115 	stw	r3,4(sp)
    91f0:	d8800015 	stw	r2,0(sp)
    91f4:	d9800215 	stw	r6,8(sp)
    91f8:	dfc01015 	stw	ra,64(sp)
    91fc:	d9c00315 	stw	r7,12(sp)
    9200:	0009c040 	call	9c04 <__unpack_d>
    9204:	d9000204 	addi	r4,sp,8
    9208:	800b883a 	mov	r5,r16
    920c:	0009c040 	call	9c04 <__unpack_d>
    9210:	d8800417 	ldw	r2,16(sp)
    9214:	00c00044 	movi	r3,1
    9218:	180d883a 	mov	r6,r3
    921c:	1880062e 	bgeu	r3,r2,9238 <__nedf2+0x70>
    9220:	d8800917 	ldw	r2,36(sp)
    9224:	8809883a 	mov	r4,r17
    9228:	800b883a 	mov	r5,r16
    922c:	1880022e 	bgeu	r3,r2,9238 <__nedf2+0x70>
    9230:	0009d3c0 	call	9d3c <__fpcmp_parts_d>
    9234:	100d883a 	mov	r6,r2
    9238:	3005883a 	mov	r2,r6
    923c:	dfc01017 	ldw	ra,64(sp)
    9240:	dc400f17 	ldw	r17,60(sp)
    9244:	dc000e17 	ldw	r16,56(sp)
    9248:	dec01104 	addi	sp,sp,68
    924c:	f800283a 	ret

00009250 <__gtdf2>:
    9250:	deffef04 	addi	sp,sp,-68
    9254:	dc400f15 	stw	r17,60(sp)
    9258:	dc400404 	addi	r17,sp,16
    925c:	2005883a 	mov	r2,r4
    9260:	2807883a 	mov	r3,r5
    9264:	dc000e15 	stw	r16,56(sp)
    9268:	d809883a 	mov	r4,sp
    926c:	880b883a 	mov	r5,r17
    9270:	dc000904 	addi	r16,sp,36
    9274:	d8c00115 	stw	r3,4(sp)
    9278:	d8800015 	stw	r2,0(sp)
    927c:	d9800215 	stw	r6,8(sp)
    9280:	dfc01015 	stw	ra,64(sp)
    9284:	d9c00315 	stw	r7,12(sp)
    9288:	0009c040 	call	9c04 <__unpack_d>
    928c:	d9000204 	addi	r4,sp,8
    9290:	800b883a 	mov	r5,r16
    9294:	0009c040 	call	9c04 <__unpack_d>
    9298:	d8800417 	ldw	r2,16(sp)
    929c:	00c00044 	movi	r3,1
    92a0:	01bfffc4 	movi	r6,-1
    92a4:	1880062e 	bgeu	r3,r2,92c0 <__gtdf2+0x70>
    92a8:	d8800917 	ldw	r2,36(sp)
    92ac:	8809883a 	mov	r4,r17
    92b0:	800b883a 	mov	r5,r16
    92b4:	1880022e 	bgeu	r3,r2,92c0 <__gtdf2+0x70>
    92b8:	0009d3c0 	call	9d3c <__fpcmp_parts_d>
    92bc:	100d883a 	mov	r6,r2
    92c0:	3005883a 	mov	r2,r6
    92c4:	dfc01017 	ldw	ra,64(sp)
    92c8:	dc400f17 	ldw	r17,60(sp)
    92cc:	dc000e17 	ldw	r16,56(sp)
    92d0:	dec01104 	addi	sp,sp,68
    92d4:	f800283a 	ret

000092d8 <__gedf2>:
    92d8:	deffef04 	addi	sp,sp,-68
    92dc:	dc400f15 	stw	r17,60(sp)
    92e0:	dc400404 	addi	r17,sp,16
    92e4:	2005883a 	mov	r2,r4
    92e8:	2807883a 	mov	r3,r5
    92ec:	dc000e15 	stw	r16,56(sp)
    92f0:	d809883a 	mov	r4,sp
    92f4:	880b883a 	mov	r5,r17
    92f8:	dc000904 	addi	r16,sp,36
    92fc:	d8c00115 	stw	r3,4(sp)
    9300:	d8800015 	stw	r2,0(sp)
    9304:	d9800215 	stw	r6,8(sp)
    9308:	dfc01015 	stw	ra,64(sp)
    930c:	d9c00315 	stw	r7,12(sp)
    9310:	0009c040 	call	9c04 <__unpack_d>
    9314:	d9000204 	addi	r4,sp,8
    9318:	800b883a 	mov	r5,r16
    931c:	0009c040 	call	9c04 <__unpack_d>
    9320:	d8800417 	ldw	r2,16(sp)
    9324:	00c00044 	movi	r3,1
    9328:	01bfffc4 	movi	r6,-1
    932c:	1880062e 	bgeu	r3,r2,9348 <__gedf2+0x70>
    9330:	d8800917 	ldw	r2,36(sp)
    9334:	8809883a 	mov	r4,r17
    9338:	800b883a 	mov	r5,r16
    933c:	1880022e 	bgeu	r3,r2,9348 <__gedf2+0x70>
    9340:	0009d3c0 	call	9d3c <__fpcmp_parts_d>
    9344:	100d883a 	mov	r6,r2
    9348:	3005883a 	mov	r2,r6
    934c:	dfc01017 	ldw	ra,64(sp)
    9350:	dc400f17 	ldw	r17,60(sp)
    9354:	dc000e17 	ldw	r16,56(sp)
    9358:	dec01104 	addi	sp,sp,68
    935c:	f800283a 	ret

00009360 <__ltdf2>:
    9360:	deffef04 	addi	sp,sp,-68
    9364:	dc400f15 	stw	r17,60(sp)
    9368:	dc400404 	addi	r17,sp,16
    936c:	2005883a 	mov	r2,r4
    9370:	2807883a 	mov	r3,r5
    9374:	dc000e15 	stw	r16,56(sp)
    9378:	d809883a 	mov	r4,sp
    937c:	880b883a 	mov	r5,r17
    9380:	dc000904 	addi	r16,sp,36
    9384:	d8c00115 	stw	r3,4(sp)
    9388:	d8800015 	stw	r2,0(sp)
    938c:	d9800215 	stw	r6,8(sp)
    9390:	dfc01015 	stw	ra,64(sp)
    9394:	d9c00315 	stw	r7,12(sp)
    9398:	0009c040 	call	9c04 <__unpack_d>
    939c:	d9000204 	addi	r4,sp,8
    93a0:	800b883a 	mov	r5,r16
    93a4:	0009c040 	call	9c04 <__unpack_d>
    93a8:	d8800417 	ldw	r2,16(sp)
    93ac:	00c00044 	movi	r3,1
    93b0:	180d883a 	mov	r6,r3
    93b4:	1880062e 	bgeu	r3,r2,93d0 <__ltdf2+0x70>
    93b8:	d8800917 	ldw	r2,36(sp)
    93bc:	8809883a 	mov	r4,r17
    93c0:	800b883a 	mov	r5,r16
    93c4:	1880022e 	bgeu	r3,r2,93d0 <__ltdf2+0x70>
    93c8:	0009d3c0 	call	9d3c <__fpcmp_parts_d>
    93cc:	100d883a 	mov	r6,r2
    93d0:	3005883a 	mov	r2,r6
    93d4:	dfc01017 	ldw	ra,64(sp)
    93d8:	dc400f17 	ldw	r17,60(sp)
    93dc:	dc000e17 	ldw	r16,56(sp)
    93e0:	dec01104 	addi	sp,sp,68
    93e4:	f800283a 	ret

000093e8 <__floatsidf>:
    93e8:	2006d7fa 	srli	r3,r4,31
    93ec:	defff604 	addi	sp,sp,-40
    93f0:	008000c4 	movi	r2,3
    93f4:	dfc00915 	stw	ra,36(sp)
    93f8:	dcc00815 	stw	r19,32(sp)
    93fc:	dc800715 	stw	r18,28(sp)
    9400:	dc400615 	stw	r17,24(sp)
    9404:	dc000515 	stw	r16,20(sp)
    9408:	d8800015 	stw	r2,0(sp)
    940c:	d8c00115 	stw	r3,4(sp)
    9410:	20000f1e 	bne	r4,zero,9450 <__floatsidf+0x68>
    9414:	00800084 	movi	r2,2
    9418:	d8800015 	stw	r2,0(sp)
    941c:	d809883a 	mov	r4,sp
    9420:	00098f00 	call	98f0 <__pack_d>
    9424:	1009883a 	mov	r4,r2
    9428:	180b883a 	mov	r5,r3
    942c:	2005883a 	mov	r2,r4
    9430:	2807883a 	mov	r3,r5
    9434:	dfc00917 	ldw	ra,36(sp)
    9438:	dcc00817 	ldw	r19,32(sp)
    943c:	dc800717 	ldw	r18,28(sp)
    9440:	dc400617 	ldw	r17,24(sp)
    9444:	dc000517 	ldw	r16,20(sp)
    9448:	dec00a04 	addi	sp,sp,40
    944c:	f800283a 	ret
    9450:	00800f04 	movi	r2,60
    9454:	1807003a 	cmpeq	r3,r3,zero
    9458:	d8800215 	stw	r2,8(sp)
    945c:	18001126 	beq	r3,zero,94a4 <__floatsidf+0xbc>
    9460:	0027883a 	mov	r19,zero
    9464:	2025883a 	mov	r18,r4
    9468:	d9000315 	stw	r4,12(sp)
    946c:	dcc00415 	stw	r19,16(sp)
    9470:	00098700 	call	9870 <__clzsi2>
    9474:	11000744 	addi	r4,r2,29
    9478:	013fe80e 	bge	zero,r4,941c <__floatsidf+0x34>
    947c:	10bfff44 	addi	r2,r2,-3
    9480:	10000c16 	blt	r2,zero,94b4 <__floatsidf+0xcc>
    9484:	90a2983a 	sll	r17,r18,r2
    9488:	0021883a 	mov	r16,zero
    948c:	d8800217 	ldw	r2,8(sp)
    9490:	dc400415 	stw	r17,16(sp)
    9494:	dc000315 	stw	r16,12(sp)
    9498:	1105c83a 	sub	r2,r2,r4
    949c:	d8800215 	stw	r2,8(sp)
    94a0:	003fde06 	br	941c <__floatsidf+0x34>
    94a4:	00a00034 	movhi	r2,32768
    94a8:	20800a26 	beq	r4,r2,94d4 <__floatsidf+0xec>
    94ac:	0109c83a 	sub	r4,zero,r4
    94b0:	003feb06 	br	9460 <__floatsidf+0x78>
    94b4:	9006d07a 	srli	r3,r18,1
    94b8:	008007c4 	movi	r2,31
    94bc:	1105c83a 	sub	r2,r2,r4
    94c0:	1886d83a 	srl	r3,r3,r2
    94c4:	9922983a 	sll	r17,r19,r4
    94c8:	9120983a 	sll	r16,r18,r4
    94cc:	1c62b03a 	or	r17,r3,r17
    94d0:	003fee06 	br	948c <__floatsidf+0xa4>
    94d4:	0009883a 	mov	r4,zero
    94d8:	01707834 	movhi	r5,49632
    94dc:	003fd306 	br	942c <__floatsidf+0x44>

000094e0 <__fixdfsi>:
    94e0:	defff804 	addi	sp,sp,-32
    94e4:	2005883a 	mov	r2,r4
    94e8:	2807883a 	mov	r3,r5
    94ec:	d809883a 	mov	r4,sp
    94f0:	d9400204 	addi	r5,sp,8
    94f4:	d8c00115 	stw	r3,4(sp)
    94f8:	d8800015 	stw	r2,0(sp)
    94fc:	dfc00715 	stw	ra,28(sp)
    9500:	0009c040 	call	9c04 <__unpack_d>
    9504:	d8c00217 	ldw	r3,8(sp)
    9508:	00800084 	movi	r2,2
    950c:	1880051e 	bne	r3,r2,9524 <__fixdfsi+0x44>
    9510:	0007883a 	mov	r3,zero
    9514:	1805883a 	mov	r2,r3
    9518:	dfc00717 	ldw	ra,28(sp)
    951c:	dec00804 	addi	sp,sp,32
    9520:	f800283a 	ret
    9524:	00800044 	movi	r2,1
    9528:	10fff92e 	bgeu	r2,r3,9510 <__fixdfsi+0x30>
    952c:	00800104 	movi	r2,4
    9530:	18800426 	beq	r3,r2,9544 <__fixdfsi+0x64>
    9534:	d8c00417 	ldw	r3,16(sp)
    9538:	183ff516 	blt	r3,zero,9510 <__fixdfsi+0x30>
    953c:	00800784 	movi	r2,30
    9540:	10c0080e 	bge	r2,r3,9564 <__fixdfsi+0x84>
    9544:	d8800317 	ldw	r2,12(sp)
    9548:	1000121e 	bne	r2,zero,9594 <__fixdfsi+0xb4>
    954c:	00e00034 	movhi	r3,32768
    9550:	18ffffc4 	addi	r3,r3,-1
    9554:	1805883a 	mov	r2,r3
    9558:	dfc00717 	ldw	ra,28(sp)
    955c:	dec00804 	addi	sp,sp,32
    9560:	f800283a 	ret
    9564:	00800f04 	movi	r2,60
    9568:	10d1c83a 	sub	r8,r2,r3
    956c:	40bff804 	addi	r2,r8,-32
    9570:	d9800517 	ldw	r6,20(sp)
    9574:	d9c00617 	ldw	r7,24(sp)
    9578:	10000816 	blt	r2,zero,959c <__fixdfsi+0xbc>
    957c:	3888d83a 	srl	r4,r7,r2
    9580:	d8800317 	ldw	r2,12(sp)
    9584:	2007883a 	mov	r3,r4
    9588:	103fe226 	beq	r2,zero,9514 <__fixdfsi+0x34>
    958c:	0107c83a 	sub	r3,zero,r4
    9590:	003fe006 	br	9514 <__fixdfsi+0x34>
    9594:	00e00034 	movhi	r3,32768
    9598:	003fde06 	br	9514 <__fixdfsi+0x34>
    959c:	39c7883a 	add	r3,r7,r7
    95a0:	008007c4 	movi	r2,31
    95a4:	1205c83a 	sub	r2,r2,r8
    95a8:	1886983a 	sll	r3,r3,r2
    95ac:	3208d83a 	srl	r4,r6,r8
    95b0:	1908b03a 	or	r4,r3,r4
    95b4:	003ff206 	br	9580 <__fixdfsi+0xa0>

000095b8 <__floatunsidf>:
    95b8:	defff204 	addi	sp,sp,-56
    95bc:	dfc00d15 	stw	ra,52(sp)
    95c0:	ddc00c15 	stw	r23,48(sp)
    95c4:	dd800b15 	stw	r22,44(sp)
    95c8:	dd400a15 	stw	r21,40(sp)
    95cc:	dd000915 	stw	r20,36(sp)
    95d0:	dcc00815 	stw	r19,32(sp)
    95d4:	dc800715 	stw	r18,28(sp)
    95d8:	dc400615 	stw	r17,24(sp)
    95dc:	dc000515 	stw	r16,20(sp)
    95e0:	d8000115 	stw	zero,4(sp)
    95e4:	20000f1e 	bne	r4,zero,9624 <__floatunsidf+0x6c>
    95e8:	00800084 	movi	r2,2
    95ec:	d8800015 	stw	r2,0(sp)
    95f0:	d809883a 	mov	r4,sp
    95f4:	00098f00 	call	98f0 <__pack_d>
    95f8:	dfc00d17 	ldw	ra,52(sp)
    95fc:	ddc00c17 	ldw	r23,48(sp)
    9600:	dd800b17 	ldw	r22,44(sp)
    9604:	dd400a17 	ldw	r21,40(sp)
    9608:	dd000917 	ldw	r20,36(sp)
    960c:	dcc00817 	ldw	r19,32(sp)
    9610:	dc800717 	ldw	r18,28(sp)
    9614:	dc400617 	ldw	r17,24(sp)
    9618:	dc000517 	ldw	r16,20(sp)
    961c:	dec00e04 	addi	sp,sp,56
    9620:	f800283a 	ret
    9624:	008000c4 	movi	r2,3
    9628:	00c00f04 	movi	r3,60
    962c:	002f883a 	mov	r23,zero
    9630:	202d883a 	mov	r22,r4
    9634:	d8800015 	stw	r2,0(sp)
    9638:	d8c00215 	stw	r3,8(sp)
    963c:	d9000315 	stw	r4,12(sp)
    9640:	ddc00415 	stw	r23,16(sp)
    9644:	00098700 	call	9870 <__clzsi2>
    9648:	12400744 	addi	r9,r2,29
    964c:	48000b16 	blt	r9,zero,967c <__floatunsidf+0xc4>
    9650:	483fe726 	beq	r9,zero,95f0 <__floatunsidf+0x38>
    9654:	10bfff44 	addi	r2,r2,-3
    9658:	10002e16 	blt	r2,zero,9714 <__floatunsidf+0x15c>
    965c:	b0a2983a 	sll	r17,r22,r2
    9660:	0021883a 	mov	r16,zero
    9664:	d8800217 	ldw	r2,8(sp)
    9668:	dc400415 	stw	r17,16(sp)
    966c:	dc000315 	stw	r16,12(sp)
    9670:	1245c83a 	sub	r2,r2,r9
    9674:	d8800215 	stw	r2,8(sp)
    9678:	003fdd06 	br	95f0 <__floatunsidf+0x38>
    967c:	0255c83a 	sub	r10,zero,r9
    9680:	51bff804 	addi	r6,r10,-32
    9684:	30001b16 	blt	r6,zero,96f4 <__floatunsidf+0x13c>
    9688:	b9a8d83a 	srl	r20,r23,r6
    968c:	002b883a 	mov	r21,zero
    9690:	000f883a 	mov	r7,zero
    9694:	01000044 	movi	r4,1
    9698:	0011883a 	mov	r8,zero
    969c:	30002516 	blt	r6,zero,9734 <__floatunsidf+0x17c>
    96a0:	21a6983a 	sll	r19,r4,r6
    96a4:	0025883a 	mov	r18,zero
    96a8:	00bfffc4 	movi	r2,-1
    96ac:	9089883a 	add	r4,r18,r2
    96b0:	988b883a 	add	r5,r19,r2
    96b4:	248d803a 	cmpltu	r6,r4,r18
    96b8:	314b883a 	add	r5,r6,r5
    96bc:	b104703a 	and	r2,r22,r4
    96c0:	b946703a 	and	r3,r23,r5
    96c4:	10c4b03a 	or	r2,r2,r3
    96c8:	10000226 	beq	r2,zero,96d4 <__floatunsidf+0x11c>
    96cc:	01c00044 	movi	r7,1
    96d0:	0011883a 	mov	r8,zero
    96d4:	d9000217 	ldw	r4,8(sp)
    96d8:	a1c4b03a 	or	r2,r20,r7
    96dc:	aa06b03a 	or	r3,r21,r8
    96e0:	2249c83a 	sub	r4,r4,r9
    96e4:	d8c00415 	stw	r3,16(sp)
    96e8:	d9000215 	stw	r4,8(sp)
    96ec:	d8800315 	stw	r2,12(sp)
    96f0:	003fbf06 	br	95f0 <__floatunsidf+0x38>
    96f4:	bdc7883a 	add	r3,r23,r23
    96f8:	008007c4 	movi	r2,31
    96fc:	1285c83a 	sub	r2,r2,r10
    9700:	1886983a 	sll	r3,r3,r2
    9704:	b2a8d83a 	srl	r20,r22,r10
    9708:	baaad83a 	srl	r21,r23,r10
    970c:	1d28b03a 	or	r20,r3,r20
    9710:	003fdf06 	br	9690 <__floatunsidf+0xd8>
    9714:	b006d07a 	srli	r3,r22,1
    9718:	008007c4 	movi	r2,31
    971c:	1245c83a 	sub	r2,r2,r9
    9720:	1886d83a 	srl	r3,r3,r2
    9724:	ba62983a 	sll	r17,r23,r9
    9728:	b260983a 	sll	r16,r22,r9
    972c:	1c62b03a 	or	r17,r3,r17
    9730:	003fcc06 	br	9664 <__floatunsidf+0xac>
    9734:	2006d07a 	srli	r3,r4,1
    9738:	008007c4 	movi	r2,31
    973c:	1285c83a 	sub	r2,r2,r10
    9740:	18a6d83a 	srl	r19,r3,r2
    9744:	22a4983a 	sll	r18,r4,r10
    9748:	003fd706 	br	96a8 <__floatunsidf+0xf0>

0000974c <__muldi3>:
    974c:	defff204 	addi	sp,sp,-56
    9750:	df000c15 	stw	fp,48(sp)
    9754:	3038d43a 	srli	fp,r6,16
    9758:	dd000815 	stw	r20,32(sp)
    975c:	dc400515 	stw	r17,20(sp)
    9760:	2028d43a 	srli	r20,r4,16
    9764:	247fffcc 	andi	r17,r4,65535
    9768:	dc000415 	stw	r16,16(sp)
    976c:	343fffcc 	andi	r16,r6,65535
    9770:	dcc00715 	stw	r19,28(sp)
    9774:	d9000015 	stw	r4,0(sp)
    9778:	2827883a 	mov	r19,r5
    977c:	8809883a 	mov	r4,r17
    9780:	d9400115 	stw	r5,4(sp)
    9784:	800b883a 	mov	r5,r16
    9788:	d9800215 	stw	r6,8(sp)
    978c:	dfc00d15 	stw	ra,52(sp)
    9790:	d9c00315 	stw	r7,12(sp)
    9794:	dd800a15 	stw	r22,40(sp)
    9798:	dd400915 	stw	r21,36(sp)
    979c:	302d883a 	mov	r22,r6
    97a0:	ddc00b15 	stw	r23,44(sp)
    97a4:	dc800615 	stw	r18,24(sp)
    97a8:	00005700 	call	570 <__mulsi3>
    97ac:	8809883a 	mov	r4,r17
    97b0:	e00b883a 	mov	r5,fp
    97b4:	102b883a 	mov	r21,r2
    97b8:	00005700 	call	570 <__mulsi3>
    97bc:	800b883a 	mov	r5,r16
    97c0:	a009883a 	mov	r4,r20
    97c4:	1023883a 	mov	r17,r2
    97c8:	00005700 	call	570 <__mulsi3>
    97cc:	a009883a 	mov	r4,r20
    97d0:	e00b883a 	mov	r5,fp
    97d4:	1021883a 	mov	r16,r2
    97d8:	00005700 	call	570 <__mulsi3>
    97dc:	a8ffffcc 	andi	r3,r21,65535
    97e0:	a82ad43a 	srli	r21,r21,16
    97e4:	8c23883a 	add	r17,r17,r16
    97e8:	1011883a 	mov	r8,r2
    97ec:	ac6b883a 	add	r21,r21,r17
    97f0:	a804943a 	slli	r2,r21,16
    97f4:	b009883a 	mov	r4,r22
    97f8:	980b883a 	mov	r5,r19
    97fc:	10c7883a 	add	r3,r2,r3
    9800:	a812d43a 	srli	r9,r21,16
    9804:	180d883a 	mov	r6,r3
    9808:	ac00022e 	bgeu	r21,r16,9814 <__muldi3+0xc8>
    980c:	00800074 	movhi	r2,1
    9810:	4091883a 	add	r8,r8,r2
    9814:	4267883a 	add	r19,r8,r9
    9818:	302d883a 	mov	r22,r6
    981c:	00005700 	call	570 <__mulsi3>
    9820:	d9400317 	ldw	r5,12(sp)
    9824:	d9000017 	ldw	r4,0(sp)
    9828:	1023883a 	mov	r17,r2
    982c:	00005700 	call	570 <__mulsi3>
    9830:	14cb883a 	add	r5,r2,r19
    9834:	894b883a 	add	r5,r17,r5
    9838:	b005883a 	mov	r2,r22
    983c:	2807883a 	mov	r3,r5
    9840:	dfc00d17 	ldw	ra,52(sp)
    9844:	df000c17 	ldw	fp,48(sp)
    9848:	ddc00b17 	ldw	r23,44(sp)
    984c:	dd800a17 	ldw	r22,40(sp)
    9850:	dd400917 	ldw	r21,36(sp)
    9854:	dd000817 	ldw	r20,32(sp)
    9858:	dcc00717 	ldw	r19,28(sp)
    985c:	dc800617 	ldw	r18,24(sp)
    9860:	dc400517 	ldw	r17,20(sp)
    9864:	dc000417 	ldw	r16,16(sp)
    9868:	dec00e04 	addi	sp,sp,56
    986c:	f800283a 	ret

00009870 <__clzsi2>:
    9870:	00bfffd4 	movui	r2,65535
    9874:	11000e36 	bltu	r2,r4,98b0 <__clzsi2+0x40>
    9878:	00803fc4 	movi	r2,255
    987c:	01400204 	movi	r5,8
    9880:	0007883a 	mov	r3,zero
    9884:	11001036 	bltu	r2,r4,98c8 <__clzsi2+0x58>
    9888:	000b883a 	mov	r5,zero
    988c:	20c6d83a 	srl	r3,r4,r3
    9890:	00800074 	movhi	r2,1
    9894:	10b29904 	addi	r2,r2,-13724
    9898:	1887883a 	add	r3,r3,r2
    989c:	18800003 	ldbu	r2,0(r3)
    98a0:	00c00804 	movi	r3,32
    98a4:	2885883a 	add	r2,r5,r2
    98a8:	1885c83a 	sub	r2,r3,r2
    98ac:	f800283a 	ret
    98b0:	01400404 	movi	r5,16
    98b4:	00804034 	movhi	r2,256
    98b8:	10bfffc4 	addi	r2,r2,-1
    98bc:	2807883a 	mov	r3,r5
    98c0:	113ff22e 	bgeu	r2,r4,988c <__clzsi2+0x1c>
    98c4:	01400604 	movi	r5,24
    98c8:	2807883a 	mov	r3,r5
    98cc:	20c6d83a 	srl	r3,r4,r3
    98d0:	00800074 	movhi	r2,1
    98d4:	10b29904 	addi	r2,r2,-13724
    98d8:	1887883a 	add	r3,r3,r2
    98dc:	18800003 	ldbu	r2,0(r3)
    98e0:	00c00804 	movi	r3,32
    98e4:	2885883a 	add	r2,r5,r2
    98e8:	1885c83a 	sub	r2,r3,r2
    98ec:	f800283a 	ret

000098f0 <__pack_d>:
    98f0:	20c00017 	ldw	r3,0(r4)
    98f4:	defffd04 	addi	sp,sp,-12
    98f8:	dc000015 	stw	r16,0(sp)
    98fc:	dc800215 	stw	r18,8(sp)
    9900:	dc400115 	stw	r17,4(sp)
    9904:	00800044 	movi	r2,1
    9908:	22000317 	ldw	r8,12(r4)
    990c:	001f883a 	mov	r15,zero
    9910:	22400417 	ldw	r9,16(r4)
    9914:	24000117 	ldw	r16,4(r4)
    9918:	10c0552e 	bgeu	r2,r3,9a70 <__pack_d+0x180>
    991c:	00800104 	movi	r2,4
    9920:	18804f26 	beq	r3,r2,9a60 <__pack_d+0x170>
    9924:	00800084 	movi	r2,2
    9928:	18800226 	beq	r3,r2,9934 <__pack_d+0x44>
    992c:	4244b03a 	or	r2,r8,r9
    9930:	10001a1e 	bne	r2,zero,999c <__pack_d+0xac>
    9934:	000d883a 	mov	r6,zero
    9938:	000f883a 	mov	r7,zero
    993c:	0011883a 	mov	r8,zero
    9940:	00800434 	movhi	r2,16
    9944:	10bfffc4 	addi	r2,r2,-1
    9948:	301d883a 	mov	r14,r6
    994c:	3884703a 	and	r2,r7,r2
    9950:	400a953a 	slli	r5,r8,20
    9954:	79bffc2c 	andhi	r6,r15,65520
    9958:	308cb03a 	or	r6,r6,r2
    995c:	00e00434 	movhi	r3,32784
    9960:	18ffffc4 	addi	r3,r3,-1
    9964:	800497fa 	slli	r2,r16,31
    9968:	30c6703a 	and	r3,r6,r3
    996c:	1946b03a 	or	r3,r3,r5
    9970:	01600034 	movhi	r5,32768
    9974:	297fffc4 	addi	r5,r5,-1
    9978:	194a703a 	and	r5,r3,r5
    997c:	288ab03a 	or	r5,r5,r2
    9980:	2807883a 	mov	r3,r5
    9984:	7005883a 	mov	r2,r14
    9988:	dc800217 	ldw	r18,8(sp)
    998c:	dc400117 	ldw	r17,4(sp)
    9990:	dc000017 	ldw	r16,0(sp)
    9994:	dec00304 	addi	sp,sp,12
    9998:	f800283a 	ret
    999c:	21000217 	ldw	r4,8(r4)
    99a0:	00bf0084 	movi	r2,-1022
    99a4:	20803f16 	blt	r4,r2,9aa4 <__pack_d+0x1b4>
    99a8:	0080ffc4 	movi	r2,1023
    99ac:	11002c16 	blt	r2,r4,9a60 <__pack_d+0x170>
    99b0:	00803fc4 	movi	r2,255
    99b4:	408c703a 	and	r6,r8,r2
    99b8:	00802004 	movi	r2,128
    99bc:	0007883a 	mov	r3,zero
    99c0:	000f883a 	mov	r7,zero
    99c4:	2280ffc4 	addi	r10,r4,1023
    99c8:	30801e26 	beq	r6,r2,9a44 <__pack_d+0x154>
    99cc:	00801fc4 	movi	r2,127
    99d0:	4089883a 	add	r4,r8,r2
    99d4:	220d803a 	cmpltu	r6,r4,r8
    99d8:	324d883a 	add	r6,r6,r9
    99dc:	2011883a 	mov	r8,r4
    99e0:	3013883a 	mov	r9,r6
    99e4:	00880034 	movhi	r2,8192
    99e8:	10bfffc4 	addi	r2,r2,-1
    99ec:	12400d36 	bltu	r2,r9,9a24 <__pack_d+0x134>
    99f0:	4804963a 	slli	r2,r9,24
    99f4:	400cd23a 	srli	r6,r8,8
    99f8:	480ed23a 	srli	r7,r9,8
    99fc:	013fffc4 	movi	r4,-1
    9a00:	118cb03a 	or	r6,r2,r6
    9a04:	01400434 	movhi	r5,16
    9a08:	297fffc4 	addi	r5,r5,-1
    9a0c:	3104703a 	and	r2,r6,r4
    9a10:	3946703a 	and	r3,r7,r5
    9a14:	5201ffcc 	andi	r8,r10,2047
    9a18:	100d883a 	mov	r6,r2
    9a1c:	180f883a 	mov	r7,r3
    9a20:	003fc706 	br	9940 <__pack_d+0x50>
    9a24:	480897fa 	slli	r4,r9,31
    9a28:	4004d07a 	srli	r2,r8,1
    9a2c:	4806d07a 	srli	r3,r9,1
    9a30:	52800044 	addi	r10,r10,1
    9a34:	2084b03a 	or	r2,r4,r2
    9a38:	1011883a 	mov	r8,r2
    9a3c:	1813883a 	mov	r9,r3
    9a40:	003feb06 	br	99f0 <__pack_d+0x100>
    9a44:	383fe11e 	bne	r7,zero,99cc <__pack_d+0xdc>
    9a48:	01004004 	movi	r4,256
    9a4c:	4104703a 	and	r2,r8,r4
    9a50:	10c4b03a 	or	r2,r2,r3
    9a54:	103fe326 	beq	r2,zero,99e4 <__pack_d+0xf4>
    9a58:	3005883a 	mov	r2,r6
    9a5c:	003fdc06 	br	99d0 <__pack_d+0xe0>
    9a60:	000d883a 	mov	r6,zero
    9a64:	000f883a 	mov	r7,zero
    9a68:	0201ffc4 	movi	r8,2047
    9a6c:	003fb406 	br	9940 <__pack_d+0x50>
    9a70:	0005883a 	mov	r2,zero
    9a74:	00c00234 	movhi	r3,8
    9a78:	408cb03a 	or	r6,r8,r2
    9a7c:	48ceb03a 	or	r7,r9,r3
    9a80:	013fffc4 	movi	r4,-1
    9a84:	01400434 	movhi	r5,16
    9a88:	297fffc4 	addi	r5,r5,-1
    9a8c:	3104703a 	and	r2,r6,r4
    9a90:	3946703a 	and	r3,r7,r5
    9a94:	100d883a 	mov	r6,r2
    9a98:	180f883a 	mov	r7,r3
    9a9c:	0201ffc4 	movi	r8,2047
    9aa0:	003fa706 	br	9940 <__pack_d+0x50>
    9aa4:	1109c83a 	sub	r4,r2,r4
    9aa8:	00800e04 	movi	r2,56
    9aac:	11004316 	blt	r2,r4,9bbc <__pack_d+0x2cc>
    9ab0:	21fff804 	addi	r7,r4,-32
    9ab4:	38004516 	blt	r7,zero,9bcc <__pack_d+0x2dc>
    9ab8:	49d8d83a 	srl	r12,r9,r7
    9abc:	001b883a 	mov	r13,zero
    9ac0:	0023883a 	mov	r17,zero
    9ac4:	01400044 	movi	r5,1
    9ac8:	0025883a 	mov	r18,zero
    9acc:	38004716 	blt	r7,zero,9bec <__pack_d+0x2fc>
    9ad0:	29d6983a 	sll	r11,r5,r7
    9ad4:	0015883a 	mov	r10,zero
    9ad8:	00bfffc4 	movi	r2,-1
    9adc:	5089883a 	add	r4,r10,r2
    9ae0:	588b883a 	add	r5,r11,r2
    9ae4:	228d803a 	cmpltu	r6,r4,r10
    9ae8:	314b883a 	add	r5,r6,r5
    9aec:	4104703a 	and	r2,r8,r4
    9af0:	4946703a 	and	r3,r9,r5
    9af4:	10c4b03a 	or	r2,r2,r3
    9af8:	10000226 	beq	r2,zero,9b04 <__pack_d+0x214>
    9afc:	04400044 	movi	r17,1
    9b00:	0025883a 	mov	r18,zero
    9b04:	00803fc4 	movi	r2,255
    9b08:	644eb03a 	or	r7,r12,r17
    9b0c:	3892703a 	and	r9,r7,r2
    9b10:	00802004 	movi	r2,128
    9b14:	6c90b03a 	or	r8,r13,r18
    9b18:	0015883a 	mov	r10,zero
    9b1c:	48801626 	beq	r9,r2,9b78 <__pack_d+0x288>
    9b20:	01001fc4 	movi	r4,127
    9b24:	3905883a 	add	r2,r7,r4
    9b28:	11cd803a 	cmpltu	r6,r2,r7
    9b2c:	320d883a 	add	r6,r6,r8
    9b30:	100f883a 	mov	r7,r2
    9b34:	00840034 	movhi	r2,4096
    9b38:	10bfffc4 	addi	r2,r2,-1
    9b3c:	3011883a 	mov	r8,r6
    9b40:	0007883a 	mov	r3,zero
    9b44:	11801b36 	bltu	r2,r6,9bb4 <__pack_d+0x2c4>
    9b48:	4004963a 	slli	r2,r8,24
    9b4c:	3808d23a 	srli	r4,r7,8
    9b50:	400ad23a 	srli	r5,r8,8
    9b54:	1813883a 	mov	r9,r3
    9b58:	1108b03a 	or	r4,r2,r4
    9b5c:	00bfffc4 	movi	r2,-1
    9b60:	00c00434 	movhi	r3,16
    9b64:	18ffffc4 	addi	r3,r3,-1
    9b68:	208c703a 	and	r6,r4,r2
    9b6c:	28ce703a 	and	r7,r5,r3
    9b70:	4a01ffcc 	andi	r8,r9,2047
    9b74:	003f7206 	br	9940 <__pack_d+0x50>
    9b78:	503fe91e 	bne	r10,zero,9b20 <__pack_d+0x230>
    9b7c:	01004004 	movi	r4,256
    9b80:	3904703a 	and	r2,r7,r4
    9b84:	0007883a 	mov	r3,zero
    9b88:	10c4b03a 	or	r2,r2,r3
    9b8c:	10000626 	beq	r2,zero,9ba8 <__pack_d+0x2b8>
    9b90:	3a45883a 	add	r2,r7,r9
    9b94:	11cd803a 	cmpltu	r6,r2,r7
    9b98:	320d883a 	add	r6,r6,r8
    9b9c:	100f883a 	mov	r7,r2
    9ba0:	3011883a 	mov	r8,r6
    9ba4:	0007883a 	mov	r3,zero
    9ba8:	00840034 	movhi	r2,4096
    9bac:	10bfffc4 	addi	r2,r2,-1
    9bb0:	123fe52e 	bgeu	r2,r8,9b48 <__pack_d+0x258>
    9bb4:	00c00044 	movi	r3,1
    9bb8:	003fe306 	br	9b48 <__pack_d+0x258>
    9bbc:	0009883a 	mov	r4,zero
    9bc0:	0013883a 	mov	r9,zero
    9bc4:	000b883a 	mov	r5,zero
    9bc8:	003fe406 	br	9b5c <__pack_d+0x26c>
    9bcc:	4a47883a 	add	r3,r9,r9
    9bd0:	008007c4 	movi	r2,31
    9bd4:	1105c83a 	sub	r2,r2,r4
    9bd8:	1886983a 	sll	r3,r3,r2
    9bdc:	4118d83a 	srl	r12,r8,r4
    9be0:	491ad83a 	srl	r13,r9,r4
    9be4:	1b18b03a 	or	r12,r3,r12
    9be8:	003fb506 	br	9ac0 <__pack_d+0x1d0>
    9bec:	2806d07a 	srli	r3,r5,1
    9bf0:	008007c4 	movi	r2,31
    9bf4:	1105c83a 	sub	r2,r2,r4
    9bf8:	1896d83a 	srl	r11,r3,r2
    9bfc:	2914983a 	sll	r10,r5,r4
    9c00:	003fb506 	br	9ad8 <__pack_d+0x1e8>

00009c04 <__unpack_d>:
    9c04:	20c00117 	ldw	r3,4(r4)
    9c08:	22400017 	ldw	r9,0(r4)
    9c0c:	00800434 	movhi	r2,16
    9c10:	10bfffc4 	addi	r2,r2,-1
    9c14:	1808d53a 	srli	r4,r3,20
    9c18:	180cd7fa 	srli	r6,r3,31
    9c1c:	1894703a 	and	r10,r3,r2
    9c20:	2201ffcc 	andi	r8,r4,2047
    9c24:	281b883a 	mov	r13,r5
    9c28:	4817883a 	mov	r11,r9
    9c2c:	29800115 	stw	r6,4(r5)
    9c30:	5019883a 	mov	r12,r10
    9c34:	40001e1e 	bne	r8,zero,9cb0 <__unpack_d+0xac>
    9c38:	4a84b03a 	or	r2,r9,r10
    9c3c:	10001926 	beq	r2,zero,9ca4 <__unpack_d+0xa0>
    9c40:	4804d63a 	srli	r2,r9,24
    9c44:	500c923a 	slli	r6,r10,8
    9c48:	013f0084 	movi	r4,-1022
    9c4c:	00c40034 	movhi	r3,4096
    9c50:	18ffffc4 	addi	r3,r3,-1
    9c54:	118cb03a 	or	r6,r2,r6
    9c58:	008000c4 	movi	r2,3
    9c5c:	480a923a 	slli	r5,r9,8
    9c60:	68800015 	stw	r2,0(r13)
    9c64:	69000215 	stw	r4,8(r13)
    9c68:	19800b36 	bltu	r3,r6,9c98 <__unpack_d+0x94>
    9c6c:	200f883a 	mov	r7,r4
    9c70:	1811883a 	mov	r8,r3
    9c74:	2945883a 	add	r2,r5,r5
    9c78:	1149803a 	cmpltu	r4,r2,r5
    9c7c:	3187883a 	add	r3,r6,r6
    9c80:	20c9883a 	add	r4,r4,r3
    9c84:	100b883a 	mov	r5,r2
    9c88:	200d883a 	mov	r6,r4
    9c8c:	39ffffc4 	addi	r7,r7,-1
    9c90:	413ff82e 	bgeu	r8,r4,9c74 <__unpack_d+0x70>
    9c94:	69c00215 	stw	r7,8(r13)
    9c98:	69800415 	stw	r6,16(r13)
    9c9c:	69400315 	stw	r5,12(r13)
    9ca0:	f800283a 	ret
    9ca4:	00800084 	movi	r2,2
    9ca8:	28800015 	stw	r2,0(r5)
    9cac:	f800283a 	ret
    9cb0:	0081ffc4 	movi	r2,2047
    9cb4:	40800f26 	beq	r8,r2,9cf4 <__unpack_d+0xf0>
    9cb8:	480cd63a 	srli	r6,r9,24
    9cbc:	5006923a 	slli	r3,r10,8
    9cc0:	4804923a 	slli	r2,r9,8
    9cc4:	0009883a 	mov	r4,zero
    9cc8:	30c6b03a 	or	r3,r6,r3
    9ccc:	01440034 	movhi	r5,4096
    9cd0:	110cb03a 	or	r6,r2,r4
    9cd4:	423f0044 	addi	r8,r8,-1023
    9cd8:	194eb03a 	or	r7,r3,r5
    9cdc:	008000c4 	movi	r2,3
    9ce0:	69c00415 	stw	r7,16(r13)
    9ce4:	6a000215 	stw	r8,8(r13)
    9ce8:	68800015 	stw	r2,0(r13)
    9cec:	69800315 	stw	r6,12(r13)
    9cf0:	f800283a 	ret
    9cf4:	4a84b03a 	or	r2,r9,r10
    9cf8:	1000031e 	bne	r2,zero,9d08 <__unpack_d+0x104>
    9cfc:	00800104 	movi	r2,4
    9d00:	28800015 	stw	r2,0(r5)
    9d04:	f800283a 	ret
    9d08:	0009883a 	mov	r4,zero
    9d0c:	01400234 	movhi	r5,8
    9d10:	4904703a 	and	r2,r9,r4
    9d14:	5146703a 	and	r3,r10,r5
    9d18:	10c4b03a 	or	r2,r2,r3
    9d1c:	10000526 	beq	r2,zero,9d34 <__unpack_d+0x130>
    9d20:	00800044 	movi	r2,1
    9d24:	68800015 	stw	r2,0(r13)
    9d28:	6b000415 	stw	r12,16(r13)
    9d2c:	6ac00315 	stw	r11,12(r13)
    9d30:	f800283a 	ret
    9d34:	68000015 	stw	zero,0(r13)
    9d38:	003ffb06 	br	9d28 <__unpack_d+0x124>

00009d3c <__fpcmp_parts_d>:
    9d3c:	21800017 	ldw	r6,0(r4)
    9d40:	00c00044 	movi	r3,1
    9d44:	19800a2e 	bgeu	r3,r6,9d70 <__fpcmp_parts_d+0x34>
    9d48:	28800017 	ldw	r2,0(r5)
    9d4c:	1880082e 	bgeu	r3,r2,9d70 <__fpcmp_parts_d+0x34>
    9d50:	00c00104 	movi	r3,4
    9d54:	30c02626 	beq	r6,r3,9df0 <__fpcmp_parts_d+0xb4>
    9d58:	10c02226 	beq	r2,r3,9de4 <__fpcmp_parts_d+0xa8>
    9d5c:	00c00084 	movi	r3,2
    9d60:	30c00526 	beq	r6,r3,9d78 <__fpcmp_parts_d+0x3c>
    9d64:	10c0071e 	bne	r2,r3,9d84 <__fpcmp_parts_d+0x48>
    9d68:	20800117 	ldw	r2,4(r4)
    9d6c:	1000091e 	bne	r2,zero,9d94 <__fpcmp_parts_d+0x58>
    9d70:	00800044 	movi	r2,1
    9d74:	f800283a 	ret
    9d78:	10c01a1e 	bne	r2,r3,9de4 <__fpcmp_parts_d+0xa8>
    9d7c:	0005883a 	mov	r2,zero
    9d80:	f800283a 	ret
    9d84:	22000117 	ldw	r8,4(r4)
    9d88:	28800117 	ldw	r2,4(r5)
    9d8c:	40800326 	beq	r8,r2,9d9c <__fpcmp_parts_d+0x60>
    9d90:	403ff726 	beq	r8,zero,9d70 <__fpcmp_parts_d+0x34>
    9d94:	00bfffc4 	movi	r2,-1
    9d98:	f800283a 	ret
    9d9c:	20c00217 	ldw	r3,8(r4)
    9da0:	28800217 	ldw	r2,8(r5)
    9da4:	10fffa16 	blt	r2,r3,9d90 <__fpcmp_parts_d+0x54>
    9da8:	18800916 	blt	r3,r2,9dd0 <__fpcmp_parts_d+0x94>
    9dac:	21c00417 	ldw	r7,16(r4)
    9db0:	28c00417 	ldw	r3,16(r5)
    9db4:	21800317 	ldw	r6,12(r4)
    9db8:	28800317 	ldw	r2,12(r5)
    9dbc:	19fff436 	bltu	r3,r7,9d90 <__fpcmp_parts_d+0x54>
    9dc0:	38c00526 	beq	r7,r3,9dd8 <__fpcmp_parts_d+0x9c>
    9dc4:	38c00236 	bltu	r7,r3,9dd0 <__fpcmp_parts_d+0x94>
    9dc8:	19ffec1e 	bne	r3,r7,9d7c <__fpcmp_parts_d+0x40>
    9dcc:	30bfeb2e 	bgeu	r6,r2,9d7c <__fpcmp_parts_d+0x40>
    9dd0:	403fe71e 	bne	r8,zero,9d70 <__fpcmp_parts_d+0x34>
    9dd4:	003fef06 	br	9d94 <__fpcmp_parts_d+0x58>
    9dd8:	11bffa2e 	bgeu	r2,r6,9dc4 <__fpcmp_parts_d+0x88>
    9ddc:	403fe426 	beq	r8,zero,9d70 <__fpcmp_parts_d+0x34>
    9de0:	003fec06 	br	9d94 <__fpcmp_parts_d+0x58>
    9de4:	28800117 	ldw	r2,4(r5)
    9de8:	103fe11e 	bne	r2,zero,9d70 <__fpcmp_parts_d+0x34>
    9dec:	003fe906 	br	9d94 <__fpcmp_parts_d+0x58>
    9df0:	11bfdd1e 	bne	r2,r6,9d68 <__fpcmp_parts_d+0x2c>
    9df4:	28c00117 	ldw	r3,4(r5)
    9df8:	20800117 	ldw	r2,4(r4)
    9dfc:	1885c83a 	sub	r2,r3,r2
    9e00:	f800283a 	ret

00009e04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    9e04:	defff404 	addi	sp,sp,-48
    9e08:	df000b15 	stw	fp,44(sp)
    9e0c:	df000b04 	addi	fp,sp,44
    9e10:	e13ffb15 	stw	r4,-20(fp)
    9e14:	e17ffc15 	stw	r5,-16(fp)
    9e18:	e1bffd15 	stw	r6,-12(fp)
    9e1c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    9e20:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    9e24:	00800074 	movhi	r2,1
    9e28:	10801e04 	addi	r2,r2,120
    9e2c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    9e30:	1005003a 	cmpeq	r2,r2,zero
    9e34:	1000411e 	bne	r2,zero,9f3c <alt_alarm_start+0x138>
  {
    if (alarm)
    9e38:	e0bffb17 	ldw	r2,-20(fp)
    9e3c:	1005003a 	cmpeq	r2,r2,zero
    9e40:	10003b1e 	bne	r2,zero,9f30 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    9e44:	e0fffb17 	ldw	r3,-20(fp)
    9e48:	e0bffd17 	ldw	r2,-12(fp)
    9e4c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    9e50:	e0fffb17 	ldw	r3,-20(fp)
    9e54:	e0bffe17 	ldw	r2,-8(fp)
    9e58:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9e5c:	0005303a 	rdctl	r2,status
    9e60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9e64:	e0fff817 	ldw	r3,-32(fp)
    9e68:	00bfff84 	movi	r2,-2
    9e6c:	1884703a 	and	r2,r3,r2
    9e70:	1001703a 	wrctl	status,r2
  
  return context;
    9e74:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    9e78:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    9e7c:	00800074 	movhi	r2,1
    9e80:	10801f04 	addi	r2,r2,124
    9e84:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    9e88:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    9e8c:	e0fffc17 	ldw	r3,-16(fp)
    9e90:	e0bff917 	ldw	r2,-28(fp)
    9e94:	1885883a 	add	r2,r3,r2
    9e98:	10c00044 	addi	r3,r2,1
    9e9c:	e0bffb17 	ldw	r2,-20(fp)
    9ea0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    9ea4:	e0bffb17 	ldw	r2,-20(fp)
    9ea8:	10c00217 	ldw	r3,8(r2)
    9eac:	e0bff917 	ldw	r2,-28(fp)
    9eb0:	1880042e 	bgeu	r3,r2,9ec4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    9eb4:	e0fffb17 	ldw	r3,-20(fp)
    9eb8:	00800044 	movi	r2,1
    9ebc:	18800405 	stb	r2,16(r3)
    9ec0:	00000206 	br	9ecc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    9ec4:	e0bffb17 	ldw	r2,-20(fp)
    9ec8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    9ecc:	e0fffb17 	ldw	r3,-20(fp)
    9ed0:	00800074 	movhi	r2,1
    9ed4:	10b97804 	addi	r2,r2,-6688
    9ed8:	e0bff615 	stw	r2,-40(fp)
    9edc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9ee0:	e0fff717 	ldw	r3,-36(fp)
    9ee4:	e0bff617 	ldw	r2,-40(fp)
    9ee8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    9eec:	e0bff617 	ldw	r2,-40(fp)
    9ef0:	10c00017 	ldw	r3,0(r2)
    9ef4:	e0bff717 	ldw	r2,-36(fp)
    9ef8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9efc:	e0bff617 	ldw	r2,-40(fp)
    9f00:	10c00017 	ldw	r3,0(r2)
    9f04:	e0bff717 	ldw	r2,-36(fp)
    9f08:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    9f0c:	e0fff617 	ldw	r3,-40(fp)
    9f10:	e0bff717 	ldw	r2,-36(fp)
    9f14:	18800015 	stw	r2,0(r3)
    9f18:	e0bffa17 	ldw	r2,-24(fp)
    9f1c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f20:	e0bff517 	ldw	r2,-44(fp)
    9f24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    9f28:	e03fff15 	stw	zero,-4(fp)
    9f2c:	00000506 	br	9f44 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    9f30:	00bffa84 	movi	r2,-22
    9f34:	e0bfff15 	stw	r2,-4(fp)
    9f38:	00000206 	br	9f44 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    9f3c:	00bfde84 	movi	r2,-134
    9f40:	e0bfff15 	stw	r2,-4(fp)
    9f44:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    9f48:	e037883a 	mov	sp,fp
    9f4c:	df000017 	ldw	fp,0(sp)
    9f50:	dec00104 	addi	sp,sp,4
    9f54:	f800283a 	ret

00009f58 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9f58:	defff804 	addi	sp,sp,-32
    9f5c:	dfc00715 	stw	ra,28(sp)
    9f60:	df000615 	stw	fp,24(sp)
    9f64:	df000604 	addi	fp,sp,24
    9f68:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9f6c:	e0bffc17 	ldw	r2,-16(fp)
    9f70:	1004803a 	cmplt	r2,r2,zero
    9f74:	1000091e 	bne	r2,zero,9f9c <close+0x44>
    9f78:	e13ffc17 	ldw	r4,-16(fp)
    9f7c:	01400304 	movi	r5,12
    9f80:	00005700 	call	570 <__mulsi3>
    9f84:	1007883a 	mov	r3,r2
    9f88:	00800074 	movhi	r2,1
    9f8c:	10b4f304 	addi	r2,r2,-11316
    9f90:	1887883a 	add	r3,r3,r2
    9f94:	e0ffff15 	stw	r3,-4(fp)
    9f98:	00000106 	br	9fa0 <close+0x48>
    9f9c:	e03fff15 	stw	zero,-4(fp)
    9fa0:	e0bfff17 	ldw	r2,-4(fp)
    9fa4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9fa8:	e0bffb17 	ldw	r2,-20(fp)
    9fac:	1005003a 	cmpeq	r2,r2,zero
    9fb0:	10001d1e 	bne	r2,zero,a028 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9fb4:	e0bffb17 	ldw	r2,-20(fp)
    9fb8:	10800017 	ldw	r2,0(r2)
    9fbc:	10800417 	ldw	r2,16(r2)
    9fc0:	1005003a 	cmpeq	r2,r2,zero
    9fc4:	1000071e 	bne	r2,zero,9fe4 <close+0x8c>
    9fc8:	e0bffb17 	ldw	r2,-20(fp)
    9fcc:	10800017 	ldw	r2,0(r2)
    9fd0:	10800417 	ldw	r2,16(r2)
    9fd4:	e13ffb17 	ldw	r4,-20(fp)
    9fd8:	103ee83a 	callr	r2
    9fdc:	e0bffe15 	stw	r2,-8(fp)
    9fe0:	00000106 	br	9fe8 <close+0x90>
    9fe4:	e03ffe15 	stw	zero,-8(fp)
    9fe8:	e0bffe17 	ldw	r2,-8(fp)
    9fec:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9ff0:	e13ffc17 	ldw	r4,-16(fp)
    9ff4:	000a7b00 	call	a7b0 <alt_release_fd>
    if (rval < 0)
    9ff8:	e0bffa17 	ldw	r2,-24(fp)
    9ffc:	1004403a 	cmpge	r2,r2,zero
    a000:	1000071e 	bne	r2,zero,a020 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    a004:	000a0580 	call	a058 <alt_get_errno>
    a008:	e0fffa17 	ldw	r3,-24(fp)
    a00c:	00c7c83a 	sub	r3,zero,r3
    a010:	10c00015 	stw	r3,0(r2)
      return -1;
    a014:	00bfffc4 	movi	r2,-1
    a018:	e0bffd15 	stw	r2,-12(fp)
    a01c:	00000806 	br	a040 <close+0xe8>
    }
    return 0;
    a020:	e03ffd15 	stw	zero,-12(fp)
    a024:	00000606 	br	a040 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a028:	000a0580 	call	a058 <alt_get_errno>
    a02c:	1007883a 	mov	r3,r2
    a030:	00801444 	movi	r2,81
    a034:	18800015 	stw	r2,0(r3)
    return -1;
    a038:	00bfffc4 	movi	r2,-1
    a03c:	e0bffd15 	stw	r2,-12(fp)
    a040:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    a044:	e037883a 	mov	sp,fp
    a048:	dfc00117 	ldw	ra,4(sp)
    a04c:	df000017 	ldw	fp,0(sp)
    a050:	dec00204 	addi	sp,sp,8
    a054:	f800283a 	ret

0000a058 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a058:	defffd04 	addi	sp,sp,-12
    a05c:	dfc00215 	stw	ra,8(sp)
    a060:	df000115 	stw	fp,4(sp)
    a064:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a068:	00800074 	movhi	r2,1
    a06c:	10b97604 	addi	r2,r2,-6696
    a070:	10800017 	ldw	r2,0(r2)
    a074:	1005003a 	cmpeq	r2,r2,zero
    a078:	1000061e 	bne	r2,zero,a094 <alt_get_errno+0x3c>
    a07c:	00800074 	movhi	r2,1
    a080:	10b97604 	addi	r2,r2,-6696
    a084:	10800017 	ldw	r2,0(r2)
    a088:	103ee83a 	callr	r2
    a08c:	e0bfff15 	stw	r2,-4(fp)
    a090:	00000306 	br	a0a0 <alt_get_errno+0x48>
    a094:	00800074 	movhi	r2,1
    a098:	10801704 	addi	r2,r2,92
    a09c:	e0bfff15 	stw	r2,-4(fp)
    a0a0:	e0bfff17 	ldw	r2,-4(fp)
}
    a0a4:	e037883a 	mov	sp,fp
    a0a8:	dfc00117 	ldw	ra,4(sp)
    a0ac:	df000017 	ldw	fp,0(sp)
    a0b0:	dec00204 	addi	sp,sp,8
    a0b4:	f800283a 	ret

0000a0b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a0b8:	defffc04 	addi	sp,sp,-16
    a0bc:	df000315 	stw	fp,12(sp)
    a0c0:	df000304 	addi	fp,sp,12
    a0c4:	e13ffd15 	stw	r4,-12(fp)
    a0c8:	e17ffe15 	stw	r5,-8(fp)
    a0cc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a0d0:	e0bfff17 	ldw	r2,-4(fp)
}
    a0d4:	e037883a 	mov	sp,fp
    a0d8:	df000017 	ldw	fp,0(sp)
    a0dc:	dec00104 	addi	sp,sp,4
    a0e0:	f800283a 	ret

0000a0e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    a0e4:	defff904 	addi	sp,sp,-28
    a0e8:	dfc00615 	stw	ra,24(sp)
    a0ec:	df000515 	stw	fp,20(sp)
    a0f0:	df000504 	addi	fp,sp,20
    a0f4:	e13ffc15 	stw	r4,-16(fp)
    a0f8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a0fc:	e0bffc17 	ldw	r2,-16(fp)
    a100:	1004803a 	cmplt	r2,r2,zero
    a104:	1000091e 	bne	r2,zero,a12c <fstat+0x48>
    a108:	e13ffc17 	ldw	r4,-16(fp)
    a10c:	01400304 	movi	r5,12
    a110:	00005700 	call	570 <__mulsi3>
    a114:	1007883a 	mov	r3,r2
    a118:	00800074 	movhi	r2,1
    a11c:	10b4f304 	addi	r2,r2,-11316
    a120:	1887883a 	add	r3,r3,r2
    a124:	e0ffff15 	stw	r3,-4(fp)
    a128:	00000106 	br	a130 <fstat+0x4c>
    a12c:	e03fff15 	stw	zero,-4(fp)
    a130:	e0bfff17 	ldw	r2,-4(fp)
    a134:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    a138:	e0bffb17 	ldw	r2,-20(fp)
    a13c:	1005003a 	cmpeq	r2,r2,zero
    a140:	1000121e 	bne	r2,zero,a18c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    a144:	e0bffb17 	ldw	r2,-20(fp)
    a148:	10800017 	ldw	r2,0(r2)
    a14c:	10800817 	ldw	r2,32(r2)
    a150:	1005003a 	cmpeq	r2,r2,zero
    a154:	1000081e 	bne	r2,zero,a178 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    a158:	e0bffb17 	ldw	r2,-20(fp)
    a15c:	10800017 	ldw	r2,0(r2)
    a160:	10800817 	ldw	r2,32(r2)
    a164:	e13ffb17 	ldw	r4,-20(fp)
    a168:	e17ffd17 	ldw	r5,-12(fp)
    a16c:	103ee83a 	callr	r2
    a170:	e0bffe15 	stw	r2,-8(fp)
    a174:	00000b06 	br	a1a4 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    a178:	e0fffd17 	ldw	r3,-12(fp)
    a17c:	00880004 	movi	r2,8192
    a180:	18800115 	stw	r2,4(r3)
      return 0;
    a184:	e03ffe15 	stw	zero,-8(fp)
    a188:	00000606 	br	a1a4 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a18c:	000a1bc0 	call	a1bc <alt_get_errno>
    a190:	1007883a 	mov	r3,r2
    a194:	00801444 	movi	r2,81
    a198:	18800015 	stw	r2,0(r3)
    return -1;
    a19c:	00bfffc4 	movi	r2,-1
    a1a0:	e0bffe15 	stw	r2,-8(fp)
    a1a4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a1a8:	e037883a 	mov	sp,fp
    a1ac:	dfc00117 	ldw	ra,4(sp)
    a1b0:	df000017 	ldw	fp,0(sp)
    a1b4:	dec00204 	addi	sp,sp,8
    a1b8:	f800283a 	ret

0000a1bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a1bc:	defffd04 	addi	sp,sp,-12
    a1c0:	dfc00215 	stw	ra,8(sp)
    a1c4:	df000115 	stw	fp,4(sp)
    a1c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a1cc:	00800074 	movhi	r2,1
    a1d0:	10b97604 	addi	r2,r2,-6696
    a1d4:	10800017 	ldw	r2,0(r2)
    a1d8:	1005003a 	cmpeq	r2,r2,zero
    a1dc:	1000061e 	bne	r2,zero,a1f8 <alt_get_errno+0x3c>
    a1e0:	00800074 	movhi	r2,1
    a1e4:	10b97604 	addi	r2,r2,-6696
    a1e8:	10800017 	ldw	r2,0(r2)
    a1ec:	103ee83a 	callr	r2
    a1f0:	e0bfff15 	stw	r2,-4(fp)
    a1f4:	00000306 	br	a204 <alt_get_errno+0x48>
    a1f8:	00800074 	movhi	r2,1
    a1fc:	10801704 	addi	r2,r2,92
    a200:	e0bfff15 	stw	r2,-4(fp)
    a204:	e0bfff17 	ldw	r2,-4(fp)
}
    a208:	e037883a 	mov	sp,fp
    a20c:	dfc00117 	ldw	ra,4(sp)
    a210:	df000017 	ldw	fp,0(sp)
    a214:	dec00204 	addi	sp,sp,8
    a218:	f800283a 	ret

0000a21c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a21c:	deffeb04 	addi	sp,sp,-84
    a220:	dfc01415 	stw	ra,80(sp)
    a224:	df001315 	stw	fp,76(sp)
    a228:	df001304 	addi	fp,sp,76
    a22c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a230:	e0bffd17 	ldw	r2,-12(fp)
    a234:	1004803a 	cmplt	r2,r2,zero
    a238:	1000091e 	bne	r2,zero,a260 <isatty+0x44>
    a23c:	e13ffd17 	ldw	r4,-12(fp)
    a240:	01400304 	movi	r5,12
    a244:	00005700 	call	570 <__mulsi3>
    a248:	1007883a 	mov	r3,r2
    a24c:	00800074 	movhi	r2,1
    a250:	10b4f304 	addi	r2,r2,-11316
    a254:	1887883a 	add	r3,r3,r2
    a258:	e0ffff15 	stw	r3,-4(fp)
    a25c:	00000106 	br	a264 <isatty+0x48>
    a260:	e03fff15 	stw	zero,-4(fp)
    a264:	e0bfff17 	ldw	r2,-4(fp)
    a268:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    a26c:	e0bfed17 	ldw	r2,-76(fp)
    a270:	1005003a 	cmpeq	r2,r2,zero
    a274:	10000f1e 	bne	r2,zero,a2b4 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a278:	e0bfed17 	ldw	r2,-76(fp)
    a27c:	10800017 	ldw	r2,0(r2)
    a280:	10800817 	ldw	r2,32(r2)
    a284:	1004c03a 	cmpne	r2,r2,zero
    a288:	1000031e 	bne	r2,zero,a298 <isatty+0x7c>
    {
      return 1;
    a28c:	00800044 	movi	r2,1
    a290:	e0bffe15 	stw	r2,-8(fp)
    a294:	00000c06 	br	a2c8 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a298:	e17fee04 	addi	r5,fp,-72
    a29c:	e13ffd17 	ldw	r4,-12(fp)
    a2a0:	000a0e40 	call	a0e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a2a4:	e0bfef17 	ldw	r2,-68(fp)
    a2a8:	10880020 	cmpeqi	r2,r2,8192
    a2ac:	e0bffe15 	stw	r2,-8(fp)
    a2b0:	00000506 	br	a2c8 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a2b4:	000a2e00 	call	a2e0 <alt_get_errno>
    a2b8:	1007883a 	mov	r3,r2
    a2bc:	00801444 	movi	r2,81
    a2c0:	18800015 	stw	r2,0(r3)
    return 0;
    a2c4:	e03ffe15 	stw	zero,-8(fp)
    a2c8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a2cc:	e037883a 	mov	sp,fp
    a2d0:	dfc00117 	ldw	ra,4(sp)
    a2d4:	df000017 	ldw	fp,0(sp)
    a2d8:	dec00204 	addi	sp,sp,8
    a2dc:	f800283a 	ret

0000a2e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a2e0:	defffd04 	addi	sp,sp,-12
    a2e4:	dfc00215 	stw	ra,8(sp)
    a2e8:	df000115 	stw	fp,4(sp)
    a2ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a2f0:	00800074 	movhi	r2,1
    a2f4:	10b97604 	addi	r2,r2,-6696
    a2f8:	10800017 	ldw	r2,0(r2)
    a2fc:	1005003a 	cmpeq	r2,r2,zero
    a300:	1000061e 	bne	r2,zero,a31c <alt_get_errno+0x3c>
    a304:	00800074 	movhi	r2,1
    a308:	10b97604 	addi	r2,r2,-6696
    a30c:	10800017 	ldw	r2,0(r2)
    a310:	103ee83a 	callr	r2
    a314:	e0bfff15 	stw	r2,-4(fp)
    a318:	00000306 	br	a328 <alt_get_errno+0x48>
    a31c:	00800074 	movhi	r2,1
    a320:	10801704 	addi	r2,r2,92
    a324:	e0bfff15 	stw	r2,-4(fp)
    a328:	e0bfff17 	ldw	r2,-4(fp)
}
    a32c:	e037883a 	mov	sp,fp
    a330:	dfc00117 	ldw	ra,4(sp)
    a334:	df000017 	ldw	fp,0(sp)
    a338:	dec00204 	addi	sp,sp,8
    a33c:	f800283a 	ret

0000a340 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a340:	defffe04 	addi	sp,sp,-8
    a344:	dfc00115 	stw	ra,4(sp)
    a348:	df000015 	stw	fp,0(sp)
    a34c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a350:	01000074 	movhi	r4,1
    a354:	21397b04 	addi	r4,r4,-6676
    a358:	01400074 	movhi	r5,1
    a35c:	2972e404 	addi	r5,r5,-13424
    a360:	01800074 	movhi	r6,1
    a364:	31b97b04 	addi	r6,r6,-6676
    a368:	000a3c00 	call	a3c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a36c:	01000034 	movhi	r4,0
    a370:	21000804 	addi	r4,r4,32
    a374:	01400034 	movhi	r5,0
    a378:	29400804 	addi	r5,r5,32
    a37c:	01800034 	movhi	r6,0
    a380:	31806d04 	addi	r6,r6,436
    a384:	000a3c00 	call	a3c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a388:	01000074 	movhi	r4,1
    a38c:	21321104 	addi	r4,r4,-14268
    a390:	01400074 	movhi	r5,1
    a394:	29721104 	addi	r5,r5,-14268
    a398:	01800074 	movhi	r6,1
    a39c:	31b2e404 	addi	r6,r6,-13424
    a3a0:	000a3c00 	call	a3c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a3a4:	000b8800 	call	b880 <alt_dcache_flush_all>
  alt_icache_flush_all();
    a3a8:	000ba780 	call	ba78 <alt_icache_flush_all>
}
    a3ac:	e037883a 	mov	sp,fp
    a3b0:	dfc00117 	ldw	ra,4(sp)
    a3b4:	df000017 	ldw	fp,0(sp)
    a3b8:	dec00204 	addi	sp,sp,8
    a3bc:	f800283a 	ret

0000a3c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a3c0:	defffc04 	addi	sp,sp,-16
    a3c4:	df000315 	stw	fp,12(sp)
    a3c8:	df000304 	addi	fp,sp,12
    a3cc:	e13ffd15 	stw	r4,-12(fp)
    a3d0:	e17ffe15 	stw	r5,-8(fp)
    a3d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a3d8:	e0fffe17 	ldw	r3,-8(fp)
    a3dc:	e0bffd17 	ldw	r2,-12(fp)
    a3e0:	18800e26 	beq	r3,r2,a41c <alt_load_section+0x5c>
  {
    while( to != end )
    a3e4:	00000a06 	br	a410 <alt_load_section+0x50>
    {
      *to++ = *from++;
    a3e8:	e0bffd17 	ldw	r2,-12(fp)
    a3ec:	10c00017 	ldw	r3,0(r2)
    a3f0:	e0bffe17 	ldw	r2,-8(fp)
    a3f4:	10c00015 	stw	r3,0(r2)
    a3f8:	e0bffe17 	ldw	r2,-8(fp)
    a3fc:	10800104 	addi	r2,r2,4
    a400:	e0bffe15 	stw	r2,-8(fp)
    a404:	e0bffd17 	ldw	r2,-12(fp)
    a408:	10800104 	addi	r2,r2,4
    a40c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a410:	e0fffe17 	ldw	r3,-8(fp)
    a414:	e0bfff17 	ldw	r2,-4(fp)
    a418:	18bff31e 	bne	r3,r2,a3e8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a41c:	e037883a 	mov	sp,fp
    a420:	df000017 	ldw	fp,0(sp)
    a424:	dec00104 	addi	sp,sp,4
    a428:	f800283a 	ret

0000a42c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a42c:	defff804 	addi	sp,sp,-32
    a430:	dfc00715 	stw	ra,28(sp)
    a434:	df000615 	stw	fp,24(sp)
    a438:	df000604 	addi	fp,sp,24
    a43c:	e13ffc15 	stw	r4,-16(fp)
    a440:	e17ffd15 	stw	r5,-12(fp)
    a444:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a448:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a44c:	e0bffc17 	ldw	r2,-16(fp)
    a450:	1004803a 	cmplt	r2,r2,zero
    a454:	1000091e 	bne	r2,zero,a47c <lseek+0x50>
    a458:	e13ffc17 	ldw	r4,-16(fp)
    a45c:	01400304 	movi	r5,12
    a460:	00005700 	call	570 <__mulsi3>
    a464:	1007883a 	mov	r3,r2
    a468:	00800074 	movhi	r2,1
    a46c:	10b4f304 	addi	r2,r2,-11316
    a470:	1887883a 	add	r3,r3,r2
    a474:	e0ffff15 	stw	r3,-4(fp)
    a478:	00000106 	br	a480 <lseek+0x54>
    a47c:	e03fff15 	stw	zero,-4(fp)
    a480:	e0bfff17 	ldw	r2,-4(fp)
    a484:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    a488:	e0bffb17 	ldw	r2,-20(fp)
    a48c:	1005003a 	cmpeq	r2,r2,zero
    a490:	1000111e 	bne	r2,zero,a4d8 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a494:	e0bffb17 	ldw	r2,-20(fp)
    a498:	10800017 	ldw	r2,0(r2)
    a49c:	10800717 	ldw	r2,28(r2)
    a4a0:	1005003a 	cmpeq	r2,r2,zero
    a4a4:	1000091e 	bne	r2,zero,a4cc <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a4a8:	e0bffb17 	ldw	r2,-20(fp)
    a4ac:	10800017 	ldw	r2,0(r2)
    a4b0:	10800717 	ldw	r2,28(r2)
    a4b4:	e13ffb17 	ldw	r4,-20(fp)
    a4b8:	e17ffd17 	ldw	r5,-12(fp)
    a4bc:	e1bffe17 	ldw	r6,-8(fp)
    a4c0:	103ee83a 	callr	r2
    a4c4:	e0bffa15 	stw	r2,-24(fp)
    a4c8:	00000506 	br	a4e0 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a4cc:	00bfde84 	movi	r2,-134
    a4d0:	e0bffa15 	stw	r2,-24(fp)
    a4d4:	00000206 	br	a4e0 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    a4d8:	00bfebc4 	movi	r2,-81
    a4dc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a4e0:	e0bffa17 	ldw	r2,-24(fp)
    a4e4:	1004403a 	cmpge	r2,r2,zero
    a4e8:	1000071e 	bne	r2,zero,a508 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    a4ec:	000a5200 	call	a520 <alt_get_errno>
    a4f0:	1007883a 	mov	r3,r2
    a4f4:	e0bffa17 	ldw	r2,-24(fp)
    a4f8:	0085c83a 	sub	r2,zero,r2
    a4fc:	18800015 	stw	r2,0(r3)
    rc = -1;
    a500:	00bfffc4 	movi	r2,-1
    a504:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a508:	e0bffa17 	ldw	r2,-24(fp)
}
    a50c:	e037883a 	mov	sp,fp
    a510:	dfc00117 	ldw	ra,4(sp)
    a514:	df000017 	ldw	fp,0(sp)
    a518:	dec00204 	addi	sp,sp,8
    a51c:	f800283a 	ret

0000a520 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a520:	defffd04 	addi	sp,sp,-12
    a524:	dfc00215 	stw	ra,8(sp)
    a528:	df000115 	stw	fp,4(sp)
    a52c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a530:	00800074 	movhi	r2,1
    a534:	10b97604 	addi	r2,r2,-6696
    a538:	10800017 	ldw	r2,0(r2)
    a53c:	1005003a 	cmpeq	r2,r2,zero
    a540:	1000061e 	bne	r2,zero,a55c <alt_get_errno+0x3c>
    a544:	00800074 	movhi	r2,1
    a548:	10b97604 	addi	r2,r2,-6696
    a54c:	10800017 	ldw	r2,0(r2)
    a550:	103ee83a 	callr	r2
    a554:	e0bfff15 	stw	r2,-4(fp)
    a558:	00000306 	br	a568 <alt_get_errno+0x48>
    a55c:	00800074 	movhi	r2,1
    a560:	10801704 	addi	r2,r2,92
    a564:	e0bfff15 	stw	r2,-4(fp)
    a568:	e0bfff17 	ldw	r2,-4(fp)
}
    a56c:	e037883a 	mov	sp,fp
    a570:	dfc00117 	ldw	ra,4(sp)
    a574:	df000017 	ldw	fp,0(sp)
    a578:	dec00204 	addi	sp,sp,8
    a57c:	f800283a 	ret

0000a580 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a580:	defffd04 	addi	sp,sp,-12
    a584:	dfc00215 	stw	ra,8(sp)
    a588:	df000115 	stw	fp,4(sp)
    a58c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a590:	0009883a 	mov	r4,zero
    a594:	000ac0c0 	call	ac0c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a598:	000ac400 	call	ac40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a59c:	01000074 	movhi	r4,1
    a5a0:	2132dc04 	addi	r4,r4,-13456
    a5a4:	01400074 	movhi	r5,1
    a5a8:	2972dc04 	addi	r5,r5,-13456
    a5ac:	01800074 	movhi	r6,1
    a5b0:	31b2dc04 	addi	r6,r6,-13456
    a5b4:	000be380 	call	be38 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a5b8:	000b9b00 	call	b9b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a5bc:	01000074 	movhi	r4,1
    a5c0:	212e8504 	addi	r4,r4,-17900
    a5c4:	000c4380 	call	c438 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a5c8:	d126b017 	ldw	r4,-25920(gp)
    a5cc:	d166b117 	ldw	r5,-25916(gp)
    a5d0:	d1a6b217 	ldw	r6,-25912(gp)
    a5d4:	000026c0 	call	26c <main>
    a5d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a5dc:	01000044 	movi	r4,1
    a5e0:	0009f580 	call	9f58 <close>
  exit (result);
    a5e4:	e13fff17 	ldw	r4,-4(fp)
    a5e8:	000c44c0 	call	c44c <exit>

0000a5ec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a5ec:	defffe04 	addi	sp,sp,-8
    a5f0:	df000115 	stw	fp,4(sp)
    a5f4:	df000104 	addi	fp,sp,4
    a5f8:	e13fff15 	stw	r4,-4(fp)
}
    a5fc:	e037883a 	mov	sp,fp
    a600:	df000017 	ldw	fp,0(sp)
    a604:	dec00104 	addi	sp,sp,4
    a608:	f800283a 	ret

0000a60c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a60c:	defffe04 	addi	sp,sp,-8
    a610:	df000115 	stw	fp,4(sp)
    a614:	df000104 	addi	fp,sp,4
    a618:	e13fff15 	stw	r4,-4(fp)
}
    a61c:	e037883a 	mov	sp,fp
    a620:	df000017 	ldw	fp,0(sp)
    a624:	dec00104 	addi	sp,sp,4
    a628:	f800283a 	ret

0000a62c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a62c:	defff704 	addi	sp,sp,-36
    a630:	dfc00815 	stw	ra,32(sp)
    a634:	df000715 	stw	fp,28(sp)
    a638:	df000704 	addi	fp,sp,28
    a63c:	e13ffb15 	stw	r4,-20(fp)
    a640:	e17ffc15 	stw	r5,-16(fp)
    a644:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a648:	e0bffb17 	ldw	r2,-20(fp)
    a64c:	1004803a 	cmplt	r2,r2,zero
    a650:	1000091e 	bne	r2,zero,a678 <read+0x4c>
    a654:	e13ffb17 	ldw	r4,-20(fp)
    a658:	01400304 	movi	r5,12
    a65c:	00005700 	call	570 <__mulsi3>
    a660:	1007883a 	mov	r3,r2
    a664:	00800074 	movhi	r2,1
    a668:	10b4f304 	addi	r2,r2,-11316
    a66c:	1887883a 	add	r3,r3,r2
    a670:	e0ffff15 	stw	r3,-4(fp)
    a674:	00000106 	br	a67c <read+0x50>
    a678:	e03fff15 	stw	zero,-4(fp)
    a67c:	e0bfff17 	ldw	r2,-4(fp)
    a680:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a684:	e0bffa17 	ldw	r2,-24(fp)
    a688:	1005003a 	cmpeq	r2,r2,zero
    a68c:	1000241e 	bne	r2,zero,a720 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a690:	e0bffa17 	ldw	r2,-24(fp)
    a694:	10800217 	ldw	r2,8(r2)
    a698:	108000cc 	andi	r2,r2,3
    a69c:	10800060 	cmpeqi	r2,r2,1
    a6a0:	10001a1e 	bne	r2,zero,a70c <read+0xe0>
    a6a4:	e0bffa17 	ldw	r2,-24(fp)
    a6a8:	10800017 	ldw	r2,0(r2)
    a6ac:	10800517 	ldw	r2,20(r2)
    a6b0:	1005003a 	cmpeq	r2,r2,zero
    a6b4:	1000151e 	bne	r2,zero,a70c <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a6b8:	e0bffa17 	ldw	r2,-24(fp)
    a6bc:	10800017 	ldw	r2,0(r2)
    a6c0:	10800517 	ldw	r2,20(r2)
    a6c4:	e17ffc17 	ldw	r5,-16(fp)
    a6c8:	e1bffd17 	ldw	r6,-12(fp)
    a6cc:	e13ffa17 	ldw	r4,-24(fp)
    a6d0:	103ee83a 	callr	r2
    a6d4:	e0bff915 	stw	r2,-28(fp)
    a6d8:	e0bff917 	ldw	r2,-28(fp)
    a6dc:	1004403a 	cmpge	r2,r2,zero
    a6e0:	1000071e 	bne	r2,zero,a700 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    a6e4:	000a7500 	call	a750 <alt_get_errno>
    a6e8:	e0fff917 	ldw	r3,-28(fp)
    a6ec:	00c7c83a 	sub	r3,zero,r3
    a6f0:	10c00015 	stw	r3,0(r2)
          return -1;
    a6f4:	00bfffc4 	movi	r2,-1
    a6f8:	e0bffe15 	stw	r2,-8(fp)
    a6fc:	00000e06 	br	a738 <read+0x10c>
        }
        return rval;
    a700:	e0bff917 	ldw	r2,-28(fp)
    a704:	e0bffe15 	stw	r2,-8(fp)
    a708:	00000b06 	br	a738 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a70c:	000a7500 	call	a750 <alt_get_errno>
    a710:	1007883a 	mov	r3,r2
    a714:	00800344 	movi	r2,13
    a718:	18800015 	stw	r2,0(r3)
    a71c:	00000406 	br	a730 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a720:	000a7500 	call	a750 <alt_get_errno>
    a724:	1007883a 	mov	r3,r2
    a728:	00801444 	movi	r2,81
    a72c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a730:	00bfffc4 	movi	r2,-1
    a734:	e0bffe15 	stw	r2,-8(fp)
    a738:	e0bffe17 	ldw	r2,-8(fp)
}
    a73c:	e037883a 	mov	sp,fp
    a740:	dfc00117 	ldw	ra,4(sp)
    a744:	df000017 	ldw	fp,0(sp)
    a748:	dec00204 	addi	sp,sp,8
    a74c:	f800283a 	ret

0000a750 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a750:	defffd04 	addi	sp,sp,-12
    a754:	dfc00215 	stw	ra,8(sp)
    a758:	df000115 	stw	fp,4(sp)
    a75c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a760:	00800074 	movhi	r2,1
    a764:	10b97604 	addi	r2,r2,-6696
    a768:	10800017 	ldw	r2,0(r2)
    a76c:	1005003a 	cmpeq	r2,r2,zero
    a770:	1000061e 	bne	r2,zero,a78c <alt_get_errno+0x3c>
    a774:	00800074 	movhi	r2,1
    a778:	10b97604 	addi	r2,r2,-6696
    a77c:	10800017 	ldw	r2,0(r2)
    a780:	103ee83a 	callr	r2
    a784:	e0bfff15 	stw	r2,-4(fp)
    a788:	00000306 	br	a798 <alt_get_errno+0x48>
    a78c:	00800074 	movhi	r2,1
    a790:	10801704 	addi	r2,r2,92
    a794:	e0bfff15 	stw	r2,-4(fp)
    a798:	e0bfff17 	ldw	r2,-4(fp)
}
    a79c:	e037883a 	mov	sp,fp
    a7a0:	dfc00117 	ldw	ra,4(sp)
    a7a4:	df000017 	ldw	fp,0(sp)
    a7a8:	dec00204 	addi	sp,sp,8
    a7ac:	f800283a 	ret

0000a7b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a7b0:	defffc04 	addi	sp,sp,-16
    a7b4:	dfc00315 	stw	ra,12(sp)
    a7b8:	df000215 	stw	fp,8(sp)
    a7bc:	dc000115 	stw	r16,4(sp)
    a7c0:	df000104 	addi	fp,sp,4
    a7c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a7c8:	e0bfff17 	ldw	r2,-4(fp)
    a7cc:	108000d0 	cmplti	r2,r2,3
    a7d0:	10000f1e 	bne	r2,zero,a810 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    a7d4:	e13fff17 	ldw	r4,-4(fp)
    a7d8:	04000074 	movhi	r16,1
    a7dc:	8434f304 	addi	r16,r16,-11316
    a7e0:	01400304 	movi	r5,12
    a7e4:	00005700 	call	570 <__mulsi3>
    a7e8:	1405883a 	add	r2,r2,r16
    a7ec:	10800204 	addi	r2,r2,8
    a7f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a7f4:	e13fff17 	ldw	r4,-4(fp)
    a7f8:	04000074 	movhi	r16,1
    a7fc:	8434f304 	addi	r16,r16,-11316
    a800:	01400304 	movi	r5,12
    a804:	00005700 	call	570 <__mulsi3>
    a808:	1405883a 	add	r2,r2,r16
    a80c:	10000015 	stw	zero,0(r2)
  }
}
    a810:	e037883a 	mov	sp,fp
    a814:	dfc00217 	ldw	ra,8(sp)
    a818:	df000117 	ldw	fp,4(sp)
    a81c:	dc000017 	ldw	r16,0(sp)
    a820:	dec00304 	addi	sp,sp,12
    a824:	f800283a 	ret

0000a828 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a828:	defff804 	addi	sp,sp,-32
    a82c:	df000715 	stw	fp,28(sp)
    a830:	df000704 	addi	fp,sp,28
    a834:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a838:	0005303a 	rdctl	r2,status
    a83c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a840:	e0fffb17 	ldw	r3,-20(fp)
    a844:	00bfff84 	movi	r2,-2
    a848:	1884703a 	and	r2,r3,r2
    a84c:	1001703a 	wrctl	status,r2
  
  return context;
    a850:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a854:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a858:	d0a00c17 	ldw	r2,-32720(gp)
    a85c:	10c000c4 	addi	r3,r2,3
    a860:	00bfff04 	movi	r2,-4
    a864:	1884703a 	and	r2,r3,r2
    a868:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a86c:	d0e00c17 	ldw	r3,-32720(gp)
    a870:	e0bffe17 	ldw	r2,-8(fp)
    a874:	1887883a 	add	r3,r3,r2
    a878:	00802034 	movhi	r2,128
    a87c:	10800004 	addi	r2,r2,0
    a880:	10c0072e 	bgeu	r2,r3,a8a0 <sbrk+0x78>
    a884:	e0bffd17 	ldw	r2,-12(fp)
    a888:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a88c:	e0bffa17 	ldw	r2,-24(fp)
    a890:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a894:	00bfffc4 	movi	r2,-1
    a898:	e0bfff15 	stw	r2,-4(fp)
    a89c:	00000c06 	br	a8d0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a8a0:	d0a00c17 	ldw	r2,-32720(gp)
    a8a4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a8a8:	d0e00c17 	ldw	r3,-32720(gp)
    a8ac:	e0bffe17 	ldw	r2,-8(fp)
    a8b0:	1885883a 	add	r2,r3,r2
    a8b4:	d0a00c15 	stw	r2,-32720(gp)
    a8b8:	e0bffd17 	ldw	r2,-12(fp)
    a8bc:	e0bff915 	stw	r2,-28(fp)
    a8c0:	e0bff917 	ldw	r2,-28(fp)
    a8c4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a8c8:	e0bffc17 	ldw	r2,-16(fp)
    a8cc:	e0bfff15 	stw	r2,-4(fp)
    a8d0:	e0bfff17 	ldw	r2,-4(fp)
} 
    a8d4:	e037883a 	mov	sp,fp
    a8d8:	df000017 	ldw	fp,0(sp)
    a8dc:	dec00104 	addi	sp,sp,4
    a8e0:	f800283a 	ret

0000a8e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a8e4:	defffa04 	addi	sp,sp,-24
    a8e8:	df000515 	stw	fp,20(sp)
    a8ec:	df000504 	addi	fp,sp,20
    a8f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a8f4:	0005303a 	rdctl	r2,status
    a8f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a8fc:	e0fffd17 	ldw	r3,-12(fp)
    a900:	00bfff84 	movi	r2,-2
    a904:	1884703a 	and	r2,r3,r2
    a908:	1001703a 	wrctl	status,r2
  
  return context;
    a90c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a910:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    a914:	e0bfff17 	ldw	r2,-4(fp)
    a918:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a91c:	e0bffc17 	ldw	r2,-16(fp)
    a920:	10c00017 	ldw	r3,0(r2)
    a924:	e0bffc17 	ldw	r2,-16(fp)
    a928:	10800117 	ldw	r2,4(r2)
    a92c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    a930:	e0bffc17 	ldw	r2,-16(fp)
    a934:	10c00117 	ldw	r3,4(r2)
    a938:	e0bffc17 	ldw	r2,-16(fp)
    a93c:	10800017 	ldw	r2,0(r2)
    a940:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a944:	e0fffc17 	ldw	r3,-16(fp)
    a948:	e0bffc17 	ldw	r2,-16(fp)
    a94c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    a950:	e0fffc17 	ldw	r3,-16(fp)
    a954:	e0bffc17 	ldw	r2,-16(fp)
    a958:	18800015 	stw	r2,0(r3)
    a95c:	e0bffe17 	ldw	r2,-8(fp)
    a960:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a964:	e0bffb17 	ldw	r2,-20(fp)
    a968:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a96c:	e037883a 	mov	sp,fp
    a970:	df000017 	ldw	fp,0(sp)
    a974:	dec00104 	addi	sp,sp,4
    a978:	f800283a 	ret

0000a97c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a97c:	defffb04 	addi	sp,sp,-20
    a980:	dfc00415 	stw	ra,16(sp)
    a984:	df000315 	stw	fp,12(sp)
    a988:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a98c:	d0a00d17 	ldw	r2,-32716(gp)
    a990:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a994:	d0a6b417 	ldw	r2,-25904(gp)
    a998:	10800044 	addi	r2,r2,1
    a99c:	d0a6b415 	stw	r2,-25904(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a9a0:	00003106 	br	aa68 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    a9a4:	e0bffe17 	ldw	r2,-8(fp)
    a9a8:	10800017 	ldw	r2,0(r2)
    a9ac:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a9b0:	e0bffe17 	ldw	r2,-8(fp)
    a9b4:	10800403 	ldbu	r2,16(r2)
    a9b8:	10803fcc 	andi	r2,r2,255
    a9bc:	1005003a 	cmpeq	r2,r2,zero
    a9c0:	1000051e 	bne	r2,zero,a9d8 <alt_tick+0x5c>
    a9c4:	d0a6b417 	ldw	r2,-25904(gp)
    a9c8:	1004c03a 	cmpne	r2,r2,zero
    a9cc:	1000021e 	bne	r2,zero,a9d8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    a9d0:	e0bffe17 	ldw	r2,-8(fp)
    a9d4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a9d8:	e0bffe17 	ldw	r2,-8(fp)
    a9dc:	10c00217 	ldw	r3,8(r2)
    a9e0:	d0a6b417 	ldw	r2,-25904(gp)
    a9e4:	10c01e36 	bltu	r2,r3,aa60 <alt_tick+0xe4>
    a9e8:	e0bffe17 	ldw	r2,-8(fp)
    a9ec:	10800403 	ldbu	r2,16(r2)
    a9f0:	10803fcc 	andi	r2,r2,255
    a9f4:	1004c03a 	cmpne	r2,r2,zero
    a9f8:	1000191e 	bne	r2,zero,aa60 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    a9fc:	e0bffe17 	ldw	r2,-8(fp)
    aa00:	10c00317 	ldw	r3,12(r2)
    aa04:	e0bffe17 	ldw	r2,-8(fp)
    aa08:	11000517 	ldw	r4,20(r2)
    aa0c:	183ee83a 	callr	r3
    aa10:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    aa14:	e0bffd17 	ldw	r2,-12(fp)
    aa18:	1004c03a 	cmpne	r2,r2,zero
    aa1c:	1000031e 	bne	r2,zero,aa2c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    aa20:	e13ffe17 	ldw	r4,-8(fp)
    aa24:	000a8e40 	call	a8e4 <alt_alarm_stop>
    aa28:	00000d06 	br	aa60 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    aa2c:	e0bffe17 	ldw	r2,-8(fp)
    aa30:	10c00217 	ldw	r3,8(r2)
    aa34:	e0bffd17 	ldw	r2,-12(fp)
    aa38:	1887883a 	add	r3,r3,r2
    aa3c:	e0bffe17 	ldw	r2,-8(fp)
    aa40:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    aa44:	e0bffe17 	ldw	r2,-8(fp)
    aa48:	10c00217 	ldw	r3,8(r2)
    aa4c:	d0a6b417 	ldw	r2,-25904(gp)
    aa50:	1880032e 	bgeu	r3,r2,aa60 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    aa54:	e0fffe17 	ldw	r3,-8(fp)
    aa58:	00800044 	movi	r2,1
    aa5c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    aa60:	e0bfff17 	ldw	r2,-4(fp)
    aa64:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    aa68:	d0e00d04 	addi	r3,gp,-32716
    aa6c:	e0bffe17 	ldw	r2,-8(fp)
    aa70:	10ffcc1e 	bne	r2,r3,a9a4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    aa74:	e037883a 	mov	sp,fp
    aa78:	dfc00117 	ldw	ra,4(sp)
    aa7c:	df000017 	ldw	fp,0(sp)
    aa80:	dec00204 	addi	sp,sp,8
    aa84:	f800283a 	ret

0000aa88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    aa88:	defff704 	addi	sp,sp,-36
    aa8c:	dfc00815 	stw	ra,32(sp)
    aa90:	df000715 	stw	fp,28(sp)
    aa94:	df000704 	addi	fp,sp,28
    aa98:	e13ffb15 	stw	r4,-20(fp)
    aa9c:	e17ffc15 	stw	r5,-16(fp)
    aaa0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    aaa4:	e0bffb17 	ldw	r2,-20(fp)
    aaa8:	1004803a 	cmplt	r2,r2,zero
    aaac:	1000091e 	bne	r2,zero,aad4 <write+0x4c>
    aab0:	e13ffb17 	ldw	r4,-20(fp)
    aab4:	01400304 	movi	r5,12
    aab8:	00005700 	call	570 <__mulsi3>
    aabc:	1007883a 	mov	r3,r2
    aac0:	00800074 	movhi	r2,1
    aac4:	10b4f304 	addi	r2,r2,-11316
    aac8:	1887883a 	add	r3,r3,r2
    aacc:	e0ffff15 	stw	r3,-4(fp)
    aad0:	00000106 	br	aad8 <write+0x50>
    aad4:	e03fff15 	stw	zero,-4(fp)
    aad8:	e0bfff17 	ldw	r2,-4(fp)
    aadc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    aae0:	e0bffa17 	ldw	r2,-24(fp)
    aae4:	1005003a 	cmpeq	r2,r2,zero
    aae8:	1000241e 	bne	r2,zero,ab7c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    aaec:	e0bffa17 	ldw	r2,-24(fp)
    aaf0:	10800217 	ldw	r2,8(r2)
    aaf4:	108000cc 	andi	r2,r2,3
    aaf8:	1005003a 	cmpeq	r2,r2,zero
    aafc:	10001a1e 	bne	r2,zero,ab68 <write+0xe0>
    ab00:	e0bffa17 	ldw	r2,-24(fp)
    ab04:	10800017 	ldw	r2,0(r2)
    ab08:	10800617 	ldw	r2,24(r2)
    ab0c:	1005003a 	cmpeq	r2,r2,zero
    ab10:	1000151e 	bne	r2,zero,ab68 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ab14:	e0bffa17 	ldw	r2,-24(fp)
    ab18:	10800017 	ldw	r2,0(r2)
    ab1c:	10800617 	ldw	r2,24(r2)
    ab20:	e17ffc17 	ldw	r5,-16(fp)
    ab24:	e1bffd17 	ldw	r6,-12(fp)
    ab28:	e13ffa17 	ldw	r4,-24(fp)
    ab2c:	103ee83a 	callr	r2
    ab30:	e0bff915 	stw	r2,-28(fp)
    ab34:	e0bff917 	ldw	r2,-28(fp)
    ab38:	1004403a 	cmpge	r2,r2,zero
    ab3c:	1000071e 	bne	r2,zero,ab5c <write+0xd4>
      {
        ALT_ERRNO = -rval;
    ab40:	000abac0 	call	abac <alt_get_errno>
    ab44:	e0fff917 	ldw	r3,-28(fp)
    ab48:	00c7c83a 	sub	r3,zero,r3
    ab4c:	10c00015 	stw	r3,0(r2)
        return -1;
    ab50:	00bfffc4 	movi	r2,-1
    ab54:	e0bffe15 	stw	r2,-8(fp)
    ab58:	00000e06 	br	ab94 <write+0x10c>
      }
      return rval;
    ab5c:	e0bff917 	ldw	r2,-28(fp)
    ab60:	e0bffe15 	stw	r2,-8(fp)
    ab64:	00000b06 	br	ab94 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ab68:	000abac0 	call	abac <alt_get_errno>
    ab6c:	1007883a 	mov	r3,r2
    ab70:	00800344 	movi	r2,13
    ab74:	18800015 	stw	r2,0(r3)
    ab78:	00000406 	br	ab8c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ab7c:	000abac0 	call	abac <alt_get_errno>
    ab80:	1007883a 	mov	r3,r2
    ab84:	00801444 	movi	r2,81
    ab88:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ab8c:	00bfffc4 	movi	r2,-1
    ab90:	e0bffe15 	stw	r2,-8(fp)
    ab94:	e0bffe17 	ldw	r2,-8(fp)
}
    ab98:	e037883a 	mov	sp,fp
    ab9c:	dfc00117 	ldw	ra,4(sp)
    aba0:	df000017 	ldw	fp,0(sp)
    aba4:	dec00204 	addi	sp,sp,8
    aba8:	f800283a 	ret

0000abac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    abac:	defffd04 	addi	sp,sp,-12
    abb0:	dfc00215 	stw	ra,8(sp)
    abb4:	df000115 	stw	fp,4(sp)
    abb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    abbc:	00800074 	movhi	r2,1
    abc0:	10b97604 	addi	r2,r2,-6696
    abc4:	10800017 	ldw	r2,0(r2)
    abc8:	1005003a 	cmpeq	r2,r2,zero
    abcc:	1000061e 	bne	r2,zero,abe8 <alt_get_errno+0x3c>
    abd0:	00800074 	movhi	r2,1
    abd4:	10b97604 	addi	r2,r2,-6696
    abd8:	10800017 	ldw	r2,0(r2)
    abdc:	103ee83a 	callr	r2
    abe0:	e0bfff15 	stw	r2,-4(fp)
    abe4:	00000306 	br	abf4 <alt_get_errno+0x48>
    abe8:	00800074 	movhi	r2,1
    abec:	10801704 	addi	r2,r2,92
    abf0:	e0bfff15 	stw	r2,-4(fp)
    abf4:	e0bfff17 	ldw	r2,-4(fp)
}
    abf8:	e037883a 	mov	sp,fp
    abfc:	dfc00117 	ldw	ra,4(sp)
    ac00:	df000017 	ldw	fp,0(sp)
    ac04:	dec00204 	addi	sp,sp,8
    ac08:	f800283a 	ret

0000ac0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ac0c:	defffd04 	addi	sp,sp,-12
    ac10:	dfc00215 	stw	ra,8(sp)
    ac14:	df000115 	stw	fp,4(sp)
    ac18:	df000104 	addi	fp,sp,4
    ac1c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    ac20:	000c1940 	call	c194 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ac24:	00800044 	movi	r2,1
    ac28:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ac2c:	e037883a 	mov	sp,fp
    ac30:	dfc00117 	ldw	ra,4(sp)
    ac34:	df000017 	ldw	fp,0(sp)
    ac38:	dec00204 	addi	sp,sp,8
    ac3c:	f800283a 	ret

0000ac40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ac40:	defffe04 	addi	sp,sp,-8
    ac44:	dfc00115 	stw	ra,4(sp)
    ac48:	df000015 	stw	fp,0(sp)
    ac4c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    ac50:	01040034 	movhi	r4,4096
    ac54:	21080004 	addi	r4,r4,8192
    ac58:	000b883a 	mov	r5,zero
    ac5c:	000d883a 	mov	r6,zero
    ac60:	01c00204 	movi	r7,8
    ac64:	000b7f00 	call	b7f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    ac68:	01000074 	movhi	r4,1
    ac6c:	21355d04 	addi	r4,r4,-10892
    ac70:	000b883a 	mov	r5,zero
    ac74:	01800204 	movi	r6,8
    ac78:	000ae1c0 	call	ae1c <altera_avalon_jtag_uart_init>
    ac7c:	01000074 	movhi	r4,1
    ac80:	21355304 	addi	r4,r4,-10932
    ac84:	000ac9c0 	call	ac9c <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    ac88:	e037883a 	mov	sp,fp
    ac8c:	dfc00117 	ldw	ra,4(sp)
    ac90:	df000017 	ldw	fp,0(sp)
    ac94:	dec00204 	addi	sp,sp,8
    ac98:	f800283a 	ret

0000ac9c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ac9c:	defffd04 	addi	sp,sp,-12
    aca0:	dfc00215 	stw	ra,8(sp)
    aca4:	df000115 	stw	fp,4(sp)
    aca8:	df000104 	addi	fp,sp,4
    acac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    acb0:	e13fff17 	ldw	r4,-4(fp)
    acb4:	01400074 	movhi	r5,1
    acb8:	29797304 	addi	r5,r5,-6708
    acbc:	000b89c0 	call	b89c <alt_dev_llist_insert>
}
    acc0:	e037883a 	mov	sp,fp
    acc4:	dfc00117 	ldw	ra,4(sp)
    acc8:	df000017 	ldw	fp,0(sp)
    accc:	dec00204 	addi	sp,sp,8
    acd0:	f800283a 	ret

0000acd4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    acd4:	defffa04 	addi	sp,sp,-24
    acd8:	dfc00515 	stw	ra,20(sp)
    acdc:	df000415 	stw	fp,16(sp)
    ace0:	df000404 	addi	fp,sp,16
    ace4:	e13ffd15 	stw	r4,-12(fp)
    ace8:	e17ffe15 	stw	r5,-8(fp)
    acec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    acf0:	e0bffd17 	ldw	r2,-12(fp)
    acf4:	10800017 	ldw	r2,0(r2)
    acf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    acfc:	e0bffc17 	ldw	r2,-16(fp)
    ad00:	11000a04 	addi	r4,r2,40
    ad04:	e0bffd17 	ldw	r2,-12(fp)
    ad08:	11c00217 	ldw	r7,8(r2)
    ad0c:	e17ffe17 	ldw	r5,-8(fp)
    ad10:	e1bfff17 	ldw	r6,-4(fp)
    ad14:	000b31c0 	call	b31c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ad18:	e037883a 	mov	sp,fp
    ad1c:	dfc00117 	ldw	ra,4(sp)
    ad20:	df000017 	ldw	fp,0(sp)
    ad24:	dec00204 	addi	sp,sp,8
    ad28:	f800283a 	ret

0000ad2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ad2c:	defffa04 	addi	sp,sp,-24
    ad30:	dfc00515 	stw	ra,20(sp)
    ad34:	df000415 	stw	fp,16(sp)
    ad38:	df000404 	addi	fp,sp,16
    ad3c:	e13ffd15 	stw	r4,-12(fp)
    ad40:	e17ffe15 	stw	r5,-8(fp)
    ad44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ad48:	e0bffd17 	ldw	r2,-12(fp)
    ad4c:	10800017 	ldw	r2,0(r2)
    ad50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ad54:	e0bffc17 	ldw	r2,-16(fp)
    ad58:	11000a04 	addi	r4,r2,40
    ad5c:	e0bffd17 	ldw	r2,-12(fp)
    ad60:	11c00217 	ldw	r7,8(r2)
    ad64:	e17ffe17 	ldw	r5,-8(fp)
    ad68:	e1bfff17 	ldw	r6,-4(fp)
    ad6c:	000b5400 	call	b540 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ad70:	e037883a 	mov	sp,fp
    ad74:	dfc00117 	ldw	ra,4(sp)
    ad78:	df000017 	ldw	fp,0(sp)
    ad7c:	dec00204 	addi	sp,sp,8
    ad80:	f800283a 	ret

0000ad84 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    ad84:	defffc04 	addi	sp,sp,-16
    ad88:	dfc00315 	stw	ra,12(sp)
    ad8c:	df000215 	stw	fp,8(sp)
    ad90:	df000204 	addi	fp,sp,8
    ad94:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ad98:	e0bfff17 	ldw	r2,-4(fp)
    ad9c:	10800017 	ldw	r2,0(r2)
    ada0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ada4:	e0bffe17 	ldw	r2,-8(fp)
    ada8:	11000a04 	addi	r4,r2,40
    adac:	e0bfff17 	ldw	r2,-4(fp)
    adb0:	11400217 	ldw	r5,8(r2)
    adb4:	000b1b40 	call	b1b4 <altera_avalon_jtag_uart_close>
}
    adb8:	e037883a 	mov	sp,fp
    adbc:	dfc00117 	ldw	ra,4(sp)
    adc0:	df000017 	ldw	fp,0(sp)
    adc4:	dec00204 	addi	sp,sp,8
    adc8:	f800283a 	ret

0000adcc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    adcc:	defffa04 	addi	sp,sp,-24
    add0:	dfc00515 	stw	ra,20(sp)
    add4:	df000415 	stw	fp,16(sp)
    add8:	df000404 	addi	fp,sp,16
    addc:	e13ffd15 	stw	r4,-12(fp)
    ade0:	e17ffe15 	stw	r5,-8(fp)
    ade4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ade8:	e0bffd17 	ldw	r2,-12(fp)
    adec:	10800017 	ldw	r2,0(r2)
    adf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    adf4:	e0bffc17 	ldw	r2,-16(fp)
    adf8:	11000a04 	addi	r4,r2,40
    adfc:	e17ffe17 	ldw	r5,-8(fp)
    ae00:	e1bfff17 	ldw	r6,-4(fp)
    ae04:	000b2280 	call	b228 <altera_avalon_jtag_uart_ioctl>
}
    ae08:	e037883a 	mov	sp,fp
    ae0c:	dfc00117 	ldw	ra,4(sp)
    ae10:	df000017 	ldw	fp,0(sp)
    ae14:	dec00204 	addi	sp,sp,8
    ae18:	f800283a 	ret

0000ae1c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ae1c:	defffa04 	addi	sp,sp,-24
    ae20:	dfc00515 	stw	ra,20(sp)
    ae24:	df000415 	stw	fp,16(sp)
    ae28:	df000404 	addi	fp,sp,16
    ae2c:	e13ffd15 	stw	r4,-12(fp)
    ae30:	e17ffe15 	stw	r5,-8(fp)
    ae34:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ae38:	e0fffd17 	ldw	r3,-12(fp)
    ae3c:	00800044 	movi	r2,1
    ae40:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ae44:	e0bffd17 	ldw	r2,-12(fp)
    ae48:	10800017 	ldw	r2,0(r2)
    ae4c:	11000104 	addi	r4,r2,4
    ae50:	e0bffd17 	ldw	r2,-12(fp)
    ae54:	10800817 	ldw	r2,32(r2)
    ae58:	1007883a 	mov	r3,r2
    ae5c:	2005883a 	mov	r2,r4
    ae60:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ae64:	e13ffe17 	ldw	r4,-8(fp)
    ae68:	e17fff17 	ldw	r5,-4(fp)
    ae6c:	d8000015 	stw	zero,0(sp)
    ae70:	01800074 	movhi	r6,1
    ae74:	31abb704 	addi	r6,r6,-20772
    ae78:	e1fffd17 	ldw	r7,-12(fp)
    ae7c:	000ba940 	call	ba94 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ae80:	e0bffd17 	ldw	r2,-12(fp)
    ae84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ae88:	e0bffd17 	ldw	r2,-12(fp)
    ae8c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ae90:	00800074 	movhi	r2,1
    ae94:	10801e04 	addi	r2,r2,120
    ae98:	10800017 	ldw	r2,0(r2)
    ae9c:	100b883a 	mov	r5,r2
    aea0:	01800074 	movhi	r6,1
    aea4:	31ac4104 	addi	r6,r6,-20220
    aea8:	e1fffd17 	ldw	r7,-12(fp)
    aeac:	0009e040 	call	9e04 <alt_alarm_start>
    aeb0:	1004403a 	cmpge	r2,r2,zero
    aeb4:	1000041e 	bne	r2,zero,aec8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    aeb8:	e0fffd17 	ldw	r3,-12(fp)
    aebc:	00a00034 	movhi	r2,32768
    aec0:	10bfffc4 	addi	r2,r2,-1
    aec4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    aec8:	e037883a 	mov	sp,fp
    aecc:	dfc00117 	ldw	ra,4(sp)
    aed0:	df000017 	ldw	fp,0(sp)
    aed4:	dec00204 	addi	sp,sp,8
    aed8:	f800283a 	ret

0000aedc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    aedc:	defff804 	addi	sp,sp,-32
    aee0:	df000715 	stw	fp,28(sp)
    aee4:	df000704 	addi	fp,sp,28
    aee8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    aeec:	e0bfff17 	ldw	r2,-4(fp)
    aef0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    aef4:	e0bffe17 	ldw	r2,-8(fp)
    aef8:	10800017 	ldw	r2,0(r2)
    aefc:	e0bffd15 	stw	r2,-12(fp)
    af00:	00000006 	br	af04 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    af04:	e0bffd17 	ldw	r2,-12(fp)
    af08:	10800104 	addi	r2,r2,4
    af0c:	10800037 	ldwio	r2,0(r2)
    af10:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    af14:	e0bffc17 	ldw	r2,-16(fp)
    af18:	1080c00c 	andi	r2,r2,768
    af1c:	1005003a 	cmpeq	r2,r2,zero
    af20:	1000741e 	bne	r2,zero,b0f4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    af24:	e0bffc17 	ldw	r2,-16(fp)
    af28:	1080400c 	andi	r2,r2,256
    af2c:	1005003a 	cmpeq	r2,r2,zero
    af30:	1000351e 	bne	r2,zero,b008 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    af34:	00800074 	movhi	r2,1
    af38:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    af3c:	e0bffe17 	ldw	r2,-8(fp)
    af40:	10800a17 	ldw	r2,40(r2)
    af44:	10800044 	addi	r2,r2,1
    af48:	1081ffcc 	andi	r2,r2,2047
    af4c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    af50:	e0bffe17 	ldw	r2,-8(fp)
    af54:	10c00b17 	ldw	r3,44(r2)
    af58:	e0bffa17 	ldw	r2,-24(fp)
    af5c:	18801626 	beq	r3,r2,afb8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    af60:	e0bffd17 	ldw	r2,-12(fp)
    af64:	10800037 	ldwio	r2,0(r2)
    af68:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    af6c:	e0bffb17 	ldw	r2,-20(fp)
    af70:	10a0000c 	andi	r2,r2,32768
    af74:	1005003a 	cmpeq	r2,r2,zero
    af78:	10000f1e 	bne	r2,zero,afb8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    af7c:	e0bffe17 	ldw	r2,-8(fp)
    af80:	10c00a17 	ldw	r3,40(r2)
    af84:	e0bffb17 	ldw	r2,-20(fp)
    af88:	1009883a 	mov	r4,r2
    af8c:	e0bffe17 	ldw	r2,-8(fp)
    af90:	1885883a 	add	r2,r3,r2
    af94:	10800e04 	addi	r2,r2,56
    af98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    af9c:	e0bffe17 	ldw	r2,-8(fp)
    afa0:	10800a17 	ldw	r2,40(r2)
    afa4:	10800044 	addi	r2,r2,1
    afa8:	10c1ffcc 	andi	r3,r2,2047
    afac:	e0bffe17 	ldw	r2,-8(fp)
    afb0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    afb4:	003fe106 	br	af3c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    afb8:	e0bffb17 	ldw	r2,-20(fp)
    afbc:	10bfffec 	andhi	r2,r2,65535
    afc0:	1005003a 	cmpeq	r2,r2,zero
    afc4:	1000101e 	bne	r2,zero,b008 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    afc8:	e0bffe17 	ldw	r2,-8(fp)
    afcc:	10c00817 	ldw	r3,32(r2)
    afd0:	00bfff84 	movi	r2,-2
    afd4:	1886703a 	and	r3,r3,r2
    afd8:	e0bffe17 	ldw	r2,-8(fp)
    afdc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    afe0:	e0bffd17 	ldw	r2,-12(fp)
    afe4:	11000104 	addi	r4,r2,4
    afe8:	e0bffe17 	ldw	r2,-8(fp)
    afec:	10800817 	ldw	r2,32(r2)
    aff0:	1007883a 	mov	r3,r2
    aff4:	2005883a 	mov	r2,r4
    aff8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    affc:	e0bffd17 	ldw	r2,-12(fp)
    b000:	10800104 	addi	r2,r2,4
    b004:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    b008:	e0bffc17 	ldw	r2,-16(fp)
    b00c:	1080800c 	andi	r2,r2,512
    b010:	1005003a 	cmpeq	r2,r2,zero
    b014:	103fbb1e 	bne	r2,zero,af04 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    b018:	e0bffc17 	ldw	r2,-16(fp)
    b01c:	10bfffec 	andhi	r2,r2,65535
    b020:	1004d43a 	srli	r2,r2,16
    b024:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    b028:	00001506 	br	b080 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    b02c:	e13ffd17 	ldw	r4,-12(fp)
    b030:	e0bffe17 	ldw	r2,-8(fp)
    b034:	10c00d17 	ldw	r3,52(r2)
    b038:	e0bffe17 	ldw	r2,-8(fp)
    b03c:	1885883a 	add	r2,r3,r2
    b040:	10820e04 	addi	r2,r2,2104
    b044:	10800003 	ldbu	r2,0(r2)
    b048:	10c03fcc 	andi	r3,r2,255
    b04c:	18c0201c 	xori	r3,r3,128
    b050:	18ffe004 	addi	r3,r3,-128
    b054:	2005883a 	mov	r2,r4
    b058:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b05c:	e0bffe17 	ldw	r2,-8(fp)
    b060:	10800d17 	ldw	r2,52(r2)
    b064:	10800044 	addi	r2,r2,1
    b068:	10c1ffcc 	andi	r3,r2,2047
    b06c:	e0bffe17 	ldw	r2,-8(fp)
    b070:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    b074:	e0bff917 	ldw	r2,-28(fp)
    b078:	10bfffc4 	addi	r2,r2,-1
    b07c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    b080:	e0bff917 	ldw	r2,-28(fp)
    b084:	1005003a 	cmpeq	r2,r2,zero
    b088:	1000051e 	bne	r2,zero,b0a0 <altera_avalon_jtag_uart_irq+0x1c4>
    b08c:	e0bffe17 	ldw	r2,-8(fp)
    b090:	10c00d17 	ldw	r3,52(r2)
    b094:	e0bffe17 	ldw	r2,-8(fp)
    b098:	10800c17 	ldw	r2,48(r2)
    b09c:	18bfe31e 	bne	r3,r2,b02c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    b0a0:	e0bff917 	ldw	r2,-28(fp)
    b0a4:	1005003a 	cmpeq	r2,r2,zero
    b0a8:	103f961e 	bne	r2,zero,af04 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b0ac:	e0bffe17 	ldw	r2,-8(fp)
    b0b0:	10c00817 	ldw	r3,32(r2)
    b0b4:	00bfff44 	movi	r2,-3
    b0b8:	1886703a 	and	r3,r3,r2
    b0bc:	e0bffe17 	ldw	r2,-8(fp)
    b0c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b0c4:	e0bffe17 	ldw	r2,-8(fp)
    b0c8:	10800017 	ldw	r2,0(r2)
    b0cc:	11000104 	addi	r4,r2,4
    b0d0:	e0bffe17 	ldw	r2,-8(fp)
    b0d4:	10800817 	ldw	r2,32(r2)
    b0d8:	1007883a 	mov	r3,r2
    b0dc:	2005883a 	mov	r2,r4
    b0e0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b0e4:	e0bffd17 	ldw	r2,-12(fp)
    b0e8:	10800104 	addi	r2,r2,4
    b0ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    b0f0:	003f8406 	br	af04 <altera_avalon_jtag_uart_irq+0x28>
}
    b0f4:	e037883a 	mov	sp,fp
    b0f8:	df000017 	ldw	fp,0(sp)
    b0fc:	dec00104 	addi	sp,sp,4
    b100:	f800283a 	ret

0000b104 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    b104:	defffc04 	addi	sp,sp,-16
    b108:	df000315 	stw	fp,12(sp)
    b10c:	df000304 	addi	fp,sp,12
    b110:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    b114:	e0bfff17 	ldw	r2,-4(fp)
    b118:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    b11c:	e0bffe17 	ldw	r2,-8(fp)
    b120:	10800017 	ldw	r2,0(r2)
    b124:	10800104 	addi	r2,r2,4
    b128:	10800037 	ldwio	r2,0(r2)
    b12c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    b130:	e0bffd17 	ldw	r2,-12(fp)
    b134:	1081000c 	andi	r2,r2,1024
    b138:	1005003a 	cmpeq	r2,r2,zero
    b13c:	10000c1e 	bne	r2,zero,b170 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    b140:	e0bffe17 	ldw	r2,-8(fp)
    b144:	10800017 	ldw	r2,0(r2)
    b148:	11000104 	addi	r4,r2,4
    b14c:	e0bffe17 	ldw	r2,-8(fp)
    b150:	10800817 	ldw	r2,32(r2)
    b154:	10810014 	ori	r2,r2,1024
    b158:	1007883a 	mov	r3,r2
    b15c:	2005883a 	mov	r2,r4
    b160:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    b164:	e0bffe17 	ldw	r2,-8(fp)
    b168:	10000915 	stw	zero,36(r2)
    b16c:	00000a06 	br	b198 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    b170:	e0bffe17 	ldw	r2,-8(fp)
    b174:	10c00917 	ldw	r3,36(r2)
    b178:	00a00034 	movhi	r2,32768
    b17c:	10bfff04 	addi	r2,r2,-4
    b180:	10c00536 	bltu	r2,r3,b198 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    b184:	e0bffe17 	ldw	r2,-8(fp)
    b188:	10800917 	ldw	r2,36(r2)
    b18c:	10c00044 	addi	r3,r2,1
    b190:	e0bffe17 	ldw	r2,-8(fp)
    b194:	10c00915 	stw	r3,36(r2)
    b198:	00800074 	movhi	r2,1
    b19c:	10801e04 	addi	r2,r2,120
    b1a0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    b1a4:	e037883a 	mov	sp,fp
    b1a8:	df000017 	ldw	fp,0(sp)
    b1ac:	dec00104 	addi	sp,sp,4
    b1b0:	f800283a 	ret

0000b1b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b1b4:	defffc04 	addi	sp,sp,-16
    b1b8:	df000315 	stw	fp,12(sp)
    b1bc:	df000304 	addi	fp,sp,12
    b1c0:	e13ffd15 	stw	r4,-12(fp)
    b1c4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b1c8:	00000706 	br	b1e8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    b1cc:	e0bffe17 	ldw	r2,-8(fp)
    b1d0:	1090000c 	andi	r2,r2,16384
    b1d4:	1005003a 	cmpeq	r2,r2,zero
    b1d8:	1000031e 	bne	r2,zero,b1e8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    b1dc:	00bffd44 	movi	r2,-11
    b1e0:	e0bfff15 	stw	r2,-4(fp)
    b1e4:	00000b06 	br	b214 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b1e8:	e0bffd17 	ldw	r2,-12(fp)
    b1ec:	10c00d17 	ldw	r3,52(r2)
    b1f0:	e0bffd17 	ldw	r2,-12(fp)
    b1f4:	10800c17 	ldw	r2,48(r2)
    b1f8:	18800526 	beq	r3,r2,b210 <altera_avalon_jtag_uart_close+0x5c>
    b1fc:	e0bffd17 	ldw	r2,-12(fp)
    b200:	10c00917 	ldw	r3,36(r2)
    b204:	e0bffd17 	ldw	r2,-12(fp)
    b208:	10800117 	ldw	r2,4(r2)
    b20c:	18bfef36 	bltu	r3,r2,b1cc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b210:	e03fff15 	stw	zero,-4(fp)
    b214:	e0bfff17 	ldw	r2,-4(fp)
}
    b218:	e037883a 	mov	sp,fp
    b21c:	df000017 	ldw	fp,0(sp)
    b220:	dec00104 	addi	sp,sp,4
    b224:	f800283a 	ret

0000b228 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b228:	defff804 	addi	sp,sp,-32
    b22c:	df000715 	stw	fp,28(sp)
    b230:	df000704 	addi	fp,sp,28
    b234:	e13ffb15 	stw	r4,-20(fp)
    b238:	e17ffc15 	stw	r5,-16(fp)
    b23c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    b240:	00bff9c4 	movi	r2,-25
    b244:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    b248:	e0bffc17 	ldw	r2,-16(fp)
    b24c:	e0bfff15 	stw	r2,-4(fp)
    b250:	e0ffff17 	ldw	r3,-4(fp)
    b254:	189a8060 	cmpeqi	r2,r3,27137
    b258:	1000041e 	bne	r2,zero,b26c <altera_avalon_jtag_uart_ioctl+0x44>
    b25c:	e0ffff17 	ldw	r3,-4(fp)
    b260:	189a80a0 	cmpeqi	r2,r3,27138
    b264:	10001b1e 	bne	r2,zero,b2d4 <altera_avalon_jtag_uart_ioctl+0xac>
    b268:	00002706 	br	b308 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b26c:	e0bffb17 	ldw	r2,-20(fp)
    b270:	10c00117 	ldw	r3,4(r2)
    b274:	00a00034 	movhi	r2,32768
    b278:	10bfffc4 	addi	r2,r2,-1
    b27c:	18802226 	beq	r3,r2,b308 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    b280:	e0bffd17 	ldw	r2,-12(fp)
    b284:	10800017 	ldw	r2,0(r2)
    b288:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b28c:	e0bff917 	ldw	r2,-28(fp)
    b290:	10800090 	cmplti	r2,r2,2
    b294:	1000071e 	bne	r2,zero,b2b4 <altera_avalon_jtag_uart_ioctl+0x8c>
    b298:	e0fff917 	ldw	r3,-28(fp)
    b29c:	00a00034 	movhi	r2,32768
    b2a0:	10bfffc4 	addi	r2,r2,-1
    b2a4:	18800326 	beq	r3,r2,b2b4 <altera_avalon_jtag_uart_ioctl+0x8c>
    b2a8:	e0bff917 	ldw	r2,-28(fp)
    b2ac:	e0bffe15 	stw	r2,-8(fp)
    b2b0:	00000306 	br	b2c0 <altera_avalon_jtag_uart_ioctl+0x98>
    b2b4:	00e00034 	movhi	r3,32768
    b2b8:	18ffff84 	addi	r3,r3,-2
    b2bc:	e0fffe15 	stw	r3,-8(fp)
    b2c0:	e0bffb17 	ldw	r2,-20(fp)
    b2c4:	e0fffe17 	ldw	r3,-8(fp)
    b2c8:	10c00115 	stw	r3,4(r2)
      rc = 0;
    b2cc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    b2d0:	00000d06 	br	b308 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b2d4:	e0bffb17 	ldw	r2,-20(fp)
    b2d8:	10c00117 	ldw	r3,4(r2)
    b2dc:	00a00034 	movhi	r2,32768
    b2e0:	10bfffc4 	addi	r2,r2,-1
    b2e4:	18800826 	beq	r3,r2,b308 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b2e8:	e13ffd17 	ldw	r4,-12(fp)
    b2ec:	e0bffb17 	ldw	r2,-20(fp)
    b2f0:	10c00917 	ldw	r3,36(r2)
    b2f4:	e0bffb17 	ldw	r2,-20(fp)
    b2f8:	10800117 	ldw	r2,4(r2)
    b2fc:	1885803a 	cmpltu	r2,r3,r2
    b300:	20800015 	stw	r2,0(r4)
      rc = 0;
    b304:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    b308:	e0bffa17 	ldw	r2,-24(fp)
}
    b30c:	e037883a 	mov	sp,fp
    b310:	df000017 	ldw	fp,0(sp)
    b314:	dec00104 	addi	sp,sp,4
    b318:	f800283a 	ret

0000b31c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b31c:	defff204 	addi	sp,sp,-56
    b320:	dfc00d15 	stw	ra,52(sp)
    b324:	df000c15 	stw	fp,48(sp)
    b328:	df000c04 	addi	fp,sp,48
    b32c:	e13ffb15 	stw	r4,-20(fp)
    b330:	e17ffc15 	stw	r5,-16(fp)
    b334:	e1bffd15 	stw	r6,-12(fp)
    b338:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    b33c:	e0bffc17 	ldw	r2,-16(fp)
    b340:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b344:	00004806 	br	b468 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b348:	e0bffb17 	ldw	r2,-20(fp)
    b34c:	10800a17 	ldw	r2,40(r2)
    b350:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    b354:	e0bffb17 	ldw	r2,-20(fp)
    b358:	10800b17 	ldw	r2,44(r2)
    b35c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    b360:	e0fff717 	ldw	r3,-36(fp)
    b364:	e0bff617 	ldw	r2,-40(fp)
    b368:	18800536 	bltu	r3,r2,b380 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    b36c:	e0bff717 	ldw	r2,-36(fp)
    b370:	e0fff617 	ldw	r3,-40(fp)
    b374:	10c5c83a 	sub	r2,r2,r3
    b378:	e0bff815 	stw	r2,-32(fp)
    b37c:	00000406 	br	b390 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b380:	00820004 	movi	r2,2048
    b384:	e0fff617 	ldw	r3,-40(fp)
    b388:	10c5c83a 	sub	r2,r2,r3
    b38c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b390:	e0bff817 	ldw	r2,-32(fp)
    b394:	1005003a 	cmpeq	r2,r2,zero
    b398:	10001f1e 	bne	r2,zero,b418 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    b39c:	e0fffd17 	ldw	r3,-12(fp)
    b3a0:	e0bff817 	ldw	r2,-32(fp)
    b3a4:	1880022e 	bgeu	r3,r2,b3b0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    b3a8:	e0bffd17 	ldw	r2,-12(fp)
    b3ac:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b3b0:	e0bffb17 	ldw	r2,-20(fp)
    b3b4:	10c00e04 	addi	r3,r2,56
    b3b8:	e0bff617 	ldw	r2,-40(fp)
    b3bc:	1887883a 	add	r3,r3,r2
    b3c0:	e0bffa17 	ldw	r2,-24(fp)
    b3c4:	1009883a 	mov	r4,r2
    b3c8:	180b883a 	mov	r5,r3
    b3cc:	e1bff817 	ldw	r6,-32(fp)
    b3d0:	00059280 	call	5928 <memcpy>
      ptr   += n;
    b3d4:	e0fff817 	ldw	r3,-32(fp)
    b3d8:	e0bffa17 	ldw	r2,-24(fp)
    b3dc:	10c5883a 	add	r2,r2,r3
    b3e0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    b3e4:	e0fffd17 	ldw	r3,-12(fp)
    b3e8:	e0bff817 	ldw	r2,-32(fp)
    b3ec:	1885c83a 	sub	r2,r3,r2
    b3f0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b3f4:	e0fff617 	ldw	r3,-40(fp)
    b3f8:	e0bff817 	ldw	r2,-32(fp)
    b3fc:	1885883a 	add	r2,r3,r2
    b400:	10c1ffcc 	andi	r3,r2,2047
    b404:	e0bffb17 	ldw	r2,-20(fp)
    b408:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b40c:	e0bffd17 	ldw	r2,-12(fp)
    b410:	10800048 	cmpgei	r2,r2,1
    b414:	103fcc1e 	bne	r2,zero,b348 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    b418:	e0fffa17 	ldw	r3,-24(fp)
    b41c:	e0bffc17 	ldw	r2,-16(fp)
    b420:	1880141e 	bne	r3,r2,b474 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b424:	e0bffe17 	ldw	r2,-8(fp)
    b428:	1090000c 	andi	r2,r2,16384
    b42c:	1004c03a 	cmpne	r2,r2,zero
    b430:	1000101e 	bne	r2,zero,b474 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b434:	e0bffb17 	ldw	r2,-20(fp)
    b438:	10c00a17 	ldw	r3,40(r2)
    b43c:	e0bff717 	ldw	r2,-36(fp)
    b440:	1880051e 	bne	r3,r2,b458 <altera_avalon_jtag_uart_read+0x13c>
    b444:	e0bffb17 	ldw	r2,-20(fp)
    b448:	10c00917 	ldw	r3,36(r2)
    b44c:	e0bffb17 	ldw	r2,-20(fp)
    b450:	10800117 	ldw	r2,4(r2)
    b454:	18bff736 	bltu	r3,r2,b434 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b458:	e0bffb17 	ldw	r2,-20(fp)
    b45c:	10c00a17 	ldw	r3,40(r2)
    b460:	e0bff717 	ldw	r2,-36(fp)
    b464:	18800326 	beq	r3,r2,b474 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b468:	e0bffd17 	ldw	r2,-12(fp)
    b46c:	10800048 	cmpgei	r2,r2,1
    b470:	103fb51e 	bne	r2,zero,b348 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b474:	e0fffa17 	ldw	r3,-24(fp)
    b478:	e0bffc17 	ldw	r2,-16(fp)
    b47c:	18801926 	beq	r3,r2,b4e4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b480:	0005303a 	rdctl	r2,status
    b484:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b488:	e0fff517 	ldw	r3,-44(fp)
    b48c:	00bfff84 	movi	r2,-2
    b490:	1884703a 	and	r2,r3,r2
    b494:	1001703a 	wrctl	status,r2
  
  return context;
    b498:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b49c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b4a0:	e0bffb17 	ldw	r2,-20(fp)
    b4a4:	10800817 	ldw	r2,32(r2)
    b4a8:	10c00054 	ori	r3,r2,1
    b4ac:	e0bffb17 	ldw	r2,-20(fp)
    b4b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b4b4:	e0bffb17 	ldw	r2,-20(fp)
    b4b8:	10800017 	ldw	r2,0(r2)
    b4bc:	11000104 	addi	r4,r2,4
    b4c0:	e0bffb17 	ldw	r2,-20(fp)
    b4c4:	10800817 	ldw	r2,32(r2)
    b4c8:	1007883a 	mov	r3,r2
    b4cc:	2005883a 	mov	r2,r4
    b4d0:	10c00035 	stwio	r3,0(r2)
    b4d4:	e0bff917 	ldw	r2,-28(fp)
    b4d8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b4dc:	e0bff417 	ldw	r2,-48(fp)
    b4e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b4e4:	e0fffa17 	ldw	r3,-24(fp)
    b4e8:	e0bffc17 	ldw	r2,-16(fp)
    b4ec:	18800526 	beq	r3,r2,b504 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    b4f0:	e0fffa17 	ldw	r3,-24(fp)
    b4f4:	e0bffc17 	ldw	r2,-16(fp)
    b4f8:	1887c83a 	sub	r3,r3,r2
    b4fc:	e0ffff15 	stw	r3,-4(fp)
    b500:	00000906 	br	b528 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    b504:	e0bffe17 	ldw	r2,-8(fp)
    b508:	1090000c 	andi	r2,r2,16384
    b50c:	1005003a 	cmpeq	r2,r2,zero
    b510:	1000031e 	bne	r2,zero,b520 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    b514:	00bffd44 	movi	r2,-11
    b518:	e0bfff15 	stw	r2,-4(fp)
    b51c:	00000206 	br	b528 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    b520:	00bffec4 	movi	r2,-5
    b524:	e0bfff15 	stw	r2,-4(fp)
    b528:	e0bfff17 	ldw	r2,-4(fp)
}
    b52c:	e037883a 	mov	sp,fp
    b530:	dfc00117 	ldw	ra,4(sp)
    b534:	df000017 	ldw	fp,0(sp)
    b538:	dec00204 	addi	sp,sp,8
    b53c:	f800283a 	ret

0000b540 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b540:	defff204 	addi	sp,sp,-56
    b544:	dfc00d15 	stw	ra,52(sp)
    b548:	df000c15 	stw	fp,48(sp)
    b54c:	df000c04 	addi	fp,sp,48
    b550:	e13ffb15 	stw	r4,-20(fp)
    b554:	e17ffc15 	stw	r5,-16(fp)
    b558:	e1bffd15 	stw	r6,-12(fp)
    b55c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b560:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b564:	e0bffc17 	ldw	r2,-16(fp)
    b568:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b56c:	00003a06 	br	b658 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b570:	e0bffb17 	ldw	r2,-20(fp)
    b574:	10800c17 	ldw	r2,48(r2)
    b578:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    b57c:	e0bffb17 	ldw	r2,-20(fp)
    b580:	10800d17 	ldw	r2,52(r2)
    b584:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    b588:	e0fffa17 	ldw	r3,-24(fp)
    b58c:	e0bff917 	ldw	r2,-28(fp)
    b590:	1880062e 	bgeu	r3,r2,b5ac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b594:	e0fff917 	ldw	r3,-28(fp)
    b598:	e0bffa17 	ldw	r2,-24(fp)
    b59c:	1885c83a 	sub	r2,r3,r2
    b5a0:	10bfffc4 	addi	r2,r2,-1
    b5a4:	e0bff815 	stw	r2,-32(fp)
    b5a8:	00000c06 	br	b5dc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    b5ac:	e0bff917 	ldw	r2,-28(fp)
    b5b0:	1005003a 	cmpeq	r2,r2,zero
    b5b4:	1000051e 	bne	r2,zero,b5cc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b5b8:	00820004 	movi	r2,2048
    b5bc:	e0fffa17 	ldw	r3,-24(fp)
    b5c0:	10c5c83a 	sub	r2,r2,r3
    b5c4:	e0bff815 	stw	r2,-32(fp)
    b5c8:	00000406 	br	b5dc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b5cc:	0081ffc4 	movi	r2,2047
    b5d0:	e0fffa17 	ldw	r3,-24(fp)
    b5d4:	10c5c83a 	sub	r2,r2,r3
    b5d8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b5dc:	e0bff817 	ldw	r2,-32(fp)
    b5e0:	1005003a 	cmpeq	r2,r2,zero
    b5e4:	10001f1e 	bne	r2,zero,b664 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    b5e8:	e0fffd17 	ldw	r3,-12(fp)
    b5ec:	e0bff817 	ldw	r2,-32(fp)
    b5f0:	1880022e 	bgeu	r3,r2,b5fc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    b5f4:	e0bffd17 	ldw	r2,-12(fp)
    b5f8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b5fc:	e0bffb17 	ldw	r2,-20(fp)
    b600:	10c20e04 	addi	r3,r2,2104
    b604:	e0bffa17 	ldw	r2,-24(fp)
    b608:	1885883a 	add	r2,r3,r2
    b60c:	e0fffc17 	ldw	r3,-16(fp)
    b610:	1009883a 	mov	r4,r2
    b614:	180b883a 	mov	r5,r3
    b618:	e1bff817 	ldw	r6,-32(fp)
    b61c:	00059280 	call	5928 <memcpy>
      ptr   += n;
    b620:	e0fff817 	ldw	r3,-32(fp)
    b624:	e0bffc17 	ldw	r2,-16(fp)
    b628:	10c5883a 	add	r2,r2,r3
    b62c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    b630:	e0fffd17 	ldw	r3,-12(fp)
    b634:	e0bff817 	ldw	r2,-32(fp)
    b638:	1885c83a 	sub	r2,r3,r2
    b63c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b640:	e0fffa17 	ldw	r3,-24(fp)
    b644:	e0bff817 	ldw	r2,-32(fp)
    b648:	1885883a 	add	r2,r3,r2
    b64c:	10c1ffcc 	andi	r3,r2,2047
    b650:	e0bffb17 	ldw	r2,-20(fp)
    b654:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b658:	e0bffd17 	ldw	r2,-12(fp)
    b65c:	10800048 	cmpgei	r2,r2,1
    b660:	103fc31e 	bne	r2,zero,b570 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b664:	0005303a 	rdctl	r2,status
    b668:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b66c:	e0fff517 	ldw	r3,-44(fp)
    b670:	00bfff84 	movi	r2,-2
    b674:	1884703a 	and	r2,r3,r2
    b678:	1001703a 	wrctl	status,r2
  
  return context;
    b67c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b680:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b684:	e0bffb17 	ldw	r2,-20(fp)
    b688:	10800817 	ldw	r2,32(r2)
    b68c:	10c00094 	ori	r3,r2,2
    b690:	e0bffb17 	ldw	r2,-20(fp)
    b694:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b698:	e0bffb17 	ldw	r2,-20(fp)
    b69c:	10800017 	ldw	r2,0(r2)
    b6a0:	11000104 	addi	r4,r2,4
    b6a4:	e0bffb17 	ldw	r2,-20(fp)
    b6a8:	10800817 	ldw	r2,32(r2)
    b6ac:	1007883a 	mov	r3,r2
    b6b0:	2005883a 	mov	r2,r4
    b6b4:	10c00035 	stwio	r3,0(r2)
    b6b8:	e0bff717 	ldw	r2,-36(fp)
    b6bc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b6c0:	e0bff417 	ldw	r2,-48(fp)
    b6c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b6c8:	e0bffd17 	ldw	r2,-12(fp)
    b6cc:	10800050 	cmplti	r2,r2,1
    b6d0:	1000111e 	bne	r2,zero,b718 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    b6d4:	e0bffe17 	ldw	r2,-8(fp)
    b6d8:	1090000c 	andi	r2,r2,16384
    b6dc:	1004c03a 	cmpne	r2,r2,zero
    b6e0:	1000101e 	bne	r2,zero,b724 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b6e4:	e0bffb17 	ldw	r2,-20(fp)
    b6e8:	10c00d17 	ldw	r3,52(r2)
    b6ec:	e0bff917 	ldw	r2,-28(fp)
    b6f0:	1880051e 	bne	r3,r2,b708 <altera_avalon_jtag_uart_write+0x1c8>
    b6f4:	e0bffb17 	ldw	r2,-20(fp)
    b6f8:	10c00917 	ldw	r3,36(r2)
    b6fc:	e0bffb17 	ldw	r2,-20(fp)
    b700:	10800117 	ldw	r2,4(r2)
    b704:	18bff736 	bltu	r3,r2,b6e4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    b708:	e0bffb17 	ldw	r2,-20(fp)
    b70c:	10c00d17 	ldw	r3,52(r2)
    b710:	e0bff917 	ldw	r2,-28(fp)
    b714:	18800326 	beq	r3,r2,b724 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    b718:	e0bffd17 	ldw	r2,-12(fp)
    b71c:	10800048 	cmpgei	r2,r2,1
    b720:	103fcd1e 	bne	r2,zero,b658 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b724:	e0fffc17 	ldw	r3,-16(fp)
    b728:	e0bff617 	ldw	r2,-40(fp)
    b72c:	18800526 	beq	r3,r2,b744 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    b730:	e0fffc17 	ldw	r3,-16(fp)
    b734:	e0bff617 	ldw	r2,-40(fp)
    b738:	1887c83a 	sub	r3,r3,r2
    b73c:	e0ffff15 	stw	r3,-4(fp)
    b740:	00000906 	br	b768 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    b744:	e0bffe17 	ldw	r2,-8(fp)
    b748:	1090000c 	andi	r2,r2,16384
    b74c:	1005003a 	cmpeq	r2,r2,zero
    b750:	1000031e 	bne	r2,zero,b760 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    b754:	00bffd44 	movi	r2,-11
    b758:	e0bfff15 	stw	r2,-4(fp)
    b75c:	00000206 	br	b768 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    b760:	00bffec4 	movi	r2,-5
    b764:	e0bfff15 	stw	r2,-4(fp)
    b768:	e0bfff17 	ldw	r2,-4(fp)
}
    b76c:	e037883a 	mov	sp,fp
    b770:	dfc00117 	ldw	ra,4(sp)
    b774:	df000017 	ldw	fp,0(sp)
    b778:	dec00204 	addi	sp,sp,8
    b77c:	f800283a 	ret

0000b780 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b780:	defffa04 	addi	sp,sp,-24
    b784:	dfc00515 	stw	ra,20(sp)
    b788:	df000415 	stw	fp,16(sp)
    b78c:	df000404 	addi	fp,sp,16
    b790:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b794:	e0bfff17 	ldw	r2,-4(fp)
    b798:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b79c:	e0bfff17 	ldw	r2,-4(fp)
    b7a0:	10800104 	addi	r2,r2,4
    b7a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b7a8:	0005303a 	rdctl	r2,status
    b7ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7b0:	e0fffd17 	ldw	r3,-12(fp)
    b7b4:	00bfff84 	movi	r2,-2
    b7b8:	1884703a 	and	r2,r3,r2
    b7bc:	1001703a 	wrctl	status,r2
  
  return context;
    b7c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b7c4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    b7c8:	000a97c0 	call	a97c <alt_tick>
    b7cc:	e0bffe17 	ldw	r2,-8(fp)
    b7d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b7d4:	e0bffc17 	ldw	r2,-16(fp)
    b7d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b7dc:	e037883a 	mov	sp,fp
    b7e0:	dfc00117 	ldw	ra,4(sp)
    b7e4:	df000017 	ldw	fp,0(sp)
    b7e8:	dec00204 	addi	sp,sp,8
    b7ec:	f800283a 	ret

0000b7f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b7f0:	defff804 	addi	sp,sp,-32
    b7f4:	dfc00715 	stw	ra,28(sp)
    b7f8:	df000615 	stw	fp,24(sp)
    b7fc:	df000604 	addi	fp,sp,24
    b800:	e13ffc15 	stw	r4,-16(fp)
    b804:	e17ffd15 	stw	r5,-12(fp)
    b808:	e1bffe15 	stw	r6,-8(fp)
    b80c:	e1ffff15 	stw	r7,-4(fp)
    b810:	e0bfff17 	ldw	r2,-4(fp)
    b814:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b818:	00800074 	movhi	r2,1
    b81c:	10801e04 	addi	r2,r2,120
    b820:	10800017 	ldw	r2,0(r2)
    b824:	1004c03a 	cmpne	r2,r2,zero
    b828:	1000041e 	bne	r2,zero,b83c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    b82c:	00c00074 	movhi	r3,1
    b830:	18c01e04 	addi	r3,r3,120
    b834:	e0bffb17 	ldw	r2,-20(fp)
    b838:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b83c:	e0bffc17 	ldw	r2,-16(fp)
    b840:	10800104 	addi	r2,r2,4
    b844:	1007883a 	mov	r3,r2
    b848:	008001c4 	movi	r2,7
    b84c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b850:	d8000015 	stw	zero,0(sp)
    b854:	e13ffd17 	ldw	r4,-12(fp)
    b858:	e17ffe17 	ldw	r5,-8(fp)
    b85c:	01800074 	movhi	r6,1
    b860:	31ade004 	addi	r6,r6,-18560
    b864:	e1fffc17 	ldw	r7,-16(fp)
    b868:	000ba940 	call	ba94 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b86c:	e037883a 	mov	sp,fp
    b870:	dfc00117 	ldw	ra,4(sp)
    b874:	df000017 	ldw	fp,0(sp)
    b878:	dec00204 	addi	sp,sp,8
    b87c:	f800283a 	ret

0000b880 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b880:	deffff04 	addi	sp,sp,-4
    b884:	df000015 	stw	fp,0(sp)
    b888:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b88c:	e037883a 	mov	sp,fp
    b890:	df000017 	ldw	fp,0(sp)
    b894:	dec00104 	addi	sp,sp,4
    b898:	f800283a 	ret

0000b89c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    b89c:	defff904 	addi	sp,sp,-28
    b8a0:	dfc00615 	stw	ra,24(sp)
    b8a4:	df000515 	stw	fp,20(sp)
    b8a8:	df000504 	addi	fp,sp,20
    b8ac:	e13ffd15 	stw	r4,-12(fp)
    b8b0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    b8b4:	e0bffd17 	ldw	r2,-12(fp)
    b8b8:	1005003a 	cmpeq	r2,r2,zero
    b8bc:	1000041e 	bne	r2,zero,b8d0 <alt_dev_llist_insert+0x34>
    b8c0:	e0bffd17 	ldw	r2,-12(fp)
    b8c4:	10800217 	ldw	r2,8(r2)
    b8c8:	1004c03a 	cmpne	r2,r2,zero
    b8cc:	1000071e 	bne	r2,zero,b8ec <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    b8d0:	000b9500 	call	b950 <alt_get_errno>
    b8d4:	1007883a 	mov	r3,r2
    b8d8:	00800584 	movi	r2,22
    b8dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    b8e0:	00bffa84 	movi	r2,-22
    b8e4:	e0bfff15 	stw	r2,-4(fp)
    b8e8:	00001306 	br	b938 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    b8ec:	e0fffd17 	ldw	r3,-12(fp)
    b8f0:	e0bffe17 	ldw	r2,-8(fp)
    b8f4:	e0bffb15 	stw	r2,-20(fp)
    b8f8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b8fc:	e0fffc17 	ldw	r3,-16(fp)
    b900:	e0bffb17 	ldw	r2,-20(fp)
    b904:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    b908:	e0bffb17 	ldw	r2,-20(fp)
    b90c:	10c00017 	ldw	r3,0(r2)
    b910:	e0bffc17 	ldw	r2,-16(fp)
    b914:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b918:	e0bffb17 	ldw	r2,-20(fp)
    b91c:	10c00017 	ldw	r3,0(r2)
    b920:	e0bffc17 	ldw	r2,-16(fp)
    b924:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    b928:	e0fffb17 	ldw	r3,-20(fp)
    b92c:	e0bffc17 	ldw	r2,-16(fp)
    b930:	18800015 	stw	r2,0(r3)

  return 0;  
    b934:	e03fff15 	stw	zero,-4(fp)
    b938:	e0bfff17 	ldw	r2,-4(fp)
}
    b93c:	e037883a 	mov	sp,fp
    b940:	dfc00117 	ldw	ra,4(sp)
    b944:	df000017 	ldw	fp,0(sp)
    b948:	dec00204 	addi	sp,sp,8
    b94c:	f800283a 	ret

0000b950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b950:	defffd04 	addi	sp,sp,-12
    b954:	dfc00215 	stw	ra,8(sp)
    b958:	df000115 	stw	fp,4(sp)
    b95c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b960:	00800074 	movhi	r2,1
    b964:	10b97604 	addi	r2,r2,-6696
    b968:	10800017 	ldw	r2,0(r2)
    b96c:	1005003a 	cmpeq	r2,r2,zero
    b970:	1000061e 	bne	r2,zero,b98c <alt_get_errno+0x3c>
    b974:	00800074 	movhi	r2,1
    b978:	10b97604 	addi	r2,r2,-6696
    b97c:	10800017 	ldw	r2,0(r2)
    b980:	103ee83a 	callr	r2
    b984:	e0bfff15 	stw	r2,-4(fp)
    b988:	00000306 	br	b998 <alt_get_errno+0x48>
    b98c:	00800074 	movhi	r2,1
    b990:	10801704 	addi	r2,r2,92
    b994:	e0bfff15 	stw	r2,-4(fp)
    b998:	e0bfff17 	ldw	r2,-4(fp)
}
    b99c:	e037883a 	mov	sp,fp
    b9a0:	dfc00117 	ldw	ra,4(sp)
    b9a4:	df000017 	ldw	fp,0(sp)
    b9a8:	dec00204 	addi	sp,sp,8
    b9ac:	f800283a 	ret

0000b9b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b9b0:	defffd04 	addi	sp,sp,-12
    b9b4:	dfc00215 	stw	ra,8(sp)
    b9b8:	df000115 	stw	fp,4(sp)
    b9bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b9c0:	00bfff04 	movi	r2,-4
    b9c4:	00c00074 	movhi	r3,1
    b9c8:	18f21104 	addi	r3,r3,-14268
    b9cc:	1885883a 	add	r2,r3,r2
    b9d0:	e0bfff15 	stw	r2,-4(fp)
    b9d4:	00000606 	br	b9f0 <_do_ctors+0x40>
        (*ctor) (); 
    b9d8:	e0bfff17 	ldw	r2,-4(fp)
    b9dc:	10800017 	ldw	r2,0(r2)
    b9e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b9e4:	e0bfff17 	ldw	r2,-4(fp)
    b9e8:	10bfff04 	addi	r2,r2,-4
    b9ec:	e0bfff15 	stw	r2,-4(fp)
    b9f0:	e0ffff17 	ldw	r3,-4(fp)
    b9f4:	00800074 	movhi	r2,1
    b9f8:	10b21004 	addi	r2,r2,-14272
    b9fc:	18bff62e 	bgeu	r3,r2,b9d8 <_do_ctors+0x28>
        (*ctor) (); 
}
    ba00:	e037883a 	mov	sp,fp
    ba04:	dfc00117 	ldw	ra,4(sp)
    ba08:	df000017 	ldw	fp,0(sp)
    ba0c:	dec00204 	addi	sp,sp,8
    ba10:	f800283a 	ret

0000ba14 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    ba14:	defffd04 	addi	sp,sp,-12
    ba18:	dfc00215 	stw	ra,8(sp)
    ba1c:	df000115 	stw	fp,4(sp)
    ba20:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ba24:	00bfff04 	movi	r2,-4
    ba28:	00c00074 	movhi	r3,1
    ba2c:	18f21104 	addi	r3,r3,-14268
    ba30:	1885883a 	add	r2,r3,r2
    ba34:	e0bfff15 	stw	r2,-4(fp)
    ba38:	00000606 	br	ba54 <_do_dtors+0x40>
        (*dtor) (); 
    ba3c:	e0bfff17 	ldw	r2,-4(fp)
    ba40:	10800017 	ldw	r2,0(r2)
    ba44:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ba48:	e0bfff17 	ldw	r2,-4(fp)
    ba4c:	10bfff04 	addi	r2,r2,-4
    ba50:	e0bfff15 	stw	r2,-4(fp)
    ba54:	e0ffff17 	ldw	r3,-4(fp)
    ba58:	00800074 	movhi	r2,1
    ba5c:	10b21104 	addi	r2,r2,-14268
    ba60:	18bff62e 	bgeu	r3,r2,ba3c <_do_dtors+0x28>
        (*dtor) (); 
}
    ba64:	e037883a 	mov	sp,fp
    ba68:	dfc00117 	ldw	ra,4(sp)
    ba6c:	df000017 	ldw	fp,0(sp)
    ba70:	dec00204 	addi	sp,sp,8
    ba74:	f800283a 	ret

0000ba78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ba78:	deffff04 	addi	sp,sp,-4
    ba7c:	df000015 	stw	fp,0(sp)
    ba80:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    ba84:	e037883a 	mov	sp,fp
    ba88:	df000017 	ldw	fp,0(sp)
    ba8c:	dec00104 	addi	sp,sp,4
    ba90:	f800283a 	ret

0000ba94 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ba94:	defff904 	addi	sp,sp,-28
    ba98:	dfc00615 	stw	ra,24(sp)
    ba9c:	df000515 	stw	fp,20(sp)
    baa0:	df000504 	addi	fp,sp,20
    baa4:	e13ffc15 	stw	r4,-16(fp)
    baa8:	e17ffd15 	stw	r5,-12(fp)
    baac:	e1bffe15 	stw	r6,-8(fp)
    bab0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    bab4:	e0800217 	ldw	r2,8(fp)
    bab8:	d8800015 	stw	r2,0(sp)
    babc:	e13ffc17 	ldw	r4,-16(fp)
    bac0:	e17ffd17 	ldw	r5,-12(fp)
    bac4:	e1bffe17 	ldw	r6,-8(fp)
    bac8:	e1ffff17 	ldw	r7,-4(fp)
    bacc:	000bc680 	call	bc68 <alt_iic_isr_register>
}  
    bad0:	e037883a 	mov	sp,fp
    bad4:	dfc00117 	ldw	ra,4(sp)
    bad8:	df000017 	ldw	fp,0(sp)
    badc:	dec00204 	addi	sp,sp,8
    bae0:	f800283a 	ret

0000bae4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    bae4:	defff904 	addi	sp,sp,-28
    bae8:	df000615 	stw	fp,24(sp)
    baec:	df000604 	addi	fp,sp,24
    baf0:	e13ffe15 	stw	r4,-8(fp)
    baf4:	e17fff15 	stw	r5,-4(fp)
    baf8:	e0bfff17 	ldw	r2,-4(fp)
    bafc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb00:	0005303a 	rdctl	r2,status
    bb04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb08:	e0fffb17 	ldw	r3,-20(fp)
    bb0c:	00bfff84 	movi	r2,-2
    bb10:	1884703a 	and	r2,r3,r2
    bb14:	1001703a 	wrctl	status,r2
  
  return context;
    bb18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bb1c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    bb20:	e0fffc17 	ldw	r3,-16(fp)
    bb24:	00800044 	movi	r2,1
    bb28:	10c4983a 	sll	r2,r2,r3
    bb2c:	1007883a 	mov	r3,r2
    bb30:	00800074 	movhi	r2,1
    bb34:	10802004 	addi	r2,r2,128
    bb38:	10800017 	ldw	r2,0(r2)
    bb3c:	1886b03a 	or	r3,r3,r2
    bb40:	00800074 	movhi	r2,1
    bb44:	10802004 	addi	r2,r2,128
    bb48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bb4c:	00800074 	movhi	r2,1
    bb50:	10802004 	addi	r2,r2,128
    bb54:	10800017 	ldw	r2,0(r2)
    bb58:	100170fa 	wrctl	ienable,r2
    bb5c:	e0bffd17 	ldw	r2,-12(fp)
    bb60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb64:	e0bffa17 	ldw	r2,-24(fp)
    bb68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bb6c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    bb70:	e037883a 	mov	sp,fp
    bb74:	df000017 	ldw	fp,0(sp)
    bb78:	dec00104 	addi	sp,sp,4
    bb7c:	f800283a 	ret

0000bb80 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    bb80:	defff904 	addi	sp,sp,-28
    bb84:	df000615 	stw	fp,24(sp)
    bb88:	df000604 	addi	fp,sp,24
    bb8c:	e13ffe15 	stw	r4,-8(fp)
    bb90:	e17fff15 	stw	r5,-4(fp)
    bb94:	e0bfff17 	ldw	r2,-4(fp)
    bb98:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb9c:	0005303a 	rdctl	r2,status
    bba0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bba4:	e0fffb17 	ldw	r3,-20(fp)
    bba8:	00bfff84 	movi	r2,-2
    bbac:	1884703a 	and	r2,r3,r2
    bbb0:	1001703a 	wrctl	status,r2
  
  return context;
    bbb4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bbb8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    bbbc:	e0fffc17 	ldw	r3,-16(fp)
    bbc0:	00800044 	movi	r2,1
    bbc4:	10c4983a 	sll	r2,r2,r3
    bbc8:	0084303a 	nor	r2,zero,r2
    bbcc:	1007883a 	mov	r3,r2
    bbd0:	00800074 	movhi	r2,1
    bbd4:	10802004 	addi	r2,r2,128
    bbd8:	10800017 	ldw	r2,0(r2)
    bbdc:	1886703a 	and	r3,r3,r2
    bbe0:	00800074 	movhi	r2,1
    bbe4:	10802004 	addi	r2,r2,128
    bbe8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bbec:	00800074 	movhi	r2,1
    bbf0:	10802004 	addi	r2,r2,128
    bbf4:	10800017 	ldw	r2,0(r2)
    bbf8:	100170fa 	wrctl	ienable,r2
    bbfc:	e0bffd17 	ldw	r2,-12(fp)
    bc00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc04:	e0bffa17 	ldw	r2,-24(fp)
    bc08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bc0c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    bc10:	e037883a 	mov	sp,fp
    bc14:	df000017 	ldw	fp,0(sp)
    bc18:	dec00104 	addi	sp,sp,4
    bc1c:	f800283a 	ret

0000bc20 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    bc20:	defffc04 	addi	sp,sp,-16
    bc24:	df000315 	stw	fp,12(sp)
    bc28:	df000304 	addi	fp,sp,12
    bc2c:	e13ffe15 	stw	r4,-8(fp)
    bc30:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    bc34:	000530fa 	rdctl	r2,ienable
    bc38:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    bc3c:	e0ffff17 	ldw	r3,-4(fp)
    bc40:	00800044 	movi	r2,1
    bc44:	10c4983a 	sll	r2,r2,r3
    bc48:	1007883a 	mov	r3,r2
    bc4c:	e0bffd17 	ldw	r2,-12(fp)
    bc50:	1884703a 	and	r2,r3,r2
    bc54:	1004c03a 	cmpne	r2,r2,zero
}
    bc58:	e037883a 	mov	sp,fp
    bc5c:	df000017 	ldw	fp,0(sp)
    bc60:	dec00104 	addi	sp,sp,4
    bc64:	f800283a 	ret

0000bc68 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bc68:	defff404 	addi	sp,sp,-48
    bc6c:	dfc00b15 	stw	ra,44(sp)
    bc70:	df000a15 	stw	fp,40(sp)
    bc74:	df000a04 	addi	fp,sp,40
    bc78:	e13ffb15 	stw	r4,-20(fp)
    bc7c:	e17ffc15 	stw	r5,-16(fp)
    bc80:	e1bffd15 	stw	r6,-12(fp)
    bc84:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    bc88:	00bffa84 	movi	r2,-22
    bc8c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    bc90:	e0bffc17 	ldw	r2,-16(fp)
    bc94:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    bc98:	e0bff917 	ldw	r2,-28(fp)
    bc9c:	10800808 	cmpgei	r2,r2,32
    bca0:	1000291e 	bne	r2,zero,bd48 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bca4:	0005303a 	rdctl	r2,status
    bca8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bcac:	e0fff717 	ldw	r3,-36(fp)
    bcb0:	00bfff84 	movi	r2,-2
    bcb4:	1884703a 	and	r2,r3,r2
    bcb8:	1001703a 	wrctl	status,r2
  
  return context;
    bcbc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    bcc0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    bcc4:	e0bff917 	ldw	r2,-28(fp)
    bcc8:	00c00074 	movhi	r3,1
    bccc:	18c15d04 	addi	r3,r3,1396
    bcd0:	100490fa 	slli	r2,r2,3
    bcd4:	10c7883a 	add	r3,r2,r3
    bcd8:	e0bffd17 	ldw	r2,-12(fp)
    bcdc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    bce0:	e0bff917 	ldw	r2,-28(fp)
    bce4:	00c00074 	movhi	r3,1
    bce8:	18c15d04 	addi	r3,r3,1396
    bcec:	100490fa 	slli	r2,r2,3
    bcf0:	10c5883a 	add	r2,r2,r3
    bcf4:	10c00104 	addi	r3,r2,4
    bcf8:	e0bffe17 	ldw	r2,-8(fp)
    bcfc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    bd00:	e0bffd17 	ldw	r2,-12(fp)
    bd04:	1005003a 	cmpeq	r2,r2,zero
    bd08:	1000051e 	bne	r2,zero,bd20 <alt_iic_isr_register+0xb8>
    bd0c:	e17ff917 	ldw	r5,-28(fp)
    bd10:	e13ffb17 	ldw	r4,-20(fp)
    bd14:	000bae40 	call	bae4 <alt_ic_irq_enable>
    bd18:	e0bfff15 	stw	r2,-4(fp)
    bd1c:	00000406 	br	bd30 <alt_iic_isr_register+0xc8>
    bd20:	e17ff917 	ldw	r5,-28(fp)
    bd24:	e13ffb17 	ldw	r4,-20(fp)
    bd28:	000bb800 	call	bb80 <alt_ic_irq_disable>
    bd2c:	e0bfff15 	stw	r2,-4(fp)
    bd30:	e0bfff17 	ldw	r2,-4(fp)
    bd34:	e0bffa15 	stw	r2,-24(fp)
    bd38:	e0bff817 	ldw	r2,-32(fp)
    bd3c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd40:	e0bff617 	ldw	r2,-40(fp)
    bd44:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    bd48:	e0bffa17 	ldw	r2,-24(fp)
}
    bd4c:	e037883a 	mov	sp,fp
    bd50:	dfc00117 	ldw	ra,4(sp)
    bd54:	df000017 	ldw	fp,0(sp)
    bd58:	dec00204 	addi	sp,sp,8
    bd5c:	f800283a 	ret

0000bd60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bd60:	defff804 	addi	sp,sp,-32
    bd64:	dfc00715 	stw	ra,28(sp)
    bd68:	df000615 	stw	fp,24(sp)
    bd6c:	dc000515 	stw	r16,20(sp)
    bd70:	df000504 	addi	fp,sp,20
    bd74:	e13ffc15 	stw	r4,-16(fp)
    bd78:	e17ffd15 	stw	r5,-12(fp)
    bd7c:	e1bffe15 	stw	r6,-8(fp)
    bd80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    bd84:	e13ffd17 	ldw	r4,-12(fp)
    bd88:	e17ffe17 	ldw	r5,-8(fp)
    bd8c:	e1bfff17 	ldw	r6,-4(fp)
    bd90:	000bfa80 	call	bfa8 <open>
    bd94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    bd98:	e0bffb17 	ldw	r2,-20(fp)
    bd9c:	1004803a 	cmplt	r2,r2,zero
    bda0:	10001f1e 	bne	r2,zero,be20 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    bda4:	e13ffb17 	ldw	r4,-20(fp)
    bda8:	04000074 	movhi	r16,1
    bdac:	8434f304 	addi	r16,r16,-11316
    bdb0:	01400304 	movi	r5,12
    bdb4:	00005700 	call	570 <__mulsi3>
    bdb8:	1405883a 	add	r2,r2,r16
    bdbc:	10c00017 	ldw	r3,0(r2)
    bdc0:	e0bffc17 	ldw	r2,-16(fp)
    bdc4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bdc8:	e13ffb17 	ldw	r4,-20(fp)
    bdcc:	04000074 	movhi	r16,1
    bdd0:	8434f304 	addi	r16,r16,-11316
    bdd4:	01400304 	movi	r5,12
    bdd8:	00005700 	call	570 <__mulsi3>
    bddc:	1405883a 	add	r2,r2,r16
    bde0:	10800104 	addi	r2,r2,4
    bde4:	10c00017 	ldw	r3,0(r2)
    bde8:	e0bffc17 	ldw	r2,-16(fp)
    bdec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    bdf0:	e13ffb17 	ldw	r4,-20(fp)
    bdf4:	04000074 	movhi	r16,1
    bdf8:	8434f304 	addi	r16,r16,-11316
    bdfc:	01400304 	movi	r5,12
    be00:	00005700 	call	570 <__mulsi3>
    be04:	1405883a 	add	r2,r2,r16
    be08:	10800204 	addi	r2,r2,8
    be0c:	10c00017 	ldw	r3,0(r2)
    be10:	e0bffc17 	ldw	r2,-16(fp)
    be14:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    be18:	e13ffb17 	ldw	r4,-20(fp)
    be1c:	000a7b00 	call	a7b0 <alt_release_fd>
  }
} 
    be20:	e037883a 	mov	sp,fp
    be24:	dfc00217 	ldw	ra,8(sp)
    be28:	df000117 	ldw	fp,4(sp)
    be2c:	dc000017 	ldw	r16,0(sp)
    be30:	dec00304 	addi	sp,sp,12
    be34:	f800283a 	ret

0000be38 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    be38:	defffb04 	addi	sp,sp,-20
    be3c:	dfc00415 	stw	ra,16(sp)
    be40:	df000315 	stw	fp,12(sp)
    be44:	df000304 	addi	fp,sp,12
    be48:	e13ffd15 	stw	r4,-12(fp)
    be4c:	e17ffe15 	stw	r5,-8(fp)
    be50:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    be54:	01000074 	movhi	r4,1
    be58:	2134f604 	addi	r4,r4,-11304
    be5c:	e17ffd17 	ldw	r5,-12(fp)
    be60:	01800044 	movi	r6,1
    be64:	01c07fc4 	movi	r7,511
    be68:	000bd600 	call	bd60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    be6c:	01000074 	movhi	r4,1
    be70:	2134f304 	addi	r4,r4,-11316
    be74:	e17ffe17 	ldw	r5,-8(fp)
    be78:	000d883a 	mov	r6,zero
    be7c:	01c07fc4 	movi	r7,511
    be80:	000bd600 	call	bd60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    be84:	01000074 	movhi	r4,1
    be88:	2134f904 	addi	r4,r4,-11292
    be8c:	e17fff17 	ldw	r5,-4(fp)
    be90:	01800044 	movi	r6,1
    be94:	01c07fc4 	movi	r7,511
    be98:	000bd600 	call	bd60 <alt_open_fd>
}  
    be9c:	e037883a 	mov	sp,fp
    bea0:	dfc00117 	ldw	ra,4(sp)
    bea4:	df000017 	ldw	fp,0(sp)
    bea8:	dec00204 	addi	sp,sp,8
    beac:	f800283a 	ret

0000beb0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    beb0:	defffa04 	addi	sp,sp,-24
    beb4:	dfc00515 	stw	ra,20(sp)
    beb8:	df000415 	stw	fp,16(sp)
    bebc:	dc000315 	stw	r16,12(sp)
    bec0:	df000304 	addi	fp,sp,12
    bec4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bec8:	e0bffe17 	ldw	r2,-8(fp)
    becc:	10800217 	ldw	r2,8(r2)
    bed0:	10d00034 	orhi	r3,r2,16384
    bed4:	e0bffe17 	ldw	r2,-8(fp)
    bed8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bedc:	e03ffd15 	stw	zero,-12(fp)
    bee0:	00002306 	br	bf70 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bee4:	e13ffd17 	ldw	r4,-12(fp)
    bee8:	04000074 	movhi	r16,1
    beec:	8434f304 	addi	r16,r16,-11316
    bef0:	01400304 	movi	r5,12
    bef4:	00005700 	call	570 <__mulsi3>
    bef8:	1405883a 	add	r2,r2,r16
    befc:	10c00017 	ldw	r3,0(r2)
    bf00:	e0bffe17 	ldw	r2,-8(fp)
    bf04:	10800017 	ldw	r2,0(r2)
    bf08:	1880161e 	bne	r3,r2,bf64 <alt_file_locked+0xb4>
    bf0c:	e13ffd17 	ldw	r4,-12(fp)
    bf10:	04000074 	movhi	r16,1
    bf14:	8434f304 	addi	r16,r16,-11316
    bf18:	01400304 	movi	r5,12
    bf1c:	00005700 	call	570 <__mulsi3>
    bf20:	1405883a 	add	r2,r2,r16
    bf24:	10800204 	addi	r2,r2,8
    bf28:	10800017 	ldw	r2,0(r2)
    bf2c:	1004403a 	cmpge	r2,r2,zero
    bf30:	10000c1e 	bne	r2,zero,bf64 <alt_file_locked+0xb4>
    bf34:	e13ffd17 	ldw	r4,-12(fp)
    bf38:	01400304 	movi	r5,12
    bf3c:	00005700 	call	570 <__mulsi3>
    bf40:	1007883a 	mov	r3,r2
    bf44:	00800074 	movhi	r2,1
    bf48:	10b4f304 	addi	r2,r2,-11316
    bf4c:	1887883a 	add	r3,r3,r2
    bf50:	e0bffe17 	ldw	r2,-8(fp)
    bf54:	18800326 	beq	r3,r2,bf64 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bf58:	00bffcc4 	movi	r2,-13
    bf5c:	e0bfff15 	stw	r2,-4(fp)
    bf60:	00000a06 	br	bf8c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bf64:	e0bffd17 	ldw	r2,-12(fp)
    bf68:	10800044 	addi	r2,r2,1
    bf6c:	e0bffd15 	stw	r2,-12(fp)
    bf70:	00800074 	movhi	r2,1
    bf74:	10b97504 	addi	r2,r2,-6700
    bf78:	10800017 	ldw	r2,0(r2)
    bf7c:	1007883a 	mov	r3,r2
    bf80:	e0bffd17 	ldw	r2,-12(fp)
    bf84:	18bfd72e 	bgeu	r3,r2,bee4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    bf88:	e03fff15 	stw	zero,-4(fp)
    bf8c:	e0bfff17 	ldw	r2,-4(fp)
}
    bf90:	e037883a 	mov	sp,fp
    bf94:	dfc00217 	ldw	ra,8(sp)
    bf98:	df000117 	ldw	fp,4(sp)
    bf9c:	dc000017 	ldw	r16,0(sp)
    bfa0:	dec00304 	addi	sp,sp,12
    bfa4:	f800283a 	ret

0000bfa8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    bfa8:	defff404 	addi	sp,sp,-48
    bfac:	dfc00b15 	stw	ra,44(sp)
    bfb0:	df000a15 	stw	fp,40(sp)
    bfb4:	df000a04 	addi	fp,sp,40
    bfb8:	e13ffb15 	stw	r4,-20(fp)
    bfbc:	e17ffc15 	stw	r5,-16(fp)
    bfc0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    bfc4:	00bfffc4 	movi	r2,-1
    bfc8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    bfcc:	00bffb44 	movi	r2,-19
    bfd0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    bfd4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    bfd8:	e13ffb17 	ldw	r4,-20(fp)
    bfdc:	01400074 	movhi	r5,1
    bfe0:	29797304 	addi	r5,r5,-6708
    bfe4:	000c1b40 	call	c1b4 <alt_find_dev>
    bfe8:	e0bffa15 	stw	r2,-24(fp)
    bfec:	e0bffa17 	ldw	r2,-24(fp)
    bff0:	1004c03a 	cmpne	r2,r2,zero
    bff4:	1000051e 	bne	r2,zero,c00c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    bff8:	e13ffb17 	ldw	r4,-20(fp)
    bffc:	000c2480 	call	c248 <alt_find_file>
    c000:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    c004:	00800044 	movi	r2,1
    c008:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c00c:	e0bffa17 	ldw	r2,-24(fp)
    c010:	1005003a 	cmpeq	r2,r2,zero
    c014:	1000311e 	bne	r2,zero,c0dc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c018:	e13ffa17 	ldw	r4,-24(fp)
    c01c:	000c3680 	call	c368 <alt_get_fd>
    c020:	e0bff815 	stw	r2,-32(fp)
    c024:	e0bff817 	ldw	r2,-32(fp)
    c028:	1004403a 	cmpge	r2,r2,zero
    c02c:	1000031e 	bne	r2,zero,c03c <open+0x94>
    {
      status = index;
    c030:	e0bff817 	ldw	r2,-32(fp)
    c034:	e0bff715 	stw	r2,-36(fp)
    c038:	00002a06 	br	c0e4 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    c03c:	e13ff817 	ldw	r4,-32(fp)
    c040:	01400304 	movi	r5,12
    c044:	00005700 	call	570 <__mulsi3>
    c048:	1007883a 	mov	r3,r2
    c04c:	00800074 	movhi	r2,1
    c050:	10b4f304 	addi	r2,r2,-11316
    c054:	1885883a 	add	r2,r3,r2
    c058:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c05c:	e0fffc17 	ldw	r3,-16(fp)
    c060:	00900034 	movhi	r2,16384
    c064:	10bfffc4 	addi	r2,r2,-1
    c068:	1886703a 	and	r3,r3,r2
    c06c:	e0bff917 	ldw	r2,-28(fp)
    c070:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c074:	e0bff617 	ldw	r2,-40(fp)
    c078:	1004c03a 	cmpne	r2,r2,zero
    c07c:	1000061e 	bne	r2,zero,c098 <open+0xf0>
    c080:	e13ff917 	ldw	r4,-28(fp)
    c084:	000beb00 	call	beb0 <alt_file_locked>
    c088:	e0bff715 	stw	r2,-36(fp)
    c08c:	e0bff717 	ldw	r2,-36(fp)
    c090:	1004803a 	cmplt	r2,r2,zero
    c094:	1000131e 	bne	r2,zero,c0e4 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c098:	e0bffa17 	ldw	r2,-24(fp)
    c09c:	10800317 	ldw	r2,12(r2)
    c0a0:	1005003a 	cmpeq	r2,r2,zero
    c0a4:	1000091e 	bne	r2,zero,c0cc <open+0x124>
    c0a8:	e0bffa17 	ldw	r2,-24(fp)
    c0ac:	10800317 	ldw	r2,12(r2)
    c0b0:	e13ff917 	ldw	r4,-28(fp)
    c0b4:	e17ffb17 	ldw	r5,-20(fp)
    c0b8:	e1bffc17 	ldw	r6,-16(fp)
    c0bc:	e1fffd17 	ldw	r7,-12(fp)
    c0c0:	103ee83a 	callr	r2
    c0c4:	e0bfff15 	stw	r2,-4(fp)
    c0c8:	00000106 	br	c0d0 <open+0x128>
    c0cc:	e03fff15 	stw	zero,-4(fp)
    c0d0:	e0bfff17 	ldw	r2,-4(fp)
    c0d4:	e0bff715 	stw	r2,-36(fp)
    c0d8:	00000206 	br	c0e4 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c0dc:	00bffb44 	movi	r2,-19
    c0e0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c0e4:	e0bff717 	ldw	r2,-36(fp)
    c0e8:	1004403a 	cmpge	r2,r2,zero
    c0ec:	1000091e 	bne	r2,zero,c114 <open+0x16c>
  {
    alt_release_fd (index);  
    c0f0:	e13ff817 	ldw	r4,-32(fp)
    c0f4:	000a7b00 	call	a7b0 <alt_release_fd>
    ALT_ERRNO = -status;
    c0f8:	000c1340 	call	c134 <alt_get_errno>
    c0fc:	e0fff717 	ldw	r3,-36(fp)
    c100:	00c7c83a 	sub	r3,zero,r3
    c104:	10c00015 	stw	r3,0(r2)
    return -1;
    c108:	00bfffc4 	movi	r2,-1
    c10c:	e0bffe15 	stw	r2,-8(fp)
    c110:	00000206 	br	c11c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    c114:	e0bff817 	ldw	r2,-32(fp)
    c118:	e0bffe15 	stw	r2,-8(fp)
    c11c:	e0bffe17 	ldw	r2,-8(fp)
}
    c120:	e037883a 	mov	sp,fp
    c124:	dfc00117 	ldw	ra,4(sp)
    c128:	df000017 	ldw	fp,0(sp)
    c12c:	dec00204 	addi	sp,sp,8
    c130:	f800283a 	ret

0000c134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c134:	defffd04 	addi	sp,sp,-12
    c138:	dfc00215 	stw	ra,8(sp)
    c13c:	df000115 	stw	fp,4(sp)
    c140:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c144:	00800074 	movhi	r2,1
    c148:	10b97604 	addi	r2,r2,-6696
    c14c:	10800017 	ldw	r2,0(r2)
    c150:	1005003a 	cmpeq	r2,r2,zero
    c154:	1000061e 	bne	r2,zero,c170 <alt_get_errno+0x3c>
    c158:	00800074 	movhi	r2,1
    c15c:	10b97604 	addi	r2,r2,-6696
    c160:	10800017 	ldw	r2,0(r2)
    c164:	103ee83a 	callr	r2
    c168:	e0bfff15 	stw	r2,-4(fp)
    c16c:	00000306 	br	c17c <alt_get_errno+0x48>
    c170:	00800074 	movhi	r2,1
    c174:	10801704 	addi	r2,r2,92
    c178:	e0bfff15 	stw	r2,-4(fp)
    c17c:	e0bfff17 	ldw	r2,-4(fp)
}
    c180:	e037883a 	mov	sp,fp
    c184:	dfc00117 	ldw	ra,4(sp)
    c188:	df000017 	ldw	fp,0(sp)
    c18c:	dec00204 	addi	sp,sp,8
    c190:	f800283a 	ret

0000c194 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    c194:	deffff04 	addi	sp,sp,-4
    c198:	df000015 	stw	fp,0(sp)
    c19c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c1a0:	000170fa 	wrctl	ienable,zero
}
    c1a4:	e037883a 	mov	sp,fp
    c1a8:	df000017 	ldw	fp,0(sp)
    c1ac:	dec00104 	addi	sp,sp,4
    c1b0:	f800283a 	ret

0000c1b4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c1b4:	defff904 	addi	sp,sp,-28
    c1b8:	dfc00615 	stw	ra,24(sp)
    c1bc:	df000515 	stw	fp,20(sp)
    c1c0:	df000504 	addi	fp,sp,20
    c1c4:	e13ffd15 	stw	r4,-12(fp)
    c1c8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c1cc:	e0bffe17 	ldw	r2,-8(fp)
    c1d0:	10800017 	ldw	r2,0(r2)
    c1d4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c1d8:	e13ffd17 	ldw	r4,-12(fp)
    c1dc:	00074380 	call	7438 <strlen>
    c1e0:	10800044 	addi	r2,r2,1
    c1e4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c1e8:	00000d06 	br	c220 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c1ec:	e0bffc17 	ldw	r2,-16(fp)
    c1f0:	11000217 	ldw	r4,8(r2)
    c1f4:	e1bffb17 	ldw	r6,-20(fp)
    c1f8:	e17ffd17 	ldw	r5,-12(fp)
    c1fc:	000c4840 	call	c484 <memcmp>
    c200:	1004c03a 	cmpne	r2,r2,zero
    c204:	1000031e 	bne	r2,zero,c214 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c208:	e0bffc17 	ldw	r2,-16(fp)
    c20c:	e0bfff15 	stw	r2,-4(fp)
    c210:	00000706 	br	c230 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c214:	e0bffc17 	ldw	r2,-16(fp)
    c218:	10800017 	ldw	r2,0(r2)
    c21c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c220:	e0fffe17 	ldw	r3,-8(fp)
    c224:	e0bffc17 	ldw	r2,-16(fp)
    c228:	10fff01e 	bne	r2,r3,c1ec <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c22c:	e03fff15 	stw	zero,-4(fp)
    c230:	e0bfff17 	ldw	r2,-4(fp)
}
    c234:	e037883a 	mov	sp,fp
    c238:	dfc00117 	ldw	ra,4(sp)
    c23c:	df000017 	ldw	fp,0(sp)
    c240:	dec00204 	addi	sp,sp,8
    c244:	f800283a 	ret

0000c248 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c248:	defffa04 	addi	sp,sp,-24
    c24c:	dfc00515 	stw	ra,20(sp)
    c250:	df000415 	stw	fp,16(sp)
    c254:	df000404 	addi	fp,sp,16
    c258:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c25c:	00800074 	movhi	r2,1
    c260:	10b97104 	addi	r2,r2,-6716
    c264:	10800017 	ldw	r2,0(r2)
    c268:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c26c:	00003306 	br	c33c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    c270:	e0bffd17 	ldw	r2,-12(fp)
    c274:	11000217 	ldw	r4,8(r2)
    c278:	00074380 	call	7438 <strlen>
    c27c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    c280:	e0bffd17 	ldw	r2,-12(fp)
    c284:	10c00217 	ldw	r3,8(r2)
    c288:	e0bffc17 	ldw	r2,-16(fp)
    c28c:	1885883a 	add	r2,r3,r2
    c290:	10bfffc4 	addi	r2,r2,-1
    c294:	10800003 	ldbu	r2,0(r2)
    c298:	10803fcc 	andi	r2,r2,255
    c29c:	1080201c 	xori	r2,r2,128
    c2a0:	10bfe004 	addi	r2,r2,-128
    c2a4:	10800bd8 	cmpnei	r2,r2,47
    c2a8:	1000031e 	bne	r2,zero,c2b8 <alt_find_file+0x70>
    {
      len -= 1;
    c2ac:	e0bffc17 	ldw	r2,-16(fp)
    c2b0:	10bfffc4 	addi	r2,r2,-1
    c2b4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c2b8:	e0bffc17 	ldw	r2,-16(fp)
    c2bc:	1007883a 	mov	r3,r2
    c2c0:	e0bffe17 	ldw	r2,-8(fp)
    c2c4:	1885883a 	add	r2,r3,r2
    c2c8:	10800003 	ldbu	r2,0(r2)
    c2cc:	10803fcc 	andi	r2,r2,255
    c2d0:	1080201c 	xori	r2,r2,128
    c2d4:	10bfe004 	addi	r2,r2,-128
    c2d8:	10800be0 	cmpeqi	r2,r2,47
    c2dc:	10000a1e 	bne	r2,zero,c308 <alt_find_file+0xc0>
    c2e0:	e0bffc17 	ldw	r2,-16(fp)
    c2e4:	1007883a 	mov	r3,r2
    c2e8:	e0bffe17 	ldw	r2,-8(fp)
    c2ec:	1885883a 	add	r2,r3,r2
    c2f0:	10800003 	ldbu	r2,0(r2)
    c2f4:	10803fcc 	andi	r2,r2,255
    c2f8:	1080201c 	xori	r2,r2,128
    c2fc:	10bfe004 	addi	r2,r2,-128
    c300:	1004c03a 	cmpne	r2,r2,zero
    c304:	10000a1e 	bne	r2,zero,c330 <alt_find_file+0xe8>
    c308:	e0bffd17 	ldw	r2,-12(fp)
    c30c:	11000217 	ldw	r4,8(r2)
    c310:	e1bffc17 	ldw	r6,-16(fp)
    c314:	e17ffe17 	ldw	r5,-8(fp)
    c318:	000c4840 	call	c484 <memcmp>
    c31c:	1004c03a 	cmpne	r2,r2,zero
    c320:	1000031e 	bne	r2,zero,c330 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c324:	e0bffd17 	ldw	r2,-12(fp)
    c328:	e0bfff15 	stw	r2,-4(fp)
    c32c:	00000806 	br	c350 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    c330:	e0bffd17 	ldw	r2,-12(fp)
    c334:	10800017 	ldw	r2,0(r2)
    c338:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c33c:	00c00074 	movhi	r3,1
    c340:	18f97104 	addi	r3,r3,-6716
    c344:	e0bffd17 	ldw	r2,-12(fp)
    c348:	10ffc91e 	bne	r2,r3,c270 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c34c:	e03fff15 	stw	zero,-4(fp)
    c350:	e0bfff17 	ldw	r2,-4(fp)
}
    c354:	e037883a 	mov	sp,fp
    c358:	dfc00117 	ldw	ra,4(sp)
    c35c:	df000017 	ldw	fp,0(sp)
    c360:	dec00204 	addi	sp,sp,8
    c364:	f800283a 	ret

0000c368 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c368:	defffa04 	addi	sp,sp,-24
    c36c:	dfc00515 	stw	ra,20(sp)
    c370:	df000415 	stw	fp,16(sp)
    c374:	dc000315 	stw	r16,12(sp)
    c378:	df000304 	addi	fp,sp,12
    c37c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c380:	00bffa04 	movi	r2,-24
    c384:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c388:	e03ffe15 	stw	zero,-8(fp)
    c38c:	00002006 	br	c410 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    c390:	e13ffe17 	ldw	r4,-8(fp)
    c394:	04000074 	movhi	r16,1
    c398:	8434f304 	addi	r16,r16,-11316
    c39c:	01400304 	movi	r5,12
    c3a0:	00005700 	call	570 <__mulsi3>
    c3a4:	1405883a 	add	r2,r2,r16
    c3a8:	10800017 	ldw	r2,0(r2)
    c3ac:	1004c03a 	cmpne	r2,r2,zero
    c3b0:	1000141e 	bne	r2,zero,c404 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    c3b4:	e13ffe17 	ldw	r4,-8(fp)
    c3b8:	04000074 	movhi	r16,1
    c3bc:	8434f304 	addi	r16,r16,-11316
    c3c0:	01400304 	movi	r5,12
    c3c4:	00005700 	call	570 <__mulsi3>
    c3c8:	1407883a 	add	r3,r2,r16
    c3cc:	e0bfff17 	ldw	r2,-4(fp)
    c3d0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    c3d4:	00800074 	movhi	r2,1
    c3d8:	10b97504 	addi	r2,r2,-6700
    c3dc:	10c00017 	ldw	r3,0(r2)
    c3e0:	e0bffe17 	ldw	r2,-8(fp)
    c3e4:	1880040e 	bge	r3,r2,c3f8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    c3e8:	00c00074 	movhi	r3,1
    c3ec:	18f97504 	addi	r3,r3,-6700
    c3f0:	e0bffe17 	ldw	r2,-8(fp)
    c3f4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    c3f8:	e0bffe17 	ldw	r2,-8(fp)
    c3fc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c400:	00000606 	br	c41c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c404:	e0bffe17 	ldw	r2,-8(fp)
    c408:	10800044 	addi	r2,r2,1
    c40c:	e0bffe15 	stw	r2,-8(fp)
    c410:	e0bffe17 	ldw	r2,-8(fp)
    c414:	10800810 	cmplti	r2,r2,32
    c418:	103fdd1e 	bne	r2,zero,c390 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c41c:	e0bffd17 	ldw	r2,-12(fp)
}
    c420:	e037883a 	mov	sp,fp
    c424:	dfc00217 	ldw	ra,8(sp)
    c428:	df000117 	ldw	fp,4(sp)
    c42c:	dc000017 	ldw	r16,0(sp)
    c430:	dec00304 	addi	sp,sp,12
    c434:	f800283a 	ret

0000c438 <atexit>:
    c438:	200b883a 	mov	r5,r4
    c43c:	000d883a 	mov	r6,zero
    c440:	0009883a 	mov	r4,zero
    c444:	000f883a 	mov	r7,zero
    c448:	000c4f81 	jmpi	c4f8 <__register_exitproc>

0000c44c <exit>:
    c44c:	defffe04 	addi	sp,sp,-8
    c450:	000b883a 	mov	r5,zero
    c454:	dc000015 	stw	r16,0(sp)
    c458:	dfc00115 	stw	ra,4(sp)
    c45c:	2021883a 	mov	r16,r4
    c460:	000c6300 	call	c630 <__call_exitprocs>
    c464:	00800074 	movhi	r2,1
    c468:	10b96e04 	addi	r2,r2,-6728
    c46c:	11000017 	ldw	r4,0(r2)
    c470:	20800f17 	ldw	r2,60(r4)
    c474:	10000126 	beq	r2,zero,c47c <exit+0x30>
    c478:	103ee83a 	callr	r2
    c47c:	8009883a 	mov	r4,r16
    c480:	000c8200 	call	c820 <_exit>

0000c484 <memcmp>:
    c484:	00c000c4 	movi	r3,3
    c488:	1980032e 	bgeu	r3,r6,c498 <memcmp+0x14>
    c48c:	2144b03a 	or	r2,r4,r5
    c490:	10c4703a 	and	r2,r2,r3
    c494:	10000f26 	beq	r2,zero,c4d4 <memcmp+0x50>
    c498:	31ffffc4 	addi	r7,r6,-1
    c49c:	3000061e 	bne	r6,zero,c4b8 <memcmp+0x34>
    c4a0:	00000a06 	br	c4cc <memcmp+0x48>
    c4a4:	39ffffc4 	addi	r7,r7,-1
    c4a8:	00bfffc4 	movi	r2,-1
    c4ac:	21000044 	addi	r4,r4,1
    c4b0:	29400044 	addi	r5,r5,1
    c4b4:	38800526 	beq	r7,r2,c4cc <memcmp+0x48>
    c4b8:	20c00003 	ldbu	r3,0(r4)
    c4bc:	28800003 	ldbu	r2,0(r5)
    c4c0:	18bff826 	beq	r3,r2,c4a4 <memcmp+0x20>
    c4c4:	1885c83a 	sub	r2,r3,r2
    c4c8:	f800283a 	ret
    c4cc:	0005883a 	mov	r2,zero
    c4d0:	f800283a 	ret
    c4d4:	180f883a 	mov	r7,r3
    c4d8:	20c00017 	ldw	r3,0(r4)
    c4dc:	28800017 	ldw	r2,0(r5)
    c4e0:	18bfed1e 	bne	r3,r2,c498 <memcmp+0x14>
    c4e4:	31bfff04 	addi	r6,r6,-4
    c4e8:	21000104 	addi	r4,r4,4
    c4ec:	29400104 	addi	r5,r5,4
    c4f0:	39bff936 	bltu	r7,r6,c4d8 <memcmp+0x54>
    c4f4:	003fe806 	br	c498 <memcmp+0x14>

0000c4f8 <__register_exitproc>:
    c4f8:	defffa04 	addi	sp,sp,-24
    c4fc:	00800074 	movhi	r2,1
    c500:	10b96e04 	addi	r2,r2,-6728
    c504:	dc000015 	stw	r16,0(sp)
    c508:	14000017 	ldw	r16,0(r2)
    c50c:	dd000415 	stw	r20,16(sp)
    c510:	2829883a 	mov	r20,r5
    c514:	81405217 	ldw	r5,328(r16)
    c518:	dcc00315 	stw	r19,12(sp)
    c51c:	dc800215 	stw	r18,8(sp)
    c520:	dc400115 	stw	r17,4(sp)
    c524:	dfc00515 	stw	ra,20(sp)
    c528:	2023883a 	mov	r17,r4
    c52c:	3027883a 	mov	r19,r6
    c530:	3825883a 	mov	r18,r7
    c534:	28002526 	beq	r5,zero,c5cc <__register_exitproc+0xd4>
    c538:	29000117 	ldw	r4,4(r5)
    c53c:	008007c4 	movi	r2,31
    c540:	11002716 	blt	r2,r4,c5e0 <__register_exitproc+0xe8>
    c544:	8800101e 	bne	r17,zero,c588 <__register_exitproc+0x90>
    c548:	2105883a 	add	r2,r4,r4
    c54c:	1085883a 	add	r2,r2,r2
    c550:	20c00044 	addi	r3,r4,1
    c554:	1145883a 	add	r2,r2,r5
    c558:	0009883a 	mov	r4,zero
    c55c:	15000215 	stw	r20,8(r2)
    c560:	28c00115 	stw	r3,4(r5)
    c564:	2005883a 	mov	r2,r4
    c568:	dfc00517 	ldw	ra,20(sp)
    c56c:	dd000417 	ldw	r20,16(sp)
    c570:	dcc00317 	ldw	r19,12(sp)
    c574:	dc800217 	ldw	r18,8(sp)
    c578:	dc400117 	ldw	r17,4(sp)
    c57c:	dc000017 	ldw	r16,0(sp)
    c580:	dec00604 	addi	sp,sp,24
    c584:	f800283a 	ret
    c588:	29802204 	addi	r6,r5,136
    c58c:	00800044 	movi	r2,1
    c590:	110e983a 	sll	r7,r2,r4
    c594:	30c04017 	ldw	r3,256(r6)
    c598:	2105883a 	add	r2,r4,r4
    c59c:	1085883a 	add	r2,r2,r2
    c5a0:	1185883a 	add	r2,r2,r6
    c5a4:	19c6b03a 	or	r3,r3,r7
    c5a8:	14802015 	stw	r18,128(r2)
    c5ac:	14c00015 	stw	r19,0(r2)
    c5b0:	00800084 	movi	r2,2
    c5b4:	30c04015 	stw	r3,256(r6)
    c5b8:	88bfe31e 	bne	r17,r2,c548 <__register_exitproc+0x50>
    c5bc:	30804117 	ldw	r2,260(r6)
    c5c0:	11c4b03a 	or	r2,r2,r7
    c5c4:	30804115 	stw	r2,260(r6)
    c5c8:	003fdf06 	br	c548 <__register_exitproc+0x50>
    c5cc:	00800074 	movhi	r2,1
    c5d0:	10819d04 	addi	r2,r2,1652
    c5d4:	100b883a 	mov	r5,r2
    c5d8:	80805215 	stw	r2,328(r16)
    c5dc:	003fd606 	br	c538 <__register_exitproc+0x40>
    c5e0:	00800034 	movhi	r2,0
    c5e4:	10816f04 	addi	r2,r2,1468
    c5e8:	1000021e 	bne	r2,zero,c5f4 <__register_exitproc+0xfc>
    c5ec:	013fffc4 	movi	r4,-1
    c5f0:	003fdc06 	br	c564 <__register_exitproc+0x6c>
    c5f4:	01006404 	movi	r4,400
    c5f8:	103ee83a 	callr	r2
    c5fc:	1007883a 	mov	r3,r2
    c600:	103ffa26 	beq	r2,zero,c5ec <__register_exitproc+0xf4>
    c604:	80805217 	ldw	r2,328(r16)
    c608:	180b883a 	mov	r5,r3
    c60c:	18000115 	stw	zero,4(r3)
    c610:	18800015 	stw	r2,0(r3)
    c614:	80c05215 	stw	r3,328(r16)
    c618:	18006215 	stw	zero,392(r3)
    c61c:	18006315 	stw	zero,396(r3)
    c620:	0009883a 	mov	r4,zero
    c624:	883fc826 	beq	r17,zero,c548 <__register_exitproc+0x50>
    c628:	003fd706 	br	c588 <__register_exitproc+0x90>

0000c62c <register_fini>:
    c62c:	f800283a 	ret

0000c630 <__call_exitprocs>:
    c630:	00800074 	movhi	r2,1
    c634:	10b96e04 	addi	r2,r2,-6728
    c638:	10800017 	ldw	r2,0(r2)
    c63c:	defff304 	addi	sp,sp,-52
    c640:	df000b15 	stw	fp,44(sp)
    c644:	d8800115 	stw	r2,4(sp)
    c648:	00800034 	movhi	r2,0
    c64c:	10816a04 	addi	r2,r2,1448
    c650:	1005003a 	cmpeq	r2,r2,zero
    c654:	d8800215 	stw	r2,8(sp)
    c658:	d8800117 	ldw	r2,4(sp)
    c65c:	dd400815 	stw	r21,32(sp)
    c660:	dd000715 	stw	r20,28(sp)
    c664:	10805204 	addi	r2,r2,328
    c668:	dfc00c15 	stw	ra,48(sp)
    c66c:	ddc00a15 	stw	r23,40(sp)
    c670:	dd800915 	stw	r22,36(sp)
    c674:	dcc00615 	stw	r19,24(sp)
    c678:	dc800515 	stw	r18,20(sp)
    c67c:	dc400415 	stw	r17,16(sp)
    c680:	dc000315 	stw	r16,12(sp)
    c684:	282b883a 	mov	r21,r5
    c688:	2039883a 	mov	fp,r4
    c68c:	d8800015 	stw	r2,0(sp)
    c690:	2829003a 	cmpeq	r20,r5,zero
    c694:	d8800117 	ldw	r2,4(sp)
    c698:	14405217 	ldw	r17,328(r2)
    c69c:	88001026 	beq	r17,zero,c6e0 <__call_exitprocs+0xb0>
    c6a0:	ddc00017 	ldw	r23,0(sp)
    c6a4:	88800117 	ldw	r2,4(r17)
    c6a8:	8c802204 	addi	r18,r17,136
    c6ac:	143fffc4 	addi	r16,r2,-1
    c6b0:	80000916 	blt	r16,zero,c6d8 <__call_exitprocs+0xa8>
    c6b4:	05bfffc4 	movi	r22,-1
    c6b8:	a000151e 	bne	r20,zero,c710 <__call_exitprocs+0xe0>
    c6bc:	8409883a 	add	r4,r16,r16
    c6c0:	2105883a 	add	r2,r4,r4
    c6c4:	1485883a 	add	r2,r2,r18
    c6c8:	10c02017 	ldw	r3,128(r2)
    c6cc:	a8c01126 	beq	r21,r3,c714 <__call_exitprocs+0xe4>
    c6d0:	843fffc4 	addi	r16,r16,-1
    c6d4:	85bff81e 	bne	r16,r22,c6b8 <__call_exitprocs+0x88>
    c6d8:	d8800217 	ldw	r2,8(sp)
    c6dc:	10003126 	beq	r2,zero,c7a4 <__call_exitprocs+0x174>
    c6e0:	dfc00c17 	ldw	ra,48(sp)
    c6e4:	df000b17 	ldw	fp,44(sp)
    c6e8:	ddc00a17 	ldw	r23,40(sp)
    c6ec:	dd800917 	ldw	r22,36(sp)
    c6f0:	dd400817 	ldw	r21,32(sp)
    c6f4:	dd000717 	ldw	r20,28(sp)
    c6f8:	dcc00617 	ldw	r19,24(sp)
    c6fc:	dc800517 	ldw	r18,20(sp)
    c700:	dc400417 	ldw	r17,16(sp)
    c704:	dc000317 	ldw	r16,12(sp)
    c708:	dec00d04 	addi	sp,sp,52
    c70c:	f800283a 	ret
    c710:	8409883a 	add	r4,r16,r16
    c714:	88c00117 	ldw	r3,4(r17)
    c718:	2105883a 	add	r2,r4,r4
    c71c:	1445883a 	add	r2,r2,r17
    c720:	18ffffc4 	addi	r3,r3,-1
    c724:	11800217 	ldw	r6,8(r2)
    c728:	1c001526 	beq	r3,r16,c780 <__call_exitprocs+0x150>
    c72c:	10000215 	stw	zero,8(r2)
    c730:	303fe726 	beq	r6,zero,c6d0 <__call_exitprocs+0xa0>
    c734:	00c00044 	movi	r3,1
    c738:	1c06983a 	sll	r3,r3,r16
    c73c:	90804017 	ldw	r2,256(r18)
    c740:	8cc00117 	ldw	r19,4(r17)
    c744:	1884703a 	and	r2,r3,r2
    c748:	10001426 	beq	r2,zero,c79c <__call_exitprocs+0x16c>
    c74c:	90804117 	ldw	r2,260(r18)
    c750:	1884703a 	and	r2,r3,r2
    c754:	10000c1e 	bne	r2,zero,c788 <__call_exitprocs+0x158>
    c758:	2105883a 	add	r2,r4,r4
    c75c:	1485883a 	add	r2,r2,r18
    c760:	11400017 	ldw	r5,0(r2)
    c764:	e009883a 	mov	r4,fp
    c768:	303ee83a 	callr	r6
    c76c:	88800117 	ldw	r2,4(r17)
    c770:	98bfc81e 	bne	r19,r2,c694 <__call_exitprocs+0x64>
    c774:	b8800017 	ldw	r2,0(r23)
    c778:	147fd526 	beq	r2,r17,c6d0 <__call_exitprocs+0xa0>
    c77c:	003fc506 	br	c694 <__call_exitprocs+0x64>
    c780:	8c000115 	stw	r16,4(r17)
    c784:	003fea06 	br	c730 <__call_exitprocs+0x100>
    c788:	2105883a 	add	r2,r4,r4
    c78c:	1485883a 	add	r2,r2,r18
    c790:	11000017 	ldw	r4,0(r2)
    c794:	303ee83a 	callr	r6
    c798:	003ff406 	br	c76c <__call_exitprocs+0x13c>
    c79c:	303ee83a 	callr	r6
    c7a0:	003ff206 	br	c76c <__call_exitprocs+0x13c>
    c7a4:	88800117 	ldw	r2,4(r17)
    c7a8:	1000081e 	bne	r2,zero,c7cc <__call_exitprocs+0x19c>
    c7ac:	89000017 	ldw	r4,0(r17)
    c7b0:	20000726 	beq	r4,zero,c7d0 <__call_exitprocs+0x1a0>
    c7b4:	b9000015 	stw	r4,0(r23)
    c7b8:	8809883a 	mov	r4,r17
    c7bc:	00005a80 	call	5a8 <free>
    c7c0:	bc400017 	ldw	r17,0(r23)
    c7c4:	883fb71e 	bne	r17,zero,c6a4 <__call_exitprocs+0x74>
    c7c8:	003fc506 	br	c6e0 <__call_exitprocs+0xb0>
    c7cc:	89000017 	ldw	r4,0(r17)
    c7d0:	882f883a 	mov	r23,r17
    c7d4:	2023883a 	mov	r17,r4
    c7d8:	883fb21e 	bne	r17,zero,c6a4 <__call_exitprocs+0x74>
    c7dc:	003fc006 	br	c6e0 <__call_exitprocs+0xb0>

0000c7e0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    c7e0:	defffd04 	addi	sp,sp,-12
    c7e4:	df000215 	stw	fp,8(sp)
    c7e8:	df000204 	addi	fp,sp,8
    c7ec:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    c7f0:	e0bfff17 	ldw	r2,-4(fp)
    c7f4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c7f8:	e0bffe17 	ldw	r2,-8(fp)
    c7fc:	1005003a 	cmpeq	r2,r2,zero
    c800:	1000021e 	bne	r2,zero,c80c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    c804:	002af070 	cmpltui	zero,zero,43969
    c808:	00000106 	br	c810 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    c80c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    c810:	e037883a 	mov	sp,fp
    c814:	df000017 	ldw	fp,0(sp)
    c818:	dec00104 	addi	sp,sp,4
    c81c:	f800283a 	ret

0000c820 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c820:	defffd04 	addi	sp,sp,-12
    c824:	dfc00215 	stw	ra,8(sp)
    c828:	df000115 	stw	fp,4(sp)
    c82c:	df000104 	addi	fp,sp,4
    c830:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    c834:	e13fff17 	ldw	r4,-4(fp)
    c838:	000c7e00 	call	c7e0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c83c:	003fff06 	br	c83c <_exit+0x1c>
    c840:	0000c62c 	andhi	zero,zero,792
