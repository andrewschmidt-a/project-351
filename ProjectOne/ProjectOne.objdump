
ProjectOne.elf:     file format elf32-littlenios2
ProjectOne.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d49c memsz 0x0000d49c flags r-x
    LOAD off    0x0000e4bc vaddr 0x0000d4bc paddr 0x0000ef18 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010974 vaddr 0x00010974 paddr 0x00010974 align 2**12
         filesz 0x00000000 memsz 0x00000430 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a8  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cf68  000001c8  000001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000038c  0000d130  0000d130  0000e130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0000d4bc  0000ef18  0000e4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000430  00010974  00010974  00010974  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000ff18  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d78  00000000  00000000  0000ff40  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000014e2  00000000  00000000  00010cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000257fa  00000000  00000000  0001219a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000081f3  00000000  00000000  00037994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000147ae  00000000  00000000  0003fb87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a50  00000000  00000000  00054338  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000234a  00000000  00000000  00055d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c2bf  00000000  00000000  000580d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00064394  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000643a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00067eea  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00067eed  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00067ef0  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00067ef1  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00067ef5  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00067ef9  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00067efd  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00067f06  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00067f0f  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00067f18  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000028  00000000  00000000  00067f23  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006a1c7  00000000  00000000  00067f4b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c8 l    d  .text	00000000 .text
0000d130 l    d  .rodata	00000000 .rodata
0000d4bc l    d  .rwdata	00000000 .rwdata
00010974 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000200 l       .text	00000000 alt_after_alt_main
000000ac l       .exceptions	00000000 GOTO
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alarm_handler.c
00000000 l    df *ABS*	00000000 project1.c
00000000 l    df *ABS*	00000000 tcb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000068c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001188 l     F .text	00000058 __sprint_r
0000d1f2 l     O .rodata	00000010 blanks.3452
0000d1e2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003204 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004c2c l     F .text	00000058 std
00004d38 l     F .text	00000008 __fp_lock
00004d40 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000d8c4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000eeec l     O .rwdata	00000004 charset
0000d228 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000d370 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000893c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a374 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000a3d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000a4d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a5fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a6dc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a83c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ad04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000ef08 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b160 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000de78 l     O .rwdata	00001060 JTAG_UART
0000b250 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b490 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000b6b8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000bd34 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bf04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c314 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c464 l     F .text	000000f8 alt_file_locked
0000c6e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000cf18 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000d0cc l     F .text	00000040 alt_sim_halt
000062dc g     F .text	00000094 _mprec_log10
000063c8 g     F .text	00000088 __any_on
00007b10 g     F .text	00000070 _isatty_r
0000d348 g     O .rodata	00000028 __mprec_tinytens
0000a89c g     F .text	0000006c alt_main
00000ff0 g     F .text	000000a0 _puts_r
00010b14 g     O .bss	00000100 alt_irq
00007b80 g     F .text	00000078 _lseek_r
0000ef18 g       *ABS*	00000000 __flash_rwdata_start
0000945c g     F .text	00000088 __eqdf2
00010da4 g       *ABS*	00000000 __alt_heap_start
00000f78 g     F .text	00000044 printf
000075c8 g     F .text	00000068 __sseek
00004c94 g     F .text	000000a4 __sinit
0000cc98 g     F .text	00000130 __swbuf_r
000059a0 g     F .text	00000084 _setlocale_r
00004d94 g     F .text	0000009c __sfmoreglue
0000a928 g     F .text	00000020 __malloc_unlock
0000023c g     F .text	00000060 initialize_alarm
00005d58 g     F .text	000000e0 memmove
00004d84 g     F .text	00000010 _cleanup
00006450 g     F .text	000000bc _Balloc
0000956c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007a9c g     F .text	00000074 _fstat_r
0001098c g     O .bss	00000004 errno
000109a0 g     O .bss	00000004 alt_argv
00016ed8 g       *ABS*	00000000 _gp
0000dcf8 g     O .rwdata	00000180 alt_fd_list
0000c768 g     F .text	00000094 alt_find_dev
00005cb8 g     F .text	000000a0 memcpy
00004d78 g     F .text	0000000c _cleanup_r
00009704 g     F .text	000000f8 __floatsidf
00000324 g     F .text	00000054 check_interrupt
0000c3ec g     F .text	00000078 alt_io_redirect
0000967c g     F .text	00000088 __ltdf2
0000d130 g       *ABS*	00000000 __DTOR_END__
00001090 g     F .text	00000014 puts
0000c748 g     F .text	00000020 altera_nios2_irq_init
0000622c g     F .text	000000b0 __ratio
0000b8d0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000824 g     F .text	00000014 malloc
00000fbc g     F .text	00000034 _printf_r
000007c8 g     F .text	00000008 __udivsi3
0000a538 g     F .text	000000c4 isatty
0000d258 g     O .rodata	000000c8 __mprec_tens
0000597c g     F .text	00000008 __locale_charset
00010980 g     O .bss	00000004 __malloc_top_pad
0000eee8 g     O .rwdata	00000004 __mb_cur_max
00005984 g     F .text	0000000c _localeconv_r
00006bb4 g     F .text	0000003c __i2b
00005360 g     F .text	0000049c __sfvwrite_r
000010a4 g     F .text	00000070 _sbrk_r
00007bf8 g     F .text	00000078 _read_r
0000dcc4 g     O .rwdata	0000000c __lc_ctype
0000ef00 g     O .rwdata	00000004 alt_max_fd
00009f20 g     F .text	00000138 __unpack_d
00007978 g     F .text	00000110 _fclose_r
00004bf8 g     F .text	00000034 fflush
000109f4 g     O .bss	00000120 threads
00010984 g     O .bss	00000004 __malloc_max_sbrked_mem
000003cc g     F .text	00000028 destroy_thread
00008dcc g     F .text	00000074 __adddf3
0000610c g     F .text	00000120 __b2d
00010978 g     O .bss	00000004 current_thread
000082dc g     F .text	00000660 __umoddi3
0000a748 g     F .text	000000f4 lseek
0000eee4 g     O .rwdata	00000004 _global_impure_ptr
00006f5c g     F .text	000005f4 _realloc_r
00010da4 g       *ABS*	00000000 __bss_end
0000c21c g     F .text	000000f8 alt_iic_isr_register
0000af30 g     F .text	0000010c alt_tick
00007c70 g     F .text	0000066c __udivdi3
0000d320 g     O .rodata	00000028 __mprec_bigtens
00006e3c g     F .text	00000120 __s2b
000098d4 g     F .text	00000194 __floatunsidf
0000602c g     F .text	00000060 __mcmp
00004d60 g     F .text	00000018 __fp_lock_all
0000c1d4 g     F .text	00000048 alt_ic_irq_enabled
000109dc g     O .bss	00000018 alarm
0000ae98 g     F .text	00000098 alt_alarm_stop
000109b0 g     O .bss	00000004 alt_irq_active
00000100 g     F .exceptions	000000c8 alt_irq_handler
0000dcd0 g     O .rwdata	00000028 alt_dev_null
0000be34 g     F .text	0000001c alt_dcache_flush_all
00005ef8 g     F .text	00000070 __hi0bits
000097fc g     F .text	000000d8 __fixdfsi
00000204 g     F .text	00000038 my_interrupt_handler
0000ef18 g       *ABS*	00000000 __ram_rwdata_end
0000eef8 g     O .rwdata	00000008 alt_dev_list
0000b03c g     F .text	00000124 write
0000cbb0 g     F .text	000000e8 _putc_r
0000d4bc g       *ABS*	00000000 __ram_rodata_end
0000a400 g     F .text	000000d8 fstat
00000378 g     F .text	00000054 my_thread
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00006d1c g     F .text	00000120 __pow5mult
00010990 g     O .bss	00000004 __nlocale_changed
000007d0 g     F .text	00000008 __umodsi3
00010da4 g       *ABS*	00000000 end
0000b3d0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000d12c g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000bda4 g     F .text	00000090 alt_avalon_timer_sc_init
00009b8c g     F .text	00000080 __clzsi2
0000baf4 g     F .text	00000240 altera_avalon_jtag_uart_write
00004c84 g     F .text	00000004 __sfp_lock_acquire
00005bd4 g     F .text	000000e4 memchr
000011e0 g     F .text	00001ec4 ___vfprintf_internal_r
0000504c g     F .text	00000314 _free_r
0000a948 g     F .text	00000258 alt_printf
0000cf1c g     F .text	000001b0 __call_exitprocs
00010994 g     O .bss	00000004 __mlocale_changed
0000eedc g     O .rwdata	00000004 __malloc_sbrk_base
000001c8 g     F .text	0000003c _start
000109a8 g     O .bss	00000004 _alt_tick_rate
00006814 g     F .text	0000014c __lshift
000109ac g     O .bss	00000004 _alt_nticks
0000abe0 g     F .text	00000124 read
0000b1f4 g     F .text	0000005c alt_sys_init
0000cde4 g     F .text	00000134 __register_exitproc
00006960 g     F .text	00000254 __multiply
0000b768 g     F .text	00000074 altera_avalon_jtag_uart_close
000007d8 g     F .text	00000038 __mulsi3
0000d4bc g       *ABS*	00000000 __ram_rwdata_start
0000d130 g       *ABS*	00000000 __ram_rodata_start
000109b4 g     O .bss	00000028 __malloc_current_mallinfo
0000650c g     F .text	0000017c __d2b
000003f4 g     F .text	000001cc initialize_thread
0000b288 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000c91c g     F .text	000000d0 alt_get_fd
0000a058 g     F .text	000000c8 __fpcmp_parts_d
00007908 g     F .text	00000070 _close_r
0000ca38 g     F .text	00000074 memcmp
0000b338 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00010da4 g       *ABS*	00000000 __alt_stack_base
0000b380 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000030c8 g     F .text	0000013c __swsetup_r
00009204 g     F .text	00000258 __divdf3
00004e30 g     F .text	000000f0 __sfp
00006370 g     F .text	00000058 __copybits
0000d4bc g     O .rwdata	00000408 __malloc_av_
00004c90 g     F .text	00000004 __sinit_lock_release
00008e40 g     F .text	000003c4 __muldf3
000076ac g     F .text	00000060 __sread
0000c7fc g     F .text	00000120 alt_find_file
0000be50 g     F .text	000000b4 alt_dev_llist_insert
0000a908 g     F .text	00000020 __malloc_lock
0000addc g     F .text	000000bc sbrk
000049fc g     F .text	000001fc _fflush_r
00007840 g     F .text	000000c8 _calloc_r
00010974 g       *ABS*	00000000 __bss_start
00005e38 g     F .text	00000098 memset
0000029c g     F .text	00000058 main
000109a4 g     O .bss	00000004 alt_envp
00010988 g     O .bss	00000004 __malloc_max_total_mem
0000b2e0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000cdc8 g     F .text	0000001c __swbuf
000075c0 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00007a88 g     F .text	00000014 fclose
00010c14 g     O .bss	00000190 _atexit0
00003448 g     F .text	000015b4 _dtoa_r
00000838 g     F .text	00000740 _malloc_r
0000ef04 g     O .rwdata	00000004 alt_errno
000058c4 g     F .text	000000b8 _fwalk
0000caac g     F .text	00000104 putc
00000708 g     F .text	00000060 __divsi3
0000d37c g     O .rodata	00000014 __thenan_df
00004f20 g     F .text	0000012c _malloc_trim_r
0000d130 g       *ABS*	00000000 __CTOR_END__
0000770c g     F .text	000000bc strcmp
0000d130 g       *ABS*	00000000 __flash_rodata_start
0000d130 g       *ABS*	00000000 __DTOR_LIST__
000005c0 g     F .text	000000cc my_scheduler
000094e4 g     F .text	00000088 __nedf2
0000b1c0 g     F .text	00000034 alt_irq_init
0000ad64 g     F .text	00000078 alt_release_fd
0000d390 g     O .rodata	00000100 __clz_tab
00010998 g     O .bss	00000004 _PathLocale
0000c9ec g     F .text	00000014 atexit
000077c8 g     F .text	00000078 _write_r
00005a24 g     F .text	0000001c setlocale
0000eee0 g     O .rwdata	00000004 _impure_ptr
0001099c g     O .bss	00000004 alt_argc
00010974 g     O .bss	00000004 from_handler
0000bfc8 g     F .text	00000064 _do_dtors
0001097c g     O .bss	00000004 numthreads
00000020 g       .exceptions	00000000 alt_irq_entry
0000608c g     F .text	00000080 __ulp
00007550 g     F .text	00000040 __isinfd
00004d48 g     F .text	00000018 __fp_unlock_all
0000eef0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005990 g     F .text	00000010 localeconv
0000c048 g     F .text	00000050 alt_ic_isr_register
0000ef18 g       *ABS*	00000000 _edata
00010da4 g       *ABS*	00000000 _end
000001c8 g       *ABS*	00000000 __ram_exceptions_end
0000b7dc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000002f4 g     F .text	00000030 prototype_os
0000c134 g     F .text	000000a0 alt_ic_irq_disable
00007630 g     F .text	0000007c __swrite
0000eed8 g     O .rwdata	00000004 __malloc_trim_threshold
0000ca00 g     F .text	00000038 exit
000057fc g     F .text	000000c8 _fwalk_reent
00006688 g     F .text	0000018c __mdiff
00000768 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004c88 g     F .text	00000004 __sfp_lock_release
0000d10c g     F .text	00000020 _exit
00007590 g     F .text	00000030 __isnand
0000a120 g     F .text	00000154 alt_alarm_start
00009a68 g     F .text	00000124 __muldi3
00005a40 g     F .text	00000194 __smakebuf_r
00001114 g     F .text	00000074 strlen
0000c55c g     F .text	0000018c open
000095f4 g     F .text	00000088 __gedf2
0000aba0 g     F .text	00000040 alt_putchar
08000000 g       *ABS*	00000000 __alt_mem_SRAM
0000c02c g     F .text	0000001c alt_icache_flush_all
0000ef14 g     O .rwdata	00000004 alt_priority_mask
0000c098 g     F .text	0000009c alt_ic_irq_enable
000030a4 g     F .text	00000024 __vfprintf_internal
00008d4c g     F .text	00000080 __subdf3
00005f68 g     F .text	000000c4 __lo0bits
0000ef0c g     O .rwdata	00000008 alt_alarm_list
0000bf64 g     F .text	00000064 _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
0000a274 g     F .text	00000100 close
0000a65c g     F .text	00000080 alt_load
00009c0c g     F .text	00000314 __pack_d
00000810 g     F .text	00000014 free
00004c8c g     F .text	00000004 __sinit_lock_acquire
00006bf0 g     F .text	0000012c __multadd
00005ed0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407214 	ori	at,at,456
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00001000 	call	100 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0

.section .exceptions.exit.user, "xa"
call check_interrupt
  98:	00003240 	call	324 <check_interrupt>
beq r0, r2, GOTO
  9c:	00800326 	beq	zero,r2,ac <GOTO>
addi r4, sp, 0
  a0:	d9000004 	addi	r4,sp,0
call my_scheduler
  a4:	00005c00 	call	5c0 <my_scheduler>
addi sp, r2,0
  a8:	16c00004 	addi	sp,r2,0

000000ac <GOTO>:
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  ac:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  bc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  cc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d4:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  d8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  dc:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  ec:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f0:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f4:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  f8:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  fc:	ef80083a 	eret

00000100 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 100:	defff904 	addi	sp,sp,-28
 104:	dfc00615 	stw	ra,24(sp)
 108:	df000515 	stw	fp,20(sp)
 10c:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	1005003a 	cmpeq	r2,r2,zero
 13c:	1000161e 	bne	r2,zero,198 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 140:	e0bffd17 	ldw	r2,-12(fp)
 144:	00c00074 	movhi	r3,1
 148:	18c2c504 	addi	r3,r3,2836
 14c:	100490fa 	slli	r2,r2,3
 150:	10c5883a 	add	r2,r2,r3
 154:	11400017 	ldw	r5,0(r2)
 158:	e0bffd17 	ldw	r2,-12(fp)
 15c:	00c00074 	movhi	r3,1
 160:	18c2c504 	addi	r3,r3,2836
 164:	100490fa 	slli	r2,r2,3
 168:	10c5883a 	add	r2,r2,r3
 16c:	10800104 	addi	r2,r2,4
 170:	11000017 	ldw	r4,0(r2)
 174:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 178:	0005313a 	rdctl	r2,ipending
 17c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 180:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 184:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	1004c03a 	cmpne	r2,r2,zero
 190:	103fe31e 	bne	r2,zero,120 <alt_irq_handler+0x20>
 194:	00000706 	br	1b4 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 198:	e0bffe17 	ldw	r2,-8(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fde06 	br	12c <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1b4:	e037883a 	mov	sp,fp
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	df000017 	ldw	fp,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

Disassembly of section .text:

000001c8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1d0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d4:	d69bb614 	ori	gp,gp,28376
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1dc:	10825d14 	ori	r2,r2,2420

    movhi r3, %hi(__bss_end)
     1e0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e4:	18c36914 	ori	r3,r3,3492

    beq r2, r3, 1f
     1e8:	10c00326 	beq	r2,r3,1f8 <_start+0x30>

0:
    stw zero, (r2)
     1ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f4:	10fffd36 	bltu	r2,r3,1ec <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f8:	000a65c0 	call	a65c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1fc:	000a89c0 	call	a89c <alt_main>

00000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     200:	003fff06 	br	200 <alt_after_alt_main>

00000204 <my_interrupt_handler>:
#include <sys\alt_timestamp.h>
#include <sys\alt_alarm.h>
#include <header.h>
int from_handler = 0;
alt_alarm alarm ;
void my_interrupt_handler(){
     204:	defffe04 	addi	sp,sp,-8
     208:	dfc00115 	stw	ra,4(sp)
     20c:	df000015 	stw	fp,0(sp)
     210:	d839883a 	mov	fp,sp
printf("handler\n");
     214:	01000074 	movhi	r4,1
     218:	21344c04 	addi	r4,r4,-11984
     21c:	00010900 	call	1090 <puts>
from_handler = 1;
     220:	00800044 	movi	r2,1
     224:	d0a6a715 	stw	r2,-25956(gp)
}
     228:	e037883a 	mov	sp,fp
     22c:	dfc00117 	ldw	ra,4(sp)
     230:	df000017 	ldw	fp,0(sp)
     234:	dec00204 	addi	sp,sp,8
     238:	f800283a 	ret

0000023c <initialize_alarm>:

void initialize_alarm(){
     23c:	defffe04 	addi	sp,sp,-8
     240:	dfc00115 	stw	ra,4(sp)
     244:	df000015 	stw	fp,0(sp)
     248:	d839883a 	mov	fp,sp
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     24c:	00800074 	movhi	r2,1
     250:	10826a04 	addi	r2,r2,2472
     254:	10800017 	ldw	r2,0(r2)
     258:	100b883a 	mov	r5,r2
	if(alt_alarm_start(&alarm, alt_ticks_per_second(), my_interrupt_handler, NULL) != 0){
     25c:	01800034 	movhi	r6,0
     260:	31808104 	addi	r6,r6,516
     264:	01000074 	movhi	r4,1
     268:	21027704 	addi	r4,r4,2524
     26c:	000f883a 	mov	r7,zero
     270:	000a1200 	call	a120 <alt_alarm_start>
     274:	1005003a 	cmpeq	r2,r2,zero
     278:	1000031e 	bne	r2,zero,288 <initialize_alarm+0x4c>
			printf("ERROR WITH TIMER");
     27c:	01000074 	movhi	r4,1
     280:	21344e04 	addi	r4,r4,-11976
     284:	0000f780 	call	f78 <printf>
		}
}
     288:	e037883a 	mov	sp,fp
     28c:	dfc00117 	ldw	ra,4(sp)
     290:	df000017 	ldw	fp,0(sp)
     294:	dec00204 	addi	sp,sp,8
     298:	f800283a 	ret

0000029c <main>:
#define ALARMTICKS(x) ((alt_ticks_per_second()*(x))/10)
#define MAX 2555

// Note that ALARMTICKS(5) = 1 * 5 / 10 or 0.5 seconds
int main()
{
     29c:	defffd04 	addi	sp,sp,-12
     2a0:	dfc00215 	stw	ra,8(sp)
     2a4:	df000115 	stw	fp,4(sp)
     2a8:	df000104 	addi	fp,sp,4
	initialize_alarm();
     2ac:	000023c0 	call	23c <initialize_alarm>

	int i;
	for(i=0;i<12;i++){
     2b0:	e03fff15 	stw	zero,-4(fp)
     2b4:	00000506 	br	2cc <main+0x30>
		initialize_thread(i);
     2b8:	e13fff17 	ldw	r4,-4(fp)
     2bc:	00003f40 	call	3f4 <initialize_thread>
int main()
{
	initialize_alarm();

	int i;
	for(i=0;i<12;i++){
     2c0:	e0bfff17 	ldw	r2,-4(fp)
     2c4:	10800044 	addi	r2,r2,1
     2c8:	e0bfff15 	stw	r2,-4(fp)
     2cc:	e0bfff17 	ldw	r2,-4(fp)
     2d0:	10800310 	cmplti	r2,r2,12
     2d4:	103ff81e 	bne	r2,zero,2b8 <main+0x1c>
		initialize_thread(i);
	}
	//alt_printf("This is my prototype OS.\n");
	prototype_os();
     2d8:	00002f40 	call	2f4 <prototype_os>
	return 0;
     2dc:	0005883a 	mov	r2,zero
}
     2e0:	e037883a 	mov	sp,fp
     2e4:	dfc00117 	ldw	ra,4(sp)
     2e8:	df000017 	ldw	fp,0(sp)
     2ec:	dec00204 	addi	sp,sp,8
     2f0:	f800283a 	ret

000002f4 <prototype_os>:
void prototype_os()
{
     2f4:	defffe04 	addi	sp,sp,-8
     2f8:	df000115 	stw	fp,4(sp)
     2fc:	df000104 	addi	fp,sp,4
	while (1)
	{
		//printf("This is my prototype OS.\n");
		int j;
	// a delay loop is used below. Try adjust the value of MAX
	for (j = 0; j < 2554; j++){
     300:	e03fff15 	stw	zero,-4(fp)
     304:	00000306 	br	314 <prototype_os+0x20>
     308:	e0bfff17 	ldw	r2,-4(fp)
     30c:	10800044 	addi	r2,r2,1
     310:	e0bfff15 	stw	r2,-4(fp)
     314:	e0bfff17 	ldw	r2,-4(fp)
     318:	10827e90 	cmplti	r2,r2,2554
     31c:	103ffa1e 	bne	r2,zero,308 <prototype_os+0x14>

	}
	}
     320:	003ff706 	br	300 <prototype_os+0xc>

00000324 <check_interrupt>:
	int *stack_pointer;
	int state;
	int priority;
};
extern from_handler;
int check_interrupt(){
     324:	defffe04 	addi	sp,sp,-8
     328:	dfc00115 	stw	ra,4(sp)
     32c:	df000015 	stw	fp,0(sp)
     330:	d839883a 	mov	fp,sp
	if(from_handler == 1){
     334:	00800074 	movhi	r2,1
     338:	10825d04 	addi	r2,r2,2420
     33c:	10800017 	ldw	r2,0(r2)
     340:	10800058 	cmpnei	r2,r2,1
     344:	1000041e 	bne	r2,zero,358 <check_interrupt+0x34>
	printf("check:%x\n",current_thread );}
     348:	d166a817 	ldw	r5,-25952(gp)
     34c:	01000074 	movhi	r4,1
     350:	21345304 	addi	r4,r4,-11956
     354:	0000f780 	call	f78 <printf>
	return from_handler;
     358:	00800074 	movhi	r2,1
     35c:	10825d04 	addi	r2,r2,2420
     360:	10800017 	ldw	r2,0(r2)
}
     364:	e037883a 	mov	sp,fp
     368:	dfc00117 	ldw	ra,4(sp)
     36c:	df000017 	ldw	fp,0(sp)
     370:	dec00204 	addi	sp,sp,8
     374:	f800283a 	ret

00000378 <my_thread>:
void my_thread(){
     378:	defffd04 	addi	sp,sp,-12
     37c:	dfc00215 	stw	ra,8(sp)
     380:	df000115 	stw	fp,4(sp)
     384:	df000104 	addi	fp,sp,4
	printf("This is my thread\n");
     388:	01000074 	movhi	r4,1
     38c:	21345604 	addi	r4,r4,-11944
     390:	00010900 	call	1090 <puts>
	int i = 0;
     394:	e03fff15 	stw	zero,-4(fp)
	for(i=0; i<255; i++){
     398:	e03fff15 	stw	zero,-4(fp)
     39c:	00000306 	br	3ac <my_thread+0x34>
     3a0:	e0bfff17 	ldw	r2,-4(fp)
     3a4:	10800044 	addi	r2,r2,1
     3a8:	e0bfff15 	stw	r2,-4(fp)
     3ac:	e0bfff17 	ldw	r2,-4(fp)
     3b0:	10803fd0 	cmplti	r2,r2,255
     3b4:	103ffa1e 	bne	r2,zero,3a0 <my_thread+0x28>

	}
}
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <destroy_thread>:
void destroy_thread(){
     3cc:	defffe04 	addi	sp,sp,-8
     3d0:	dfc00115 	stw	ra,4(sp)
     3d4:	df000015 	stw	fp,0(sp)
     3d8:	d839883a 	mov	fp,sp
	prototype_os();
     3dc:	00002f40 	call	2f4 <prototype_os>
}
     3e0:	e037883a 	mov	sp,fp
     3e4:	dfc00117 	ldw	ra,4(sp)
     3e8:	df000017 	ldw	fp,0(sp)
     3ec:	dec00204 	addi	sp,sp,8
     3f0:	f800283a 	ret

000003f4 <initialize_thread>:
int numthreads =0;
struct thread threads[12];

void initialize_thread(int num_thread){
     3f4:	defffa04 	addi	sp,sp,-24
     3f8:	dfc00515 	stw	ra,20(sp)
     3fc:	df000415 	stw	fp,16(sp)
     400:	dc800315 	stw	r18,12(sp)
     404:	dc400215 	stw	r17,8(sp)
     408:	dc000115 	stw	r16,4(sp)
     40c:	df000104 	addi	fp,sp,4
     410:	e13fff15 	stw	r4,-4(fp)

		threads[num_thread].stack_size = 700;
     414:	e13fff17 	ldw	r4,-4(fp)
     418:	04000074 	movhi	r16,1
     41c:	84027d04 	addi	r16,r16,2548
     420:	01400604 	movi	r5,24
     424:	00007d80 	call	7d8 <__mulsi3>
     428:	1405883a 	add	r2,r2,r16
     42c:	10c00204 	addi	r3,r2,8
     430:	0080af04 	movi	r2,700
     434:	18800015 	stw	r2,0(r3)
		threads[num_thread].stack_address = malloc(threads[num_thread].stack_size);
     438:	e4bfff17 	ldw	r18,-4(fp)
     43c:	e13fff17 	ldw	r4,-4(fp)
     440:	04000074 	movhi	r16,1
     444:	84027d04 	addi	r16,r16,2548
     448:	01400604 	movi	r5,24
     44c:	00007d80 	call	7d8 <__mulsi3>
     450:	1405883a 	add	r2,r2,r16
     454:	10800204 	addi	r2,r2,8
     458:	10800017 	ldw	r2,0(r2)
     45c:	1009883a 	mov	r4,r2
     460:	00008240 	call	824 <malloc>
     464:	1023883a 	mov	r17,r2
     468:	04000074 	movhi	r16,1
     46c:	84027d04 	addi	r16,r16,2548
     470:	9009883a 	mov	r4,r18
     474:	01400604 	movi	r5,24
     478:	00007d80 	call	7d8 <__mulsi3>
     47c:	1405883a 	add	r2,r2,r16
     480:	10800104 	addi	r2,r2,4
     484:	14400015 	stw	r17,0(r2)
		threads[num_thread].stack_pointer = threads[num_thread].stack_address-threads[num_thread].stack_size/2;
     488:	e4bfff17 	ldw	r18,-4(fp)
     48c:	e13fff17 	ldw	r4,-4(fp)
     490:	04000074 	movhi	r16,1
     494:	84027d04 	addi	r16,r16,2548
     498:	01400604 	movi	r5,24
     49c:	00007d80 	call	7d8 <__mulsi3>
     4a0:	1405883a 	add	r2,r2,r16
     4a4:	10800104 	addi	r2,r2,4
     4a8:	14400017 	ldw	r17,0(r2)
     4ac:	e13fff17 	ldw	r4,-4(fp)
     4b0:	04000074 	movhi	r16,1
     4b4:	84027d04 	addi	r16,r16,2548
     4b8:	01400604 	movi	r5,24
     4bc:	00007d80 	call	7d8 <__mulsi3>
     4c0:	1405883a 	add	r2,r2,r16
     4c4:	10800204 	addi	r2,r2,8
     4c8:	10c00017 	ldw	r3,0(r2)
     4cc:	1804d7fa 	srli	r2,r3,31
     4d0:	10c5883a 	add	r2,r2,r3
     4d4:	1005d07a 	srai	r2,r2,1
     4d8:	1085883a 	add	r2,r2,r2
     4dc:	1085883a 	add	r2,r2,r2
     4e0:	88a3c83a 	sub	r17,r17,r2
     4e4:	04000074 	movhi	r16,1
     4e8:	84027d04 	addi	r16,r16,2548
     4ec:	9009883a 	mov	r4,r18
     4f0:	01400604 	movi	r5,24
     4f4:	00007d80 	call	7d8 <__mulsi3>
     4f8:	1405883a 	add	r2,r2,r16
     4fc:	10800304 	addi	r2,r2,12
     500:	14400015 	stw	r17,0(r2)
		threads[num_thread].state = 0;
     504:	e13fff17 	ldw	r4,-4(fp)
     508:	04000074 	movhi	r16,1
     50c:	84027d04 	addi	r16,r16,2548
     510:	01400604 	movi	r5,24
     514:	00007d80 	call	7d8 <__mulsi3>
     518:	1405883a 	add	r2,r2,r16
     51c:	10800404 	addi	r2,r2,16
     520:	10000015 	stw	zero,0(r2)
		threads[num_thread].priority=0;
     524:	e13fff17 	ldw	r4,-4(fp)
     528:	04000074 	movhi	r16,1
     52c:	84027d04 	addi	r16,r16,2548
     530:	01400604 	movi	r5,24
     534:	00007d80 	call	7d8 <__mulsi3>
     538:	1405883a 	add	r2,r2,r16
     53c:	10800504 	addi	r2,r2,20
     540:	10000015 	stw	zero,0(r2)
		threads[num_thread].stack_pointer[0] = &my_thread;
     544:	e13fff17 	ldw	r4,-4(fp)
     548:	04000074 	movhi	r16,1
     54c:	84027d04 	addi	r16,r16,2548
     550:	01400604 	movi	r5,24
     554:	00007d80 	call	7d8 <__mulsi3>
     558:	1405883a 	add	r2,r2,r16
     55c:	10800304 	addi	r2,r2,12
     560:	10c00017 	ldw	r3,0(r2)
     564:	00800034 	movhi	r2,0
     568:	1080de04 	addi	r2,r2,888
     56c:	18800015 	stw	r2,0(r3)
		threads[num_thread].stack_pointer[18] = &my_thread;
     570:	e13fff17 	ldw	r4,-4(fp)
     574:	04000074 	movhi	r16,1
     578:	84027d04 	addi	r16,r16,2548
     57c:	01400604 	movi	r5,24
     580:	00007d80 	call	7d8 <__mulsi3>
     584:	1405883a 	add	r2,r2,r16
     588:	10800304 	addi	r2,r2,12
     58c:	10800017 	ldw	r2,0(r2)
     590:	10c01204 	addi	r3,r2,72
     594:	00800034 	movhi	r2,0
     598:	1080de04 	addi	r2,r2,888
     59c:	18800015 	stw	r2,0(r3)
}
     5a0:	e037883a 	mov	sp,fp
     5a4:	dfc00417 	ldw	ra,16(sp)
     5a8:	df000317 	ldw	fp,12(sp)
     5ac:	dc800217 	ldw	r18,8(sp)
     5b0:	dc400117 	ldw	r17,4(sp)
     5b4:	dc000017 	ldw	r16,0(sp)
     5b8:	dec00504 	addi	sp,sp,20
     5bc:	f800283a 	ret

000005c0 <my_scheduler>:
int my_scheduler(int *sp){//round robin
     5c0:	defffb04 	addi	sp,sp,-20
     5c4:	dfc00415 	stw	ra,16(sp)
     5c8:	df000315 	stw	fp,12(sp)
     5cc:	dc000215 	stw	r16,8(sp)
     5d0:	df000204 	addi	fp,sp,8
     5d4:	e13fff15 	stw	r4,-4(fp)
	from_handler = 0;
     5d8:	00800074 	movhi	r2,1
     5dc:	10825d04 	addi	r2,r2,2420
     5e0:	10000015 	stw	zero,0(r2)
	if(current_thread == 0){
     5e4:	d0a6a817 	ldw	r2,-25952(gp)
     5e8:	1004c03a 	cmpne	r2,r2,zero
     5ec:	1000031e 	bne	r2,zero,5fc <my_scheduler+0x3c>
		printf("Zero\n");
     5f0:	01000074 	movhi	r4,1
     5f4:	21345b04 	addi	r4,r4,-11924
     5f8:	00010900 	call	1090 <puts>
	}
	//threads[current_thread].stack_pointer= sp;
	current_thread = (current_thread+1)%12;
     5fc:	d0a6a817 	ldw	r2,-25952(gp)
     600:	11000044 	addi	r4,r2,1
     604:	01400304 	movi	r5,12
     608:	00007680 	call	768 <__modsi3>
     60c:	d0a6a815 	stw	r2,-25952(gp)
	alt_printf("test:%d\n",current_thread );
     610:	d166a817 	ldw	r5,-25952(gp)
     614:	01000074 	movhi	r4,1
     618:	21345d04 	addi	r4,r4,-11916
     61c:	000a9480 	call	a948 <alt_printf>
	int temp = sp[0];
     620:	e0bfff17 	ldw	r2,-4(fp)
     624:	10800017 	ldw	r2,0(r2)
     628:	e0bffe15 	stw	r2,-8(fp)
	threads[current_thread].stack_pointer[0] =  temp;
     62c:	d126a817 	ldw	r4,-25952(gp)
     630:	04000074 	movhi	r16,1
     634:	84027d04 	addi	r16,r16,2548
     638:	01400604 	movi	r5,24
     63c:	00007d80 	call	7d8 <__mulsi3>
     640:	1405883a 	add	r2,r2,r16
     644:	10800304 	addi	r2,r2,12
     648:	10c00017 	ldw	r3,0(r2)
     64c:	e0bffe17 	ldw	r2,-8(fp)
     650:	18800015 	stw	r2,0(r3)
	//initialize_alarm();
	return threads[current_thread].stack_pointer;
     654:	d126a817 	ldw	r4,-25952(gp)
     658:	04000074 	movhi	r16,1
     65c:	84027d04 	addi	r16,r16,2548
     660:	01400604 	movi	r5,24
     664:	00007d80 	call	7d8 <__mulsi3>
     668:	1405883a 	add	r2,r2,r16
     66c:	10800304 	addi	r2,r2,12
     670:	10800017 	ldw	r2,0(r2)
	//return sp;
}
     674:	e037883a 	mov	sp,fp
     678:	dfc00217 	ldw	ra,8(sp)
     67c:	df000117 	ldw	fp,4(sp)
     680:	dc000017 	ldw	r16,0(sp)
     684:	dec00304 	addi	sp,sp,12
     688:	f800283a 	ret

0000068c <udivmodsi4>:
     68c:	29001b2e 	bgeu	r5,r4,6fc <udivmodsi4+0x70>
     690:	28001a16 	blt	r5,zero,6fc <udivmodsi4+0x70>
     694:	00800044 	movi	r2,1
     698:	0007883a 	mov	r3,zero
     69c:	01c007c4 	movi	r7,31
     6a0:	00000306 	br	6b0 <udivmodsi4+0x24>
     6a4:	19c01326 	beq	r3,r7,6f4 <udivmodsi4+0x68>
     6a8:	18c00044 	addi	r3,r3,1
     6ac:	28000416 	blt	r5,zero,6c0 <udivmodsi4+0x34>
     6b0:	294b883a 	add	r5,r5,r5
     6b4:	1085883a 	add	r2,r2,r2
     6b8:	293ffa36 	bltu	r5,r4,6a4 <udivmodsi4+0x18>
     6bc:	10000d26 	beq	r2,zero,6f4 <udivmodsi4+0x68>
     6c0:	0007883a 	mov	r3,zero
     6c4:	21400236 	bltu	r4,r5,6d0 <udivmodsi4+0x44>
     6c8:	2149c83a 	sub	r4,r4,r5
     6cc:	1886b03a 	or	r3,r3,r2
     6d0:	1004d07a 	srli	r2,r2,1
     6d4:	280ad07a 	srli	r5,r5,1
     6d8:	103ffa1e 	bne	r2,zero,6c4 <udivmodsi4+0x38>
     6dc:	30000226 	beq	r6,zero,6e8 <udivmodsi4+0x5c>
     6e0:	2005883a 	mov	r2,r4
     6e4:	f800283a 	ret
     6e8:	1809883a 	mov	r4,r3
     6ec:	2005883a 	mov	r2,r4
     6f0:	f800283a 	ret
     6f4:	0007883a 	mov	r3,zero
     6f8:	003ff806 	br	6dc <udivmodsi4+0x50>
     6fc:	00800044 	movi	r2,1
     700:	0007883a 	mov	r3,zero
     704:	003fef06 	br	6c4 <udivmodsi4+0x38>

00000708 <__divsi3>:
     708:	defffe04 	addi	sp,sp,-8
     70c:	dc000015 	stw	r16,0(sp)
     710:	dfc00115 	stw	ra,4(sp)
     714:	0021883a 	mov	r16,zero
     718:	20000c16 	blt	r4,zero,74c <__divsi3+0x44>
     71c:	000d883a 	mov	r6,zero
     720:	28000e16 	blt	r5,zero,75c <__divsi3+0x54>
     724:	000068c0 	call	68c <udivmodsi4>
     728:	1007883a 	mov	r3,r2
     72c:	8005003a 	cmpeq	r2,r16,zero
     730:	1000011e 	bne	r2,zero,738 <__divsi3+0x30>
     734:	00c7c83a 	sub	r3,zero,r3
     738:	1805883a 	mov	r2,r3
     73c:	dfc00117 	ldw	ra,4(sp)
     740:	dc000017 	ldw	r16,0(sp)
     744:	dec00204 	addi	sp,sp,8
     748:	f800283a 	ret
     74c:	0109c83a 	sub	r4,zero,r4
     750:	04000044 	movi	r16,1
     754:	000d883a 	mov	r6,zero
     758:	283ff20e 	bge	r5,zero,724 <__divsi3+0x1c>
     75c:	014bc83a 	sub	r5,zero,r5
     760:	8021003a 	cmpeq	r16,r16,zero
     764:	003fef06 	br	724 <__divsi3+0x1c>

00000768 <__modsi3>:
     768:	deffff04 	addi	sp,sp,-4
     76c:	dfc00015 	stw	ra,0(sp)
     770:	01800044 	movi	r6,1
     774:	2807883a 	mov	r3,r5
     778:	20000416 	blt	r4,zero,78c <__modsi3+0x24>
     77c:	28000c16 	blt	r5,zero,7b0 <__modsi3+0x48>
     780:	dfc00017 	ldw	ra,0(sp)
     784:	dec00104 	addi	sp,sp,4
     788:	000068c1 	jmpi	68c <udivmodsi4>
     78c:	0109c83a 	sub	r4,zero,r4
     790:	28000b16 	blt	r5,zero,7c0 <__modsi3+0x58>
     794:	180b883a 	mov	r5,r3
     798:	01800044 	movi	r6,1
     79c:	000068c0 	call	68c <udivmodsi4>
     7a0:	0085c83a 	sub	r2,zero,r2
     7a4:	dfc00017 	ldw	ra,0(sp)
     7a8:	dec00104 	addi	sp,sp,4
     7ac:	f800283a 	ret
     7b0:	014bc83a 	sub	r5,zero,r5
     7b4:	dfc00017 	ldw	ra,0(sp)
     7b8:	dec00104 	addi	sp,sp,4
     7bc:	000068c1 	jmpi	68c <udivmodsi4>
     7c0:	0147c83a 	sub	r3,zero,r5
     7c4:	003ff306 	br	794 <__modsi3+0x2c>

000007c8 <__udivsi3>:
     7c8:	000d883a 	mov	r6,zero
     7cc:	000068c1 	jmpi	68c <udivmodsi4>

000007d0 <__umodsi3>:
     7d0:	01800044 	movi	r6,1
     7d4:	000068c1 	jmpi	68c <udivmodsi4>

000007d8 <__mulsi3>:
     7d8:	20000a26 	beq	r4,zero,804 <__mulsi3+0x2c>
     7dc:	0007883a 	mov	r3,zero
     7e0:	2080004c 	andi	r2,r4,1
     7e4:	1005003a 	cmpeq	r2,r2,zero
     7e8:	2008d07a 	srli	r4,r4,1
     7ec:	1000011e 	bne	r2,zero,7f4 <__mulsi3+0x1c>
     7f0:	1947883a 	add	r3,r3,r5
     7f4:	294b883a 	add	r5,r5,r5
     7f8:	203ff91e 	bne	r4,zero,7e0 <__mulsi3+0x8>
     7fc:	1805883a 	mov	r2,r3
     800:	f800283a 	ret
     804:	0007883a 	mov	r3,zero
     808:	1805883a 	mov	r2,r3
     80c:	f800283a 	ret

00000810 <free>:
     810:	00800074 	movhi	r2,1
     814:	10bbb804 	addi	r2,r2,-4384
     818:	200b883a 	mov	r5,r4
     81c:	11000017 	ldw	r4,0(r2)
     820:	000504c1 	jmpi	504c <_free_r>

00000824 <malloc>:
     824:	00800074 	movhi	r2,1
     828:	10bbb804 	addi	r2,r2,-4384
     82c:	200b883a 	mov	r5,r4
     830:	11000017 	ldw	r4,0(r2)
     834:	00008381 	jmpi	838 <_malloc_r>

00000838 <_malloc_r>:
     838:	defff604 	addi	sp,sp,-40
     83c:	28c002c4 	addi	r3,r5,11
     840:	00800584 	movi	r2,22
     844:	dc800215 	stw	r18,8(sp)
     848:	dfc00915 	stw	ra,36(sp)
     84c:	df000815 	stw	fp,32(sp)
     850:	ddc00715 	stw	r23,28(sp)
     854:	dd800615 	stw	r22,24(sp)
     858:	dd400515 	stw	r21,20(sp)
     85c:	dd000415 	stw	r20,16(sp)
     860:	dcc00315 	stw	r19,12(sp)
     864:	dc400115 	stw	r17,4(sp)
     868:	dc000015 	stw	r16,0(sp)
     86c:	2025883a 	mov	r18,r4
     870:	10c01236 	bltu	r2,r3,8bc <_malloc_r+0x84>
     874:	04400404 	movi	r17,16
     878:	8940142e 	bgeu	r17,r5,8cc <_malloc_r+0x94>
     87c:	00800304 	movi	r2,12
     880:	0007883a 	mov	r3,zero
     884:	90800015 	stw	r2,0(r18)
     888:	1805883a 	mov	r2,r3
     88c:	dfc00917 	ldw	ra,36(sp)
     890:	df000817 	ldw	fp,32(sp)
     894:	ddc00717 	ldw	r23,28(sp)
     898:	dd800617 	ldw	r22,24(sp)
     89c:	dd400517 	ldw	r21,20(sp)
     8a0:	dd000417 	ldw	r20,16(sp)
     8a4:	dcc00317 	ldw	r19,12(sp)
     8a8:	dc800217 	ldw	r18,8(sp)
     8ac:	dc400117 	ldw	r17,4(sp)
     8b0:	dc000017 	ldw	r16,0(sp)
     8b4:	dec00a04 	addi	sp,sp,40
     8b8:	f800283a 	ret
     8bc:	00bffe04 	movi	r2,-8
     8c0:	18a2703a 	and	r17,r3,r2
     8c4:	883fed16 	blt	r17,zero,87c <_malloc_r+0x44>
     8c8:	897fec36 	bltu	r17,r5,87c <_malloc_r+0x44>
     8cc:	9009883a 	mov	r4,r18
     8d0:	000a9080 	call	a908 <__malloc_lock>
     8d4:	00807dc4 	movi	r2,503
     8d8:	14402b2e 	bgeu	r2,r17,988 <_malloc_r+0x150>
     8dc:	8806d27a 	srli	r3,r17,9
     8e0:	18003f1e 	bne	r3,zero,9e0 <_malloc_r+0x1a8>
     8e4:	880cd0fa 	srli	r6,r17,3
     8e8:	300490fa 	slli	r2,r6,3
     8ec:	02c00074 	movhi	r11,1
     8f0:	5af52f04 	addi	r11,r11,-11076
     8f4:	12cb883a 	add	r5,r2,r11
     8f8:	2c000317 	ldw	r16,12(r5)
     8fc:	580f883a 	mov	r7,r11
     900:	2c00041e 	bne	r5,r16,914 <_malloc_r+0xdc>
     904:	00000a06 	br	930 <_malloc_r+0xf8>
     908:	1800860e 	bge	r3,zero,b24 <_malloc_r+0x2ec>
     90c:	84000317 	ldw	r16,12(r16)
     910:	2c000726 	beq	r5,r16,930 <_malloc_r+0xf8>
     914:	80800117 	ldw	r2,4(r16)
     918:	00ffff04 	movi	r3,-4
     91c:	10c8703a 	and	r4,r2,r3
     920:	2447c83a 	sub	r3,r4,r17
     924:	008003c4 	movi	r2,15
     928:	10fff70e 	bge	r2,r3,908 <_malloc_r+0xd0>
     92c:	31bfffc4 	addi	r6,r6,-1
     930:	32400044 	addi	r9,r6,1
     934:	02800074 	movhi	r10,1
     938:	52b53104 	addi	r10,r10,-11068
     93c:	54000217 	ldw	r16,8(r10)
     940:	8280a026 	beq	r16,r10,bc4 <_malloc_r+0x38c>
     944:	80800117 	ldw	r2,4(r16)
     948:	00ffff04 	movi	r3,-4
     94c:	10ca703a 	and	r5,r2,r3
     950:	2c4dc83a 	sub	r6,r5,r17
     954:	008003c4 	movi	r2,15
     958:	11808316 	blt	r2,r6,b68 <_malloc_r+0x330>
     95c:	52800315 	stw	r10,12(r10)
     960:	52800215 	stw	r10,8(r10)
     964:	30002916 	blt	r6,zero,a0c <_malloc_r+0x1d4>
     968:	8147883a 	add	r3,r16,r5
     96c:	18800117 	ldw	r2,4(r3)
     970:	9009883a 	mov	r4,r18
     974:	10800054 	ori	r2,r2,1
     978:	18800115 	stw	r2,4(r3)
     97c:	000a9280 	call	a928 <__malloc_unlock>
     980:	80c00204 	addi	r3,r16,8
     984:	003fc006 	br	888 <_malloc_r+0x50>
     988:	02c00074 	movhi	r11,1
     98c:	5af52f04 	addi	r11,r11,-11076
     990:	8ac5883a 	add	r2,r17,r11
     994:	14000317 	ldw	r16,12(r2)
     998:	580f883a 	mov	r7,r11
     99c:	8806d0fa 	srli	r3,r17,3
     9a0:	14006c26 	beq	r2,r16,b54 <_malloc_r+0x31c>
     9a4:	80c00117 	ldw	r3,4(r16)
     9a8:	00bfff04 	movi	r2,-4
     9ac:	81800317 	ldw	r6,12(r16)
     9b0:	1886703a 	and	r3,r3,r2
     9b4:	80c7883a 	add	r3,r16,r3
     9b8:	18800117 	ldw	r2,4(r3)
     9bc:	81400217 	ldw	r5,8(r16)
     9c0:	9009883a 	mov	r4,r18
     9c4:	10800054 	ori	r2,r2,1
     9c8:	18800115 	stw	r2,4(r3)
     9cc:	31400215 	stw	r5,8(r6)
     9d0:	29800315 	stw	r6,12(r5)
     9d4:	000a9280 	call	a928 <__malloc_unlock>
     9d8:	80c00204 	addi	r3,r16,8
     9dc:	003faa06 	br	888 <_malloc_r+0x50>
     9e0:	00800104 	movi	r2,4
     9e4:	10c0052e 	bgeu	r2,r3,9fc <_malloc_r+0x1c4>
     9e8:	00800504 	movi	r2,20
     9ec:	10c07836 	bltu	r2,r3,bd0 <_malloc_r+0x398>
     9f0:	198016c4 	addi	r6,r3,91
     9f4:	300490fa 	slli	r2,r6,3
     9f8:	003fbc06 	br	8ec <_malloc_r+0xb4>
     9fc:	8804d1ba 	srli	r2,r17,6
     a00:	11800e04 	addi	r6,r2,56
     a04:	300490fa 	slli	r2,r6,3
     a08:	003fb806 	br	8ec <_malloc_r+0xb4>
     a0c:	00807fc4 	movi	r2,511
     a10:	1140bb36 	bltu	r2,r5,d00 <_malloc_r+0x4c8>
     a14:	2806d0fa 	srli	r3,r5,3
     a18:	573ffe04 	addi	fp,r10,-8
     a1c:	00800044 	movi	r2,1
     a20:	180890fa 	slli	r4,r3,3
     a24:	1807d0ba 	srai	r3,r3,2
     a28:	e1c00117 	ldw	r7,4(fp)
     a2c:	5909883a 	add	r4,r11,r4
     a30:	21400217 	ldw	r5,8(r4)
     a34:	10c4983a 	sll	r2,r2,r3
     a38:	81000315 	stw	r4,12(r16)
     a3c:	81400215 	stw	r5,8(r16)
     a40:	388eb03a 	or	r7,r7,r2
     a44:	2c000315 	stw	r16,12(r5)
     a48:	24000215 	stw	r16,8(r4)
     a4c:	e1c00115 	stw	r7,4(fp)
     a50:	4807883a 	mov	r3,r9
     a54:	4800cd16 	blt	r9,zero,d8c <_malloc_r+0x554>
     a58:	1807d0ba 	srai	r3,r3,2
     a5c:	00800044 	movi	r2,1
     a60:	10c8983a 	sll	r4,r2,r3
     a64:	39004436 	bltu	r7,r4,b78 <_malloc_r+0x340>
     a68:	21c4703a 	and	r2,r4,r7
     a6c:	10000a1e 	bne	r2,zero,a98 <_malloc_r+0x260>
     a70:	2109883a 	add	r4,r4,r4
     a74:	00bfff04 	movi	r2,-4
     a78:	4884703a 	and	r2,r9,r2
     a7c:	3906703a 	and	r3,r7,r4
     a80:	12400104 	addi	r9,r2,4
     a84:	1800041e 	bne	r3,zero,a98 <_malloc_r+0x260>
     a88:	2109883a 	add	r4,r4,r4
     a8c:	3904703a 	and	r2,r7,r4
     a90:	4a400104 	addi	r9,r9,4
     a94:	103ffc26 	beq	r2,zero,a88 <_malloc_r+0x250>
     a98:	480490fa 	slli	r2,r9,3
     a9c:	4819883a 	mov	r12,r9
     aa0:	023fff04 	movi	r8,-4
     aa4:	589b883a 	add	r13,r11,r2
     aa8:	6807883a 	mov	r3,r13
     aac:	014003c4 	movi	r5,15
     ab0:	1c000317 	ldw	r16,12(r3)
     ab4:	1c00041e 	bne	r3,r16,ac8 <_malloc_r+0x290>
     ab8:	0000a706 	br	d58 <_malloc_r+0x520>
     abc:	3000ab0e 	bge	r6,zero,d6c <_malloc_r+0x534>
     ac0:	84000317 	ldw	r16,12(r16)
     ac4:	1c00a426 	beq	r3,r16,d58 <_malloc_r+0x520>
     ac8:	80800117 	ldw	r2,4(r16)
     acc:	1204703a 	and	r2,r2,r8
     ad0:	144dc83a 	sub	r6,r2,r17
     ad4:	29bff90e 	bge	r5,r6,abc <_malloc_r+0x284>
     ad8:	81000317 	ldw	r4,12(r16)
     adc:	80c00217 	ldw	r3,8(r16)
     ae0:	89400054 	ori	r5,r17,1
     ae4:	8445883a 	add	r2,r16,r17
     ae8:	20c00215 	stw	r3,8(r4)
     aec:	19000315 	stw	r4,12(r3)
     af0:	81400115 	stw	r5,4(r16)
     af4:	1187883a 	add	r3,r2,r6
     af8:	31000054 	ori	r4,r6,1
     afc:	50800315 	stw	r2,12(r10)
     b00:	50800215 	stw	r2,8(r10)
     b04:	19800015 	stw	r6,0(r3)
     b08:	11000115 	stw	r4,4(r2)
     b0c:	12800215 	stw	r10,8(r2)
     b10:	12800315 	stw	r10,12(r2)
     b14:	9009883a 	mov	r4,r18
     b18:	000a9280 	call	a928 <__malloc_unlock>
     b1c:	80c00204 	addi	r3,r16,8
     b20:	003f5906 	br	888 <_malloc_r+0x50>
     b24:	8109883a 	add	r4,r16,r4
     b28:	20800117 	ldw	r2,4(r4)
     b2c:	80c00217 	ldw	r3,8(r16)
     b30:	81400317 	ldw	r5,12(r16)
     b34:	10800054 	ori	r2,r2,1
     b38:	20800115 	stw	r2,4(r4)
     b3c:	28c00215 	stw	r3,8(r5)
     b40:	19400315 	stw	r5,12(r3)
     b44:	9009883a 	mov	r4,r18
     b48:	000a9280 	call	a928 <__malloc_unlock>
     b4c:	80c00204 	addi	r3,r16,8
     b50:	003f4d06 	br	888 <_malloc_r+0x50>
     b54:	80800204 	addi	r2,r16,8
     b58:	14000317 	ldw	r16,12(r2)
     b5c:	143f911e 	bne	r2,r16,9a4 <_malloc_r+0x16c>
     b60:	1a400084 	addi	r9,r3,2
     b64:	003f7306 	br	934 <_malloc_r+0xfc>
     b68:	88c00054 	ori	r3,r17,1
     b6c:	8445883a 	add	r2,r16,r17
     b70:	80c00115 	stw	r3,4(r16)
     b74:	003fdf06 	br	af4 <_malloc_r+0x2bc>
     b78:	e4000217 	ldw	r16,8(fp)
     b7c:	00bfff04 	movi	r2,-4
     b80:	80c00117 	ldw	r3,4(r16)
     b84:	802d883a 	mov	r22,r16
     b88:	18aa703a 	and	r21,r3,r2
     b8c:	ac401636 	bltu	r21,r17,be8 <_malloc_r+0x3b0>
     b90:	ac49c83a 	sub	r4,r21,r17
     b94:	008003c4 	movi	r2,15
     b98:	1100130e 	bge	r2,r4,be8 <_malloc_r+0x3b0>
     b9c:	88800054 	ori	r2,r17,1
     ba0:	8447883a 	add	r3,r16,r17
     ba4:	80800115 	stw	r2,4(r16)
     ba8:	20800054 	ori	r2,r4,1
     bac:	18800115 	stw	r2,4(r3)
     bb0:	e0c00215 	stw	r3,8(fp)
     bb4:	9009883a 	mov	r4,r18
     bb8:	000a9280 	call	a928 <__malloc_unlock>
     bbc:	80c00204 	addi	r3,r16,8
     bc0:	003f3106 	br	888 <_malloc_r+0x50>
     bc4:	39c00117 	ldw	r7,4(r7)
     bc8:	573ffe04 	addi	fp,r10,-8
     bcc:	003fa006 	br	a50 <_malloc_r+0x218>
     bd0:	00801504 	movi	r2,84
     bd4:	10c06736 	bltu	r2,r3,d74 <_malloc_r+0x53c>
     bd8:	8804d33a 	srli	r2,r17,12
     bdc:	11801b84 	addi	r6,r2,110
     be0:	300490fa 	slli	r2,r6,3
     be4:	003f4106 	br	8ec <_malloc_r+0xb4>
     be8:	d0a6aa17 	ldw	r2,-25944(gp)
     bec:	d0e00117 	ldw	r3,-32764(gp)
     bf0:	053fffc4 	movi	r20,-1
     bf4:	10800404 	addi	r2,r2,16
     bf8:	88a7883a 	add	r19,r17,r2
     bfc:	1d000326 	beq	r3,r20,c0c <_malloc_r+0x3d4>
     c00:	98c3ffc4 	addi	r3,r19,4095
     c04:	00bc0004 	movi	r2,-4096
     c08:	18a6703a 	and	r19,r3,r2
     c0c:	9009883a 	mov	r4,r18
     c10:	980b883a 	mov	r5,r19
     c14:	00010a40 	call	10a4 <_sbrk_r>
     c18:	1009883a 	mov	r4,r2
     c1c:	15000426 	beq	r2,r20,c30 <_malloc_r+0x3f8>
     c20:	854b883a 	add	r5,r16,r21
     c24:	1029883a 	mov	r20,r2
     c28:	11405a2e 	bgeu	r2,r5,d94 <_malloc_r+0x55c>
     c2c:	87000c26 	beq	r16,fp,c60 <_malloc_r+0x428>
     c30:	e4000217 	ldw	r16,8(fp)
     c34:	80c00117 	ldw	r3,4(r16)
     c38:	00bfff04 	movi	r2,-4
     c3c:	1884703a 	and	r2,r3,r2
     c40:	14400336 	bltu	r2,r17,c50 <_malloc_r+0x418>
     c44:	1449c83a 	sub	r4,r2,r17
     c48:	008003c4 	movi	r2,15
     c4c:	113fd316 	blt	r2,r4,b9c <_malloc_r+0x364>
     c50:	9009883a 	mov	r4,r18
     c54:	000a9280 	call	a928 <__malloc_unlock>
     c58:	0007883a 	mov	r3,zero
     c5c:	003f0a06 	br	888 <_malloc_r+0x50>
     c60:	05c00074 	movhi	r23,1
     c64:	bdc26d04 	addi	r23,r23,2484
     c68:	b8800017 	ldw	r2,0(r23)
     c6c:	988d883a 	add	r6,r19,r2
     c70:	b9800015 	stw	r6,0(r23)
     c74:	d0e00117 	ldw	r3,-32764(gp)
     c78:	00bfffc4 	movi	r2,-1
     c7c:	18808e26 	beq	r3,r2,eb8 <_malloc_r+0x680>
     c80:	2145c83a 	sub	r2,r4,r5
     c84:	3085883a 	add	r2,r6,r2
     c88:	b8800015 	stw	r2,0(r23)
     c8c:	20c001cc 	andi	r3,r4,7
     c90:	18005f1e 	bne	r3,zero,e10 <_malloc_r+0x5d8>
     c94:	000b883a 	mov	r5,zero
     c98:	a4c5883a 	add	r2,r20,r19
     c9c:	1083ffcc 	andi	r2,r2,4095
     ca0:	00c40004 	movi	r3,4096
     ca4:	1887c83a 	sub	r3,r3,r2
     ca8:	28e7883a 	add	r19,r5,r3
     cac:	9009883a 	mov	r4,r18
     cb0:	980b883a 	mov	r5,r19
     cb4:	00010a40 	call	10a4 <_sbrk_r>
     cb8:	1007883a 	mov	r3,r2
     cbc:	00bfffc4 	movi	r2,-1
     cc0:	18807a26 	beq	r3,r2,eac <_malloc_r+0x674>
     cc4:	1d05c83a 	sub	r2,r3,r20
     cc8:	9885883a 	add	r2,r19,r2
     ccc:	10c00054 	ori	r3,r2,1
     cd0:	b8800017 	ldw	r2,0(r23)
     cd4:	a021883a 	mov	r16,r20
     cd8:	a0c00115 	stw	r3,4(r20)
     cdc:	9885883a 	add	r2,r19,r2
     ce0:	b8800015 	stw	r2,0(r23)
     ce4:	e5000215 	stw	r20,8(fp)
     ce8:	b7003626 	beq	r22,fp,dc4 <_malloc_r+0x58c>
     cec:	018003c4 	movi	r6,15
     cf0:	35404b36 	bltu	r6,r21,e20 <_malloc_r+0x5e8>
     cf4:	00800044 	movi	r2,1
     cf8:	a0800115 	stw	r2,4(r20)
     cfc:	003fcd06 	br	c34 <_malloc_r+0x3fc>
     d00:	2808d27a 	srli	r4,r5,9
     d04:	2000371e 	bne	r4,zero,de4 <_malloc_r+0x5ac>
     d08:	2808d0fa 	srli	r4,r5,3
     d0c:	200690fa 	slli	r3,r4,3
     d10:	1ad1883a 	add	r8,r3,r11
     d14:	41800217 	ldw	r6,8(r8)
     d18:	41805b26 	beq	r8,r6,e88 <_malloc_r+0x650>
     d1c:	30800117 	ldw	r2,4(r6)
     d20:	00ffff04 	movi	r3,-4
     d24:	10c4703a 	and	r2,r2,r3
     d28:	2880022e 	bgeu	r5,r2,d34 <_malloc_r+0x4fc>
     d2c:	31800217 	ldw	r6,8(r6)
     d30:	41bffa1e 	bne	r8,r6,d1c <_malloc_r+0x4e4>
     d34:	32000317 	ldw	r8,12(r6)
     d38:	39c00117 	ldw	r7,4(r7)
     d3c:	82000315 	stw	r8,12(r16)
     d40:	81800215 	stw	r6,8(r16)
     d44:	07000074 	movhi	fp,1
     d48:	e7352f04 	addi	fp,fp,-11076
     d4c:	34000315 	stw	r16,12(r6)
     d50:	44000215 	stw	r16,8(r8)
     d54:	003f3e06 	br	a50 <_malloc_r+0x218>
     d58:	63000044 	addi	r12,r12,1
     d5c:	608000cc 	andi	r2,r12,3
     d60:	10005d26 	beq	r2,zero,ed8 <_malloc_r+0x6a0>
     d64:	18c00204 	addi	r3,r3,8
     d68:	003f5106 	br	ab0 <_malloc_r+0x278>
     d6c:	8089883a 	add	r4,r16,r2
     d70:	003f6d06 	br	b28 <_malloc_r+0x2f0>
     d74:	00805504 	movi	r2,340
     d78:	10c02036 	bltu	r2,r3,dfc <_malloc_r+0x5c4>
     d7c:	8804d3fa 	srli	r2,r17,15
     d80:	11801dc4 	addi	r6,r2,119
     d84:	300490fa 	slli	r2,r6,3
     d88:	003ed806 	br	8ec <_malloc_r+0xb4>
     d8c:	48c000c4 	addi	r3,r9,3
     d90:	003f3106 	br	a58 <_malloc_r+0x220>
     d94:	05c00074 	movhi	r23,1
     d98:	bdc26d04 	addi	r23,r23,2484
     d9c:	b8800017 	ldw	r2,0(r23)
     da0:	988d883a 	add	r6,r19,r2
     da4:	b9800015 	stw	r6,0(r23)
     da8:	293fb21e 	bne	r5,r4,c74 <_malloc_r+0x43c>
     dac:	2083ffcc 	andi	r2,r4,4095
     db0:	103fb01e 	bne	r2,zero,c74 <_malloc_r+0x43c>
     db4:	e4000217 	ldw	r16,8(fp)
     db8:	9d45883a 	add	r2,r19,r21
     dbc:	10800054 	ori	r2,r2,1
     dc0:	80800115 	stw	r2,4(r16)
     dc4:	b8c00017 	ldw	r3,0(r23)
     dc8:	d0a6ab17 	ldw	r2,-25940(gp)
     dcc:	10c0012e 	bgeu	r2,r3,dd4 <_malloc_r+0x59c>
     dd0:	d0e6ab15 	stw	r3,-25940(gp)
     dd4:	d0a6ac17 	ldw	r2,-25936(gp)
     dd8:	10ff962e 	bgeu	r2,r3,c34 <_malloc_r+0x3fc>
     ddc:	d0e6ac15 	stw	r3,-25936(gp)
     de0:	003f9406 	br	c34 <_malloc_r+0x3fc>
     de4:	00800104 	movi	r2,4
     de8:	11001e36 	bltu	r2,r4,e64 <_malloc_r+0x62c>
     dec:	2804d1ba 	srli	r2,r5,6
     df0:	11000e04 	addi	r4,r2,56
     df4:	200690fa 	slli	r3,r4,3
     df8:	003fc506 	br	d10 <_malloc_r+0x4d8>
     dfc:	00815504 	movi	r2,1364
     e00:	10c01d2e 	bgeu	r2,r3,e78 <_malloc_r+0x640>
     e04:	01801f84 	movi	r6,126
     e08:	0080fc04 	movi	r2,1008
     e0c:	003eb706 	br	8ec <_malloc_r+0xb4>
     e10:	00800204 	movi	r2,8
     e14:	10cbc83a 	sub	r5,r2,r3
     e18:	2169883a 	add	r20,r4,r5
     e1c:	003f9e06 	br	c98 <_malloc_r+0x460>
     e20:	00bffe04 	movi	r2,-8
     e24:	a93ffd04 	addi	r4,r21,-12
     e28:	2088703a 	and	r4,r4,r2
     e2c:	b10b883a 	add	r5,r22,r4
     e30:	00c00144 	movi	r3,5
     e34:	28c00215 	stw	r3,8(r5)
     e38:	28c00115 	stw	r3,4(r5)
     e3c:	b0800117 	ldw	r2,4(r22)
     e40:	1080004c 	andi	r2,r2,1
     e44:	2084b03a 	or	r2,r4,r2
     e48:	b0800115 	stw	r2,4(r22)
     e4c:	313fdd2e 	bgeu	r6,r4,dc4 <_malloc_r+0x58c>
     e50:	b1400204 	addi	r5,r22,8
     e54:	9009883a 	mov	r4,r18
     e58:	000504c0 	call	504c <_free_r>
     e5c:	e4000217 	ldw	r16,8(fp)
     e60:	003fd806 	br	dc4 <_malloc_r+0x58c>
     e64:	00800504 	movi	r2,20
     e68:	11001536 	bltu	r2,r4,ec0 <_malloc_r+0x688>
     e6c:	210016c4 	addi	r4,r4,91
     e70:	200690fa 	slli	r3,r4,3
     e74:	003fa606 	br	d10 <_malloc_r+0x4d8>
     e78:	8804d4ba 	srli	r2,r17,18
     e7c:	11801f04 	addi	r6,r2,124
     e80:	300490fa 	slli	r2,r6,3
     e84:	003e9906 	br	8ec <_malloc_r+0xb4>
     e88:	2009d0ba 	srai	r4,r4,2
     e8c:	01400074 	movhi	r5,1
     e90:	29752f04 	addi	r5,r5,-11076
     e94:	00c00044 	movi	r3,1
     e98:	28800117 	ldw	r2,4(r5)
     e9c:	1906983a 	sll	r3,r3,r4
     ea0:	10c4b03a 	or	r2,r2,r3
     ea4:	28800115 	stw	r2,4(r5)
     ea8:	003fa306 	br	d38 <_malloc_r+0x500>
     eac:	0027883a 	mov	r19,zero
     eb0:	00c00044 	movi	r3,1
     eb4:	003f8606 	br	cd0 <_malloc_r+0x498>
     eb8:	d1200115 	stw	r4,-32764(gp)
     ebc:	003f7306 	br	c8c <_malloc_r+0x454>
     ec0:	00801504 	movi	r2,84
     ec4:	11001936 	bltu	r2,r4,f2c <_malloc_r+0x6f4>
     ec8:	2804d33a 	srli	r2,r5,12
     ecc:	11001b84 	addi	r4,r2,110
     ed0:	200690fa 	slli	r3,r4,3
     ed4:	003f8e06 	br	d10 <_malloc_r+0x4d8>
     ed8:	480b883a 	mov	r5,r9
     edc:	6807883a 	mov	r3,r13
     ee0:	288000cc 	andi	r2,r5,3
     ee4:	18fffe04 	addi	r3,r3,-8
     ee8:	297fffc4 	addi	r5,r5,-1
     eec:	10001526 	beq	r2,zero,f44 <_malloc_r+0x70c>
     ef0:	18800217 	ldw	r2,8(r3)
     ef4:	10fffa26 	beq	r2,r3,ee0 <_malloc_r+0x6a8>
     ef8:	2109883a 	add	r4,r4,r4
     efc:	393f1e36 	bltu	r7,r4,b78 <_malloc_r+0x340>
     f00:	203f1d26 	beq	r4,zero,b78 <_malloc_r+0x340>
     f04:	21c4703a 	and	r2,r4,r7
     f08:	10000226 	beq	r2,zero,f14 <_malloc_r+0x6dc>
     f0c:	6013883a 	mov	r9,r12
     f10:	003ee106 	br	a98 <_malloc_r+0x260>
     f14:	2109883a 	add	r4,r4,r4
     f18:	3904703a 	and	r2,r7,r4
     f1c:	63000104 	addi	r12,r12,4
     f20:	103ffc26 	beq	r2,zero,f14 <_malloc_r+0x6dc>
     f24:	6013883a 	mov	r9,r12
     f28:	003edb06 	br	a98 <_malloc_r+0x260>
     f2c:	00805504 	movi	r2,340
     f30:	11000836 	bltu	r2,r4,f54 <_malloc_r+0x71c>
     f34:	2804d3fa 	srli	r2,r5,15
     f38:	11001dc4 	addi	r4,r2,119
     f3c:	200690fa 	slli	r3,r4,3
     f40:	003f7306 	br	d10 <_malloc_r+0x4d8>
     f44:	0104303a 	nor	r2,zero,r4
     f48:	388e703a 	and	r7,r7,r2
     f4c:	e1c00115 	stw	r7,4(fp)
     f50:	003fe906 	br	ef8 <_malloc_r+0x6c0>
     f54:	00815504 	movi	r2,1364
     f58:	1100032e 	bgeu	r2,r4,f68 <_malloc_r+0x730>
     f5c:	01001f84 	movi	r4,126
     f60:	00c0fc04 	movi	r3,1008
     f64:	003f6a06 	br	d10 <_malloc_r+0x4d8>
     f68:	2804d4ba 	srli	r2,r5,18
     f6c:	11001f04 	addi	r4,r2,124
     f70:	200690fa 	slli	r3,r4,3
     f74:	003f6606 	br	d10 <_malloc_r+0x4d8>

00000f78 <printf>:
     f78:	defffb04 	addi	sp,sp,-20
     f7c:	dfc00115 	stw	ra,4(sp)
     f80:	d9400215 	stw	r5,8(sp)
     f84:	d9800315 	stw	r6,12(sp)
     f88:	d9c00415 	stw	r7,16(sp)
     f8c:	00800074 	movhi	r2,1
     f90:	10bbb804 	addi	r2,r2,-4384
     f94:	10c00017 	ldw	r3,0(r2)
     f98:	200b883a 	mov	r5,r4
     f9c:	d8800204 	addi	r2,sp,8
     fa0:	19000217 	ldw	r4,8(r3)
     fa4:	100d883a 	mov	r6,r2
     fa8:	d8800015 	stw	r2,0(sp)
     fac:	00030a40 	call	30a4 <__vfprintf_internal>
     fb0:	dfc00117 	ldw	ra,4(sp)
     fb4:	dec00504 	addi	sp,sp,20
     fb8:	f800283a 	ret

00000fbc <_printf_r>:
     fbc:	defffc04 	addi	sp,sp,-16
     fc0:	dfc00115 	stw	ra,4(sp)
     fc4:	d9800215 	stw	r6,8(sp)
     fc8:	d9c00315 	stw	r7,12(sp)
     fcc:	280d883a 	mov	r6,r5
     fd0:	21400217 	ldw	r5,8(r4)
     fd4:	d8c00204 	addi	r3,sp,8
     fd8:	180f883a 	mov	r7,r3
     fdc:	d8c00015 	stw	r3,0(sp)
     fe0:	00011e00 	call	11e0 <___vfprintf_internal_r>
     fe4:	dfc00117 	ldw	ra,4(sp)
     fe8:	dec00404 	addi	sp,sp,16
     fec:	f800283a 	ret

00000ff0 <_puts_r>:
     ff0:	defff604 	addi	sp,sp,-40
     ff4:	dc400715 	stw	r17,28(sp)
     ff8:	2023883a 	mov	r17,r4
     ffc:	2809883a 	mov	r4,r5
    1000:	dfc00915 	stw	ra,36(sp)
    1004:	dcc00815 	stw	r19,32(sp)
    1008:	2827883a 	mov	r19,r5
    100c:	00011140 	call	1114 <strlen>
    1010:	89400217 	ldw	r5,8(r17)
    1014:	00c00074 	movhi	r3,1
    1018:	18f46004 	addi	r3,r3,-11904
    101c:	01c00044 	movi	r7,1
    1020:	12000044 	addi	r8,r2,1
    1024:	d8c00515 	stw	r3,20(sp)
    1028:	d9c00615 	stw	r7,24(sp)
    102c:	d8c00304 	addi	r3,sp,12
    1030:	01c00084 	movi	r7,2
    1034:	8809883a 	mov	r4,r17
    1038:	d80d883a 	mov	r6,sp
    103c:	d8c00015 	stw	r3,0(sp)
    1040:	dcc00315 	stw	r19,12(sp)
    1044:	da000215 	stw	r8,8(sp)
    1048:	d9c00115 	stw	r7,4(sp)
    104c:	d8800415 	stw	r2,16(sp)
    1050:	00053600 	call	5360 <__sfvwrite_r>
    1054:	00ffffc4 	movi	r3,-1
    1058:	10000626 	beq	r2,zero,1074 <_puts_r+0x84>
    105c:	1805883a 	mov	r2,r3
    1060:	dfc00917 	ldw	ra,36(sp)
    1064:	dcc00817 	ldw	r19,32(sp)
    1068:	dc400717 	ldw	r17,28(sp)
    106c:	dec00a04 	addi	sp,sp,40
    1070:	f800283a 	ret
    1074:	00c00284 	movi	r3,10
    1078:	1805883a 	mov	r2,r3
    107c:	dfc00917 	ldw	ra,36(sp)
    1080:	dcc00817 	ldw	r19,32(sp)
    1084:	dc400717 	ldw	r17,28(sp)
    1088:	dec00a04 	addi	sp,sp,40
    108c:	f800283a 	ret

00001090 <puts>:
    1090:	00800074 	movhi	r2,1
    1094:	10bbb804 	addi	r2,r2,-4384
    1098:	200b883a 	mov	r5,r4
    109c:	11000017 	ldw	r4,0(r2)
    10a0:	0000ff01 	jmpi	ff0 <_puts_r>

000010a4 <_sbrk_r>:
    10a4:	defffd04 	addi	sp,sp,-12
    10a8:	dc000015 	stw	r16,0(sp)
    10ac:	04000074 	movhi	r16,1
    10b0:	84026304 	addi	r16,r16,2444
    10b4:	dc400115 	stw	r17,4(sp)
    10b8:	80000015 	stw	zero,0(r16)
    10bc:	2023883a 	mov	r17,r4
    10c0:	2809883a 	mov	r4,r5
    10c4:	dfc00215 	stw	ra,8(sp)
    10c8:	000addc0 	call	addc <sbrk>
    10cc:	1007883a 	mov	r3,r2
    10d0:	00bfffc4 	movi	r2,-1
    10d4:	18800626 	beq	r3,r2,10f0 <_sbrk_r+0x4c>
    10d8:	1805883a 	mov	r2,r3
    10dc:	dfc00217 	ldw	ra,8(sp)
    10e0:	dc400117 	ldw	r17,4(sp)
    10e4:	dc000017 	ldw	r16,0(sp)
    10e8:	dec00304 	addi	sp,sp,12
    10ec:	f800283a 	ret
    10f0:	80800017 	ldw	r2,0(r16)
    10f4:	103ff826 	beq	r2,zero,10d8 <_sbrk_r+0x34>
    10f8:	88800015 	stw	r2,0(r17)
    10fc:	1805883a 	mov	r2,r3
    1100:	dfc00217 	ldw	ra,8(sp)
    1104:	dc400117 	ldw	r17,4(sp)
    1108:	dc000017 	ldw	r16,0(sp)
    110c:	dec00304 	addi	sp,sp,12
    1110:	f800283a 	ret

00001114 <strlen>:
    1114:	208000cc 	andi	r2,r4,3
    1118:	2011883a 	mov	r8,r4
    111c:	1000161e 	bne	r2,zero,1178 <strlen+0x64>
    1120:	20c00017 	ldw	r3,0(r4)
    1124:	017fbff4 	movhi	r5,65279
    1128:	297fbfc4 	addi	r5,r5,-257
    112c:	01e02074 	movhi	r7,32897
    1130:	39e02004 	addi	r7,r7,-32640
    1134:	1945883a 	add	r2,r3,r5
    1138:	11c4703a 	and	r2,r2,r7
    113c:	00c6303a 	nor	r3,zero,r3
    1140:	1886703a 	and	r3,r3,r2
    1144:	18000c1e 	bne	r3,zero,1178 <strlen+0x64>
    1148:	280d883a 	mov	r6,r5
    114c:	380b883a 	mov	r5,r7
    1150:	21000104 	addi	r4,r4,4
    1154:	20800017 	ldw	r2,0(r4)
    1158:	1187883a 	add	r3,r2,r6
    115c:	1946703a 	and	r3,r3,r5
    1160:	0084303a 	nor	r2,zero,r2
    1164:	10c4703a 	and	r2,r2,r3
    1168:	103ff926 	beq	r2,zero,1150 <strlen+0x3c>
    116c:	20800007 	ldb	r2,0(r4)
    1170:	10000326 	beq	r2,zero,1180 <strlen+0x6c>
    1174:	21000044 	addi	r4,r4,1
    1178:	20800007 	ldb	r2,0(r4)
    117c:	103ffd1e 	bne	r2,zero,1174 <strlen+0x60>
    1180:	2205c83a 	sub	r2,r4,r8
    1184:	f800283a 	ret

00001188 <__sprint_r>:
    1188:	30800217 	ldw	r2,8(r6)
    118c:	defffe04 	addi	sp,sp,-8
    1190:	dc000015 	stw	r16,0(sp)
    1194:	dfc00115 	stw	ra,4(sp)
    1198:	3021883a 	mov	r16,r6
    119c:	0007883a 	mov	r3,zero
    11a0:	1000061e 	bne	r2,zero,11bc <__sprint_r+0x34>
    11a4:	1805883a 	mov	r2,r3
    11a8:	30000115 	stw	zero,4(r6)
    11ac:	dfc00117 	ldw	ra,4(sp)
    11b0:	dc000017 	ldw	r16,0(sp)
    11b4:	dec00204 	addi	sp,sp,8
    11b8:	f800283a 	ret
    11bc:	00053600 	call	5360 <__sfvwrite_r>
    11c0:	1007883a 	mov	r3,r2
    11c4:	1805883a 	mov	r2,r3
    11c8:	80000115 	stw	zero,4(r16)
    11cc:	80000215 	stw	zero,8(r16)
    11d0:	dfc00117 	ldw	ra,4(sp)
    11d4:	dc000017 	ldw	r16,0(sp)
    11d8:	dec00204 	addi	sp,sp,8
    11dc:	f800283a 	ret

000011e0 <___vfprintf_internal_r>:
    11e0:	defea404 	addi	sp,sp,-1392
    11e4:	dd815815 	stw	r22,1376(sp)
    11e8:	dc015215 	stw	r16,1352(sp)
    11ec:	d9c15115 	stw	r7,1348(sp)
    11f0:	dfc15b15 	stw	ra,1388(sp)
    11f4:	df015a15 	stw	fp,1384(sp)
    11f8:	ddc15915 	stw	r23,1380(sp)
    11fc:	dd415715 	stw	r21,1372(sp)
    1200:	dd015615 	stw	r20,1368(sp)
    1204:	dcc15515 	stw	r19,1364(sp)
    1208:	dc815415 	stw	r18,1360(sp)
    120c:	dc415315 	stw	r17,1356(sp)
    1210:	282d883a 	mov	r22,r5
    1214:	3021883a 	mov	r16,r6
    1218:	d9014f15 	stw	r4,1340(sp)
    121c:	00059840 	call	5984 <_localeconv_r>
    1220:	10800017 	ldw	r2,0(r2)
    1224:	d9c15117 	ldw	r7,1348(sp)
    1228:	d8814915 	stw	r2,1316(sp)
    122c:	d8814f17 	ldw	r2,1340(sp)
    1230:	10000226 	beq	r2,zero,123c <___vfprintf_internal_r+0x5c>
    1234:	10800e17 	ldw	r2,56(r2)
    1238:	10020d26 	beq	r2,zero,1a70 <___vfprintf_internal_r+0x890>
    123c:	b080030b 	ldhu	r2,12(r22)
    1240:	1080020c 	andi	r2,r2,8
    1244:	10020e26 	beq	r2,zero,1a80 <___vfprintf_internal_r+0x8a0>
    1248:	b0800417 	ldw	r2,16(r22)
    124c:	10020c26 	beq	r2,zero,1a80 <___vfprintf_internal_r+0x8a0>
    1250:	b200030b 	ldhu	r8,12(r22)
    1254:	00800284 	movi	r2,10
    1258:	40c0068c 	andi	r3,r8,26
    125c:	18802f1e 	bne	r3,r2,131c <___vfprintf_internal_r+0x13c>
    1260:	b080038f 	ldh	r2,14(r22)
    1264:	10002d16 	blt	r2,zero,131c <___vfprintf_internal_r+0x13c>
    1268:	b240038b 	ldhu	r9,14(r22)
    126c:	b2800717 	ldw	r10,28(r22)
    1270:	b2c00917 	ldw	r11,36(r22)
    1274:	d9014f17 	ldw	r4,1340(sp)
    1278:	dc402904 	addi	r17,sp,164
    127c:	d8804004 	addi	r2,sp,256
    1280:	00c10004 	movi	r3,1024
    1284:	423fff4c 	andi	r8,r8,65533
    1288:	800d883a 	mov	r6,r16
    128c:	880b883a 	mov	r5,r17
    1290:	da002c0d 	sth	r8,176(sp)
    1294:	da402c8d 	sth	r9,178(sp)
    1298:	da803015 	stw	r10,192(sp)
    129c:	dac03215 	stw	r11,200(sp)
    12a0:	d8802d15 	stw	r2,180(sp)
    12a4:	d8c02e15 	stw	r3,184(sp)
    12a8:	d8802915 	stw	r2,164(sp)
    12ac:	d8c02b15 	stw	r3,172(sp)
    12b0:	d8002f15 	stw	zero,188(sp)
    12b4:	00011e00 	call	11e0 <___vfprintf_internal_r>
    12b8:	d8814b15 	stw	r2,1324(sp)
    12bc:	10000416 	blt	r2,zero,12d0 <___vfprintf_internal_r+0xf0>
    12c0:	d9014f17 	ldw	r4,1340(sp)
    12c4:	880b883a 	mov	r5,r17
    12c8:	00049fc0 	call	49fc <_fflush_r>
    12cc:	1002321e 	bne	r2,zero,1b98 <___vfprintf_internal_r+0x9b8>
    12d0:	d8802c0b 	ldhu	r2,176(sp)
    12d4:	1080100c 	andi	r2,r2,64
    12d8:	10000326 	beq	r2,zero,12e8 <___vfprintf_internal_r+0x108>
    12dc:	b080030b 	ldhu	r2,12(r22)
    12e0:	10801014 	ori	r2,r2,64
    12e4:	b080030d 	sth	r2,12(r22)
    12e8:	d8814b17 	ldw	r2,1324(sp)
    12ec:	dfc15b17 	ldw	ra,1388(sp)
    12f0:	df015a17 	ldw	fp,1384(sp)
    12f4:	ddc15917 	ldw	r23,1380(sp)
    12f8:	dd815817 	ldw	r22,1376(sp)
    12fc:	dd415717 	ldw	r21,1372(sp)
    1300:	dd015617 	ldw	r20,1368(sp)
    1304:	dcc15517 	ldw	r19,1364(sp)
    1308:	dc815417 	ldw	r18,1360(sp)
    130c:	dc415317 	ldw	r17,1356(sp)
    1310:	dc015217 	ldw	r16,1352(sp)
    1314:	dec15c04 	addi	sp,sp,1392
    1318:	f800283a 	ret
    131c:	0005883a 	mov	r2,zero
    1320:	0007883a 	mov	r3,zero
    1324:	dd401904 	addi	r21,sp,100
    1328:	d8814215 	stw	r2,1288(sp)
    132c:	802f883a 	mov	r23,r16
    1330:	d8c14315 	stw	r3,1292(sp)
    1334:	d8014b15 	stw	zero,1324(sp)
    1338:	d8014815 	stw	zero,1312(sp)
    133c:	d8014415 	stw	zero,1296(sp)
    1340:	d8014715 	stw	zero,1308(sp)
    1344:	dd400c15 	stw	r21,48(sp)
    1348:	d8000e15 	stw	zero,56(sp)
    134c:	d8000d15 	stw	zero,52(sp)
    1350:	b8800007 	ldb	r2,0(r23)
    1354:	10001926 	beq	r2,zero,13bc <___vfprintf_internal_r+0x1dc>
    1358:	00c00944 	movi	r3,37
    135c:	10c01726 	beq	r2,r3,13bc <___vfprintf_internal_r+0x1dc>
    1360:	b821883a 	mov	r16,r23
    1364:	00000106 	br	136c <___vfprintf_internal_r+0x18c>
    1368:	10c00326 	beq	r2,r3,1378 <___vfprintf_internal_r+0x198>
    136c:	84000044 	addi	r16,r16,1
    1370:	80800007 	ldb	r2,0(r16)
    1374:	103ffc1e 	bne	r2,zero,1368 <___vfprintf_internal_r+0x188>
    1378:	85e7c83a 	sub	r19,r16,r23
    137c:	98000e26 	beq	r19,zero,13b8 <___vfprintf_internal_r+0x1d8>
    1380:	dc800e17 	ldw	r18,56(sp)
    1384:	dc400d17 	ldw	r17,52(sp)
    1388:	008001c4 	movi	r2,7
    138c:	94e5883a 	add	r18,r18,r19
    1390:	8c400044 	addi	r17,r17,1
    1394:	adc00015 	stw	r23,0(r21)
    1398:	dc800e15 	stw	r18,56(sp)
    139c:	acc00115 	stw	r19,4(r21)
    13a0:	dc400d15 	stw	r17,52(sp)
    13a4:	14428b16 	blt	r2,r17,1dd4 <___vfprintf_internal_r+0xbf4>
    13a8:	ad400204 	addi	r21,r21,8
    13ac:	d9014b17 	ldw	r4,1324(sp)
    13b0:	24c9883a 	add	r4,r4,r19
    13b4:	d9014b15 	stw	r4,1324(sp)
    13b8:	802f883a 	mov	r23,r16
    13bc:	b8800007 	ldb	r2,0(r23)
    13c0:	10013c26 	beq	r2,zero,18b4 <___vfprintf_internal_r+0x6d4>
    13c4:	bdc00044 	addi	r23,r23,1
    13c8:	d8000405 	stb	zero,16(sp)
    13cc:	b8c00007 	ldb	r3,0(r23)
    13d0:	04ffffc4 	movi	r19,-1
    13d4:	d8014c15 	stw	zero,1328(sp)
    13d8:	d8014a15 	stw	zero,1320(sp)
    13dc:	d8c14d15 	stw	r3,1332(sp)
    13e0:	bdc00044 	addi	r23,r23,1
    13e4:	d9414d17 	ldw	r5,1332(sp)
    13e8:	00801604 	movi	r2,88
    13ec:	28fff804 	addi	r3,r5,-32
    13f0:	10c06036 	bltu	r2,r3,1574 <___vfprintf_internal_r+0x394>
    13f4:	18c5883a 	add	r2,r3,r3
    13f8:	1085883a 	add	r2,r2,r2
    13fc:	00c00034 	movhi	r3,0
    1400:	18c50404 	addi	r3,r3,5136
    1404:	10c5883a 	add	r2,r2,r3
    1408:	11000017 	ldw	r4,0(r2)
    140c:	2000683a 	jmp	r4
    1410:	00002384 	movi	zero,142
    1414:	00001574 	movhi	zero,85
    1418:	00001574 	movhi	zero,85
    141c:	00002370 	cmpltui	zero,zero,141
    1420:	00001574 	movhi	zero,85
    1424:	00001574 	movhi	zero,85
    1428:	00001574 	movhi	zero,85
    142c:	00001574 	movhi	zero,85
    1430:	00001574 	movhi	zero,85
    1434:	00001574 	movhi	zero,85
    1438:	00002150 	cmplti	zero,zero,133
    143c:	00002360 	cmpeqi	zero,zero,141
    1440:	00001574 	movhi	zero,85
    1444:	00002168 	cmpgeui	zero,zero,133
    1448:	00002408 	cmpgei	zero,zero,144
    144c:	00001574 	movhi	zero,85
    1450:	000023f4 	movhi	zero,143
    1454:	000023b0 	cmpltui	zero,zero,142
    1458:	000023b0 	cmpltui	zero,zero,142
    145c:	000023b0 	cmpltui	zero,zero,142
    1460:	000023b0 	cmpltui	zero,zero,142
    1464:	000023b0 	cmpltui	zero,zero,142
    1468:	000023b0 	cmpltui	zero,zero,142
    146c:	000023b0 	cmpltui	zero,zero,142
    1470:	000023b0 	cmpltui	zero,zero,142
    1474:	000023b0 	cmpltui	zero,zero,142
    1478:	00001574 	movhi	zero,85
    147c:	00001574 	movhi	zero,85
    1480:	00001574 	movhi	zero,85
    1484:	00001574 	movhi	zero,85
    1488:	00001574 	movhi	zero,85
    148c:	00001574 	movhi	zero,85
    1490:	00001574 	movhi	zero,85
    1494:	00001574 	movhi	zero,85
    1498:	00001574 	movhi	zero,85
    149c:	00001574 	movhi	zero,85
    14a0:	00001bcc 	andi	zero,zero,111
    14a4:	00002238 	rdprs	zero,zero,136
    14a8:	00001574 	movhi	zero,85
    14ac:	00002238 	rdprs	zero,zero,136
    14b0:	00001574 	movhi	zero,85
    14b4:	00001574 	movhi	zero,85
    14b8:	00001574 	movhi	zero,85
    14bc:	00001574 	movhi	zero,85
    14c0:	0000239c 	xori	zero,zero,142
    14c4:	00001574 	movhi	zero,85
    14c8:	00001574 	movhi	zero,85
    14cc:	00001c80 	call	1c8 <_start>
    14d0:	00001574 	movhi	zero,85
    14d4:	00001574 	movhi	zero,85
    14d8:	00001574 	movhi	zero,85
    14dc:	00001574 	movhi	zero,85
    14e0:	00001574 	movhi	zero,85
    14e4:	00001ccc 	andi	zero,zero,115
    14e8:	00001574 	movhi	zero,85
    14ec:	00001574 	movhi	zero,85
    14f0:	000022ec 	andhi	zero,zero,139
    14f4:	00001574 	movhi	zero,85
    14f8:	00001574 	movhi	zero,85
    14fc:	00001574 	movhi	zero,85
    1500:	00001574 	movhi	zero,85
    1504:	00001574 	movhi	zero,85
    1508:	00001574 	movhi	zero,85
    150c:	00001574 	movhi	zero,85
    1510:	00001574 	movhi	zero,85
    1514:	00001574 	movhi	zero,85
    1518:	00001574 	movhi	zero,85
    151c:	000022c0 	call	22c <my_interrupt_handler+0x28>
    1520:	00001bd8 	cmpnei	zero,zero,111
    1524:	00002238 	rdprs	zero,zero,136
    1528:	00002238 	rdprs	zero,zero,136
    152c:	00002238 	rdprs	zero,zero,136
    1530:	00002224 	muli	zero,zero,136
    1534:	00001bd8 	cmpnei	zero,zero,111
    1538:	00001574 	movhi	zero,85
    153c:	00001574 	movhi	zero,85
    1540:	000021ac 	andhi	zero,zero,134
    1544:	00001574 	movhi	zero,85
    1548:	0000217c 	xorhi	zero,zero,133
    154c:	00001c8c 	andi	zero,zero,114
    1550:	000021dc 	xori	zero,zero,135
    1554:	000021c8 	cmpgei	zero,zero,135
    1558:	00001574 	movhi	zero,85
    155c:	00002470 	cmpltui	zero,zero,145
    1560:	00001574 	movhi	zero,85
    1564:	00001cd8 	cmpnei	zero,zero,115
    1568:	00001574 	movhi	zero,85
    156c:	00001574 	movhi	zero,85
    1570:	00002350 	cmplti	zero,zero,141
    1574:	d9014d17 	ldw	r4,1332(sp)
    1578:	2000ce26 	beq	r4,zero,18b4 <___vfprintf_internal_r+0x6d4>
    157c:	01400044 	movi	r5,1
    1580:	d9800f04 	addi	r6,sp,60
    1584:	d9c14015 	stw	r7,1280(sp)
    1588:	d9414515 	stw	r5,1300(sp)
    158c:	d9814115 	stw	r6,1284(sp)
    1590:	280f883a 	mov	r7,r5
    1594:	d9000f05 	stb	r4,60(sp)
    1598:	d8000405 	stb	zero,16(sp)
    159c:	d8014615 	stw	zero,1304(sp)
    15a0:	d8c14c17 	ldw	r3,1328(sp)
    15a4:	1880008c 	andi	r2,r3,2
    15a8:	1005003a 	cmpeq	r2,r2,zero
    15ac:	d8815015 	stw	r2,1344(sp)
    15b0:	1000031e 	bne	r2,zero,15c0 <___vfprintf_internal_r+0x3e0>
    15b4:	d9014517 	ldw	r4,1300(sp)
    15b8:	21000084 	addi	r4,r4,2
    15bc:	d9014515 	stw	r4,1300(sp)
    15c0:	d9414c17 	ldw	r5,1328(sp)
    15c4:	2940210c 	andi	r5,r5,132
    15c8:	d9414e15 	stw	r5,1336(sp)
    15cc:	28002d1e 	bne	r5,zero,1684 <___vfprintf_internal_r+0x4a4>
    15d0:	d9814a17 	ldw	r6,1320(sp)
    15d4:	d8814517 	ldw	r2,1300(sp)
    15d8:	30a1c83a 	sub	r16,r6,r2
    15dc:	0400290e 	bge	zero,r16,1684 <___vfprintf_internal_r+0x4a4>
    15e0:	00800404 	movi	r2,16
    15e4:	14045e0e 	bge	r2,r16,2760 <___vfprintf_internal_r+0x1580>
    15e8:	dc800e17 	ldw	r18,56(sp)
    15ec:	dc400d17 	ldw	r17,52(sp)
    15f0:	1027883a 	mov	r19,r2
    15f4:	07000074 	movhi	fp,1
    15f8:	e7347c84 	addi	fp,fp,-11790
    15fc:	050001c4 	movi	r20,7
    1600:	00000306 	br	1610 <___vfprintf_internal_r+0x430>
    1604:	843ffc04 	addi	r16,r16,-16
    1608:	ad400204 	addi	r21,r21,8
    160c:	9c00130e 	bge	r19,r16,165c <___vfprintf_internal_r+0x47c>
    1610:	94800404 	addi	r18,r18,16
    1614:	8c400044 	addi	r17,r17,1
    1618:	af000015 	stw	fp,0(r21)
    161c:	acc00115 	stw	r19,4(r21)
    1620:	dc800e15 	stw	r18,56(sp)
    1624:	dc400d15 	stw	r17,52(sp)
    1628:	a47ff60e 	bge	r20,r17,1604 <___vfprintf_internal_r+0x424>
    162c:	d9014f17 	ldw	r4,1340(sp)
    1630:	b00b883a 	mov	r5,r22
    1634:	d9800c04 	addi	r6,sp,48
    1638:	d9c15115 	stw	r7,1348(sp)
    163c:	00011880 	call	1188 <__sprint_r>
    1640:	d9c15117 	ldw	r7,1348(sp)
    1644:	10009e1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1648:	843ffc04 	addi	r16,r16,-16
    164c:	dc800e17 	ldw	r18,56(sp)
    1650:	dc400d17 	ldw	r17,52(sp)
    1654:	dd401904 	addi	r21,sp,100
    1658:	9c3fed16 	blt	r19,r16,1610 <___vfprintf_internal_r+0x430>
    165c:	9425883a 	add	r18,r18,r16
    1660:	8c400044 	addi	r17,r17,1
    1664:	008001c4 	movi	r2,7
    1668:	af000015 	stw	fp,0(r21)
    166c:	ac000115 	stw	r16,4(r21)
    1670:	dc800e15 	stw	r18,56(sp)
    1674:	dc400d15 	stw	r17,52(sp)
    1678:	1441f516 	blt	r2,r17,1e50 <___vfprintf_internal_r+0xc70>
    167c:	ad400204 	addi	r21,r21,8
    1680:	00000206 	br	168c <___vfprintf_internal_r+0x4ac>
    1684:	dc800e17 	ldw	r18,56(sp)
    1688:	dc400d17 	ldw	r17,52(sp)
    168c:	d8800407 	ldb	r2,16(sp)
    1690:	10000b26 	beq	r2,zero,16c0 <___vfprintf_internal_r+0x4e0>
    1694:	00800044 	movi	r2,1
    1698:	94800044 	addi	r18,r18,1
    169c:	8c400044 	addi	r17,r17,1
    16a0:	a8800115 	stw	r2,4(r21)
    16a4:	d8c00404 	addi	r3,sp,16
    16a8:	008001c4 	movi	r2,7
    16ac:	a8c00015 	stw	r3,0(r21)
    16b0:	dc800e15 	stw	r18,56(sp)
    16b4:	dc400d15 	stw	r17,52(sp)
    16b8:	1441da16 	blt	r2,r17,1e24 <___vfprintf_internal_r+0xc44>
    16bc:	ad400204 	addi	r21,r21,8
    16c0:	d9015017 	ldw	r4,1344(sp)
    16c4:	20000b1e 	bne	r4,zero,16f4 <___vfprintf_internal_r+0x514>
    16c8:	d8800444 	addi	r2,sp,17
    16cc:	94800084 	addi	r18,r18,2
    16d0:	8c400044 	addi	r17,r17,1
    16d4:	a8800015 	stw	r2,0(r21)
    16d8:	00c00084 	movi	r3,2
    16dc:	008001c4 	movi	r2,7
    16e0:	a8c00115 	stw	r3,4(r21)
    16e4:	dc800e15 	stw	r18,56(sp)
    16e8:	dc400d15 	stw	r17,52(sp)
    16ec:	1441c216 	blt	r2,r17,1df8 <___vfprintf_internal_r+0xc18>
    16f0:	ad400204 	addi	r21,r21,8
    16f4:	d9414e17 	ldw	r5,1336(sp)
    16f8:	00802004 	movi	r2,128
    16fc:	2880b126 	beq	r5,r2,19c4 <___vfprintf_internal_r+0x7e4>
    1700:	d8c14617 	ldw	r3,1304(sp)
    1704:	19e1c83a 	sub	r16,r3,r7
    1708:	0400260e 	bge	zero,r16,17a4 <___vfprintf_internal_r+0x5c4>
    170c:	00800404 	movi	r2,16
    1710:	1403cf0e 	bge	r2,r16,2650 <___vfprintf_internal_r+0x1470>
    1714:	1027883a 	mov	r19,r2
    1718:	07000074 	movhi	fp,1
    171c:	e7347884 	addi	fp,fp,-11806
    1720:	050001c4 	movi	r20,7
    1724:	00000306 	br	1734 <___vfprintf_internal_r+0x554>
    1728:	843ffc04 	addi	r16,r16,-16
    172c:	ad400204 	addi	r21,r21,8
    1730:	9c00130e 	bge	r19,r16,1780 <___vfprintf_internal_r+0x5a0>
    1734:	94800404 	addi	r18,r18,16
    1738:	8c400044 	addi	r17,r17,1
    173c:	af000015 	stw	fp,0(r21)
    1740:	acc00115 	stw	r19,4(r21)
    1744:	dc800e15 	stw	r18,56(sp)
    1748:	dc400d15 	stw	r17,52(sp)
    174c:	a47ff60e 	bge	r20,r17,1728 <___vfprintf_internal_r+0x548>
    1750:	d9014f17 	ldw	r4,1340(sp)
    1754:	b00b883a 	mov	r5,r22
    1758:	d9800c04 	addi	r6,sp,48
    175c:	d9c15115 	stw	r7,1348(sp)
    1760:	00011880 	call	1188 <__sprint_r>
    1764:	d9c15117 	ldw	r7,1348(sp)
    1768:	1000551e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    176c:	843ffc04 	addi	r16,r16,-16
    1770:	dc800e17 	ldw	r18,56(sp)
    1774:	dc400d17 	ldw	r17,52(sp)
    1778:	dd401904 	addi	r21,sp,100
    177c:	9c3fed16 	blt	r19,r16,1734 <___vfprintf_internal_r+0x554>
    1780:	9425883a 	add	r18,r18,r16
    1784:	8c400044 	addi	r17,r17,1
    1788:	008001c4 	movi	r2,7
    178c:	af000015 	stw	fp,0(r21)
    1790:	ac000115 	stw	r16,4(r21)
    1794:	dc800e15 	stw	r18,56(sp)
    1798:	dc400d15 	stw	r17,52(sp)
    179c:	14418216 	blt	r2,r17,1da8 <___vfprintf_internal_r+0xbc8>
    17a0:	ad400204 	addi	r21,r21,8
    17a4:	d9014c17 	ldw	r4,1328(sp)
    17a8:	2080400c 	andi	r2,r4,256
    17ac:	10004a1e 	bne	r2,zero,18d8 <___vfprintf_internal_r+0x6f8>
    17b0:	d9414117 	ldw	r5,1284(sp)
    17b4:	91e5883a 	add	r18,r18,r7
    17b8:	8c400044 	addi	r17,r17,1
    17bc:	008001c4 	movi	r2,7
    17c0:	a9400015 	stw	r5,0(r21)
    17c4:	a9c00115 	stw	r7,4(r21)
    17c8:	dc800e15 	stw	r18,56(sp)
    17cc:	dc400d15 	stw	r17,52(sp)
    17d0:	14416716 	blt	r2,r17,1d70 <___vfprintf_internal_r+0xb90>
    17d4:	a8c00204 	addi	r3,r21,8
    17d8:	d9814c17 	ldw	r6,1328(sp)
    17dc:	3080010c 	andi	r2,r6,4
    17e0:	10002826 	beq	r2,zero,1884 <___vfprintf_internal_r+0x6a4>
    17e4:	d8814a17 	ldw	r2,1320(sp)
    17e8:	d9014517 	ldw	r4,1300(sp)
    17ec:	1121c83a 	sub	r16,r2,r4
    17f0:	0400240e 	bge	zero,r16,1884 <___vfprintf_internal_r+0x6a4>
    17f4:	00800404 	movi	r2,16
    17f8:	1404550e 	bge	r2,r16,2950 <___vfprintf_internal_r+0x1770>
    17fc:	dc400d17 	ldw	r17,52(sp)
    1800:	1027883a 	mov	r19,r2
    1804:	07000074 	movhi	fp,1
    1808:	e7347c84 	addi	fp,fp,-11790
    180c:	050001c4 	movi	r20,7
    1810:	00000306 	br	1820 <___vfprintf_internal_r+0x640>
    1814:	843ffc04 	addi	r16,r16,-16
    1818:	18c00204 	addi	r3,r3,8
    181c:	9c00110e 	bge	r19,r16,1864 <___vfprintf_internal_r+0x684>
    1820:	94800404 	addi	r18,r18,16
    1824:	8c400044 	addi	r17,r17,1
    1828:	1f000015 	stw	fp,0(r3)
    182c:	1cc00115 	stw	r19,4(r3)
    1830:	dc800e15 	stw	r18,56(sp)
    1834:	dc400d15 	stw	r17,52(sp)
    1838:	a47ff60e 	bge	r20,r17,1814 <___vfprintf_internal_r+0x634>
    183c:	d9014f17 	ldw	r4,1340(sp)
    1840:	b00b883a 	mov	r5,r22
    1844:	d9800c04 	addi	r6,sp,48
    1848:	00011880 	call	1188 <__sprint_r>
    184c:	10001c1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1850:	843ffc04 	addi	r16,r16,-16
    1854:	dc800e17 	ldw	r18,56(sp)
    1858:	dc400d17 	ldw	r17,52(sp)
    185c:	d8c01904 	addi	r3,sp,100
    1860:	9c3fef16 	blt	r19,r16,1820 <___vfprintf_internal_r+0x640>
    1864:	9425883a 	add	r18,r18,r16
    1868:	8c400044 	addi	r17,r17,1
    186c:	008001c4 	movi	r2,7
    1870:	1f000015 	stw	fp,0(r3)
    1874:	1c000115 	stw	r16,4(r3)
    1878:	dc800e15 	stw	r18,56(sp)
    187c:	dc400d15 	stw	r17,52(sp)
    1880:	1440cb16 	blt	r2,r17,1bb0 <___vfprintf_internal_r+0x9d0>
    1884:	d8814a17 	ldw	r2,1320(sp)
    1888:	d9414517 	ldw	r5,1300(sp)
    188c:	1140010e 	bge	r2,r5,1894 <___vfprintf_internal_r+0x6b4>
    1890:	2805883a 	mov	r2,r5
    1894:	d9814b17 	ldw	r6,1324(sp)
    1898:	308d883a 	add	r6,r6,r2
    189c:	d9814b15 	stw	r6,1324(sp)
    18a0:	90013b1e 	bne	r18,zero,1d90 <___vfprintf_internal_r+0xbb0>
    18a4:	d9c14017 	ldw	r7,1280(sp)
    18a8:	dd401904 	addi	r21,sp,100
    18ac:	d8000d15 	stw	zero,52(sp)
    18b0:	003ea706 	br	1350 <___vfprintf_internal_r+0x170>
    18b4:	d8800e17 	ldw	r2,56(sp)
    18b8:	1005451e 	bne	r2,zero,2dd0 <___vfprintf_internal_r+0x1bf0>
    18bc:	d8000d15 	stw	zero,52(sp)
    18c0:	b080030b 	ldhu	r2,12(r22)
    18c4:	1080100c 	andi	r2,r2,64
    18c8:	103e8726 	beq	r2,zero,12e8 <___vfprintf_internal_r+0x108>
    18cc:	00bfffc4 	movi	r2,-1
    18d0:	d8814b15 	stw	r2,1324(sp)
    18d4:	003e8406 	br	12e8 <___vfprintf_internal_r+0x108>
    18d8:	d9814d17 	ldw	r6,1332(sp)
    18dc:	00801944 	movi	r2,101
    18e0:	11806e16 	blt	r2,r6,1a9c <___vfprintf_internal_r+0x8bc>
    18e4:	d9414717 	ldw	r5,1308(sp)
    18e8:	00c00044 	movi	r3,1
    18ec:	1943490e 	bge	r3,r5,2614 <___vfprintf_internal_r+0x1434>
    18f0:	d8814117 	ldw	r2,1284(sp)
    18f4:	94800044 	addi	r18,r18,1
    18f8:	8c400044 	addi	r17,r17,1
    18fc:	a8800015 	stw	r2,0(r21)
    1900:	008001c4 	movi	r2,7
    1904:	a8c00115 	stw	r3,4(r21)
    1908:	dc800e15 	stw	r18,56(sp)
    190c:	dc400d15 	stw	r17,52(sp)
    1910:	1441ca16 	blt	r2,r17,203c <___vfprintf_internal_r+0xe5c>
    1914:	a8c00204 	addi	r3,r21,8
    1918:	d9014917 	ldw	r4,1316(sp)
    191c:	00800044 	movi	r2,1
    1920:	94800044 	addi	r18,r18,1
    1924:	8c400044 	addi	r17,r17,1
    1928:	18800115 	stw	r2,4(r3)
    192c:	008001c4 	movi	r2,7
    1930:	19000015 	stw	r4,0(r3)
    1934:	dc800e15 	stw	r18,56(sp)
    1938:	dc400d15 	stw	r17,52(sp)
    193c:	1441b616 	blt	r2,r17,2018 <___vfprintf_internal_r+0xe38>
    1940:	1cc00204 	addi	r19,r3,8
    1944:	d9014217 	ldw	r4,1288(sp)
    1948:	d9414317 	ldw	r5,1292(sp)
    194c:	000d883a 	mov	r6,zero
    1950:	000f883a 	mov	r7,zero
    1954:	00094e40 	call	94e4 <__nedf2>
    1958:	10017426 	beq	r2,zero,1f2c <___vfprintf_internal_r+0xd4c>
    195c:	d9414717 	ldw	r5,1308(sp)
    1960:	d9814117 	ldw	r6,1284(sp)
    1964:	8c400044 	addi	r17,r17,1
    1968:	2c85883a 	add	r2,r5,r18
    196c:	14bfffc4 	addi	r18,r2,-1
    1970:	28bfffc4 	addi	r2,r5,-1
    1974:	30c00044 	addi	r3,r6,1
    1978:	98800115 	stw	r2,4(r19)
    197c:	008001c4 	movi	r2,7
    1980:	98c00015 	stw	r3,0(r19)
    1984:	dc800e15 	stw	r18,56(sp)
    1988:	dc400d15 	stw	r17,52(sp)
    198c:	14418e16 	blt	r2,r17,1fc8 <___vfprintf_internal_r+0xde8>
    1990:	9cc00204 	addi	r19,r19,8
    1994:	d9414817 	ldw	r5,1312(sp)
    1998:	d8800804 	addi	r2,sp,32
    199c:	8c400044 	addi	r17,r17,1
    19a0:	9165883a 	add	r18,r18,r5
    19a4:	98800015 	stw	r2,0(r19)
    19a8:	008001c4 	movi	r2,7
    19ac:	99400115 	stw	r5,4(r19)
    19b0:	dc800e15 	stw	r18,56(sp)
    19b4:	dc400d15 	stw	r17,52(sp)
    19b8:	1440ed16 	blt	r2,r17,1d70 <___vfprintf_internal_r+0xb90>
    19bc:	98c00204 	addi	r3,r19,8
    19c0:	003f8506 	br	17d8 <___vfprintf_internal_r+0x5f8>
    19c4:	d9814a17 	ldw	r6,1320(sp)
    19c8:	d8814517 	ldw	r2,1300(sp)
    19cc:	30a1c83a 	sub	r16,r6,r2
    19d0:	043f4b0e 	bge	zero,r16,1700 <___vfprintf_internal_r+0x520>
    19d4:	00800404 	movi	r2,16
    19d8:	14043a0e 	bge	r2,r16,2ac4 <___vfprintf_internal_r+0x18e4>
    19dc:	1027883a 	mov	r19,r2
    19e0:	07000074 	movhi	fp,1
    19e4:	e7347884 	addi	fp,fp,-11806
    19e8:	050001c4 	movi	r20,7
    19ec:	00000306 	br	19fc <___vfprintf_internal_r+0x81c>
    19f0:	843ffc04 	addi	r16,r16,-16
    19f4:	ad400204 	addi	r21,r21,8
    19f8:	9c00130e 	bge	r19,r16,1a48 <___vfprintf_internal_r+0x868>
    19fc:	94800404 	addi	r18,r18,16
    1a00:	8c400044 	addi	r17,r17,1
    1a04:	af000015 	stw	fp,0(r21)
    1a08:	acc00115 	stw	r19,4(r21)
    1a0c:	dc800e15 	stw	r18,56(sp)
    1a10:	dc400d15 	stw	r17,52(sp)
    1a14:	a47ff60e 	bge	r20,r17,19f0 <___vfprintf_internal_r+0x810>
    1a18:	d9014f17 	ldw	r4,1340(sp)
    1a1c:	b00b883a 	mov	r5,r22
    1a20:	d9800c04 	addi	r6,sp,48
    1a24:	d9c15115 	stw	r7,1348(sp)
    1a28:	00011880 	call	1188 <__sprint_r>
    1a2c:	d9c15117 	ldw	r7,1348(sp)
    1a30:	103fa31e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1a34:	843ffc04 	addi	r16,r16,-16
    1a38:	dc800e17 	ldw	r18,56(sp)
    1a3c:	dc400d17 	ldw	r17,52(sp)
    1a40:	dd401904 	addi	r21,sp,100
    1a44:	9c3fed16 	blt	r19,r16,19fc <___vfprintf_internal_r+0x81c>
    1a48:	9425883a 	add	r18,r18,r16
    1a4c:	8c400044 	addi	r17,r17,1
    1a50:	008001c4 	movi	r2,7
    1a54:	af000015 	stw	fp,0(r21)
    1a58:	ac000115 	stw	r16,4(r21)
    1a5c:	dc800e15 	stw	r18,56(sp)
    1a60:	dc400d15 	stw	r17,52(sp)
    1a64:	14416116 	blt	r2,r17,1fec <___vfprintf_internal_r+0xe0c>
    1a68:	ad400204 	addi	r21,r21,8
    1a6c:	003f2406 	br	1700 <___vfprintf_internal_r+0x520>
    1a70:	d9014f17 	ldw	r4,1340(sp)
    1a74:	0004c940 	call	4c94 <__sinit>
    1a78:	d9c15117 	ldw	r7,1348(sp)
    1a7c:	003def06 	br	123c <___vfprintf_internal_r+0x5c>
    1a80:	d9014f17 	ldw	r4,1340(sp)
    1a84:	b00b883a 	mov	r5,r22
    1a88:	d9c15115 	stw	r7,1348(sp)
    1a8c:	00030c80 	call	30c8 <__swsetup_r>
    1a90:	d9c15117 	ldw	r7,1348(sp)
    1a94:	103dee26 	beq	r2,zero,1250 <___vfprintf_internal_r+0x70>
    1a98:	003f8c06 	br	18cc <___vfprintf_internal_r+0x6ec>
    1a9c:	d9014217 	ldw	r4,1288(sp)
    1aa0:	d9414317 	ldw	r5,1292(sp)
    1aa4:	000d883a 	mov	r6,zero
    1aa8:	000f883a 	mov	r7,zero
    1aac:	000945c0 	call	945c <__eqdf2>
    1ab0:	1000f21e 	bne	r2,zero,1e7c <___vfprintf_internal_r+0xc9c>
    1ab4:	00800074 	movhi	r2,1
    1ab8:	10b47804 	addi	r2,r2,-11808
    1abc:	94800044 	addi	r18,r18,1
    1ac0:	8c400044 	addi	r17,r17,1
    1ac4:	a8800015 	stw	r2,0(r21)
    1ac8:	00c00044 	movi	r3,1
    1acc:	008001c4 	movi	r2,7
    1ad0:	a8c00115 	stw	r3,4(r21)
    1ad4:	dc800e15 	stw	r18,56(sp)
    1ad8:	dc400d15 	stw	r17,52(sp)
    1adc:	14430016 	blt	r2,r17,26e0 <___vfprintf_internal_r+0x1500>
    1ae0:	a8c00204 	addi	r3,r21,8
    1ae4:	d8800517 	ldw	r2,20(sp)
    1ae8:	d9014717 	ldw	r4,1308(sp)
    1aec:	11015c0e 	bge	r2,r4,2060 <___vfprintf_internal_r+0xe80>
    1af0:	dc400d17 	ldw	r17,52(sp)
    1af4:	d9814917 	ldw	r6,1316(sp)
    1af8:	00800044 	movi	r2,1
    1afc:	94800044 	addi	r18,r18,1
    1b00:	8c400044 	addi	r17,r17,1
    1b04:	18800115 	stw	r2,4(r3)
    1b08:	008001c4 	movi	r2,7
    1b0c:	19800015 	stw	r6,0(r3)
    1b10:	dc800e15 	stw	r18,56(sp)
    1b14:	dc400d15 	stw	r17,52(sp)
    1b18:	14431616 	blt	r2,r17,2774 <___vfprintf_internal_r+0x1594>
    1b1c:	18c00204 	addi	r3,r3,8
    1b20:	d8814717 	ldw	r2,1308(sp)
    1b24:	143fffc4 	addi	r16,r2,-1
    1b28:	043f2b0e 	bge	zero,r16,17d8 <___vfprintf_internal_r+0x5f8>
    1b2c:	00800404 	movi	r2,16
    1b30:	1402a80e 	bge	r2,r16,25d4 <___vfprintf_internal_r+0x13f4>
    1b34:	dc400d17 	ldw	r17,52(sp)
    1b38:	1027883a 	mov	r19,r2
    1b3c:	07000074 	movhi	fp,1
    1b40:	e7347884 	addi	fp,fp,-11806
    1b44:	050001c4 	movi	r20,7
    1b48:	00000306 	br	1b58 <___vfprintf_internal_r+0x978>
    1b4c:	18c00204 	addi	r3,r3,8
    1b50:	843ffc04 	addi	r16,r16,-16
    1b54:	9c02a20e 	bge	r19,r16,25e0 <___vfprintf_internal_r+0x1400>
    1b58:	94800404 	addi	r18,r18,16
    1b5c:	8c400044 	addi	r17,r17,1
    1b60:	1f000015 	stw	fp,0(r3)
    1b64:	1cc00115 	stw	r19,4(r3)
    1b68:	dc800e15 	stw	r18,56(sp)
    1b6c:	dc400d15 	stw	r17,52(sp)
    1b70:	a47ff60e 	bge	r20,r17,1b4c <___vfprintf_internal_r+0x96c>
    1b74:	d9014f17 	ldw	r4,1340(sp)
    1b78:	b00b883a 	mov	r5,r22
    1b7c:	d9800c04 	addi	r6,sp,48
    1b80:	00011880 	call	1188 <__sprint_r>
    1b84:	103f4e1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1b88:	dc800e17 	ldw	r18,56(sp)
    1b8c:	dc400d17 	ldw	r17,52(sp)
    1b90:	d8c01904 	addi	r3,sp,100
    1b94:	003fee06 	br	1b50 <___vfprintf_internal_r+0x970>
    1b98:	d8802c0b 	ldhu	r2,176(sp)
    1b9c:	00ffffc4 	movi	r3,-1
    1ba0:	d8c14b15 	stw	r3,1324(sp)
    1ba4:	1080100c 	andi	r2,r2,64
    1ba8:	103dcc1e 	bne	r2,zero,12dc <___vfprintf_internal_r+0xfc>
    1bac:	003dce06 	br	12e8 <___vfprintf_internal_r+0x108>
    1bb0:	d9014f17 	ldw	r4,1340(sp)
    1bb4:	b00b883a 	mov	r5,r22
    1bb8:	d9800c04 	addi	r6,sp,48
    1bbc:	00011880 	call	1188 <__sprint_r>
    1bc0:	103f3f1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1bc4:	dc800e17 	ldw	r18,56(sp)
    1bc8:	003f2e06 	br	1884 <___vfprintf_internal_r+0x6a4>
    1bcc:	d9414c17 	ldw	r5,1328(sp)
    1bd0:	29400414 	ori	r5,r5,16
    1bd4:	d9414c15 	stw	r5,1328(sp)
    1bd8:	d9814c17 	ldw	r6,1328(sp)
    1bdc:	3080080c 	andi	r2,r6,32
    1be0:	10014f1e 	bne	r2,zero,2120 <___vfprintf_internal_r+0xf40>
    1be4:	d8c14c17 	ldw	r3,1328(sp)
    1be8:	1880040c 	andi	r2,r3,16
    1bec:	1002f01e 	bne	r2,zero,27b0 <___vfprintf_internal_r+0x15d0>
    1bf0:	d9014c17 	ldw	r4,1328(sp)
    1bf4:	2080100c 	andi	r2,r4,64
    1bf8:	1002ed26 	beq	r2,zero,27b0 <___vfprintf_internal_r+0x15d0>
    1bfc:	3880000f 	ldh	r2,0(r7)
    1c00:	39c00104 	addi	r7,r7,4
    1c04:	d9c14015 	stw	r7,1280(sp)
    1c08:	1023d7fa 	srai	r17,r2,31
    1c0c:	1021883a 	mov	r16,r2
    1c10:	88037816 	blt	r17,zero,29f4 <___vfprintf_internal_r+0x1814>
    1c14:	01000044 	movi	r4,1
    1c18:	98000416 	blt	r19,zero,1c2c <___vfprintf_internal_r+0xa4c>
    1c1c:	d8c14c17 	ldw	r3,1328(sp)
    1c20:	00bfdfc4 	movi	r2,-129
    1c24:	1886703a 	and	r3,r3,r2
    1c28:	d8c14c15 	stw	r3,1328(sp)
    1c2c:	8444b03a 	or	r2,r16,r17
    1c30:	10022c1e 	bne	r2,zero,24e4 <___vfprintf_internal_r+0x1304>
    1c34:	98022b1e 	bne	r19,zero,24e4 <___vfprintf_internal_r+0x1304>
    1c38:	20803fcc 	andi	r2,r4,255
    1c3c:	1002a126 	beq	r2,zero,26c4 <___vfprintf_internal_r+0x14e4>
    1c40:	d8c01904 	addi	r3,sp,100
    1c44:	dd000f04 	addi	r20,sp,60
    1c48:	d8c14115 	stw	r3,1284(sp)
    1c4c:	d8c14117 	ldw	r3,1284(sp)
    1c50:	dcc14515 	stw	r19,1300(sp)
    1c54:	a0c5c83a 	sub	r2,r20,r3
    1c58:	11c00a04 	addi	r7,r2,40
    1c5c:	99c0010e 	bge	r19,r7,1c64 <___vfprintf_internal_r+0xa84>
    1c60:	d9c14515 	stw	r7,1300(sp)
    1c64:	dcc14615 	stw	r19,1304(sp)
    1c68:	d8800407 	ldb	r2,16(sp)
    1c6c:	103e4c26 	beq	r2,zero,15a0 <___vfprintf_internal_r+0x3c0>
    1c70:	d8814517 	ldw	r2,1300(sp)
    1c74:	10800044 	addi	r2,r2,1
    1c78:	d8814515 	stw	r2,1300(sp)
    1c7c:	003e4806 	br	15a0 <___vfprintf_internal_r+0x3c0>
    1c80:	d9814c17 	ldw	r6,1328(sp)
    1c84:	31800414 	ori	r6,r6,16
    1c88:	d9814c15 	stw	r6,1328(sp)
    1c8c:	d8c14c17 	ldw	r3,1328(sp)
    1c90:	1880080c 	andi	r2,r3,32
    1c94:	1001271e 	bne	r2,zero,2134 <___vfprintf_internal_r+0xf54>
    1c98:	d9414c17 	ldw	r5,1328(sp)
    1c9c:	2880040c 	andi	r2,r5,16
    1ca0:	1002bc1e 	bne	r2,zero,2794 <___vfprintf_internal_r+0x15b4>
    1ca4:	d9814c17 	ldw	r6,1328(sp)
    1ca8:	3080100c 	andi	r2,r6,64
    1cac:	1002b926 	beq	r2,zero,2794 <___vfprintf_internal_r+0x15b4>
    1cb0:	3c00000b 	ldhu	r16,0(r7)
    1cb4:	0009883a 	mov	r4,zero
    1cb8:	39c00104 	addi	r7,r7,4
    1cbc:	0023883a 	mov	r17,zero
    1cc0:	d9c14015 	stw	r7,1280(sp)
    1cc4:	d8000405 	stb	zero,16(sp)
    1cc8:	003fd306 	br	1c18 <___vfprintf_internal_r+0xa38>
    1ccc:	d9014c17 	ldw	r4,1328(sp)
    1cd0:	21000414 	ori	r4,r4,16
    1cd4:	d9014c15 	stw	r4,1328(sp)
    1cd8:	d9414c17 	ldw	r5,1328(sp)
    1cdc:	2880080c 	andi	r2,r5,32
    1ce0:	1001081e 	bne	r2,zero,2104 <___vfprintf_internal_r+0xf24>
    1ce4:	d8c14c17 	ldw	r3,1328(sp)
    1ce8:	1880040c 	andi	r2,r3,16
    1cec:	1002b61e 	bne	r2,zero,27c8 <___vfprintf_internal_r+0x15e8>
    1cf0:	d9014c17 	ldw	r4,1328(sp)
    1cf4:	2080100c 	andi	r2,r4,64
    1cf8:	1002b326 	beq	r2,zero,27c8 <___vfprintf_internal_r+0x15e8>
    1cfc:	3c00000b 	ldhu	r16,0(r7)
    1d00:	01000044 	movi	r4,1
    1d04:	39c00104 	addi	r7,r7,4
    1d08:	0023883a 	mov	r17,zero
    1d0c:	d9c14015 	stw	r7,1280(sp)
    1d10:	d8000405 	stb	zero,16(sp)
    1d14:	003fc006 	br	1c18 <___vfprintf_internal_r+0xa38>
    1d18:	d9014f17 	ldw	r4,1340(sp)
    1d1c:	b00b883a 	mov	r5,r22
    1d20:	d9800c04 	addi	r6,sp,48
    1d24:	00011880 	call	1188 <__sprint_r>
    1d28:	103ee51e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1d2c:	dc800e17 	ldw	r18,56(sp)
    1d30:	d8c01904 	addi	r3,sp,100
    1d34:	d9814c17 	ldw	r6,1328(sp)
    1d38:	3080004c 	andi	r2,r6,1
    1d3c:	1005003a 	cmpeq	r2,r2,zero
    1d40:	103ea51e 	bne	r2,zero,17d8 <___vfprintf_internal_r+0x5f8>
    1d44:	00800044 	movi	r2,1
    1d48:	dc400d17 	ldw	r17,52(sp)
    1d4c:	18800115 	stw	r2,4(r3)
    1d50:	d8814917 	ldw	r2,1316(sp)
    1d54:	94800044 	addi	r18,r18,1
    1d58:	8c400044 	addi	r17,r17,1
    1d5c:	18800015 	stw	r2,0(r3)
    1d60:	008001c4 	movi	r2,7
    1d64:	dc800e15 	stw	r18,56(sp)
    1d68:	dc400d15 	stw	r17,52(sp)
    1d6c:	1442240e 	bge	r2,r17,2600 <___vfprintf_internal_r+0x1420>
    1d70:	d9014f17 	ldw	r4,1340(sp)
    1d74:	b00b883a 	mov	r5,r22
    1d78:	d9800c04 	addi	r6,sp,48
    1d7c:	00011880 	call	1188 <__sprint_r>
    1d80:	103ecf1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1d84:	dc800e17 	ldw	r18,56(sp)
    1d88:	d8c01904 	addi	r3,sp,100
    1d8c:	003e9206 	br	17d8 <___vfprintf_internal_r+0x5f8>
    1d90:	d9014f17 	ldw	r4,1340(sp)
    1d94:	b00b883a 	mov	r5,r22
    1d98:	d9800c04 	addi	r6,sp,48
    1d9c:	00011880 	call	1188 <__sprint_r>
    1da0:	103ec026 	beq	r2,zero,18a4 <___vfprintf_internal_r+0x6c4>
    1da4:	003ec606 	br	18c0 <___vfprintf_internal_r+0x6e0>
    1da8:	d9014f17 	ldw	r4,1340(sp)
    1dac:	b00b883a 	mov	r5,r22
    1db0:	d9800c04 	addi	r6,sp,48
    1db4:	d9c15115 	stw	r7,1348(sp)
    1db8:	00011880 	call	1188 <__sprint_r>
    1dbc:	d9c15117 	ldw	r7,1348(sp)
    1dc0:	103ebf1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1dc4:	dc800e17 	ldw	r18,56(sp)
    1dc8:	dc400d17 	ldw	r17,52(sp)
    1dcc:	dd401904 	addi	r21,sp,100
    1dd0:	003e7406 	br	17a4 <___vfprintf_internal_r+0x5c4>
    1dd4:	d9014f17 	ldw	r4,1340(sp)
    1dd8:	b00b883a 	mov	r5,r22
    1ddc:	d9800c04 	addi	r6,sp,48
    1de0:	d9c15115 	stw	r7,1348(sp)
    1de4:	00011880 	call	1188 <__sprint_r>
    1de8:	d9c15117 	ldw	r7,1348(sp)
    1dec:	103eb41e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1df0:	dd401904 	addi	r21,sp,100
    1df4:	003d6d06 	br	13ac <___vfprintf_internal_r+0x1cc>
    1df8:	d9014f17 	ldw	r4,1340(sp)
    1dfc:	b00b883a 	mov	r5,r22
    1e00:	d9800c04 	addi	r6,sp,48
    1e04:	d9c15115 	stw	r7,1348(sp)
    1e08:	00011880 	call	1188 <__sprint_r>
    1e0c:	d9c15117 	ldw	r7,1348(sp)
    1e10:	103eab1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1e14:	dc800e17 	ldw	r18,56(sp)
    1e18:	dc400d17 	ldw	r17,52(sp)
    1e1c:	dd401904 	addi	r21,sp,100
    1e20:	003e3406 	br	16f4 <___vfprintf_internal_r+0x514>
    1e24:	d9014f17 	ldw	r4,1340(sp)
    1e28:	b00b883a 	mov	r5,r22
    1e2c:	d9800c04 	addi	r6,sp,48
    1e30:	d9c15115 	stw	r7,1348(sp)
    1e34:	00011880 	call	1188 <__sprint_r>
    1e38:	d9c15117 	ldw	r7,1348(sp)
    1e3c:	103ea01e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1e40:	dc800e17 	ldw	r18,56(sp)
    1e44:	dc400d17 	ldw	r17,52(sp)
    1e48:	dd401904 	addi	r21,sp,100
    1e4c:	003e1c06 	br	16c0 <___vfprintf_internal_r+0x4e0>
    1e50:	d9014f17 	ldw	r4,1340(sp)
    1e54:	b00b883a 	mov	r5,r22
    1e58:	d9800c04 	addi	r6,sp,48
    1e5c:	d9c15115 	stw	r7,1348(sp)
    1e60:	00011880 	call	1188 <__sprint_r>
    1e64:	d9c15117 	ldw	r7,1348(sp)
    1e68:	103e951e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1e6c:	dc800e17 	ldw	r18,56(sp)
    1e70:	dc400d17 	ldw	r17,52(sp)
    1e74:	dd401904 	addi	r21,sp,100
    1e78:	003e0406 	br	168c <___vfprintf_internal_r+0x4ac>
    1e7c:	d9000517 	ldw	r4,20(sp)
    1e80:	0102580e 	bge	zero,r4,27e4 <___vfprintf_internal_r+0x1604>
    1e84:	d9814717 	ldw	r6,1308(sp)
    1e88:	21807a16 	blt	r4,r6,2074 <___vfprintf_internal_r+0xe94>
    1e8c:	d8814117 	ldw	r2,1284(sp)
    1e90:	91a5883a 	add	r18,r18,r6
    1e94:	8c400044 	addi	r17,r17,1
    1e98:	a8800015 	stw	r2,0(r21)
    1e9c:	008001c4 	movi	r2,7
    1ea0:	a9800115 	stw	r6,4(r21)
    1ea4:	dc800e15 	stw	r18,56(sp)
    1ea8:	dc400d15 	stw	r17,52(sp)
    1eac:	1442fc16 	blt	r2,r17,2aa0 <___vfprintf_internal_r+0x18c0>
    1eb0:	a8c00204 	addi	r3,r21,8
    1eb4:	d9414717 	ldw	r5,1308(sp)
    1eb8:	2161c83a 	sub	r16,r4,r5
    1ebc:	043f9d0e 	bge	zero,r16,1d34 <___vfprintf_internal_r+0xb54>
    1ec0:	00800404 	movi	r2,16
    1ec4:	1402190e 	bge	r2,r16,272c <___vfprintf_internal_r+0x154c>
    1ec8:	dc400d17 	ldw	r17,52(sp)
    1ecc:	1027883a 	mov	r19,r2
    1ed0:	07000074 	movhi	fp,1
    1ed4:	e7347884 	addi	fp,fp,-11806
    1ed8:	050001c4 	movi	r20,7
    1edc:	00000306 	br	1eec <___vfprintf_internal_r+0xd0c>
    1ee0:	18c00204 	addi	r3,r3,8
    1ee4:	843ffc04 	addi	r16,r16,-16
    1ee8:	9c02130e 	bge	r19,r16,2738 <___vfprintf_internal_r+0x1558>
    1eec:	94800404 	addi	r18,r18,16
    1ef0:	8c400044 	addi	r17,r17,1
    1ef4:	1f000015 	stw	fp,0(r3)
    1ef8:	1cc00115 	stw	r19,4(r3)
    1efc:	dc800e15 	stw	r18,56(sp)
    1f00:	dc400d15 	stw	r17,52(sp)
    1f04:	a47ff60e 	bge	r20,r17,1ee0 <___vfprintf_internal_r+0xd00>
    1f08:	d9014f17 	ldw	r4,1340(sp)
    1f0c:	b00b883a 	mov	r5,r22
    1f10:	d9800c04 	addi	r6,sp,48
    1f14:	00011880 	call	1188 <__sprint_r>
    1f18:	103e691e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1f1c:	dc800e17 	ldw	r18,56(sp)
    1f20:	dc400d17 	ldw	r17,52(sp)
    1f24:	d8c01904 	addi	r3,sp,100
    1f28:	003fee06 	br	1ee4 <___vfprintf_internal_r+0xd04>
    1f2c:	d8814717 	ldw	r2,1308(sp)
    1f30:	143fffc4 	addi	r16,r2,-1
    1f34:	043e970e 	bge	zero,r16,1994 <___vfprintf_internal_r+0x7b4>
    1f38:	00800404 	movi	r2,16
    1f3c:	1400180e 	bge	r2,r16,1fa0 <___vfprintf_internal_r+0xdc0>
    1f40:	1029883a 	mov	r20,r2
    1f44:	07000074 	movhi	fp,1
    1f48:	e7347884 	addi	fp,fp,-11806
    1f4c:	054001c4 	movi	r21,7
    1f50:	00000306 	br	1f60 <___vfprintf_internal_r+0xd80>
    1f54:	9cc00204 	addi	r19,r19,8
    1f58:	843ffc04 	addi	r16,r16,-16
    1f5c:	a400120e 	bge	r20,r16,1fa8 <___vfprintf_internal_r+0xdc8>
    1f60:	94800404 	addi	r18,r18,16
    1f64:	8c400044 	addi	r17,r17,1
    1f68:	9f000015 	stw	fp,0(r19)
    1f6c:	9d000115 	stw	r20,4(r19)
    1f70:	dc800e15 	stw	r18,56(sp)
    1f74:	dc400d15 	stw	r17,52(sp)
    1f78:	ac7ff60e 	bge	r21,r17,1f54 <___vfprintf_internal_r+0xd74>
    1f7c:	d9014f17 	ldw	r4,1340(sp)
    1f80:	b00b883a 	mov	r5,r22
    1f84:	d9800c04 	addi	r6,sp,48
    1f88:	00011880 	call	1188 <__sprint_r>
    1f8c:	103e4c1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1f90:	dc800e17 	ldw	r18,56(sp)
    1f94:	dc400d17 	ldw	r17,52(sp)
    1f98:	dcc01904 	addi	r19,sp,100
    1f9c:	003fee06 	br	1f58 <___vfprintf_internal_r+0xd78>
    1fa0:	07000074 	movhi	fp,1
    1fa4:	e7347884 	addi	fp,fp,-11806
    1fa8:	9425883a 	add	r18,r18,r16
    1fac:	8c400044 	addi	r17,r17,1
    1fb0:	008001c4 	movi	r2,7
    1fb4:	9f000015 	stw	fp,0(r19)
    1fb8:	9c000115 	stw	r16,4(r19)
    1fbc:	dc800e15 	stw	r18,56(sp)
    1fc0:	dc400d15 	stw	r17,52(sp)
    1fc4:	147e720e 	bge	r2,r17,1990 <___vfprintf_internal_r+0x7b0>
    1fc8:	d9014f17 	ldw	r4,1340(sp)
    1fcc:	b00b883a 	mov	r5,r22
    1fd0:	d9800c04 	addi	r6,sp,48
    1fd4:	00011880 	call	1188 <__sprint_r>
    1fd8:	103e391e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    1fdc:	dc800e17 	ldw	r18,56(sp)
    1fe0:	dc400d17 	ldw	r17,52(sp)
    1fe4:	dcc01904 	addi	r19,sp,100
    1fe8:	003e6a06 	br	1994 <___vfprintf_internal_r+0x7b4>
    1fec:	d9014f17 	ldw	r4,1340(sp)
    1ff0:	b00b883a 	mov	r5,r22
    1ff4:	d9800c04 	addi	r6,sp,48
    1ff8:	d9c15115 	stw	r7,1348(sp)
    1ffc:	00011880 	call	1188 <__sprint_r>
    2000:	d9c15117 	ldw	r7,1348(sp)
    2004:	103e2e1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    2008:	dc800e17 	ldw	r18,56(sp)
    200c:	dc400d17 	ldw	r17,52(sp)
    2010:	dd401904 	addi	r21,sp,100
    2014:	003dba06 	br	1700 <___vfprintf_internal_r+0x520>
    2018:	d9014f17 	ldw	r4,1340(sp)
    201c:	b00b883a 	mov	r5,r22
    2020:	d9800c04 	addi	r6,sp,48
    2024:	00011880 	call	1188 <__sprint_r>
    2028:	103e251e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    202c:	dc800e17 	ldw	r18,56(sp)
    2030:	dc400d17 	ldw	r17,52(sp)
    2034:	dcc01904 	addi	r19,sp,100
    2038:	003e4206 	br	1944 <___vfprintf_internal_r+0x764>
    203c:	d9014f17 	ldw	r4,1340(sp)
    2040:	b00b883a 	mov	r5,r22
    2044:	d9800c04 	addi	r6,sp,48
    2048:	00011880 	call	1188 <__sprint_r>
    204c:	103e1c1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    2050:	dc800e17 	ldw	r18,56(sp)
    2054:	dc400d17 	ldw	r17,52(sp)
    2058:	d8c01904 	addi	r3,sp,100
    205c:	003e2e06 	br	1918 <___vfprintf_internal_r+0x738>
    2060:	d9414c17 	ldw	r5,1328(sp)
    2064:	2880004c 	andi	r2,r5,1
    2068:	1005003a 	cmpeq	r2,r2,zero
    206c:	103dda1e 	bne	r2,zero,17d8 <___vfprintf_internal_r+0x5f8>
    2070:	003e9f06 	br	1af0 <___vfprintf_internal_r+0x910>
    2074:	d8c14117 	ldw	r3,1284(sp)
    2078:	9125883a 	add	r18,r18,r4
    207c:	8c400044 	addi	r17,r17,1
    2080:	008001c4 	movi	r2,7
    2084:	a8c00015 	stw	r3,0(r21)
    2088:	a9000115 	stw	r4,4(r21)
    208c:	dc800e15 	stw	r18,56(sp)
    2090:	dc400d15 	stw	r17,52(sp)
    2094:	14426c16 	blt	r2,r17,2a48 <___vfprintf_internal_r+0x1868>
    2098:	a8c00204 	addi	r3,r21,8
    209c:	d9414917 	ldw	r5,1316(sp)
    20a0:	00800044 	movi	r2,1
    20a4:	94800044 	addi	r18,r18,1
    20a8:	8c400044 	addi	r17,r17,1
    20ac:	18800115 	stw	r2,4(r3)
    20b0:	008001c4 	movi	r2,7
    20b4:	19400015 	stw	r5,0(r3)
    20b8:	dc800e15 	stw	r18,56(sp)
    20bc:	dc400d15 	stw	r17,52(sp)
    20c0:	2021883a 	mov	r16,r4
    20c4:	14425616 	blt	r2,r17,2a20 <___vfprintf_internal_r+0x1840>
    20c8:	19400204 	addi	r5,r3,8
    20cc:	d9814717 	ldw	r6,1308(sp)
    20d0:	8c400044 	addi	r17,r17,1
    20d4:	dc400d15 	stw	r17,52(sp)
    20d8:	3107c83a 	sub	r3,r6,r4
    20dc:	d9014117 	ldw	r4,1284(sp)
    20e0:	90e5883a 	add	r18,r18,r3
    20e4:	28c00115 	stw	r3,4(r5)
    20e8:	8105883a 	add	r2,r16,r4
    20ec:	28800015 	stw	r2,0(r5)
    20f0:	008001c4 	movi	r2,7
    20f4:	dc800e15 	stw	r18,56(sp)
    20f8:	147f1d16 	blt	r2,r17,1d70 <___vfprintf_internal_r+0xb90>
    20fc:	28c00204 	addi	r3,r5,8
    2100:	003db506 	br	17d8 <___vfprintf_internal_r+0x5f8>
    2104:	3c000017 	ldw	r16,0(r7)
    2108:	3c400117 	ldw	r17,4(r7)
    210c:	39800204 	addi	r6,r7,8
    2110:	01000044 	movi	r4,1
    2114:	d9814015 	stw	r6,1280(sp)
    2118:	d8000405 	stb	zero,16(sp)
    211c:	003ebe06 	br	1c18 <___vfprintf_internal_r+0xa38>
    2120:	3c000017 	ldw	r16,0(r7)
    2124:	3c400117 	ldw	r17,4(r7)
    2128:	38800204 	addi	r2,r7,8
    212c:	d8814015 	stw	r2,1280(sp)
    2130:	003eb706 	br	1c10 <___vfprintf_internal_r+0xa30>
    2134:	3c000017 	ldw	r16,0(r7)
    2138:	3c400117 	ldw	r17,4(r7)
    213c:	39000204 	addi	r4,r7,8
    2140:	d9014015 	stw	r4,1280(sp)
    2144:	0009883a 	mov	r4,zero
    2148:	d8000405 	stb	zero,16(sp)
    214c:	003eb206 	br	1c18 <___vfprintf_internal_r+0xa38>
    2150:	38c00017 	ldw	r3,0(r7)
    2154:	39c00104 	addi	r7,r7,4
    2158:	d8c14a15 	stw	r3,1320(sp)
    215c:	1800d70e 	bge	r3,zero,24bc <___vfprintf_internal_r+0x12dc>
    2160:	00c7c83a 	sub	r3,zero,r3
    2164:	d8c14a15 	stw	r3,1320(sp)
    2168:	d9014c17 	ldw	r4,1328(sp)
    216c:	b8c00007 	ldb	r3,0(r23)
    2170:	21000114 	ori	r4,r4,4
    2174:	d9014c15 	stw	r4,1328(sp)
    2178:	003c9806 	br	13dc <___vfprintf_internal_r+0x1fc>
    217c:	d9814c17 	ldw	r6,1328(sp)
    2180:	3080080c 	andi	r2,r6,32
    2184:	1001f626 	beq	r2,zero,2960 <___vfprintf_internal_r+0x1780>
    2188:	d9014b17 	ldw	r4,1324(sp)
    218c:	38800017 	ldw	r2,0(r7)
    2190:	39c00104 	addi	r7,r7,4
    2194:	d9c14015 	stw	r7,1280(sp)
    2198:	2007d7fa 	srai	r3,r4,31
    219c:	d9c14017 	ldw	r7,1280(sp)
    21a0:	11000015 	stw	r4,0(r2)
    21a4:	10c00115 	stw	r3,4(r2)
    21a8:	003c6906 	br	1350 <___vfprintf_internal_r+0x170>
    21ac:	b8c00007 	ldb	r3,0(r23)
    21b0:	00801b04 	movi	r2,108
    21b4:	18825526 	beq	r3,r2,2b0c <___vfprintf_internal_r+0x192c>
    21b8:	d9414c17 	ldw	r5,1328(sp)
    21bc:	29400414 	ori	r5,r5,16
    21c0:	d9414c15 	stw	r5,1328(sp)
    21c4:	003c8506 	br	13dc <___vfprintf_internal_r+0x1fc>
    21c8:	d9814c17 	ldw	r6,1328(sp)
    21cc:	b8c00007 	ldb	r3,0(r23)
    21d0:	31800814 	ori	r6,r6,32
    21d4:	d9814c15 	stw	r6,1328(sp)
    21d8:	003c8006 	br	13dc <___vfprintf_internal_r+0x1fc>
    21dc:	d8814c17 	ldw	r2,1328(sp)
    21e0:	3c000017 	ldw	r16,0(r7)
    21e4:	00c01e04 	movi	r3,120
    21e8:	10800094 	ori	r2,r2,2
    21ec:	d8814c15 	stw	r2,1328(sp)
    21f0:	39c00104 	addi	r7,r7,4
    21f4:	01400074 	movhi	r5,1
    21f8:	29746104 	addi	r5,r5,-11900
    21fc:	00800c04 	movi	r2,48
    2200:	0023883a 	mov	r17,zero
    2204:	01000084 	movi	r4,2
    2208:	d9c14015 	stw	r7,1280(sp)
    220c:	d8c14d15 	stw	r3,1332(sp)
    2210:	d9414415 	stw	r5,1296(sp)
    2214:	d8800445 	stb	r2,17(sp)
    2218:	d8c00485 	stb	r3,18(sp)
    221c:	d8000405 	stb	zero,16(sp)
    2220:	003e7d06 	br	1c18 <___vfprintf_internal_r+0xa38>
    2224:	d8814c17 	ldw	r2,1328(sp)
    2228:	b8c00007 	ldb	r3,0(r23)
    222c:	10801014 	ori	r2,r2,64
    2230:	d8814c15 	stw	r2,1328(sp)
    2234:	003c6906 	br	13dc <___vfprintf_internal_r+0x1fc>
    2238:	d9414c17 	ldw	r5,1328(sp)
    223c:	2880020c 	andi	r2,r5,8
    2240:	1001e526 	beq	r2,zero,29d8 <___vfprintf_internal_r+0x17f8>
    2244:	39800017 	ldw	r6,0(r7)
    2248:	38800204 	addi	r2,r7,8
    224c:	d8814015 	stw	r2,1280(sp)
    2250:	d9814215 	stw	r6,1288(sp)
    2254:	39c00117 	ldw	r7,4(r7)
    2258:	d9c14315 	stw	r7,1292(sp)
    225c:	d9014217 	ldw	r4,1288(sp)
    2260:	d9414317 	ldw	r5,1292(sp)
    2264:	00075500 	call	7550 <__isinfd>
    2268:	10021d26 	beq	r2,zero,2ae0 <___vfprintf_internal_r+0x1900>
    226c:	d9014217 	ldw	r4,1288(sp)
    2270:	d9414317 	ldw	r5,1292(sp)
    2274:	000d883a 	mov	r6,zero
    2278:	000f883a 	mov	r7,zero
    227c:	000967c0 	call	967c <__ltdf2>
    2280:	1002d016 	blt	r2,zero,2dc4 <___vfprintf_internal_r+0x1be4>
    2284:	d9414d17 	ldw	r5,1332(sp)
    2288:	008011c4 	movi	r2,71
    228c:	11421016 	blt	r2,r5,2ad0 <___vfprintf_internal_r+0x18f0>
    2290:	01800074 	movhi	r6,1
    2294:	31b46604 	addi	r6,r6,-11880
    2298:	d9814115 	stw	r6,1284(sp)
    229c:	d9014c17 	ldw	r4,1328(sp)
    22a0:	00c000c4 	movi	r3,3
    22a4:	00bfdfc4 	movi	r2,-129
    22a8:	2088703a 	and	r4,r4,r2
    22ac:	180f883a 	mov	r7,r3
    22b0:	d8c14515 	stw	r3,1300(sp)
    22b4:	d9014c15 	stw	r4,1328(sp)
    22b8:	d8014615 	stw	zero,1304(sp)
    22bc:	003e6a06 	br	1c68 <___vfprintf_internal_r+0xa88>
    22c0:	38800017 	ldw	r2,0(r7)
    22c4:	00c00044 	movi	r3,1
    22c8:	39c00104 	addi	r7,r7,4
    22cc:	d9c14015 	stw	r7,1280(sp)
    22d0:	d9000f04 	addi	r4,sp,60
    22d4:	180f883a 	mov	r7,r3
    22d8:	d8c14515 	stw	r3,1300(sp)
    22dc:	d9014115 	stw	r4,1284(sp)
    22e0:	d8800f05 	stb	r2,60(sp)
    22e4:	d8000405 	stb	zero,16(sp)
    22e8:	003cac06 	br	159c <___vfprintf_internal_r+0x3bc>
    22ec:	01400074 	movhi	r5,1
    22f0:	29746c04 	addi	r5,r5,-11856
    22f4:	d9414415 	stw	r5,1296(sp)
    22f8:	d9814c17 	ldw	r6,1328(sp)
    22fc:	3080080c 	andi	r2,r6,32
    2300:	1000ff26 	beq	r2,zero,2700 <___vfprintf_internal_r+0x1520>
    2304:	3c000017 	ldw	r16,0(r7)
    2308:	3c400117 	ldw	r17,4(r7)
    230c:	38800204 	addi	r2,r7,8
    2310:	d8814015 	stw	r2,1280(sp)
    2314:	d9414c17 	ldw	r5,1328(sp)
    2318:	2880004c 	andi	r2,r5,1
    231c:	1005003a 	cmpeq	r2,r2,zero
    2320:	1000b91e 	bne	r2,zero,2608 <___vfprintf_internal_r+0x1428>
    2324:	8444b03a 	or	r2,r16,r17
    2328:	1000b726 	beq	r2,zero,2608 <___vfprintf_internal_r+0x1428>
    232c:	d9814d17 	ldw	r6,1332(sp)
    2330:	29400094 	ori	r5,r5,2
    2334:	00800c04 	movi	r2,48
    2338:	01000084 	movi	r4,2
    233c:	d9414c15 	stw	r5,1328(sp)
    2340:	d8800445 	stb	r2,17(sp)
    2344:	d9800485 	stb	r6,18(sp)
    2348:	d8000405 	stb	zero,16(sp)
    234c:	003e3206 	br	1c18 <___vfprintf_internal_r+0xa38>
    2350:	01800074 	movhi	r6,1
    2354:	31b46104 	addi	r6,r6,-11900
    2358:	d9814415 	stw	r6,1296(sp)
    235c:	003fe606 	br	22f8 <___vfprintf_internal_r+0x1118>
    2360:	00800ac4 	movi	r2,43
    2364:	d8800405 	stb	r2,16(sp)
    2368:	b8c00007 	ldb	r3,0(r23)
    236c:	003c1b06 	br	13dc <___vfprintf_internal_r+0x1fc>
    2370:	d8814c17 	ldw	r2,1328(sp)
    2374:	b8c00007 	ldb	r3,0(r23)
    2378:	10800054 	ori	r2,r2,1
    237c:	d8814c15 	stw	r2,1328(sp)
    2380:	003c1606 	br	13dc <___vfprintf_internal_r+0x1fc>
    2384:	d8800407 	ldb	r2,16(sp)
    2388:	10004c1e 	bne	r2,zero,24bc <___vfprintf_internal_r+0x12dc>
    238c:	00800804 	movi	r2,32
    2390:	d8800405 	stb	r2,16(sp)
    2394:	b8c00007 	ldb	r3,0(r23)
    2398:	003c1006 	br	13dc <___vfprintf_internal_r+0x1fc>
    239c:	d9814c17 	ldw	r6,1328(sp)
    23a0:	b8c00007 	ldb	r3,0(r23)
    23a4:	31800214 	ori	r6,r6,8
    23a8:	d9814c15 	stw	r6,1328(sp)
    23ac:	003c0b06 	br	13dc <___vfprintf_internal_r+0x1fc>
    23b0:	0009883a 	mov	r4,zero
    23b4:	04000244 	movi	r16,9
    23b8:	01400284 	movi	r5,10
    23bc:	d9c15115 	stw	r7,1348(sp)
    23c0:	00007d80 	call	7d8 <__mulsi3>
    23c4:	b9000007 	ldb	r4,0(r23)
    23c8:	d8c14d17 	ldw	r3,1332(sp)
    23cc:	bdc00044 	addi	r23,r23,1
    23d0:	d9014d15 	stw	r4,1332(sp)
    23d4:	d9414d17 	ldw	r5,1332(sp)
    23d8:	1885883a 	add	r2,r3,r2
    23dc:	113ff404 	addi	r4,r2,-48
    23e0:	28bff404 	addi	r2,r5,-48
    23e4:	d9c15117 	ldw	r7,1348(sp)
    23e8:	80bff32e 	bgeu	r16,r2,23b8 <___vfprintf_internal_r+0x11d8>
    23ec:	d9014a15 	stw	r4,1320(sp)
    23f0:	003bfc06 	br	13e4 <___vfprintf_internal_r+0x204>
    23f4:	d8814c17 	ldw	r2,1328(sp)
    23f8:	b8c00007 	ldb	r3,0(r23)
    23fc:	10802014 	ori	r2,r2,128
    2400:	d8814c15 	stw	r2,1328(sp)
    2404:	003bf506 	br	13dc <___vfprintf_internal_r+0x1fc>
    2408:	b8c00007 	ldb	r3,0(r23)
    240c:	00800a84 	movi	r2,42
    2410:	bdc00044 	addi	r23,r23,1
    2414:	18831826 	beq	r3,r2,3078 <___vfprintf_internal_r+0x1e98>
    2418:	d8c14d15 	stw	r3,1332(sp)
    241c:	18bff404 	addi	r2,r3,-48
    2420:	00c00244 	movi	r3,9
    2424:	18827b36 	bltu	r3,r2,2e14 <___vfprintf_internal_r+0x1c34>
    2428:	1821883a 	mov	r16,r3
    242c:	0009883a 	mov	r4,zero
    2430:	01400284 	movi	r5,10
    2434:	d9c15115 	stw	r7,1348(sp)
    2438:	00007d80 	call	7d8 <__mulsi3>
    243c:	d9414d17 	ldw	r5,1332(sp)
    2440:	b9800007 	ldb	r6,0(r23)
    2444:	d9c15117 	ldw	r7,1348(sp)
    2448:	1145883a 	add	r2,r2,r5
    244c:	113ff404 	addi	r4,r2,-48
    2450:	30bff404 	addi	r2,r6,-48
    2454:	d9814d15 	stw	r6,1332(sp)
    2458:	bdc00044 	addi	r23,r23,1
    245c:	80bff42e 	bgeu	r16,r2,2430 <___vfprintf_internal_r+0x1250>
    2460:	2027883a 	mov	r19,r4
    2464:	203bdf0e 	bge	r4,zero,13e4 <___vfprintf_internal_r+0x204>
    2468:	04ffffc4 	movi	r19,-1
    246c:	003bdd06 	br	13e4 <___vfprintf_internal_r+0x204>
    2470:	d8000405 	stb	zero,16(sp)
    2474:	39800017 	ldw	r6,0(r7)
    2478:	39c00104 	addi	r7,r7,4
    247c:	d9c14015 	stw	r7,1280(sp)
    2480:	d9814115 	stw	r6,1284(sp)
    2484:	3001c926 	beq	r6,zero,2bac <___vfprintf_internal_r+0x19cc>
    2488:	98000e16 	blt	r19,zero,24c4 <___vfprintf_internal_r+0x12e4>
    248c:	d9014117 	ldw	r4,1284(sp)
    2490:	000b883a 	mov	r5,zero
    2494:	980d883a 	mov	r6,r19
    2498:	0005bd40 	call	5bd4 <memchr>
    249c:	10025926 	beq	r2,zero,2e04 <___vfprintf_internal_r+0x1c24>
    24a0:	d8c14117 	ldw	r3,1284(sp)
    24a4:	10cfc83a 	sub	r7,r2,r3
    24a8:	99c19e16 	blt	r19,r7,2b24 <___vfprintf_internal_r+0x1944>
    24ac:	d9c14515 	stw	r7,1300(sp)
    24b0:	38000916 	blt	r7,zero,24d8 <___vfprintf_internal_r+0x12f8>
    24b4:	d8014615 	stw	zero,1304(sp)
    24b8:	003deb06 	br	1c68 <___vfprintf_internal_r+0xa88>
    24bc:	b8c00007 	ldb	r3,0(r23)
    24c0:	003bc606 	br	13dc <___vfprintf_internal_r+0x1fc>
    24c4:	d9014117 	ldw	r4,1284(sp)
    24c8:	00011140 	call	1114 <strlen>
    24cc:	d8814515 	stw	r2,1300(sp)
    24d0:	100f883a 	mov	r7,r2
    24d4:	103ff70e 	bge	r2,zero,24b4 <___vfprintf_internal_r+0x12d4>
    24d8:	d8014515 	stw	zero,1300(sp)
    24dc:	d8014615 	stw	zero,1304(sp)
    24e0:	003de106 	br	1c68 <___vfprintf_internal_r+0xa88>
    24e4:	20c03fcc 	andi	r3,r4,255
    24e8:	00800044 	movi	r2,1
    24ec:	18802d26 	beq	r3,r2,25a4 <___vfprintf_internal_r+0x13c4>
    24f0:	18800e36 	bltu	r3,r2,252c <___vfprintf_internal_r+0x134c>
    24f4:	00800084 	movi	r2,2
    24f8:	1880fa26 	beq	r3,r2,28e4 <___vfprintf_internal_r+0x1704>
    24fc:	01000074 	movhi	r4,1
    2500:	21347104 	addi	r4,r4,-11836
    2504:	00011140 	call	1114 <strlen>
    2508:	100f883a 	mov	r7,r2
    250c:	dcc14515 	stw	r19,1300(sp)
    2510:	9880010e 	bge	r19,r2,2518 <___vfprintf_internal_r+0x1338>
    2514:	d8814515 	stw	r2,1300(sp)
    2518:	00800074 	movhi	r2,1
    251c:	10b47104 	addi	r2,r2,-11836
    2520:	dcc14615 	stw	r19,1304(sp)
    2524:	d8814115 	stw	r2,1284(sp)
    2528:	003dcf06 	br	1c68 <___vfprintf_internal_r+0xa88>
    252c:	d9401904 	addi	r5,sp,100
    2530:	dd000f04 	addi	r20,sp,60
    2534:	d9414115 	stw	r5,1284(sp)
    2538:	880a977a 	slli	r5,r17,29
    253c:	d9814117 	ldw	r6,1284(sp)
    2540:	8004d0fa 	srli	r2,r16,3
    2544:	8806d0fa 	srli	r3,r17,3
    2548:	810001cc 	andi	r4,r16,7
    254c:	2884b03a 	or	r2,r5,r2
    2550:	31bfffc4 	addi	r6,r6,-1
    2554:	21000c04 	addi	r4,r4,48
    2558:	d9814115 	stw	r6,1284(sp)
    255c:	10cab03a 	or	r5,r2,r3
    2560:	31000005 	stb	r4,0(r6)
    2564:	1021883a 	mov	r16,r2
    2568:	1823883a 	mov	r17,r3
    256c:	283ff21e 	bne	r5,zero,2538 <___vfprintf_internal_r+0x1358>
    2570:	d8c14c17 	ldw	r3,1328(sp)
    2574:	1880004c 	andi	r2,r3,1
    2578:	1005003a 	cmpeq	r2,r2,zero
    257c:	103db31e 	bne	r2,zero,1c4c <___vfprintf_internal_r+0xa6c>
    2580:	20803fcc 	andi	r2,r4,255
    2584:	1080201c 	xori	r2,r2,128
    2588:	10bfe004 	addi	r2,r2,-128
    258c:	00c00c04 	movi	r3,48
    2590:	10fdae26 	beq	r2,r3,1c4c <___vfprintf_internal_r+0xa6c>
    2594:	31bfffc4 	addi	r6,r6,-1
    2598:	d9814115 	stw	r6,1284(sp)
    259c:	30c00005 	stb	r3,0(r6)
    25a0:	003daa06 	br	1c4c <___vfprintf_internal_r+0xa6c>
    25a4:	88800068 	cmpgeui	r2,r17,1
    25a8:	10002c1e 	bne	r2,zero,265c <___vfprintf_internal_r+0x147c>
    25ac:	8800021e 	bne	r17,zero,25b8 <___vfprintf_internal_r+0x13d8>
    25b0:	00800244 	movi	r2,9
    25b4:	14002936 	bltu	r2,r16,265c <___vfprintf_internal_r+0x147c>
    25b8:	d90018c4 	addi	r4,sp,99
    25bc:	dd000f04 	addi	r20,sp,60
    25c0:	d9014115 	stw	r4,1284(sp)
    25c4:	d9014117 	ldw	r4,1284(sp)
    25c8:	80800c04 	addi	r2,r16,48
    25cc:	20800005 	stb	r2,0(r4)
    25d0:	003d9e06 	br	1c4c <___vfprintf_internal_r+0xa6c>
    25d4:	dc400d17 	ldw	r17,52(sp)
    25d8:	07000074 	movhi	fp,1
    25dc:	e7347884 	addi	fp,fp,-11806
    25e0:	9425883a 	add	r18,r18,r16
    25e4:	8c400044 	addi	r17,r17,1
    25e8:	008001c4 	movi	r2,7
    25ec:	1f000015 	stw	fp,0(r3)
    25f0:	1c000115 	stw	r16,4(r3)
    25f4:	dc800e15 	stw	r18,56(sp)
    25f8:	dc400d15 	stw	r17,52(sp)
    25fc:	147ddc16 	blt	r2,r17,1d70 <___vfprintf_internal_r+0xb90>
    2600:	18c00204 	addi	r3,r3,8
    2604:	003c7406 	br	17d8 <___vfprintf_internal_r+0x5f8>
    2608:	01000084 	movi	r4,2
    260c:	d8000405 	stb	zero,16(sp)
    2610:	003d8106 	br	1c18 <___vfprintf_internal_r+0xa38>
    2614:	d9814c17 	ldw	r6,1328(sp)
    2618:	30c4703a 	and	r2,r6,r3
    261c:	1005003a 	cmpeq	r2,r2,zero
    2620:	103cb326 	beq	r2,zero,18f0 <___vfprintf_internal_r+0x710>
    2624:	d9014117 	ldw	r4,1284(sp)
    2628:	94800044 	addi	r18,r18,1
    262c:	8c400044 	addi	r17,r17,1
    2630:	008001c4 	movi	r2,7
    2634:	a9000015 	stw	r4,0(r21)
    2638:	a8c00115 	stw	r3,4(r21)
    263c:	dc800e15 	stw	r18,56(sp)
    2640:	dc400d15 	stw	r17,52(sp)
    2644:	147e6016 	blt	r2,r17,1fc8 <___vfprintf_internal_r+0xde8>
    2648:	acc00204 	addi	r19,r21,8
    264c:	003cd106 	br	1994 <___vfprintf_internal_r+0x7b4>
    2650:	07000074 	movhi	fp,1
    2654:	e7347884 	addi	fp,fp,-11806
    2658:	003c4906 	br	1780 <___vfprintf_internal_r+0x5a0>
    265c:	dd000f04 	addi	r20,sp,60
    2660:	dc801904 	addi	r18,sp,100
    2664:	8009883a 	mov	r4,r16
    2668:	880b883a 	mov	r5,r17
    266c:	01800284 	movi	r6,10
    2670:	000f883a 	mov	r7,zero
    2674:	00082dc0 	call	82dc <__umoddi3>
    2678:	12000c04 	addi	r8,r2,48
    267c:	94bfffc4 	addi	r18,r18,-1
    2680:	8009883a 	mov	r4,r16
    2684:	880b883a 	mov	r5,r17
    2688:	01800284 	movi	r6,10
    268c:	000f883a 	mov	r7,zero
    2690:	92000005 	stb	r8,0(r18)
    2694:	0007c700 	call	7c70 <__udivdi3>
    2698:	1009883a 	mov	r4,r2
    269c:	1021883a 	mov	r16,r2
    26a0:	18800068 	cmpgeui	r2,r3,1
    26a4:	1823883a 	mov	r17,r3
    26a8:	103fee1e 	bne	r2,zero,2664 <___vfprintf_internal_r+0x1484>
    26ac:	1800021e 	bne	r3,zero,26b8 <___vfprintf_internal_r+0x14d8>
    26b0:	00800244 	movi	r2,9
    26b4:	113feb36 	bltu	r2,r4,2664 <___vfprintf_internal_r+0x1484>
    26b8:	94bfffc4 	addi	r18,r18,-1
    26bc:	dc814115 	stw	r18,1284(sp)
    26c0:	003fc006 	br	25c4 <___vfprintf_internal_r+0x13e4>
    26c4:	d9014c17 	ldw	r4,1328(sp)
    26c8:	2080004c 	andi	r2,r4,1
    26cc:	10009a1e 	bne	r2,zero,2938 <___vfprintf_internal_r+0x1758>
    26d0:	d9401904 	addi	r5,sp,100
    26d4:	dd000f04 	addi	r20,sp,60
    26d8:	d9414115 	stw	r5,1284(sp)
    26dc:	003d5b06 	br	1c4c <___vfprintf_internal_r+0xa6c>
    26e0:	d9014f17 	ldw	r4,1340(sp)
    26e4:	b00b883a 	mov	r5,r22
    26e8:	d9800c04 	addi	r6,sp,48
    26ec:	00011880 	call	1188 <__sprint_r>
    26f0:	103c731e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    26f4:	dc800e17 	ldw	r18,56(sp)
    26f8:	d8c01904 	addi	r3,sp,100
    26fc:	003cf906 	br	1ae4 <___vfprintf_internal_r+0x904>
    2700:	d8c14c17 	ldw	r3,1328(sp)
    2704:	1880040c 	andi	r2,r3,16
    2708:	1000711e 	bne	r2,zero,28d0 <___vfprintf_internal_r+0x16f0>
    270c:	d9014c17 	ldw	r4,1328(sp)
    2710:	2080100c 	andi	r2,r4,64
    2714:	10006e26 	beq	r2,zero,28d0 <___vfprintf_internal_r+0x16f0>
    2718:	3c00000b 	ldhu	r16,0(r7)
    271c:	0023883a 	mov	r17,zero
    2720:	39c00104 	addi	r7,r7,4
    2724:	d9c14015 	stw	r7,1280(sp)
    2728:	003efa06 	br	2314 <___vfprintf_internal_r+0x1134>
    272c:	dc400d17 	ldw	r17,52(sp)
    2730:	07000074 	movhi	fp,1
    2734:	e7347884 	addi	fp,fp,-11806
    2738:	9425883a 	add	r18,r18,r16
    273c:	8c400044 	addi	r17,r17,1
    2740:	008001c4 	movi	r2,7
    2744:	1f000015 	stw	fp,0(r3)
    2748:	1c000115 	stw	r16,4(r3)
    274c:	dc800e15 	stw	r18,56(sp)
    2750:	dc400d15 	stw	r17,52(sp)
    2754:	147d7016 	blt	r2,r17,1d18 <___vfprintf_internal_r+0xb38>
    2758:	18c00204 	addi	r3,r3,8
    275c:	003d7506 	br	1d34 <___vfprintf_internal_r+0xb54>
    2760:	dc800e17 	ldw	r18,56(sp)
    2764:	dc400d17 	ldw	r17,52(sp)
    2768:	07000074 	movhi	fp,1
    276c:	e7347c84 	addi	fp,fp,-11790
    2770:	003bba06 	br	165c <___vfprintf_internal_r+0x47c>
    2774:	d9014f17 	ldw	r4,1340(sp)
    2778:	b00b883a 	mov	r5,r22
    277c:	d9800c04 	addi	r6,sp,48
    2780:	00011880 	call	1188 <__sprint_r>
    2784:	103c4e1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    2788:	dc800e17 	ldw	r18,56(sp)
    278c:	d8c01904 	addi	r3,sp,100
    2790:	003ce306 	br	1b20 <___vfprintf_internal_r+0x940>
    2794:	3c000017 	ldw	r16,0(r7)
    2798:	0009883a 	mov	r4,zero
    279c:	39c00104 	addi	r7,r7,4
    27a0:	0023883a 	mov	r17,zero
    27a4:	d9c14015 	stw	r7,1280(sp)
    27a8:	d8000405 	stb	zero,16(sp)
    27ac:	003d1a06 	br	1c18 <___vfprintf_internal_r+0xa38>
    27b0:	38800017 	ldw	r2,0(r7)
    27b4:	39c00104 	addi	r7,r7,4
    27b8:	d9c14015 	stw	r7,1280(sp)
    27bc:	1023d7fa 	srai	r17,r2,31
    27c0:	1021883a 	mov	r16,r2
    27c4:	003d1206 	br	1c10 <___vfprintf_internal_r+0xa30>
    27c8:	3c000017 	ldw	r16,0(r7)
    27cc:	01000044 	movi	r4,1
    27d0:	39c00104 	addi	r7,r7,4
    27d4:	0023883a 	mov	r17,zero
    27d8:	d9c14015 	stw	r7,1280(sp)
    27dc:	d8000405 	stb	zero,16(sp)
    27e0:	003d0d06 	br	1c18 <___vfprintf_internal_r+0xa38>
    27e4:	00800074 	movhi	r2,1
    27e8:	10b47804 	addi	r2,r2,-11808
    27ec:	94800044 	addi	r18,r18,1
    27f0:	8c400044 	addi	r17,r17,1
    27f4:	a8800015 	stw	r2,0(r21)
    27f8:	00c00044 	movi	r3,1
    27fc:	008001c4 	movi	r2,7
    2800:	a8c00115 	stw	r3,4(r21)
    2804:	dc800e15 	stw	r18,56(sp)
    2808:	dc400d15 	stw	r17,52(sp)
    280c:	1440ca16 	blt	r2,r17,2b38 <___vfprintf_internal_r+0x1958>
    2810:	a8c00204 	addi	r3,r21,8
    2814:	2000061e 	bne	r4,zero,2830 <___vfprintf_internal_r+0x1650>
    2818:	d9414717 	ldw	r5,1308(sp)
    281c:	2800041e 	bne	r5,zero,2830 <___vfprintf_internal_r+0x1650>
    2820:	d9814c17 	ldw	r6,1328(sp)
    2824:	3080004c 	andi	r2,r6,1
    2828:	1005003a 	cmpeq	r2,r2,zero
    282c:	103bea1e 	bne	r2,zero,17d8 <___vfprintf_internal_r+0x5f8>
    2830:	00800044 	movi	r2,1
    2834:	dc400d17 	ldw	r17,52(sp)
    2838:	18800115 	stw	r2,4(r3)
    283c:	d8814917 	ldw	r2,1316(sp)
    2840:	94800044 	addi	r18,r18,1
    2844:	8c400044 	addi	r17,r17,1
    2848:	18800015 	stw	r2,0(r3)
    284c:	008001c4 	movi	r2,7
    2850:	dc800e15 	stw	r18,56(sp)
    2854:	dc400d15 	stw	r17,52(sp)
    2858:	1440ca16 	blt	r2,r17,2b84 <___vfprintf_internal_r+0x19a4>
    285c:	18c00204 	addi	r3,r3,8
    2860:	0121c83a 	sub	r16,zero,r4
    2864:	0400500e 	bge	zero,r16,29a8 <___vfprintf_internal_r+0x17c8>
    2868:	00800404 	movi	r2,16
    286c:	1400800e 	bge	r2,r16,2a70 <___vfprintf_internal_r+0x1890>
    2870:	1027883a 	mov	r19,r2
    2874:	07000074 	movhi	fp,1
    2878:	e7347884 	addi	fp,fp,-11806
    287c:	050001c4 	movi	r20,7
    2880:	00000306 	br	2890 <___vfprintf_internal_r+0x16b0>
    2884:	18c00204 	addi	r3,r3,8
    2888:	843ffc04 	addi	r16,r16,-16
    288c:	9c007a0e 	bge	r19,r16,2a78 <___vfprintf_internal_r+0x1898>
    2890:	94800404 	addi	r18,r18,16
    2894:	8c400044 	addi	r17,r17,1
    2898:	1f000015 	stw	fp,0(r3)
    289c:	1cc00115 	stw	r19,4(r3)
    28a0:	dc800e15 	stw	r18,56(sp)
    28a4:	dc400d15 	stw	r17,52(sp)
    28a8:	a47ff60e 	bge	r20,r17,2884 <___vfprintf_internal_r+0x16a4>
    28ac:	d9014f17 	ldw	r4,1340(sp)
    28b0:	b00b883a 	mov	r5,r22
    28b4:	d9800c04 	addi	r6,sp,48
    28b8:	00011880 	call	1188 <__sprint_r>
    28bc:	103c001e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    28c0:	dc800e17 	ldw	r18,56(sp)
    28c4:	dc400d17 	ldw	r17,52(sp)
    28c8:	d8c01904 	addi	r3,sp,100
    28cc:	003fee06 	br	2888 <___vfprintf_internal_r+0x16a8>
    28d0:	3c000017 	ldw	r16,0(r7)
    28d4:	0023883a 	mov	r17,zero
    28d8:	39c00104 	addi	r7,r7,4
    28dc:	d9c14015 	stw	r7,1280(sp)
    28e0:	003e8c06 	br	2314 <___vfprintf_internal_r+0x1134>
    28e4:	d9401904 	addi	r5,sp,100
    28e8:	dd000f04 	addi	r20,sp,60
    28ec:	d9414115 	stw	r5,1284(sp)
    28f0:	d9814417 	ldw	r6,1296(sp)
    28f4:	880a973a 	slli	r5,r17,28
    28f8:	8004d13a 	srli	r2,r16,4
    28fc:	810003cc 	andi	r4,r16,15
    2900:	3109883a 	add	r4,r6,r4
    2904:	2884b03a 	or	r2,r5,r2
    2908:	21400003 	ldbu	r5,0(r4)
    290c:	d9014117 	ldw	r4,1284(sp)
    2910:	8806d13a 	srli	r3,r17,4
    2914:	1021883a 	mov	r16,r2
    2918:	213fffc4 	addi	r4,r4,-1
    291c:	d9014115 	stw	r4,1284(sp)
    2920:	d9814117 	ldw	r6,1284(sp)
    2924:	10c8b03a 	or	r4,r2,r3
    2928:	1823883a 	mov	r17,r3
    292c:	31400005 	stb	r5,0(r6)
    2930:	203fef1e 	bne	r4,zero,28f0 <___vfprintf_internal_r+0x1710>
    2934:	003cc506 	br	1c4c <___vfprintf_internal_r+0xa6c>
    2938:	00800c04 	movi	r2,48
    293c:	d98018c4 	addi	r6,sp,99
    2940:	dd000f04 	addi	r20,sp,60
    2944:	d88018c5 	stb	r2,99(sp)
    2948:	d9814115 	stw	r6,1284(sp)
    294c:	003cbf06 	br	1c4c <___vfprintf_internal_r+0xa6c>
    2950:	dc400d17 	ldw	r17,52(sp)
    2954:	07000074 	movhi	fp,1
    2958:	e7347c84 	addi	fp,fp,-11790
    295c:	003bc106 	br	1864 <___vfprintf_internal_r+0x684>
    2960:	d9414c17 	ldw	r5,1328(sp)
    2964:	2880040c 	andi	r2,r5,16
    2968:	10007c26 	beq	r2,zero,2b5c <___vfprintf_internal_r+0x197c>
    296c:	38800017 	ldw	r2,0(r7)
    2970:	39c00104 	addi	r7,r7,4
    2974:	d9c14015 	stw	r7,1280(sp)
    2978:	d9814b17 	ldw	r6,1324(sp)
    297c:	d9c14017 	ldw	r7,1280(sp)
    2980:	11800015 	stw	r6,0(r2)
    2984:	003a7206 	br	1350 <___vfprintf_internal_r+0x170>
    2988:	d9014f17 	ldw	r4,1340(sp)
    298c:	b00b883a 	mov	r5,r22
    2990:	d9800c04 	addi	r6,sp,48
    2994:	00011880 	call	1188 <__sprint_r>
    2998:	103bc91e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    299c:	dc800e17 	ldw	r18,56(sp)
    29a0:	dc400d17 	ldw	r17,52(sp)
    29a4:	d8c01904 	addi	r3,sp,100
    29a8:	d9014717 	ldw	r4,1308(sp)
    29ac:	d9414117 	ldw	r5,1284(sp)
    29b0:	8c400044 	addi	r17,r17,1
    29b4:	9125883a 	add	r18,r18,r4
    29b8:	008001c4 	movi	r2,7
    29bc:	19400015 	stw	r5,0(r3)
    29c0:	19000115 	stw	r4,4(r3)
    29c4:	dc800e15 	stw	r18,56(sp)
    29c8:	dc400d15 	stw	r17,52(sp)
    29cc:	147ce816 	blt	r2,r17,1d70 <___vfprintf_internal_r+0xb90>
    29d0:	18c00204 	addi	r3,r3,8
    29d4:	003b8006 	br	17d8 <___vfprintf_internal_r+0x5f8>
    29d8:	38c00017 	ldw	r3,0(r7)
    29dc:	39000204 	addi	r4,r7,8
    29e0:	d9014015 	stw	r4,1280(sp)
    29e4:	d8c14215 	stw	r3,1288(sp)
    29e8:	39c00117 	ldw	r7,4(r7)
    29ec:	d9c14315 	stw	r7,1292(sp)
    29f0:	003e1a06 	br	225c <___vfprintf_internal_r+0x107c>
    29f4:	0005883a 	mov	r2,zero
    29f8:	1409c83a 	sub	r4,r2,r16
    29fc:	1105803a 	cmpltu	r2,r2,r4
    2a00:	044bc83a 	sub	r5,zero,r17
    2a04:	2885c83a 	sub	r2,r5,r2
    2a08:	2021883a 	mov	r16,r4
    2a0c:	1023883a 	mov	r17,r2
    2a10:	01000044 	movi	r4,1
    2a14:	00800b44 	movi	r2,45
    2a18:	d8800405 	stb	r2,16(sp)
    2a1c:	003c7e06 	br	1c18 <___vfprintf_internal_r+0xa38>
    2a20:	d9014f17 	ldw	r4,1340(sp)
    2a24:	b00b883a 	mov	r5,r22
    2a28:	d9800c04 	addi	r6,sp,48
    2a2c:	00011880 	call	1188 <__sprint_r>
    2a30:	103ba31e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    2a34:	dc800e17 	ldw	r18,56(sp)
    2a38:	dc400d17 	ldw	r17,52(sp)
    2a3c:	d9000517 	ldw	r4,20(sp)
    2a40:	d9401904 	addi	r5,sp,100
    2a44:	003da106 	br	20cc <___vfprintf_internal_r+0xeec>
    2a48:	d9014f17 	ldw	r4,1340(sp)
    2a4c:	b00b883a 	mov	r5,r22
    2a50:	d9800c04 	addi	r6,sp,48
    2a54:	00011880 	call	1188 <__sprint_r>
    2a58:	103b991e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    2a5c:	dc800e17 	ldw	r18,56(sp)
    2a60:	dc400d17 	ldw	r17,52(sp)
    2a64:	d9000517 	ldw	r4,20(sp)
    2a68:	d8c01904 	addi	r3,sp,100
    2a6c:	003d8b06 	br	209c <___vfprintf_internal_r+0xebc>
    2a70:	07000074 	movhi	fp,1
    2a74:	e7347884 	addi	fp,fp,-11806
    2a78:	9425883a 	add	r18,r18,r16
    2a7c:	8c400044 	addi	r17,r17,1
    2a80:	008001c4 	movi	r2,7
    2a84:	1f000015 	stw	fp,0(r3)
    2a88:	1c000115 	stw	r16,4(r3)
    2a8c:	dc800e15 	stw	r18,56(sp)
    2a90:	dc400d15 	stw	r17,52(sp)
    2a94:	147fbc16 	blt	r2,r17,2988 <___vfprintf_internal_r+0x17a8>
    2a98:	18c00204 	addi	r3,r3,8
    2a9c:	003fc206 	br	29a8 <___vfprintf_internal_r+0x17c8>
    2aa0:	d9014f17 	ldw	r4,1340(sp)
    2aa4:	b00b883a 	mov	r5,r22
    2aa8:	d9800c04 	addi	r6,sp,48
    2aac:	00011880 	call	1188 <__sprint_r>
    2ab0:	103b831e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    2ab4:	dc800e17 	ldw	r18,56(sp)
    2ab8:	d9000517 	ldw	r4,20(sp)
    2abc:	d8c01904 	addi	r3,sp,100
    2ac0:	003cfc06 	br	1eb4 <___vfprintf_internal_r+0xcd4>
    2ac4:	07000074 	movhi	fp,1
    2ac8:	e7347884 	addi	fp,fp,-11806
    2acc:	003bde06 	br	1a48 <___vfprintf_internal_r+0x868>
    2ad0:	00800074 	movhi	r2,1
    2ad4:	10b46704 	addi	r2,r2,-11876
    2ad8:	d8814115 	stw	r2,1284(sp)
    2adc:	003def06 	br	229c <___vfprintf_internal_r+0x10bc>
    2ae0:	d9014217 	ldw	r4,1288(sp)
    2ae4:	d9414317 	ldw	r5,1292(sp)
    2ae8:	00075900 	call	7590 <__isnand>
    2aec:	10003926 	beq	r2,zero,2bd4 <___vfprintf_internal_r+0x19f4>
    2af0:	d9414d17 	ldw	r5,1332(sp)
    2af4:	008011c4 	movi	r2,71
    2af8:	1140ce16 	blt	r2,r5,2e34 <___vfprintf_internal_r+0x1c54>
    2afc:	01800074 	movhi	r6,1
    2b00:	31b46804 	addi	r6,r6,-11872
    2b04:	d9814115 	stw	r6,1284(sp)
    2b08:	003de406 	br	229c <___vfprintf_internal_r+0x10bc>
    2b0c:	d9014c17 	ldw	r4,1328(sp)
    2b10:	bdc00044 	addi	r23,r23,1
    2b14:	b8c00007 	ldb	r3,0(r23)
    2b18:	21000814 	ori	r4,r4,32
    2b1c:	d9014c15 	stw	r4,1328(sp)
    2b20:	003a2e06 	br	13dc <___vfprintf_internal_r+0x1fc>
    2b24:	dcc14515 	stw	r19,1300(sp)
    2b28:	98011016 	blt	r19,zero,2f6c <___vfprintf_internal_r+0x1d8c>
    2b2c:	980f883a 	mov	r7,r19
    2b30:	d8014615 	stw	zero,1304(sp)
    2b34:	003c4c06 	br	1c68 <___vfprintf_internal_r+0xa88>
    2b38:	d9014f17 	ldw	r4,1340(sp)
    2b3c:	b00b883a 	mov	r5,r22
    2b40:	d9800c04 	addi	r6,sp,48
    2b44:	00011880 	call	1188 <__sprint_r>
    2b48:	103b5d1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    2b4c:	dc800e17 	ldw	r18,56(sp)
    2b50:	d9000517 	ldw	r4,20(sp)
    2b54:	d8c01904 	addi	r3,sp,100
    2b58:	003f2e06 	br	2814 <___vfprintf_internal_r+0x1634>
    2b5c:	d8c14c17 	ldw	r3,1328(sp)
    2b60:	1880100c 	andi	r2,r3,64
    2b64:	1000a026 	beq	r2,zero,2de8 <___vfprintf_internal_r+0x1c08>
    2b68:	38800017 	ldw	r2,0(r7)
    2b6c:	39c00104 	addi	r7,r7,4
    2b70:	d9c14015 	stw	r7,1280(sp)
    2b74:	d9014b17 	ldw	r4,1324(sp)
    2b78:	d9c14017 	ldw	r7,1280(sp)
    2b7c:	1100000d 	sth	r4,0(r2)
    2b80:	0039f306 	br	1350 <___vfprintf_internal_r+0x170>
    2b84:	d9014f17 	ldw	r4,1340(sp)
    2b88:	b00b883a 	mov	r5,r22
    2b8c:	d9800c04 	addi	r6,sp,48
    2b90:	00011880 	call	1188 <__sprint_r>
    2b94:	103b4a1e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    2b98:	dc800e17 	ldw	r18,56(sp)
    2b9c:	dc400d17 	ldw	r17,52(sp)
    2ba0:	d9000517 	ldw	r4,20(sp)
    2ba4:	d8c01904 	addi	r3,sp,100
    2ba8:	003f2d06 	br	2860 <___vfprintf_internal_r+0x1680>
    2bac:	00800184 	movi	r2,6
    2bb0:	14c09a36 	bltu	r2,r19,2e1c <___vfprintf_internal_r+0x1c3c>
    2bb4:	dcc14515 	stw	r19,1300(sp)
    2bb8:	9800010e 	bge	r19,zero,2bc0 <___vfprintf_internal_r+0x19e0>
    2bbc:	d8014515 	stw	zero,1300(sp)
    2bc0:	00800074 	movhi	r2,1
    2bc4:	10b46a04 	addi	r2,r2,-11864
    2bc8:	980f883a 	mov	r7,r19
    2bcc:	d8814115 	stw	r2,1284(sp)
    2bd0:	003a7206 	br	159c <___vfprintf_internal_r+0x3bc>
    2bd4:	00bfffc4 	movi	r2,-1
    2bd8:	9880e226 	beq	r19,r2,2f64 <___vfprintf_internal_r+0x1d84>
    2bdc:	d9414d17 	ldw	r5,1332(sp)
    2be0:	008019c4 	movi	r2,103
    2be4:	2880dc26 	beq	r5,r2,2f58 <___vfprintf_internal_r+0x1d78>
    2be8:	008011c4 	movi	r2,71
    2bec:	2880da26 	beq	r5,r2,2f58 <___vfprintf_internal_r+0x1d78>
    2bf0:	d9414c17 	ldw	r5,1328(sp)
    2bf4:	d9014317 	ldw	r4,1292(sp)
    2bf8:	d9814217 	ldw	r6,1288(sp)
    2bfc:	29404014 	ori	r5,r5,256
    2c00:	d9414c15 	stw	r5,1328(sp)
    2c04:	2000cc16 	blt	r4,zero,2f38 <___vfprintf_internal_r+0x1d58>
    2c08:	3021883a 	mov	r16,r6
    2c0c:	2023883a 	mov	r17,r4
    2c10:	0039883a 	mov	fp,zero
    2c14:	d9414d17 	ldw	r5,1332(sp)
    2c18:	00801984 	movi	r2,102
    2c1c:	2880b726 	beq	r5,r2,2efc <___vfprintf_internal_r+0x1d1c>
    2c20:	00801184 	movi	r2,70
    2c24:	2880b526 	beq	r5,r2,2efc <___vfprintf_internal_r+0x1d1c>
    2c28:	00801944 	movi	r2,101
    2c2c:	2880c826 	beq	r5,r2,2f50 <___vfprintf_internal_r+0x1d70>
    2c30:	00801144 	movi	r2,69
    2c34:	2880c626 	beq	r5,r2,2f50 <___vfprintf_internal_r+0x1d70>
    2c38:	9829883a 	mov	r20,r19
    2c3c:	d9014f17 	ldw	r4,1340(sp)
    2c40:	d8800504 	addi	r2,sp,20
    2c44:	880d883a 	mov	r6,r17
    2c48:	d8800115 	stw	r2,4(sp)
    2c4c:	d8c00604 	addi	r3,sp,24
    2c50:	d8800704 	addi	r2,sp,28
    2c54:	800b883a 	mov	r5,r16
    2c58:	01c00084 	movi	r7,2
    2c5c:	d8c00215 	stw	r3,8(sp)
    2c60:	d8800315 	stw	r2,12(sp)
    2c64:	dd000015 	stw	r20,0(sp)
    2c68:	00034480 	call	3448 <_dtoa_r>
    2c6c:	d9814d17 	ldw	r6,1332(sp)
    2c70:	d8814115 	stw	r2,1284(sp)
    2c74:	008019c4 	movi	r2,103
    2c78:	30809526 	beq	r6,r2,2ed0 <___vfprintf_internal_r+0x1cf0>
    2c7c:	d8c14d17 	ldw	r3,1332(sp)
    2c80:	008011c4 	movi	r2,71
    2c84:	18809226 	beq	r3,r2,2ed0 <___vfprintf_internal_r+0x1cf0>
    2c88:	d9414117 	ldw	r5,1284(sp)
    2c8c:	d9814d17 	ldw	r6,1332(sp)
    2c90:	00801984 	movi	r2,102
    2c94:	2d25883a 	add	r18,r5,r20
    2c98:	30808626 	beq	r6,r2,2eb4 <___vfprintf_internal_r+0x1cd4>
    2c9c:	00801184 	movi	r2,70
    2ca0:	30808426 	beq	r6,r2,2eb4 <___vfprintf_internal_r+0x1cd4>
    2ca4:	000d883a 	mov	r6,zero
    2ca8:	000f883a 	mov	r7,zero
    2cac:	880b883a 	mov	r5,r17
    2cb0:	8009883a 	mov	r4,r16
    2cb4:	000945c0 	call	945c <__eqdf2>
    2cb8:	1000751e 	bne	r2,zero,2e90 <___vfprintf_internal_r+0x1cb0>
    2cbc:	9005883a 	mov	r2,r18
    2cc0:	dc800715 	stw	r18,28(sp)
    2cc4:	d9014117 	ldw	r4,1284(sp)
    2cc8:	d9414d17 	ldw	r5,1332(sp)
    2ccc:	00c019c4 	movi	r3,103
    2cd0:	1125c83a 	sub	r18,r2,r4
    2cd4:	28c06826 	beq	r5,r3,2e78 <___vfprintf_internal_r+0x1c98>
    2cd8:	008011c4 	movi	r2,71
    2cdc:	28806626 	beq	r5,r2,2e78 <___vfprintf_internal_r+0x1c98>
    2ce0:	d9000517 	ldw	r4,20(sp)
    2ce4:	d8c14d17 	ldw	r3,1332(sp)
    2ce8:	00801944 	movi	r2,101
    2cec:	10c05516 	blt	r2,r3,2e44 <___vfprintf_internal_r+0x1c64>
    2cf0:	213fffc4 	addi	r4,r4,-1
    2cf4:	d9000515 	stw	r4,20(sp)
    2cf8:	d8c00805 	stb	r3,32(sp)
    2cfc:	2021883a 	mov	r16,r4
    2d00:	2000c116 	blt	r4,zero,3008 <___vfprintf_internal_r+0x1e28>
    2d04:	00800ac4 	movi	r2,43
    2d08:	d8800845 	stb	r2,33(sp)
    2d0c:	00800244 	movi	r2,9
    2d10:	1400af0e 	bge	r2,r16,2fd0 <___vfprintf_internal_r+0x1df0>
    2d14:	1027883a 	mov	r19,r2
    2d18:	dc400b84 	addi	r17,sp,46
    2d1c:	8009883a 	mov	r4,r16
    2d20:	01400284 	movi	r5,10
    2d24:	00007680 	call	768 <__modsi3>
    2d28:	10800c04 	addi	r2,r2,48
    2d2c:	8c7fffc4 	addi	r17,r17,-1
    2d30:	8009883a 	mov	r4,r16
    2d34:	01400284 	movi	r5,10
    2d38:	88800005 	stb	r2,0(r17)
    2d3c:	00007080 	call	708 <__divsi3>
    2d40:	1021883a 	mov	r16,r2
    2d44:	98bff516 	blt	r19,r2,2d1c <___vfprintf_internal_r+0x1b3c>
    2d48:	10c00c04 	addi	r3,r2,48
    2d4c:	d88009c4 	addi	r2,sp,39
    2d50:	108001c4 	addi	r2,r2,7
    2d54:	897fffc4 	addi	r5,r17,-1
    2d58:	88ffffc5 	stb	r3,-1(r17)
    2d5c:	2880a72e 	bgeu	r5,r2,2ffc <___vfprintf_internal_r+0x1e1c>
    2d60:	1009883a 	mov	r4,r2
    2d64:	d9800804 	addi	r6,sp,32
    2d68:	d8c00884 	addi	r3,sp,34
    2d6c:	28800003 	ldbu	r2,0(r5)
    2d70:	29400044 	addi	r5,r5,1
    2d74:	18800005 	stb	r2,0(r3)
    2d78:	18c00044 	addi	r3,r3,1
    2d7c:	293ffb36 	bltu	r5,r4,2d6c <___vfprintf_internal_r+0x1b8c>
    2d80:	1987c83a 	sub	r3,r3,r6
    2d84:	00800044 	movi	r2,1
    2d88:	d8c14815 	stw	r3,1312(sp)
    2d8c:	90cf883a 	add	r7,r18,r3
    2d90:	1480960e 	bge	r2,r18,2fec <___vfprintf_internal_r+0x1e0c>
    2d94:	39c00044 	addi	r7,r7,1
    2d98:	d9c14515 	stw	r7,1300(sp)
    2d9c:	38003416 	blt	r7,zero,2e70 <___vfprintf_internal_r+0x1c90>
    2da0:	e0803fcc 	andi	r2,fp,255
    2da4:	1080201c 	xori	r2,r2,128
    2da8:	10bfe004 	addi	r2,r2,-128
    2dac:	10004e26 	beq	r2,zero,2ee8 <___vfprintf_internal_r+0x1d08>
    2db0:	00800b44 	movi	r2,45
    2db4:	dc814715 	stw	r18,1308(sp)
    2db8:	d8014615 	stw	zero,1304(sp)
    2dbc:	d8800405 	stb	r2,16(sp)
    2dc0:	003bab06 	br	1c70 <___vfprintf_internal_r+0xa90>
    2dc4:	00800b44 	movi	r2,45
    2dc8:	d8800405 	stb	r2,16(sp)
    2dcc:	003d2d06 	br	2284 <___vfprintf_internal_r+0x10a4>
    2dd0:	d9014f17 	ldw	r4,1340(sp)
    2dd4:	b00b883a 	mov	r5,r22
    2dd8:	d9800c04 	addi	r6,sp,48
    2ddc:	00011880 	call	1188 <__sprint_r>
    2de0:	103ab71e 	bne	r2,zero,18c0 <___vfprintf_internal_r+0x6e0>
    2de4:	003ab506 	br	18bc <___vfprintf_internal_r+0x6dc>
    2de8:	38800017 	ldw	r2,0(r7)
    2dec:	39c00104 	addi	r7,r7,4
    2df0:	d9c14015 	stw	r7,1280(sp)
    2df4:	d9414b17 	ldw	r5,1324(sp)
    2df8:	d9c14017 	ldw	r7,1280(sp)
    2dfc:	11400015 	stw	r5,0(r2)
    2e00:	00395306 	br	1350 <___vfprintf_internal_r+0x170>
    2e04:	980f883a 	mov	r7,r19
    2e08:	dcc14515 	stw	r19,1300(sp)
    2e0c:	d8014615 	stw	zero,1304(sp)
    2e10:	003b9506 	br	1c68 <___vfprintf_internal_r+0xa88>
    2e14:	0027883a 	mov	r19,zero
    2e18:	00397206 	br	13e4 <___vfprintf_internal_r+0x204>
    2e1c:	00c00074 	movhi	r3,1
    2e20:	18f46a04 	addi	r3,r3,-11864
    2e24:	100f883a 	mov	r7,r2
    2e28:	d8814515 	stw	r2,1300(sp)
    2e2c:	d8c14115 	stw	r3,1284(sp)
    2e30:	0039da06 	br	159c <___vfprintf_internal_r+0x3bc>
    2e34:	00800074 	movhi	r2,1
    2e38:	10b46904 	addi	r2,r2,-11868
    2e3c:	d8814115 	stw	r2,1284(sp)
    2e40:	003d1606 	br	229c <___vfprintf_internal_r+0x10bc>
    2e44:	d9414d17 	ldw	r5,1332(sp)
    2e48:	00801984 	movi	r2,102
    2e4c:	28804926 	beq	r5,r2,2f74 <___vfprintf_internal_r+0x1d94>
    2e50:	200f883a 	mov	r7,r4
    2e54:	24805716 	blt	r4,r18,2fb4 <___vfprintf_internal_r+0x1dd4>
    2e58:	d9414c17 	ldw	r5,1328(sp)
    2e5c:	2880004c 	andi	r2,r5,1
    2e60:	10000126 	beq	r2,zero,2e68 <___vfprintf_internal_r+0x1c88>
    2e64:	21c00044 	addi	r7,r4,1
    2e68:	d9c14515 	stw	r7,1300(sp)
    2e6c:	383fcc0e 	bge	r7,zero,2da0 <___vfprintf_internal_r+0x1bc0>
    2e70:	d8014515 	stw	zero,1300(sp)
    2e74:	003fca06 	br	2da0 <___vfprintf_internal_r+0x1bc0>
    2e78:	d9000517 	ldw	r4,20(sp)
    2e7c:	00bfff04 	movi	r2,-4
    2e80:	1100480e 	bge	r2,r4,2fa4 <___vfprintf_internal_r+0x1dc4>
    2e84:	99004716 	blt	r19,r4,2fa4 <___vfprintf_internal_r+0x1dc4>
    2e88:	d8c14d15 	stw	r3,1332(sp)
    2e8c:	003ff006 	br	2e50 <___vfprintf_internal_r+0x1c70>
    2e90:	d8800717 	ldw	r2,28(sp)
    2e94:	14bf8b2e 	bgeu	r2,r18,2cc4 <___vfprintf_internal_r+0x1ae4>
    2e98:	9007883a 	mov	r3,r18
    2e9c:	01000c04 	movi	r4,48
    2ea0:	11000005 	stb	r4,0(r2)
    2ea4:	10800044 	addi	r2,r2,1
    2ea8:	d8800715 	stw	r2,28(sp)
    2eac:	18bffc1e 	bne	r3,r2,2ea0 <___vfprintf_internal_r+0x1cc0>
    2eb0:	003f8406 	br	2cc4 <___vfprintf_internal_r+0x1ae4>
    2eb4:	d8814117 	ldw	r2,1284(sp)
    2eb8:	10c00007 	ldb	r3,0(r2)
    2ebc:	00800c04 	movi	r2,48
    2ec0:	18805b26 	beq	r3,r2,3030 <___vfprintf_internal_r+0x1e50>
    2ec4:	d9000517 	ldw	r4,20(sp)
    2ec8:	9125883a 	add	r18,r18,r4
    2ecc:	003f7506 	br	2ca4 <___vfprintf_internal_r+0x1ac4>
    2ed0:	d9014c17 	ldw	r4,1328(sp)
    2ed4:	2080004c 	andi	r2,r4,1
    2ed8:	1005003a 	cmpeq	r2,r2,zero
    2edc:	103f6a26 	beq	r2,zero,2c88 <___vfprintf_internal_r+0x1aa8>
    2ee0:	d8800717 	ldw	r2,28(sp)
    2ee4:	003f7706 	br	2cc4 <___vfprintf_internal_r+0x1ae4>
    2ee8:	d9c14515 	stw	r7,1300(sp)
    2eec:	38004d16 	blt	r7,zero,3024 <___vfprintf_internal_r+0x1e44>
    2ef0:	dc814715 	stw	r18,1308(sp)
    2ef4:	d8014615 	stw	zero,1304(sp)
    2ef8:	003b5b06 	br	1c68 <___vfprintf_internal_r+0xa88>
    2efc:	d9014f17 	ldw	r4,1340(sp)
    2f00:	d8800504 	addi	r2,sp,20
    2f04:	d8800115 	stw	r2,4(sp)
    2f08:	d8c00604 	addi	r3,sp,24
    2f0c:	d8800704 	addi	r2,sp,28
    2f10:	800b883a 	mov	r5,r16
    2f14:	880d883a 	mov	r6,r17
    2f18:	01c000c4 	movi	r7,3
    2f1c:	d8c00215 	stw	r3,8(sp)
    2f20:	d8800315 	stw	r2,12(sp)
    2f24:	dcc00015 	stw	r19,0(sp)
    2f28:	9829883a 	mov	r20,r19
    2f2c:	00034480 	call	3448 <_dtoa_r>
    2f30:	d8814115 	stw	r2,1284(sp)
    2f34:	003f5106 	br	2c7c <___vfprintf_internal_r+0x1a9c>
    2f38:	d8c14217 	ldw	r3,1288(sp)
    2f3c:	d9014317 	ldw	r4,1292(sp)
    2f40:	07000b44 	movi	fp,45
    2f44:	1821883a 	mov	r16,r3
    2f48:	2460003c 	xorhi	r17,r4,32768
    2f4c:	003f3106 	br	2c14 <___vfprintf_internal_r+0x1a34>
    2f50:	9d000044 	addi	r20,r19,1
    2f54:	003f3906 	br	2c3c <___vfprintf_internal_r+0x1a5c>
    2f58:	983f251e 	bne	r19,zero,2bf0 <___vfprintf_internal_r+0x1a10>
    2f5c:	04c00044 	movi	r19,1
    2f60:	003f2306 	br	2bf0 <___vfprintf_internal_r+0x1a10>
    2f64:	04c00184 	movi	r19,6
    2f68:	003f2106 	br	2bf0 <___vfprintf_internal_r+0x1a10>
    2f6c:	d8014515 	stw	zero,1300(sp)
    2f70:	003eee06 	br	2b2c <___vfprintf_internal_r+0x194c>
    2f74:	200f883a 	mov	r7,r4
    2f78:	0100370e 	bge	zero,r4,3058 <___vfprintf_internal_r+0x1e78>
    2f7c:	9800031e 	bne	r19,zero,2f8c <___vfprintf_internal_r+0x1dac>
    2f80:	d9814c17 	ldw	r6,1328(sp)
    2f84:	3080004c 	andi	r2,r6,1
    2f88:	103fb726 	beq	r2,zero,2e68 <___vfprintf_internal_r+0x1c88>
    2f8c:	20800044 	addi	r2,r4,1
    2f90:	98a7883a 	add	r19,r19,r2
    2f94:	dcc14515 	stw	r19,1300(sp)
    2f98:	980f883a 	mov	r7,r19
    2f9c:	983f800e 	bge	r19,zero,2da0 <___vfprintf_internal_r+0x1bc0>
    2fa0:	003fb306 	br	2e70 <___vfprintf_internal_r+0x1c90>
    2fa4:	d9814d17 	ldw	r6,1332(sp)
    2fa8:	31bfff84 	addi	r6,r6,-2
    2fac:	d9814d15 	stw	r6,1332(sp)
    2fb0:	003f4c06 	br	2ce4 <___vfprintf_internal_r+0x1b04>
    2fb4:	0100180e 	bge	zero,r4,3018 <___vfprintf_internal_r+0x1e38>
    2fb8:	00800044 	movi	r2,1
    2fbc:	1485883a 	add	r2,r2,r18
    2fc0:	d8814515 	stw	r2,1300(sp)
    2fc4:	100f883a 	mov	r7,r2
    2fc8:	103f750e 	bge	r2,zero,2da0 <___vfprintf_internal_r+0x1bc0>
    2fcc:	003fa806 	br	2e70 <___vfprintf_internal_r+0x1c90>
    2fd0:	80c00c04 	addi	r3,r16,48
    2fd4:	00800c04 	movi	r2,48
    2fd8:	d8c008c5 	stb	r3,35(sp)
    2fdc:	d9800804 	addi	r6,sp,32
    2fe0:	d8c00904 	addi	r3,sp,36
    2fe4:	d8800885 	stb	r2,34(sp)
    2fe8:	003f6506 	br	2d80 <___vfprintf_internal_r+0x1ba0>
    2fec:	d9014c17 	ldw	r4,1328(sp)
    2ff0:	2084703a 	and	r2,r4,r2
    2ff4:	103f9c26 	beq	r2,zero,2e68 <___vfprintf_internal_r+0x1c88>
    2ff8:	003f6606 	br	2d94 <___vfprintf_internal_r+0x1bb4>
    2ffc:	d9800804 	addi	r6,sp,32
    3000:	d8c00884 	addi	r3,sp,34
    3004:	003f5e06 	br	2d80 <___vfprintf_internal_r+0x1ba0>
    3008:	00800b44 	movi	r2,45
    300c:	0121c83a 	sub	r16,zero,r4
    3010:	d8800845 	stb	r2,33(sp)
    3014:	003f3d06 	br	2d0c <___vfprintf_internal_r+0x1b2c>
    3018:	00800084 	movi	r2,2
    301c:	1105c83a 	sub	r2,r2,r4
    3020:	003fe606 	br	2fbc <___vfprintf_internal_r+0x1ddc>
    3024:	d8014515 	stw	zero,1300(sp)
    3028:	dc814715 	stw	r18,1308(sp)
    302c:	003fb106 	br	2ef4 <___vfprintf_internal_r+0x1d14>
    3030:	000d883a 	mov	r6,zero
    3034:	000f883a 	mov	r7,zero
    3038:	8009883a 	mov	r4,r16
    303c:	880b883a 	mov	r5,r17
    3040:	00094e40 	call	94e4 <__nedf2>
    3044:	103f9f26 	beq	r2,zero,2ec4 <___vfprintf_internal_r+0x1ce4>
    3048:	00800044 	movi	r2,1
    304c:	1509c83a 	sub	r4,r2,r20
    3050:	d9000515 	stw	r4,20(sp)
    3054:	003f9b06 	br	2ec4 <___vfprintf_internal_r+0x1ce4>
    3058:	98000d1e 	bne	r19,zero,3090 <___vfprintf_internal_r+0x1eb0>
    305c:	d8c14c17 	ldw	r3,1328(sp)
    3060:	1880004c 	andi	r2,r3,1
    3064:	10000a1e 	bne	r2,zero,3090 <___vfprintf_internal_r+0x1eb0>
    3068:	01000044 	movi	r4,1
    306c:	200f883a 	mov	r7,r4
    3070:	d9014515 	stw	r4,1300(sp)
    3074:	003f4a06 	br	2da0 <___vfprintf_internal_r+0x1bc0>
    3078:	3cc00017 	ldw	r19,0(r7)
    307c:	39c00104 	addi	r7,r7,4
    3080:	983d0e0e 	bge	r19,zero,24bc <___vfprintf_internal_r+0x12dc>
    3084:	b8c00007 	ldb	r3,0(r23)
    3088:	04ffffc4 	movi	r19,-1
    308c:	0038d306 	br	13dc <___vfprintf_internal_r+0x1fc>
    3090:	9cc00084 	addi	r19,r19,2
    3094:	dcc14515 	stw	r19,1300(sp)
    3098:	980f883a 	mov	r7,r19
    309c:	983f400e 	bge	r19,zero,2da0 <___vfprintf_internal_r+0x1bc0>
    30a0:	003f7306 	br	2e70 <___vfprintf_internal_r+0x1c90>

000030a4 <__vfprintf_internal>:
    30a4:	00800074 	movhi	r2,1
    30a8:	10bbb804 	addi	r2,r2,-4384
    30ac:	2013883a 	mov	r9,r4
    30b0:	11000017 	ldw	r4,0(r2)
    30b4:	2805883a 	mov	r2,r5
    30b8:	300f883a 	mov	r7,r6
    30bc:	480b883a 	mov	r5,r9
    30c0:	100d883a 	mov	r6,r2
    30c4:	00011e01 	jmpi	11e0 <___vfprintf_internal_r>

000030c8 <__swsetup_r>:
    30c8:	00800074 	movhi	r2,1
    30cc:	10bbb804 	addi	r2,r2,-4384
    30d0:	10c00017 	ldw	r3,0(r2)
    30d4:	defffd04 	addi	sp,sp,-12
    30d8:	dc400115 	stw	r17,4(sp)
    30dc:	dc000015 	stw	r16,0(sp)
    30e0:	dfc00215 	stw	ra,8(sp)
    30e4:	2023883a 	mov	r17,r4
    30e8:	2821883a 	mov	r16,r5
    30ec:	18000226 	beq	r3,zero,30f8 <__swsetup_r+0x30>
    30f0:	18800e17 	ldw	r2,56(r3)
    30f4:	10001f26 	beq	r2,zero,3174 <__swsetup_r+0xac>
    30f8:	8100030b 	ldhu	r4,12(r16)
    30fc:	2080020c 	andi	r2,r4,8
    3100:	10002826 	beq	r2,zero,31a4 <__swsetup_r+0xdc>
    3104:	81400417 	ldw	r5,16(r16)
    3108:	28001d26 	beq	r5,zero,3180 <__swsetup_r+0xb8>
    310c:	2080004c 	andi	r2,r4,1
    3110:	1005003a 	cmpeq	r2,r2,zero
    3114:	10000b26 	beq	r2,zero,3144 <__swsetup_r+0x7c>
    3118:	2080008c 	andi	r2,r4,2
    311c:	10001226 	beq	r2,zero,3168 <__swsetup_r+0xa0>
    3120:	0005883a 	mov	r2,zero
    3124:	80800215 	stw	r2,8(r16)
    3128:	28000b26 	beq	r5,zero,3158 <__swsetup_r+0x90>
    312c:	0005883a 	mov	r2,zero
    3130:	dfc00217 	ldw	ra,8(sp)
    3134:	dc400117 	ldw	r17,4(sp)
    3138:	dc000017 	ldw	r16,0(sp)
    313c:	dec00304 	addi	sp,sp,12
    3140:	f800283a 	ret
    3144:	80800517 	ldw	r2,20(r16)
    3148:	80000215 	stw	zero,8(r16)
    314c:	0085c83a 	sub	r2,zero,r2
    3150:	80800615 	stw	r2,24(r16)
    3154:	283ff51e 	bne	r5,zero,312c <__swsetup_r+0x64>
    3158:	2080200c 	andi	r2,r4,128
    315c:	103ff326 	beq	r2,zero,312c <__swsetup_r+0x64>
    3160:	00bfffc4 	movi	r2,-1
    3164:	003ff206 	br	3130 <__swsetup_r+0x68>
    3168:	80800517 	ldw	r2,20(r16)
    316c:	80800215 	stw	r2,8(r16)
    3170:	003fed06 	br	3128 <__swsetup_r+0x60>
    3174:	1809883a 	mov	r4,r3
    3178:	0004c940 	call	4c94 <__sinit>
    317c:	003fde06 	br	30f8 <__swsetup_r+0x30>
    3180:	20c0a00c 	andi	r3,r4,640
    3184:	00808004 	movi	r2,512
    3188:	18bfe026 	beq	r3,r2,310c <__swsetup_r+0x44>
    318c:	8809883a 	mov	r4,r17
    3190:	800b883a 	mov	r5,r16
    3194:	0005a400 	call	5a40 <__smakebuf_r>
    3198:	8100030b 	ldhu	r4,12(r16)
    319c:	81400417 	ldw	r5,16(r16)
    31a0:	003fda06 	br	310c <__swsetup_r+0x44>
    31a4:	2080040c 	andi	r2,r4,16
    31a8:	103fed26 	beq	r2,zero,3160 <__swsetup_r+0x98>
    31ac:	2080010c 	andi	r2,r4,4
    31b0:	10001226 	beq	r2,zero,31fc <__swsetup_r+0x134>
    31b4:	81400c17 	ldw	r5,48(r16)
    31b8:	28000526 	beq	r5,zero,31d0 <__swsetup_r+0x108>
    31bc:	80801004 	addi	r2,r16,64
    31c0:	28800226 	beq	r5,r2,31cc <__swsetup_r+0x104>
    31c4:	8809883a 	mov	r4,r17
    31c8:	000504c0 	call	504c <_free_r>
    31cc:	80000c15 	stw	zero,48(r16)
    31d0:	8080030b 	ldhu	r2,12(r16)
    31d4:	81400417 	ldw	r5,16(r16)
    31d8:	80000115 	stw	zero,4(r16)
    31dc:	10bff6cc 	andi	r2,r2,65499
    31e0:	8080030d 	sth	r2,12(r16)
    31e4:	81400015 	stw	r5,0(r16)
    31e8:	8080030b 	ldhu	r2,12(r16)
    31ec:	10800214 	ori	r2,r2,8
    31f0:	113fffcc 	andi	r4,r2,65535
    31f4:	8080030d 	sth	r2,12(r16)
    31f8:	003fc306 	br	3108 <__swsetup_r+0x40>
    31fc:	81400417 	ldw	r5,16(r16)
    3200:	003ff906 	br	31e8 <__swsetup_r+0x120>

00003204 <quorem>:
    3204:	28c00417 	ldw	r3,16(r5)
    3208:	20800417 	ldw	r2,16(r4)
    320c:	defff104 	addi	sp,sp,-60
    3210:	dfc00e15 	stw	ra,56(sp)
    3214:	df000d15 	stw	fp,52(sp)
    3218:	ddc00c15 	stw	r23,48(sp)
    321c:	dd800b15 	stw	r22,44(sp)
    3220:	dd400a15 	stw	r21,40(sp)
    3224:	dd000915 	stw	r20,36(sp)
    3228:	dcc00815 	stw	r19,32(sp)
    322c:	dc800715 	stw	r18,28(sp)
    3230:	dc400615 	stw	r17,24(sp)
    3234:	dc000515 	stw	r16,20(sp)
    3238:	d9000315 	stw	r4,12(sp)
    323c:	d9400415 	stw	r5,16(sp)
    3240:	10c07f16 	blt	r2,r3,3440 <quorem+0x23c>
    3244:	1d3fffc4 	addi	r20,r3,-1
    3248:	d8c00417 	ldw	r3,16(sp)
    324c:	d9000317 	ldw	r4,12(sp)
    3250:	a505883a 	add	r2,r20,r20
    3254:	1085883a 	add	r2,r2,r2
    3258:	1cc00504 	addi	r19,r3,20
    325c:	25c00504 	addi	r23,r4,20
    3260:	98ad883a 	add	r22,r19,r2
    3264:	15c7883a 	add	r3,r2,r23
    3268:	b1400017 	ldw	r5,0(r22)
    326c:	19000017 	ldw	r4,0(r3)
    3270:	d8c00015 	stw	r3,0(sp)
    3274:	29400044 	addi	r5,r5,1
    3278:	d9000215 	stw	r4,8(sp)
    327c:	00007c80 	call	7c8 <__udivsi3>
    3280:	1039883a 	mov	fp,r2
    3284:	10003d1e 	bne	r2,zero,337c <quorem+0x178>
    3288:	d9400417 	ldw	r5,16(sp)
    328c:	d9000317 	ldw	r4,12(sp)
    3290:	000602c0 	call	602c <__mcmp>
    3294:	10002c16 	blt	r2,zero,3348 <quorem+0x144>
    3298:	e7000044 	addi	fp,fp,1
    329c:	b80f883a 	mov	r7,r23
    32a0:	0011883a 	mov	r8,zero
    32a4:	0009883a 	mov	r4,zero
    32a8:	99400017 	ldw	r5,0(r19)
    32ac:	38c00017 	ldw	r3,0(r7)
    32b0:	9cc00104 	addi	r19,r19,4
    32b4:	28bfffcc 	andi	r2,r5,65535
    32b8:	2085883a 	add	r2,r4,r2
    32bc:	11bfffcc 	andi	r6,r2,65535
    32c0:	193fffcc 	andi	r4,r3,65535
    32c4:	1004d43a 	srli	r2,r2,16
    32c8:	280ad43a 	srli	r5,r5,16
    32cc:	2189c83a 	sub	r4,r4,r6
    32d0:	2209883a 	add	r4,r4,r8
    32d4:	1806d43a 	srli	r3,r3,16
    32d8:	288b883a 	add	r5,r5,r2
    32dc:	200dd43a 	srai	r6,r4,16
    32e0:	28bfffcc 	andi	r2,r5,65535
    32e4:	1887c83a 	sub	r3,r3,r2
    32e8:	1987883a 	add	r3,r3,r6
    32ec:	3900000d 	sth	r4,0(r7)
    32f0:	38c0008d 	sth	r3,2(r7)
    32f4:	2808d43a 	srli	r4,r5,16
    32f8:	39c00104 	addi	r7,r7,4
    32fc:	1811d43a 	srai	r8,r3,16
    3300:	b4ffe92e 	bgeu	r22,r19,32a8 <quorem+0xa4>
    3304:	a505883a 	add	r2,r20,r20
    3308:	1085883a 	add	r2,r2,r2
    330c:	b885883a 	add	r2,r23,r2
    3310:	10c00017 	ldw	r3,0(r2)
    3314:	18000c1e 	bne	r3,zero,3348 <quorem+0x144>
    3318:	113fff04 	addi	r4,r2,-4
    331c:	b900082e 	bgeu	r23,r4,3340 <quorem+0x13c>
    3320:	10bfff17 	ldw	r2,-4(r2)
    3324:	10000326 	beq	r2,zero,3334 <quorem+0x130>
    3328:	00000506 	br	3340 <quorem+0x13c>
    332c:	20800017 	ldw	r2,0(r4)
    3330:	1000031e 	bne	r2,zero,3340 <quorem+0x13c>
    3334:	213fff04 	addi	r4,r4,-4
    3338:	a53fffc4 	addi	r20,r20,-1
    333c:	b93ffb36 	bltu	r23,r4,332c <quorem+0x128>
    3340:	d9000317 	ldw	r4,12(sp)
    3344:	25000415 	stw	r20,16(r4)
    3348:	e005883a 	mov	r2,fp
    334c:	dfc00e17 	ldw	ra,56(sp)
    3350:	df000d17 	ldw	fp,52(sp)
    3354:	ddc00c17 	ldw	r23,48(sp)
    3358:	dd800b17 	ldw	r22,44(sp)
    335c:	dd400a17 	ldw	r21,40(sp)
    3360:	dd000917 	ldw	r20,36(sp)
    3364:	dcc00817 	ldw	r19,32(sp)
    3368:	dc800717 	ldw	r18,28(sp)
    336c:	dc400617 	ldw	r17,24(sp)
    3370:	dc000517 	ldw	r16,20(sp)
    3374:	dec00f04 	addi	sp,sp,60
    3378:	f800283a 	ret
    337c:	b823883a 	mov	r17,r23
    3380:	9825883a 	mov	r18,r19
    3384:	d8000115 	stw	zero,4(sp)
    3388:	002b883a 	mov	r21,zero
    338c:	94000017 	ldw	r16,0(r18)
    3390:	e009883a 	mov	r4,fp
    3394:	94800104 	addi	r18,r18,4
    3398:	817fffcc 	andi	r5,r16,65535
    339c:	00007d80 	call	7d8 <__mulsi3>
    33a0:	800ad43a 	srli	r5,r16,16
    33a4:	e009883a 	mov	r4,fp
    33a8:	a8a1883a 	add	r16,r21,r2
    33ac:	00007d80 	call	7d8 <__mulsi3>
    33b0:	89000017 	ldw	r4,0(r17)
    33b4:	80ffffcc 	andi	r3,r16,65535
    33b8:	8020d43a 	srli	r16,r16,16
    33bc:	217fffcc 	andi	r5,r4,65535
    33c0:	28cbc83a 	sub	r5,r5,r3
    33c4:	d8c00117 	ldw	r3,4(sp)
    33c8:	2008d43a 	srli	r4,r4,16
    33cc:	1405883a 	add	r2,r2,r16
    33d0:	28cb883a 	add	r5,r5,r3
    33d4:	280dd43a 	srai	r6,r5,16
    33d8:	10ffffcc 	andi	r3,r2,65535
    33dc:	20c9c83a 	sub	r4,r4,r3
    33e0:	2189883a 	add	r4,r4,r6
    33e4:	8900008d 	sth	r4,2(r17)
    33e8:	2009d43a 	srai	r4,r4,16
    33ec:	8940000d 	sth	r5,0(r17)
    33f0:	102ad43a 	srli	r21,r2,16
    33f4:	8c400104 	addi	r17,r17,4
    33f8:	d9000115 	stw	r4,4(sp)
    33fc:	b4bfe32e 	bgeu	r22,r18,338c <quorem+0x188>
    3400:	d9000217 	ldw	r4,8(sp)
    3404:	203fa01e 	bne	r4,zero,3288 <quorem+0x84>
    3408:	d8800017 	ldw	r2,0(sp)
    340c:	10ffff04 	addi	r3,r2,-4
    3410:	b8c0082e 	bgeu	r23,r3,3434 <quorem+0x230>
    3414:	10bfff17 	ldw	r2,-4(r2)
    3418:	10000326 	beq	r2,zero,3428 <quorem+0x224>
    341c:	00000506 	br	3434 <quorem+0x230>
    3420:	18800017 	ldw	r2,0(r3)
    3424:	1000031e 	bne	r2,zero,3434 <quorem+0x230>
    3428:	18ffff04 	addi	r3,r3,-4
    342c:	a53fffc4 	addi	r20,r20,-1
    3430:	b8fffb36 	bltu	r23,r3,3420 <quorem+0x21c>
    3434:	d8c00317 	ldw	r3,12(sp)
    3438:	1d000415 	stw	r20,16(r3)
    343c:	003f9206 	br	3288 <quorem+0x84>
    3440:	0005883a 	mov	r2,zero
    3444:	003fc106 	br	334c <quorem+0x148>

00003448 <_dtoa_r>:
    3448:	22001017 	ldw	r8,64(r4)
    344c:	deffda04 	addi	sp,sp,-152
    3450:	dd402115 	stw	r21,132(sp)
    3454:	dd002015 	stw	r20,128(sp)
    3458:	dc801e15 	stw	r18,120(sp)
    345c:	dc401d15 	stw	r17,116(sp)
    3460:	dfc02515 	stw	ra,148(sp)
    3464:	df002415 	stw	fp,144(sp)
    3468:	ddc02315 	stw	r23,140(sp)
    346c:	dd802215 	stw	r22,136(sp)
    3470:	dcc01f15 	stw	r19,124(sp)
    3474:	dc001c15 	stw	r16,112(sp)
    3478:	d9001615 	stw	r4,88(sp)
    347c:	3023883a 	mov	r17,r6
    3480:	2829883a 	mov	r20,r5
    3484:	d9c01715 	stw	r7,92(sp)
    3488:	dc802817 	ldw	r18,160(sp)
    348c:	302b883a 	mov	r21,r6
    3490:	40000a26 	beq	r8,zero,34bc <_dtoa_r+0x74>
    3494:	20801117 	ldw	r2,68(r4)
    3498:	400b883a 	mov	r5,r8
    349c:	40800115 	stw	r2,4(r8)
    34a0:	20c01117 	ldw	r3,68(r4)
    34a4:	00800044 	movi	r2,1
    34a8:	10c4983a 	sll	r2,r2,r3
    34ac:	40800215 	stw	r2,8(r8)
    34b0:	0005ed00 	call	5ed0 <_Bfree>
    34b4:	d8c01617 	ldw	r3,88(sp)
    34b8:	18001015 	stw	zero,64(r3)
    34bc:	8800a316 	blt	r17,zero,374c <_dtoa_r+0x304>
    34c0:	90000015 	stw	zero,0(r18)
    34c4:	a8dffc2c 	andhi	r3,r21,32752
    34c8:	009ffc34 	movhi	r2,32752
    34cc:	18809126 	beq	r3,r2,3714 <_dtoa_r+0x2cc>
    34d0:	000d883a 	mov	r6,zero
    34d4:	000f883a 	mov	r7,zero
    34d8:	a009883a 	mov	r4,r20
    34dc:	a80b883a 	mov	r5,r21
    34e0:	dd001215 	stw	r20,72(sp)
    34e4:	dd401315 	stw	r21,76(sp)
    34e8:	00094e40 	call	94e4 <__nedf2>
    34ec:	1000171e 	bne	r2,zero,354c <_dtoa_r+0x104>
    34f0:	d9802717 	ldw	r6,156(sp)
    34f4:	00800044 	movi	r2,1
    34f8:	30800015 	stw	r2,0(r6)
    34fc:	d8802917 	ldw	r2,164(sp)
    3500:	10029b26 	beq	r2,zero,3f70 <_dtoa_r+0xb28>
    3504:	d9002917 	ldw	r4,164(sp)
    3508:	00800074 	movhi	r2,1
    350c:	10b47844 	addi	r2,r2,-11807
    3510:	10ffffc4 	addi	r3,r2,-1
    3514:	20800015 	stw	r2,0(r4)
    3518:	1805883a 	mov	r2,r3
    351c:	dfc02517 	ldw	ra,148(sp)
    3520:	df002417 	ldw	fp,144(sp)
    3524:	ddc02317 	ldw	r23,140(sp)
    3528:	dd802217 	ldw	r22,136(sp)
    352c:	dd402117 	ldw	r21,132(sp)
    3530:	dd002017 	ldw	r20,128(sp)
    3534:	dcc01f17 	ldw	r19,124(sp)
    3538:	dc801e17 	ldw	r18,120(sp)
    353c:	dc401d17 	ldw	r17,116(sp)
    3540:	dc001c17 	ldw	r16,112(sp)
    3544:	dec02604 	addi	sp,sp,152
    3548:	f800283a 	ret
    354c:	d9001617 	ldw	r4,88(sp)
    3550:	d9401217 	ldw	r5,72(sp)
    3554:	d8800104 	addi	r2,sp,4
    3558:	a80d883a 	mov	r6,r21
    355c:	d9c00204 	addi	r7,sp,8
    3560:	d8800015 	stw	r2,0(sp)
    3564:	000650c0 	call	650c <__d2b>
    3568:	d8800715 	stw	r2,28(sp)
    356c:	a804d53a 	srli	r2,r21,20
    3570:	1101ffcc 	andi	r4,r2,2047
    3574:	20008626 	beq	r4,zero,3790 <_dtoa_r+0x348>
    3578:	d8c01217 	ldw	r3,72(sp)
    357c:	00800434 	movhi	r2,16
    3580:	10bfffc4 	addi	r2,r2,-1
    3584:	ddc00117 	ldw	r23,4(sp)
    3588:	a884703a 	and	r2,r21,r2
    358c:	1811883a 	mov	r8,r3
    3590:	124ffc34 	orhi	r9,r2,16368
    3594:	25bf0044 	addi	r22,r4,-1023
    3598:	d8000815 	stw	zero,32(sp)
    359c:	0005883a 	mov	r2,zero
    35a0:	00cffe34 	movhi	r3,16376
    35a4:	480b883a 	mov	r5,r9
    35a8:	4009883a 	mov	r4,r8
    35ac:	180f883a 	mov	r7,r3
    35b0:	100d883a 	mov	r6,r2
    35b4:	0008d4c0 	call	8d4c <__subdf3>
    35b8:	0218dbf4 	movhi	r8,25455
    35bc:	4210d844 	addi	r8,r8,17249
    35c0:	024ff4f4 	movhi	r9,16339
    35c4:	4a61e9c4 	addi	r9,r9,-30809
    35c8:	480f883a 	mov	r7,r9
    35cc:	400d883a 	mov	r6,r8
    35d0:	180b883a 	mov	r5,r3
    35d4:	1009883a 	mov	r4,r2
    35d8:	0008e400 	call	8e40 <__muldf3>
    35dc:	0222d874 	movhi	r8,35681
    35e0:	42322cc4 	addi	r8,r8,-14157
    35e4:	024ff1f4 	movhi	r9,16327
    35e8:	4a628a04 	addi	r9,r9,-30168
    35ec:	480f883a 	mov	r7,r9
    35f0:	400d883a 	mov	r6,r8
    35f4:	180b883a 	mov	r5,r3
    35f8:	1009883a 	mov	r4,r2
    35fc:	0008dcc0 	call	8dcc <__adddf3>
    3600:	b009883a 	mov	r4,r22
    3604:	1021883a 	mov	r16,r2
    3608:	1823883a 	mov	r17,r3
    360c:	00097040 	call	9704 <__floatsidf>
    3610:	021427f4 	movhi	r8,20639
    3614:	421e7ec4 	addi	r8,r8,31227
    3618:	024ff4f4 	movhi	r9,16339
    361c:	4a5104c4 	addi	r9,r9,17427
    3620:	480f883a 	mov	r7,r9
    3624:	400d883a 	mov	r6,r8
    3628:	180b883a 	mov	r5,r3
    362c:	1009883a 	mov	r4,r2
    3630:	0008e400 	call	8e40 <__muldf3>
    3634:	180f883a 	mov	r7,r3
    3638:	880b883a 	mov	r5,r17
    363c:	100d883a 	mov	r6,r2
    3640:	8009883a 	mov	r4,r16
    3644:	0008dcc0 	call	8dcc <__adddf3>
    3648:	1009883a 	mov	r4,r2
    364c:	180b883a 	mov	r5,r3
    3650:	1021883a 	mov	r16,r2
    3654:	1823883a 	mov	r17,r3
    3658:	00097fc0 	call	97fc <__fixdfsi>
    365c:	000d883a 	mov	r6,zero
    3660:	000f883a 	mov	r7,zero
    3664:	8009883a 	mov	r4,r16
    3668:	880b883a 	mov	r5,r17
    366c:	d8800d15 	stw	r2,52(sp)
    3670:	000967c0 	call	967c <__ltdf2>
    3674:	10031716 	blt	r2,zero,42d4 <_dtoa_r+0xe8c>
    3678:	d8c00d17 	ldw	r3,52(sp)
    367c:	00800584 	movi	r2,22
    3680:	10c1482e 	bgeu	r2,r3,3ba4 <_dtoa_r+0x75c>
    3684:	01000044 	movi	r4,1
    3688:	d9000c15 	stw	r4,48(sp)
    368c:	bd85c83a 	sub	r2,r23,r22
    3690:	11bfffc4 	addi	r6,r2,-1
    3694:	30030b16 	blt	r6,zero,42c4 <_dtoa_r+0xe7c>
    3698:	d9800a15 	stw	r6,40(sp)
    369c:	d8001115 	stw	zero,68(sp)
    36a0:	d8c00d17 	ldw	r3,52(sp)
    36a4:	1802ff16 	blt	r3,zero,42a4 <_dtoa_r+0xe5c>
    36a8:	d9000a17 	ldw	r4,40(sp)
    36ac:	d8c00915 	stw	r3,36(sp)
    36b0:	d8001015 	stw	zero,64(sp)
    36b4:	20c9883a 	add	r4,r4,r3
    36b8:	d9000a15 	stw	r4,40(sp)
    36bc:	d9001717 	ldw	r4,92(sp)
    36c0:	00800244 	movi	r2,9
    36c4:	11004636 	bltu	r2,r4,37e0 <_dtoa_r+0x398>
    36c8:	00800144 	movi	r2,5
    36cc:	11020416 	blt	r2,r4,3ee0 <_dtoa_r+0xa98>
    36d0:	04400044 	movi	r17,1
    36d4:	d8c01717 	ldw	r3,92(sp)
    36d8:	00800144 	movi	r2,5
    36dc:	10c1ed36 	bltu	r2,r3,3e94 <_dtoa_r+0xa4c>
    36e0:	18c5883a 	add	r2,r3,r3
    36e4:	1085883a 	add	r2,r2,r2
    36e8:	00c00034 	movhi	r3,0
    36ec:	18cdbf04 	addi	r3,r3,14076
    36f0:	10c5883a 	add	r2,r2,r3
    36f4:	11000017 	ldw	r4,0(r2)
    36f8:	2000683a 	jmp	r4
    36fc:	000037e8 	cmpgeui	zero,zero,223
    3700:	000037e8 	cmpgeui	zero,zero,223
    3704:	000041e8 	cmpgeui	zero,zero,263
    3708:	000041c0 	call	41c <initialize_thread+0x28>
    370c:	00004204 	movi	zero,264
    3710:	00004210 	cmplti	zero,zero,264
    3714:	d9002717 	ldw	r4,156(sp)
    3718:	0089c3c4 	movi	r2,9999
    371c:	20800015 	stw	r2,0(r4)
    3720:	a0001026 	beq	r20,zero,3764 <_dtoa_r+0x31c>
    3724:	00c00074 	movhi	r3,1
    3728:	18f48404 	addi	r3,r3,-11760
    372c:	d9802917 	ldw	r6,164(sp)
    3730:	303f7926 	beq	r6,zero,3518 <_dtoa_r+0xd0>
    3734:	188000c7 	ldb	r2,3(r3)
    3738:	190000c4 	addi	r4,r3,3
    373c:	1000101e 	bne	r2,zero,3780 <_dtoa_r+0x338>
    3740:	d8802917 	ldw	r2,164(sp)
    3744:	11000015 	stw	r4,0(r2)
    3748:	003f7306 	br	3518 <_dtoa_r+0xd0>
    374c:	00a00034 	movhi	r2,32768
    3750:	10bfffc4 	addi	r2,r2,-1
    3754:	00c00044 	movi	r3,1
    3758:	88aa703a 	and	r21,r17,r2
    375c:	90c00015 	stw	r3,0(r18)
    3760:	003f5806 	br	34c4 <_dtoa_r+0x7c>
    3764:	00800434 	movhi	r2,16
    3768:	10bfffc4 	addi	r2,r2,-1
    376c:	a884703a 	and	r2,r21,r2
    3770:	103fec1e 	bne	r2,zero,3724 <_dtoa_r+0x2dc>
    3774:	00c00074 	movhi	r3,1
    3778:	18f48104 	addi	r3,r3,-11772
    377c:	003feb06 	br	372c <_dtoa_r+0x2e4>
    3780:	d8802917 	ldw	r2,164(sp)
    3784:	19000204 	addi	r4,r3,8
    3788:	11000015 	stw	r4,0(r2)
    378c:	003f6206 	br	3518 <_dtoa_r+0xd0>
    3790:	ddc00117 	ldw	r23,4(sp)
    3794:	d8800217 	ldw	r2,8(sp)
    3798:	01000804 	movi	r4,32
    379c:	b8c10c84 	addi	r3,r23,1074
    37a0:	18a3883a 	add	r17,r3,r2
    37a4:	2441b80e 	bge	r4,r17,3e88 <_dtoa_r+0xa40>
    37a8:	00c01004 	movi	r3,64
    37ac:	1c47c83a 	sub	r3,r3,r17
    37b0:	88bff804 	addi	r2,r17,-32
    37b4:	a8c6983a 	sll	r3,r21,r3
    37b8:	a084d83a 	srl	r2,r20,r2
    37bc:	1888b03a 	or	r4,r3,r2
    37c0:	00098d40 	call	98d4 <__floatunsidf>
    37c4:	1011883a 	mov	r8,r2
    37c8:	00bf8434 	movhi	r2,65040
    37cc:	01000044 	movi	r4,1
    37d0:	10d3883a 	add	r9,r2,r3
    37d4:	8dbef344 	addi	r22,r17,-1075
    37d8:	d9000815 	stw	r4,32(sp)
    37dc:	003f6f06 	br	359c <_dtoa_r+0x154>
    37e0:	d8001715 	stw	zero,92(sp)
    37e4:	04400044 	movi	r17,1
    37e8:	00bfffc4 	movi	r2,-1
    37ec:	00c00044 	movi	r3,1
    37f0:	d8800e15 	stw	r2,56(sp)
    37f4:	d8002615 	stw	zero,152(sp)
    37f8:	d8800f15 	stw	r2,60(sp)
    37fc:	d8c00b15 	stw	r3,44(sp)
    3800:	1021883a 	mov	r16,r2
    3804:	d8801617 	ldw	r2,88(sp)
    3808:	10001115 	stw	zero,68(r2)
    380c:	d8801617 	ldw	r2,88(sp)
    3810:	11401117 	ldw	r5,68(r2)
    3814:	1009883a 	mov	r4,r2
    3818:	00064500 	call	6450 <_Balloc>
    381c:	d8c01617 	ldw	r3,88(sp)
    3820:	d8800515 	stw	r2,20(sp)
    3824:	18801015 	stw	r2,64(r3)
    3828:	00800384 	movi	r2,14
    382c:	14006836 	bltu	r2,r16,39d0 <_dtoa_r+0x588>
    3830:	8805003a 	cmpeq	r2,r17,zero
    3834:	1000661e 	bne	r2,zero,39d0 <_dtoa_r+0x588>
    3838:	d9000d17 	ldw	r4,52(sp)
    383c:	0102300e 	bge	zero,r4,4100 <_dtoa_r+0xcb8>
    3840:	208003cc 	andi	r2,r4,15
    3844:	100490fa 	slli	r2,r2,3
    3848:	2025d13a 	srai	r18,r4,4
    384c:	00c00074 	movhi	r3,1
    3850:	18f49604 	addi	r3,r3,-11688
    3854:	10c5883a 	add	r2,r2,r3
    3858:	90c0040c 	andi	r3,r18,16
    385c:	14000017 	ldw	r16,0(r2)
    3860:	14400117 	ldw	r17,4(r2)
    3864:	18036a1e 	bne	r3,zero,4610 <_dtoa_r+0x11c8>
    3868:	05800084 	movi	r22,2
    386c:	90001026 	beq	r18,zero,38b0 <_dtoa_r+0x468>
    3870:	04c00074 	movhi	r19,1
    3874:	9cf4c804 	addi	r19,r19,-11488
    3878:	9080004c 	andi	r2,r18,1
    387c:	1005003a 	cmpeq	r2,r2,zero
    3880:	1000081e 	bne	r2,zero,38a4 <_dtoa_r+0x45c>
    3884:	99800017 	ldw	r6,0(r19)
    3888:	99c00117 	ldw	r7,4(r19)
    388c:	880b883a 	mov	r5,r17
    3890:	8009883a 	mov	r4,r16
    3894:	0008e400 	call	8e40 <__muldf3>
    3898:	1021883a 	mov	r16,r2
    389c:	b5800044 	addi	r22,r22,1
    38a0:	1823883a 	mov	r17,r3
    38a4:	9025d07a 	srai	r18,r18,1
    38a8:	9cc00204 	addi	r19,r19,8
    38ac:	903ff21e 	bne	r18,zero,3878 <_dtoa_r+0x430>
    38b0:	a80b883a 	mov	r5,r21
    38b4:	a009883a 	mov	r4,r20
    38b8:	880f883a 	mov	r7,r17
    38bc:	800d883a 	mov	r6,r16
    38c0:	00092040 	call	9204 <__divdf3>
    38c4:	1029883a 	mov	r20,r2
    38c8:	182b883a 	mov	r21,r3
    38cc:	d8c00c17 	ldw	r3,48(sp)
    38d0:	1805003a 	cmpeq	r2,r3,zero
    38d4:	1000081e 	bne	r2,zero,38f8 <_dtoa_r+0x4b0>
    38d8:	0005883a 	mov	r2,zero
    38dc:	00cffc34 	movhi	r3,16368
    38e0:	180f883a 	mov	r7,r3
    38e4:	a009883a 	mov	r4,r20
    38e8:	a80b883a 	mov	r5,r21
    38ec:	100d883a 	mov	r6,r2
    38f0:	000967c0 	call	967c <__ltdf2>
    38f4:	1003fe16 	blt	r2,zero,48f0 <_dtoa_r+0x14a8>
    38f8:	b009883a 	mov	r4,r22
    38fc:	00097040 	call	9704 <__floatsidf>
    3900:	180b883a 	mov	r5,r3
    3904:	1009883a 	mov	r4,r2
    3908:	a00d883a 	mov	r6,r20
    390c:	a80f883a 	mov	r7,r21
    3910:	0008e400 	call	8e40 <__muldf3>
    3914:	0011883a 	mov	r8,zero
    3918:	02500734 	movhi	r9,16412
    391c:	1009883a 	mov	r4,r2
    3920:	180b883a 	mov	r5,r3
    3924:	480f883a 	mov	r7,r9
    3928:	400d883a 	mov	r6,r8
    392c:	0008dcc0 	call	8dcc <__adddf3>
    3930:	d9000f17 	ldw	r4,60(sp)
    3934:	102d883a 	mov	r22,r2
    3938:	00bf3034 	movhi	r2,64704
    393c:	18b9883a 	add	fp,r3,r2
    3940:	e02f883a 	mov	r23,fp
    3944:	20028f1e 	bne	r4,zero,4384 <_dtoa_r+0xf3c>
    3948:	0005883a 	mov	r2,zero
    394c:	00d00534 	movhi	r3,16404
    3950:	a009883a 	mov	r4,r20
    3954:	a80b883a 	mov	r5,r21
    3958:	180f883a 	mov	r7,r3
    395c:	100d883a 	mov	r6,r2
    3960:	0008d4c0 	call	8d4c <__subdf3>
    3964:	1009883a 	mov	r4,r2
    3968:	e00f883a 	mov	r7,fp
    396c:	180b883a 	mov	r5,r3
    3970:	b00d883a 	mov	r6,r22
    3974:	1025883a 	mov	r18,r2
    3978:	1827883a 	mov	r19,r3
    397c:	000956c0 	call	956c <__gtdf2>
    3980:	00834f16 	blt	zero,r2,46c0 <_dtoa_r+0x1278>
    3984:	e0e0003c 	xorhi	r3,fp,32768
    3988:	9009883a 	mov	r4,r18
    398c:	980b883a 	mov	r5,r19
    3990:	180f883a 	mov	r7,r3
    3994:	b00d883a 	mov	r6,r22
    3998:	000967c0 	call	967c <__ltdf2>
    399c:	1000080e 	bge	r2,zero,39c0 <_dtoa_r+0x578>
    39a0:	0027883a 	mov	r19,zero
    39a4:	0025883a 	mov	r18,zero
    39a8:	d8802617 	ldw	r2,152(sp)
    39ac:	df000517 	ldw	fp,20(sp)
    39b0:	d8000615 	stw	zero,24(sp)
    39b4:	0084303a 	nor	r2,zero,r2
    39b8:	d8800d15 	stw	r2,52(sp)
    39bc:	00019b06 	br	402c <_dtoa_r+0xbe4>
    39c0:	d9801217 	ldw	r6,72(sp)
    39c4:	d8801317 	ldw	r2,76(sp)
    39c8:	3029883a 	mov	r20,r6
    39cc:	102b883a 	mov	r21,r2
    39d0:	d8c00217 	ldw	r3,8(sp)
    39d4:	18008516 	blt	r3,zero,3bec <_dtoa_r+0x7a4>
    39d8:	d9000d17 	ldw	r4,52(sp)
    39dc:	00800384 	movi	r2,14
    39e0:	11008216 	blt	r2,r4,3bec <_dtoa_r+0x7a4>
    39e4:	200490fa 	slli	r2,r4,3
    39e8:	d9802617 	ldw	r6,152(sp)
    39ec:	00c00074 	movhi	r3,1
    39f0:	18f49604 	addi	r3,r3,-11688
    39f4:	10c5883a 	add	r2,r2,r3
    39f8:	14800017 	ldw	r18,0(r2)
    39fc:	14c00117 	ldw	r19,4(r2)
    3a00:	30031e16 	blt	r6,zero,467c <_dtoa_r+0x1234>
    3a04:	d9000517 	ldw	r4,20(sp)
    3a08:	d8c00f17 	ldw	r3,60(sp)
    3a0c:	a823883a 	mov	r17,r21
    3a10:	a021883a 	mov	r16,r20
    3a14:	192b883a 	add	r21,r3,r4
    3a18:	2039883a 	mov	fp,r4
    3a1c:	00000f06 	br	3a5c <_dtoa_r+0x614>
    3a20:	0005883a 	mov	r2,zero
    3a24:	00d00934 	movhi	r3,16420
    3a28:	5009883a 	mov	r4,r10
    3a2c:	580b883a 	mov	r5,r11
    3a30:	180f883a 	mov	r7,r3
    3a34:	100d883a 	mov	r6,r2
    3a38:	0008e400 	call	8e40 <__muldf3>
    3a3c:	180b883a 	mov	r5,r3
    3a40:	000d883a 	mov	r6,zero
    3a44:	000f883a 	mov	r7,zero
    3a48:	1009883a 	mov	r4,r2
    3a4c:	1021883a 	mov	r16,r2
    3a50:	1823883a 	mov	r17,r3
    3a54:	00094e40 	call	94e4 <__nedf2>
    3a58:	10004526 	beq	r2,zero,3b70 <_dtoa_r+0x728>
    3a5c:	900d883a 	mov	r6,r18
    3a60:	980f883a 	mov	r7,r19
    3a64:	8009883a 	mov	r4,r16
    3a68:	880b883a 	mov	r5,r17
    3a6c:	00092040 	call	9204 <__divdf3>
    3a70:	180b883a 	mov	r5,r3
    3a74:	1009883a 	mov	r4,r2
    3a78:	00097fc0 	call	97fc <__fixdfsi>
    3a7c:	1009883a 	mov	r4,r2
    3a80:	1029883a 	mov	r20,r2
    3a84:	00097040 	call	9704 <__floatsidf>
    3a88:	180f883a 	mov	r7,r3
    3a8c:	9009883a 	mov	r4,r18
    3a90:	980b883a 	mov	r5,r19
    3a94:	100d883a 	mov	r6,r2
    3a98:	0008e400 	call	8e40 <__muldf3>
    3a9c:	180f883a 	mov	r7,r3
    3aa0:	880b883a 	mov	r5,r17
    3aa4:	8009883a 	mov	r4,r16
    3aa8:	100d883a 	mov	r6,r2
    3aac:	0008d4c0 	call	8d4c <__subdf3>
    3ab0:	1015883a 	mov	r10,r2
    3ab4:	a0800c04 	addi	r2,r20,48
    3ab8:	e0800005 	stb	r2,0(fp)
    3abc:	e7000044 	addi	fp,fp,1
    3ac0:	1817883a 	mov	r11,r3
    3ac4:	e57fd61e 	bne	fp,r21,3a20 <_dtoa_r+0x5d8>
    3ac8:	500d883a 	mov	r6,r10
    3acc:	180f883a 	mov	r7,r3
    3ad0:	5009883a 	mov	r4,r10
    3ad4:	180b883a 	mov	r5,r3
    3ad8:	0008dcc0 	call	8dcc <__adddf3>
    3adc:	100d883a 	mov	r6,r2
    3ae0:	9009883a 	mov	r4,r18
    3ae4:	980b883a 	mov	r5,r19
    3ae8:	180f883a 	mov	r7,r3
    3aec:	1021883a 	mov	r16,r2
    3af0:	1823883a 	mov	r17,r3
    3af4:	000967c0 	call	967c <__ltdf2>
    3af8:	10000816 	blt	r2,zero,3b1c <_dtoa_r+0x6d4>
    3afc:	980b883a 	mov	r5,r19
    3b00:	800d883a 	mov	r6,r16
    3b04:	880f883a 	mov	r7,r17
    3b08:	9009883a 	mov	r4,r18
    3b0c:	000945c0 	call	945c <__eqdf2>
    3b10:	1000171e 	bne	r2,zero,3b70 <_dtoa_r+0x728>
    3b14:	a080004c 	andi	r2,r20,1
    3b18:	10001526 	beq	r2,zero,3b70 <_dtoa_r+0x728>
    3b1c:	d8800d17 	ldw	r2,52(sp)
    3b20:	d8800415 	stw	r2,16(sp)
    3b24:	e009883a 	mov	r4,fp
    3b28:	213fffc4 	addi	r4,r4,-1
    3b2c:	20c00007 	ldb	r3,0(r4)
    3b30:	00800e44 	movi	r2,57
    3b34:	1880081e 	bne	r3,r2,3b58 <_dtoa_r+0x710>
    3b38:	d8800517 	ldw	r2,20(sp)
    3b3c:	113ffa1e 	bne	r2,r4,3b28 <_dtoa_r+0x6e0>
    3b40:	d8c00417 	ldw	r3,16(sp)
    3b44:	d9800517 	ldw	r6,20(sp)
    3b48:	00800c04 	movi	r2,48
    3b4c:	18c00044 	addi	r3,r3,1
    3b50:	d8c00415 	stw	r3,16(sp)
    3b54:	30800005 	stb	r2,0(r6)
    3b58:	20800003 	ldbu	r2,0(r4)
    3b5c:	d8c00417 	ldw	r3,16(sp)
    3b60:	27000044 	addi	fp,r4,1
    3b64:	10800044 	addi	r2,r2,1
    3b68:	d8c00d15 	stw	r3,52(sp)
    3b6c:	20800005 	stb	r2,0(r4)
    3b70:	d9001617 	ldw	r4,88(sp)
    3b74:	d9400717 	ldw	r5,28(sp)
    3b78:	0005ed00 	call	5ed0 <_Bfree>
    3b7c:	e0000005 	stb	zero,0(fp)
    3b80:	d9800d17 	ldw	r6,52(sp)
    3b84:	d8c02717 	ldw	r3,156(sp)
    3b88:	d9002917 	ldw	r4,164(sp)
    3b8c:	30800044 	addi	r2,r6,1
    3b90:	18800015 	stw	r2,0(r3)
    3b94:	20029c26 	beq	r4,zero,4608 <_dtoa_r+0x11c0>
    3b98:	d8c00517 	ldw	r3,20(sp)
    3b9c:	27000015 	stw	fp,0(r4)
    3ba0:	003e5d06 	br	3518 <_dtoa_r+0xd0>
    3ba4:	d9800d17 	ldw	r6,52(sp)
    3ba8:	00c00074 	movhi	r3,1
    3bac:	18f49604 	addi	r3,r3,-11688
    3bb0:	d9001217 	ldw	r4,72(sp)
    3bb4:	300490fa 	slli	r2,r6,3
    3bb8:	d9401317 	ldw	r5,76(sp)
    3bbc:	10c5883a 	add	r2,r2,r3
    3bc0:	12000017 	ldw	r8,0(r2)
    3bc4:	12400117 	ldw	r9,4(r2)
    3bc8:	400d883a 	mov	r6,r8
    3bcc:	480f883a 	mov	r7,r9
    3bd0:	000967c0 	call	967c <__ltdf2>
    3bd4:	1000030e 	bge	r2,zero,3be4 <_dtoa_r+0x79c>
    3bd8:	d8800d17 	ldw	r2,52(sp)
    3bdc:	10bfffc4 	addi	r2,r2,-1
    3be0:	d8800d15 	stw	r2,52(sp)
    3be4:	d8000c15 	stw	zero,48(sp)
    3be8:	003ea806 	br	368c <_dtoa_r+0x244>
    3bec:	d9000b17 	ldw	r4,44(sp)
    3bf0:	202cc03a 	cmpne	r22,r4,zero
    3bf4:	b000c71e 	bne	r22,zero,3f14 <_dtoa_r+0xacc>
    3bf8:	dc001117 	ldw	r16,68(sp)
    3bfc:	dc801017 	ldw	r18,64(sp)
    3c00:	0027883a 	mov	r19,zero
    3c04:	04000b0e 	bge	zero,r16,3c34 <_dtoa_r+0x7ec>
    3c08:	d8c00a17 	ldw	r3,40(sp)
    3c0c:	00c0090e 	bge	zero,r3,3c34 <_dtoa_r+0x7ec>
    3c10:	8005883a 	mov	r2,r16
    3c14:	1c011316 	blt	r3,r16,4064 <_dtoa_r+0xc1c>
    3c18:	d9000a17 	ldw	r4,40(sp)
    3c1c:	d9801117 	ldw	r6,68(sp)
    3c20:	80a1c83a 	sub	r16,r16,r2
    3c24:	2089c83a 	sub	r4,r4,r2
    3c28:	308dc83a 	sub	r6,r6,r2
    3c2c:	d9000a15 	stw	r4,40(sp)
    3c30:	d9801115 	stw	r6,68(sp)
    3c34:	d8801017 	ldw	r2,64(sp)
    3c38:	0080150e 	bge	zero,r2,3c90 <_dtoa_r+0x848>
    3c3c:	d8c00b17 	ldw	r3,44(sp)
    3c40:	1805003a 	cmpeq	r2,r3,zero
    3c44:	1001c91e 	bne	r2,zero,436c <_dtoa_r+0xf24>
    3c48:	04800e0e 	bge	zero,r18,3c84 <_dtoa_r+0x83c>
    3c4c:	d9001617 	ldw	r4,88(sp)
    3c50:	980b883a 	mov	r5,r19
    3c54:	900d883a 	mov	r6,r18
    3c58:	0006d1c0 	call	6d1c <__pow5mult>
    3c5c:	d9001617 	ldw	r4,88(sp)
    3c60:	d9800717 	ldw	r6,28(sp)
    3c64:	100b883a 	mov	r5,r2
    3c68:	1027883a 	mov	r19,r2
    3c6c:	00069600 	call	6960 <__multiply>
    3c70:	d9001617 	ldw	r4,88(sp)
    3c74:	d9400717 	ldw	r5,28(sp)
    3c78:	1023883a 	mov	r17,r2
    3c7c:	0005ed00 	call	5ed0 <_Bfree>
    3c80:	dc400715 	stw	r17,28(sp)
    3c84:	d9001017 	ldw	r4,64(sp)
    3c88:	248dc83a 	sub	r6,r4,r18
    3c8c:	30010e1e 	bne	r6,zero,40c8 <_dtoa_r+0xc80>
    3c90:	d9001617 	ldw	r4,88(sp)
    3c94:	04400044 	movi	r17,1
    3c98:	880b883a 	mov	r5,r17
    3c9c:	0006bb40 	call	6bb4 <__i2b>
    3ca0:	d9800917 	ldw	r6,36(sp)
    3ca4:	1025883a 	mov	r18,r2
    3ca8:	0180040e 	bge	zero,r6,3cbc <_dtoa_r+0x874>
    3cac:	d9001617 	ldw	r4,88(sp)
    3cb0:	100b883a 	mov	r5,r2
    3cb4:	0006d1c0 	call	6d1c <__pow5mult>
    3cb8:	1025883a 	mov	r18,r2
    3cbc:	d8801717 	ldw	r2,92(sp)
    3cc0:	8880f30e 	bge	r17,r2,4090 <_dtoa_r+0xc48>
    3cc4:	0023883a 	mov	r17,zero
    3cc8:	d9800917 	ldw	r6,36(sp)
    3ccc:	30019e1e 	bne	r6,zero,4348 <_dtoa_r+0xf00>
    3cd0:	00c00044 	movi	r3,1
    3cd4:	d9000a17 	ldw	r4,40(sp)
    3cd8:	20c5883a 	add	r2,r4,r3
    3cdc:	10c007cc 	andi	r3,r2,31
    3ce0:	1800841e 	bne	r3,zero,3ef4 <_dtoa_r+0xaac>
    3ce4:	00800704 	movi	r2,28
    3ce8:	d9000a17 	ldw	r4,40(sp)
    3cec:	d9801117 	ldw	r6,68(sp)
    3cf0:	80a1883a 	add	r16,r16,r2
    3cf4:	2089883a 	add	r4,r4,r2
    3cf8:	308d883a 	add	r6,r6,r2
    3cfc:	d9000a15 	stw	r4,40(sp)
    3d00:	d9801115 	stw	r6,68(sp)
    3d04:	d8801117 	ldw	r2,68(sp)
    3d08:	0080050e 	bge	zero,r2,3d20 <_dtoa_r+0x8d8>
    3d0c:	d9400717 	ldw	r5,28(sp)
    3d10:	d9001617 	ldw	r4,88(sp)
    3d14:	100d883a 	mov	r6,r2
    3d18:	00068140 	call	6814 <__lshift>
    3d1c:	d8800715 	stw	r2,28(sp)
    3d20:	d8c00a17 	ldw	r3,40(sp)
    3d24:	00c0050e 	bge	zero,r3,3d3c <_dtoa_r+0x8f4>
    3d28:	d9001617 	ldw	r4,88(sp)
    3d2c:	900b883a 	mov	r5,r18
    3d30:	180d883a 	mov	r6,r3
    3d34:	00068140 	call	6814 <__lshift>
    3d38:	1025883a 	mov	r18,r2
    3d3c:	d9000c17 	ldw	r4,48(sp)
    3d40:	2005003a 	cmpeq	r2,r4,zero
    3d44:	10016f26 	beq	r2,zero,4304 <_dtoa_r+0xebc>
    3d48:	d9000f17 	ldw	r4,60(sp)
    3d4c:	0102170e 	bge	zero,r4,45ac <_dtoa_r+0x1164>
    3d50:	d9800b17 	ldw	r6,44(sp)
    3d54:	3005003a 	cmpeq	r2,r6,zero
    3d58:	1000881e 	bne	r2,zero,3f7c <_dtoa_r+0xb34>
    3d5c:	0400050e 	bge	zero,r16,3d74 <_dtoa_r+0x92c>
    3d60:	d9001617 	ldw	r4,88(sp)
    3d64:	980b883a 	mov	r5,r19
    3d68:	800d883a 	mov	r6,r16
    3d6c:	00068140 	call	6814 <__lshift>
    3d70:	1027883a 	mov	r19,r2
    3d74:	8804c03a 	cmpne	r2,r17,zero
    3d78:	1002541e 	bne	r2,zero,46cc <_dtoa_r+0x1284>
    3d7c:	980b883a 	mov	r5,r19
    3d80:	dd800517 	ldw	r22,20(sp)
    3d84:	dcc00615 	stw	r19,24(sp)
    3d88:	a700004c 	andi	fp,r20,1
    3d8c:	2827883a 	mov	r19,r5
    3d90:	d9000717 	ldw	r4,28(sp)
    3d94:	900b883a 	mov	r5,r18
    3d98:	00032040 	call	3204 <quorem>
    3d9c:	d9000717 	ldw	r4,28(sp)
    3da0:	d9400617 	ldw	r5,24(sp)
    3da4:	1023883a 	mov	r17,r2
    3da8:	8dc00c04 	addi	r23,r17,48
    3dac:	000602c0 	call	602c <__mcmp>
    3db0:	d9001617 	ldw	r4,88(sp)
    3db4:	900b883a 	mov	r5,r18
    3db8:	980d883a 	mov	r6,r19
    3dbc:	1029883a 	mov	r20,r2
    3dc0:	00066880 	call	6688 <__mdiff>
    3dc4:	102b883a 	mov	r21,r2
    3dc8:	10800317 	ldw	r2,12(r2)
    3dcc:	1001281e 	bne	r2,zero,4270 <_dtoa_r+0xe28>
    3dd0:	d9000717 	ldw	r4,28(sp)
    3dd4:	a80b883a 	mov	r5,r21
    3dd8:	000602c0 	call	602c <__mcmp>
    3ddc:	d9001617 	ldw	r4,88(sp)
    3de0:	1021883a 	mov	r16,r2
    3de4:	a80b883a 	mov	r5,r21
    3de8:	0005ed00 	call	5ed0 <_Bfree>
    3dec:	8000041e 	bne	r16,zero,3e00 <_dtoa_r+0x9b8>
    3df0:	d8801717 	ldw	r2,92(sp)
    3df4:	1000021e 	bne	r2,zero,3e00 <_dtoa_r+0x9b8>
    3df8:	e004c03a 	cmpne	r2,fp,zero
    3dfc:	10011726 	beq	r2,zero,425c <_dtoa_r+0xe14>
    3e00:	a0010616 	blt	r20,zero,421c <_dtoa_r+0xdd4>
    3e04:	a000041e 	bne	r20,zero,3e18 <_dtoa_r+0x9d0>
    3e08:	d8c01717 	ldw	r3,92(sp)
    3e0c:	1800021e 	bne	r3,zero,3e18 <_dtoa_r+0x9d0>
    3e10:	e004c03a 	cmpne	r2,fp,zero
    3e14:	10010126 	beq	r2,zero,421c <_dtoa_r+0xdd4>
    3e18:	04023d16 	blt	zero,r16,4710 <_dtoa_r+0x12c8>
    3e1c:	b5c00005 	stb	r23,0(r22)
    3e20:	d9800517 	ldw	r6,20(sp)
    3e24:	d9000f17 	ldw	r4,60(sp)
    3e28:	b5800044 	addi	r22,r22,1
    3e2c:	3105883a 	add	r2,r6,r4
    3e30:	b0806526 	beq	r22,r2,3fc8 <_dtoa_r+0xb80>
    3e34:	d9400717 	ldw	r5,28(sp)
    3e38:	d9001617 	ldw	r4,88(sp)
    3e3c:	01800284 	movi	r6,10
    3e40:	000f883a 	mov	r7,zero
    3e44:	0006bf00 	call	6bf0 <__multadd>
    3e48:	d8800715 	stw	r2,28(sp)
    3e4c:	d8800617 	ldw	r2,24(sp)
    3e50:	14c10c26 	beq	r2,r19,4284 <_dtoa_r+0xe3c>
    3e54:	d9400617 	ldw	r5,24(sp)
    3e58:	d9001617 	ldw	r4,88(sp)
    3e5c:	01800284 	movi	r6,10
    3e60:	000f883a 	mov	r7,zero
    3e64:	0006bf00 	call	6bf0 <__multadd>
    3e68:	d9001617 	ldw	r4,88(sp)
    3e6c:	980b883a 	mov	r5,r19
    3e70:	01800284 	movi	r6,10
    3e74:	000f883a 	mov	r7,zero
    3e78:	d8800615 	stw	r2,24(sp)
    3e7c:	0006bf00 	call	6bf0 <__multadd>
    3e80:	1027883a 	mov	r19,r2
    3e84:	003fc206 	br	3d90 <_dtoa_r+0x948>
    3e88:	2445c83a 	sub	r2,r4,r17
    3e8c:	a088983a 	sll	r4,r20,r2
    3e90:	003e4b06 	br	37c0 <_dtoa_r+0x378>
    3e94:	01bfffc4 	movi	r6,-1
    3e98:	00800044 	movi	r2,1
    3e9c:	d9800e15 	stw	r6,56(sp)
    3ea0:	d9800f15 	stw	r6,60(sp)
    3ea4:	d8800b15 	stw	r2,44(sp)
    3ea8:	d8c01617 	ldw	r3,88(sp)
    3eac:	008005c4 	movi	r2,23
    3eb0:	18001115 	stw	zero,68(r3)
    3eb4:	1580082e 	bgeu	r2,r22,3ed8 <_dtoa_r+0xa90>
    3eb8:	00c00104 	movi	r3,4
    3ebc:	0009883a 	mov	r4,zero
    3ec0:	18c7883a 	add	r3,r3,r3
    3ec4:	18800504 	addi	r2,r3,20
    3ec8:	21000044 	addi	r4,r4,1
    3ecc:	b0bffc2e 	bgeu	r22,r2,3ec0 <_dtoa_r+0xa78>
    3ed0:	d9801617 	ldw	r6,88(sp)
    3ed4:	31001115 	stw	r4,68(r6)
    3ed8:	dc000f17 	ldw	r16,60(sp)
    3edc:	003e4b06 	br	380c <_dtoa_r+0x3c4>
    3ee0:	d9801717 	ldw	r6,92(sp)
    3ee4:	0023883a 	mov	r17,zero
    3ee8:	31bfff04 	addi	r6,r6,-4
    3eec:	d9801715 	stw	r6,92(sp)
    3ef0:	003df806 	br	36d4 <_dtoa_r+0x28c>
    3ef4:	00800804 	movi	r2,32
    3ef8:	10c9c83a 	sub	r4,r2,r3
    3efc:	00c00104 	movi	r3,4
    3f00:	19005a16 	blt	r3,r4,406c <_dtoa_r+0xc24>
    3f04:	008000c4 	movi	r2,3
    3f08:	113f7e16 	blt	r2,r4,3d04 <_dtoa_r+0x8bc>
    3f0c:	20800704 	addi	r2,r4,28
    3f10:	003f7506 	br	3ce8 <_dtoa_r+0x8a0>
    3f14:	d9801717 	ldw	r6,92(sp)
    3f18:	00800044 	movi	r2,1
    3f1c:	1180a10e 	bge	r2,r6,41a4 <_dtoa_r+0xd5c>
    3f20:	d9800f17 	ldw	r6,60(sp)
    3f24:	d8c01017 	ldw	r3,64(sp)
    3f28:	30bfffc4 	addi	r2,r6,-1
    3f2c:	1881c616 	blt	r3,r2,4648 <_dtoa_r+0x1200>
    3f30:	18a5c83a 	sub	r18,r3,r2
    3f34:	d8800f17 	ldw	r2,60(sp)
    3f38:	10026216 	blt	r2,zero,48c4 <_dtoa_r+0x147c>
    3f3c:	dc001117 	ldw	r16,68(sp)
    3f40:	1007883a 	mov	r3,r2
    3f44:	d9800a17 	ldw	r6,40(sp)
    3f48:	d8801117 	ldw	r2,68(sp)
    3f4c:	d9001617 	ldw	r4,88(sp)
    3f50:	30cd883a 	add	r6,r6,r3
    3f54:	10c5883a 	add	r2,r2,r3
    3f58:	01400044 	movi	r5,1
    3f5c:	d9800a15 	stw	r6,40(sp)
    3f60:	d8801115 	stw	r2,68(sp)
    3f64:	0006bb40 	call	6bb4 <__i2b>
    3f68:	1027883a 	mov	r19,r2
    3f6c:	003f2506 	br	3c04 <_dtoa_r+0x7bc>
    3f70:	00c00074 	movhi	r3,1
    3f74:	18f47804 	addi	r3,r3,-11808
    3f78:	003d6706 	br	3518 <_dtoa_r+0xd0>
    3f7c:	dd800517 	ldw	r22,20(sp)
    3f80:	04000044 	movi	r16,1
    3f84:	00000706 	br	3fa4 <_dtoa_r+0xb5c>
    3f88:	d9400717 	ldw	r5,28(sp)
    3f8c:	d9001617 	ldw	r4,88(sp)
    3f90:	01800284 	movi	r6,10
    3f94:	000f883a 	mov	r7,zero
    3f98:	0006bf00 	call	6bf0 <__multadd>
    3f9c:	d8800715 	stw	r2,28(sp)
    3fa0:	84000044 	addi	r16,r16,1
    3fa4:	d9000717 	ldw	r4,28(sp)
    3fa8:	900b883a 	mov	r5,r18
    3fac:	00032040 	call	3204 <quorem>
    3fb0:	15c00c04 	addi	r23,r2,48
    3fb4:	b5c00005 	stb	r23,0(r22)
    3fb8:	d8c00f17 	ldw	r3,60(sp)
    3fbc:	b5800044 	addi	r22,r22,1
    3fc0:	80fff116 	blt	r16,r3,3f88 <_dtoa_r+0xb40>
    3fc4:	d8000615 	stw	zero,24(sp)
    3fc8:	d9400717 	ldw	r5,28(sp)
    3fcc:	d9001617 	ldw	r4,88(sp)
    3fd0:	01800044 	movi	r6,1
    3fd4:	00068140 	call	6814 <__lshift>
    3fd8:	1009883a 	mov	r4,r2
    3fdc:	900b883a 	mov	r5,r18
    3fe0:	d8800715 	stw	r2,28(sp)
    3fe4:	000602c0 	call	602c <__mcmp>
    3fe8:	00803c0e 	bge	zero,r2,40dc <_dtoa_r+0xc94>
    3fec:	b009883a 	mov	r4,r22
    3ff0:	213fffc4 	addi	r4,r4,-1
    3ff4:	21400003 	ldbu	r5,0(r4)
    3ff8:	00800e44 	movi	r2,57
    3ffc:	28c03fcc 	andi	r3,r5,255
    4000:	18c0201c 	xori	r3,r3,128
    4004:	18ffe004 	addi	r3,r3,-128
    4008:	1881981e 	bne	r3,r2,466c <_dtoa_r+0x1224>
    400c:	d9800517 	ldw	r6,20(sp)
    4010:	21bff71e 	bne	r4,r6,3ff0 <_dtoa_r+0xba8>
    4014:	d8800d17 	ldw	r2,52(sp)
    4018:	37000044 	addi	fp,r6,1
    401c:	10800044 	addi	r2,r2,1
    4020:	d8800d15 	stw	r2,52(sp)
    4024:	00800c44 	movi	r2,49
    4028:	30800005 	stb	r2,0(r6)
    402c:	d9001617 	ldw	r4,88(sp)
    4030:	900b883a 	mov	r5,r18
    4034:	0005ed00 	call	5ed0 <_Bfree>
    4038:	983ecd26 	beq	r19,zero,3b70 <_dtoa_r+0x728>
    403c:	d8c00617 	ldw	r3,24(sp)
    4040:	18000426 	beq	r3,zero,4054 <_dtoa_r+0xc0c>
    4044:	1cc00326 	beq	r3,r19,4054 <_dtoa_r+0xc0c>
    4048:	d9001617 	ldw	r4,88(sp)
    404c:	180b883a 	mov	r5,r3
    4050:	0005ed00 	call	5ed0 <_Bfree>
    4054:	d9001617 	ldw	r4,88(sp)
    4058:	980b883a 	mov	r5,r19
    405c:	0005ed00 	call	5ed0 <_Bfree>
    4060:	003ec306 	br	3b70 <_dtoa_r+0x728>
    4064:	1805883a 	mov	r2,r3
    4068:	003eeb06 	br	3c18 <_dtoa_r+0x7d0>
    406c:	d9800a17 	ldw	r6,40(sp)
    4070:	d8c01117 	ldw	r3,68(sp)
    4074:	20bfff04 	addi	r2,r4,-4
    4078:	308d883a 	add	r6,r6,r2
    407c:	1887883a 	add	r3,r3,r2
    4080:	80a1883a 	add	r16,r16,r2
    4084:	d9800a15 	stw	r6,40(sp)
    4088:	d8c01115 	stw	r3,68(sp)
    408c:	003f1d06 	br	3d04 <_dtoa_r+0x8bc>
    4090:	a03f0c1e 	bne	r20,zero,3cc4 <_dtoa_r+0x87c>
    4094:	00800434 	movhi	r2,16
    4098:	10bfffc4 	addi	r2,r2,-1
    409c:	a884703a 	and	r2,r21,r2
    40a0:	103f081e 	bne	r2,zero,3cc4 <_dtoa_r+0x87c>
    40a4:	a89ffc2c 	andhi	r2,r21,32752
    40a8:	103f0626 	beq	r2,zero,3cc4 <_dtoa_r+0x87c>
    40ac:	d8c01117 	ldw	r3,68(sp)
    40b0:	d9000a17 	ldw	r4,40(sp)
    40b4:	18c00044 	addi	r3,r3,1
    40b8:	21000044 	addi	r4,r4,1
    40bc:	d8c01115 	stw	r3,68(sp)
    40c0:	d9000a15 	stw	r4,40(sp)
    40c4:	003f0006 	br	3cc8 <_dtoa_r+0x880>
    40c8:	d9400717 	ldw	r5,28(sp)
    40cc:	d9001617 	ldw	r4,88(sp)
    40d0:	0006d1c0 	call	6d1c <__pow5mult>
    40d4:	d8800715 	stw	r2,28(sp)
    40d8:	003eed06 	br	3c90 <_dtoa_r+0x848>
    40dc:	1000021e 	bne	r2,zero,40e8 <_dtoa_r+0xca0>
    40e0:	b880004c 	andi	r2,r23,1
    40e4:	103fc11e 	bne	r2,zero,3fec <_dtoa_r+0xba4>
    40e8:	b5bfffc4 	addi	r22,r22,-1
    40ec:	b0c00007 	ldb	r3,0(r22)
    40f0:	00800c04 	movi	r2,48
    40f4:	18bffc26 	beq	r3,r2,40e8 <_dtoa_r+0xca0>
    40f8:	b7000044 	addi	fp,r22,1
    40fc:	003fcb06 	br	402c <_dtoa_r+0xbe4>
    4100:	d9800d17 	ldw	r6,52(sp)
    4104:	018fc83a 	sub	r7,zero,r6
    4108:	3801f726 	beq	r7,zero,48e8 <_dtoa_r+0x14a0>
    410c:	398003cc 	andi	r6,r7,15
    4110:	300c90fa 	slli	r6,r6,3
    4114:	01400074 	movhi	r5,1
    4118:	29749604 	addi	r5,r5,-11688
    411c:	d9001217 	ldw	r4,72(sp)
    4120:	314d883a 	add	r6,r6,r5
    4124:	30c00117 	ldw	r3,4(r6)
    4128:	30800017 	ldw	r2,0(r6)
    412c:	d9401317 	ldw	r5,76(sp)
    4130:	3821d13a 	srai	r16,r7,4
    4134:	100d883a 	mov	r6,r2
    4138:	180f883a 	mov	r7,r3
    413c:	0008e400 	call	8e40 <__muldf3>
    4140:	1011883a 	mov	r8,r2
    4144:	1813883a 	mov	r9,r3
    4148:	1029883a 	mov	r20,r2
    414c:	182b883a 	mov	r21,r3
    4150:	8001e526 	beq	r16,zero,48e8 <_dtoa_r+0x14a0>
    4154:	05800084 	movi	r22,2
    4158:	04400074 	movhi	r17,1
    415c:	8c74c804 	addi	r17,r17,-11488
    4160:	8080004c 	andi	r2,r16,1
    4164:	1005003a 	cmpeq	r2,r2,zero
    4168:	1000081e 	bne	r2,zero,418c <_dtoa_r+0xd44>
    416c:	89800017 	ldw	r6,0(r17)
    4170:	89c00117 	ldw	r7,4(r17)
    4174:	480b883a 	mov	r5,r9
    4178:	4009883a 	mov	r4,r8
    417c:	0008e400 	call	8e40 <__muldf3>
    4180:	1011883a 	mov	r8,r2
    4184:	b5800044 	addi	r22,r22,1
    4188:	1813883a 	mov	r9,r3
    418c:	8021d07a 	srai	r16,r16,1
    4190:	8c400204 	addi	r17,r17,8
    4194:	803ff21e 	bne	r16,zero,4160 <_dtoa_r+0xd18>
    4198:	4029883a 	mov	r20,r8
    419c:	482b883a 	mov	r21,r9
    41a0:	003dca06 	br	38cc <_dtoa_r+0x484>
    41a4:	d9000817 	ldw	r4,32(sp)
    41a8:	2005003a 	cmpeq	r2,r4,zero
    41ac:	1001f61e 	bne	r2,zero,4988 <_dtoa_r+0x1540>
    41b0:	dc001117 	ldw	r16,68(sp)
    41b4:	dc801017 	ldw	r18,64(sp)
    41b8:	18c10cc4 	addi	r3,r3,1075
    41bc:	003f6106 	br	3f44 <_dtoa_r+0xafc>
    41c0:	d8000b15 	stw	zero,44(sp)
    41c4:	d9802617 	ldw	r6,152(sp)
    41c8:	d8c00d17 	ldw	r3,52(sp)
    41cc:	30800044 	addi	r2,r6,1
    41d0:	18ad883a 	add	r22,r3,r2
    41d4:	b13fffc4 	addi	r4,r22,-1
    41d8:	d9000e15 	stw	r4,56(sp)
    41dc:	0581f60e 	bge	zero,r22,49b8 <_dtoa_r+0x1570>
    41e0:	dd800f15 	stw	r22,60(sp)
    41e4:	003f3006 	br	3ea8 <_dtoa_r+0xa60>
    41e8:	d8000b15 	stw	zero,44(sp)
    41ec:	d9002617 	ldw	r4,152(sp)
    41f0:	0101eb0e 	bge	zero,r4,49a0 <_dtoa_r+0x1558>
    41f4:	202d883a 	mov	r22,r4
    41f8:	d9000e15 	stw	r4,56(sp)
    41fc:	d9000f15 	stw	r4,60(sp)
    4200:	003f2906 	br	3ea8 <_dtoa_r+0xa60>
    4204:	01800044 	movi	r6,1
    4208:	d9800b15 	stw	r6,44(sp)
    420c:	003ff706 	br	41ec <_dtoa_r+0xda4>
    4210:	01000044 	movi	r4,1
    4214:	d9000b15 	stw	r4,44(sp)
    4218:	003fea06 	br	41c4 <_dtoa_r+0xd7c>
    421c:	04000c0e 	bge	zero,r16,4250 <_dtoa_r+0xe08>
    4220:	d9400717 	ldw	r5,28(sp)
    4224:	d9001617 	ldw	r4,88(sp)
    4228:	01800044 	movi	r6,1
    422c:	00068140 	call	6814 <__lshift>
    4230:	1009883a 	mov	r4,r2
    4234:	900b883a 	mov	r5,r18
    4238:	d8800715 	stw	r2,28(sp)
    423c:	000602c0 	call	602c <__mcmp>
    4240:	0081e00e 	bge	zero,r2,49c4 <_dtoa_r+0x157c>
    4244:	bdc00044 	addi	r23,r23,1
    4248:	00800e84 	movi	r2,58
    424c:	b881a226 	beq	r23,r2,48d8 <_dtoa_r+0x1490>
    4250:	b7000044 	addi	fp,r22,1
    4254:	b5c00005 	stb	r23,0(r22)
    4258:	003f7406 	br	402c <_dtoa_r+0xbe4>
    425c:	00800e44 	movi	r2,57
    4260:	b8819d26 	beq	r23,r2,48d8 <_dtoa_r+0x1490>
    4264:	053ffa0e 	bge	zero,r20,4250 <_dtoa_r+0xe08>
    4268:	8dc00c44 	addi	r23,r17,49
    426c:	003ff806 	br	4250 <_dtoa_r+0xe08>
    4270:	d9001617 	ldw	r4,88(sp)
    4274:	a80b883a 	mov	r5,r21
    4278:	04000044 	movi	r16,1
    427c:	0005ed00 	call	5ed0 <_Bfree>
    4280:	003edf06 	br	3e00 <_dtoa_r+0x9b8>
    4284:	d9001617 	ldw	r4,88(sp)
    4288:	980b883a 	mov	r5,r19
    428c:	01800284 	movi	r6,10
    4290:	000f883a 	mov	r7,zero
    4294:	0006bf00 	call	6bf0 <__multadd>
    4298:	1027883a 	mov	r19,r2
    429c:	d8800615 	stw	r2,24(sp)
    42a0:	003ebb06 	br	3d90 <_dtoa_r+0x948>
    42a4:	d9801117 	ldw	r6,68(sp)
    42a8:	d8800d17 	ldw	r2,52(sp)
    42ac:	d8000915 	stw	zero,36(sp)
    42b0:	308dc83a 	sub	r6,r6,r2
    42b4:	0087c83a 	sub	r3,zero,r2
    42b8:	d9801115 	stw	r6,68(sp)
    42bc:	d8c01015 	stw	r3,64(sp)
    42c0:	003cfe06 	br	36bc <_dtoa_r+0x274>
    42c4:	018dc83a 	sub	r6,zero,r6
    42c8:	d9801115 	stw	r6,68(sp)
    42cc:	d8000a15 	stw	zero,40(sp)
    42d0:	003cf306 	br	36a0 <_dtoa_r+0x258>
    42d4:	d9000d17 	ldw	r4,52(sp)
    42d8:	00097040 	call	9704 <__floatsidf>
    42dc:	880b883a 	mov	r5,r17
    42e0:	8009883a 	mov	r4,r16
    42e4:	180f883a 	mov	r7,r3
    42e8:	100d883a 	mov	r6,r2
    42ec:	00094e40 	call	94e4 <__nedf2>
    42f0:	103ce126 	beq	r2,zero,3678 <_dtoa_r+0x230>
    42f4:	d9800d17 	ldw	r6,52(sp)
    42f8:	31bfffc4 	addi	r6,r6,-1
    42fc:	d9800d15 	stw	r6,52(sp)
    4300:	003cdd06 	br	3678 <_dtoa_r+0x230>
    4304:	d9000717 	ldw	r4,28(sp)
    4308:	900b883a 	mov	r5,r18
    430c:	000602c0 	call	602c <__mcmp>
    4310:	103e8d0e 	bge	r2,zero,3d48 <_dtoa_r+0x900>
    4314:	d9400717 	ldw	r5,28(sp)
    4318:	d9001617 	ldw	r4,88(sp)
    431c:	01800284 	movi	r6,10
    4320:	000f883a 	mov	r7,zero
    4324:	0006bf00 	call	6bf0 <__multadd>
    4328:	d9800d17 	ldw	r6,52(sp)
    432c:	d8800715 	stw	r2,28(sp)
    4330:	31bfffc4 	addi	r6,r6,-1
    4334:	d9800d15 	stw	r6,52(sp)
    4338:	b001a71e 	bne	r22,zero,49d8 <_dtoa_r+0x1590>
    433c:	d8800e17 	ldw	r2,56(sp)
    4340:	d8800f15 	stw	r2,60(sp)
    4344:	003e8006 	br	3d48 <_dtoa_r+0x900>
    4348:	90800417 	ldw	r2,16(r18)
    434c:	1085883a 	add	r2,r2,r2
    4350:	1085883a 	add	r2,r2,r2
    4354:	1485883a 	add	r2,r2,r18
    4358:	11000417 	ldw	r4,16(r2)
    435c:	0005ef80 	call	5ef8 <__hi0bits>
    4360:	00c00804 	movi	r3,32
    4364:	1887c83a 	sub	r3,r3,r2
    4368:	003e5a06 	br	3cd4 <_dtoa_r+0x88c>
    436c:	d9400717 	ldw	r5,28(sp)
    4370:	d9801017 	ldw	r6,64(sp)
    4374:	d9001617 	ldw	r4,88(sp)
    4378:	0006d1c0 	call	6d1c <__pow5mult>
    437c:	d8800715 	stw	r2,28(sp)
    4380:	003e4306 	br	3c90 <_dtoa_r+0x848>
    4384:	d9800f17 	ldw	r6,60(sp)
    4388:	d8800d17 	ldw	r2,52(sp)
    438c:	d9800315 	stw	r6,12(sp)
    4390:	d8800415 	stw	r2,16(sp)
    4394:	d8c00b17 	ldw	r3,44(sp)
    4398:	1805003a 	cmpeq	r2,r3,zero
    439c:	1000e21e 	bne	r2,zero,4728 <_dtoa_r+0x12e0>
    43a0:	d9000317 	ldw	r4,12(sp)
    43a4:	0005883a 	mov	r2,zero
    43a8:	00cff834 	movhi	r3,16352
    43ac:	200c90fa 	slli	r6,r4,3
    43b0:	01000074 	movhi	r4,1
    43b4:	21349604 	addi	r4,r4,-11688
    43b8:	180b883a 	mov	r5,r3
    43bc:	310d883a 	add	r6,r6,r4
    43c0:	327fff17 	ldw	r9,-4(r6)
    43c4:	323ffe17 	ldw	r8,-8(r6)
    43c8:	1009883a 	mov	r4,r2
    43cc:	480f883a 	mov	r7,r9
    43d0:	400d883a 	mov	r6,r8
    43d4:	00092040 	call	9204 <__divdf3>
    43d8:	180b883a 	mov	r5,r3
    43dc:	b00d883a 	mov	r6,r22
    43e0:	b80f883a 	mov	r7,r23
    43e4:	1009883a 	mov	r4,r2
    43e8:	0008d4c0 	call	8d4c <__subdf3>
    43ec:	a80b883a 	mov	r5,r21
    43f0:	a009883a 	mov	r4,r20
    43f4:	d8c01915 	stw	r3,100(sp)
    43f8:	d8801815 	stw	r2,96(sp)
    43fc:	00097fc0 	call	97fc <__fixdfsi>
    4400:	1009883a 	mov	r4,r2
    4404:	1027883a 	mov	r19,r2
    4408:	00097040 	call	9704 <__floatsidf>
    440c:	a80b883a 	mov	r5,r21
    4410:	a009883a 	mov	r4,r20
    4414:	180f883a 	mov	r7,r3
    4418:	100d883a 	mov	r6,r2
    441c:	0008d4c0 	call	8d4c <__subdf3>
    4420:	d9801817 	ldw	r6,96(sp)
    4424:	1823883a 	mov	r17,r3
    4428:	d8801415 	stw	r2,80(sp)
    442c:	302d883a 	mov	r22,r6
    4430:	d9800517 	ldw	r6,20(sp)
    4434:	9cc00c04 	addi	r19,r19,48
    4438:	dc401515 	stw	r17,84(sp)
    443c:	d8c01917 	ldw	r3,100(sp)
    4440:	34c00005 	stb	r19,0(r6)
    4444:	d8800517 	ldw	r2,20(sp)
    4448:	d9401917 	ldw	r5,100(sp)
    444c:	d9801417 	ldw	r6,80(sp)
    4450:	b009883a 	mov	r4,r22
    4454:	880f883a 	mov	r7,r17
    4458:	182f883a 	mov	r23,r3
    445c:	17000044 	addi	fp,r2,1
    4460:	000956c0 	call	956c <__gtdf2>
    4464:	00804e16 	blt	zero,r2,45a0 <_dtoa_r+0x1158>
    4468:	d9801417 	ldw	r6,80(sp)
    446c:	0005883a 	mov	r2,zero
    4470:	00cffc34 	movhi	r3,16368
    4474:	180b883a 	mov	r5,r3
    4478:	880f883a 	mov	r7,r17
    447c:	1009883a 	mov	r4,r2
    4480:	0008d4c0 	call	8d4c <__subdf3>
    4484:	d9401917 	ldw	r5,100(sp)
    4488:	180f883a 	mov	r7,r3
    448c:	b009883a 	mov	r4,r22
    4490:	100d883a 	mov	r6,r2
    4494:	000956c0 	call	956c <__gtdf2>
    4498:	00bda216 	blt	zero,r2,3b24 <_dtoa_r+0x6dc>
    449c:	d8c00317 	ldw	r3,12(sp)
    44a0:	00800044 	movi	r2,1
    44a4:	10c01216 	blt	r2,r3,44f0 <_dtoa_r+0x10a8>
    44a8:	003d4506 	br	39c0 <_dtoa_r+0x578>
    44ac:	d9801417 	ldw	r6,80(sp)
    44b0:	0005883a 	mov	r2,zero
    44b4:	00cffc34 	movhi	r3,16368
    44b8:	180b883a 	mov	r5,r3
    44bc:	880f883a 	mov	r7,r17
    44c0:	1009883a 	mov	r4,r2
    44c4:	0008d4c0 	call	8d4c <__subdf3>
    44c8:	d9c01b17 	ldw	r7,108(sp)
    44cc:	180b883a 	mov	r5,r3
    44d0:	1009883a 	mov	r4,r2
    44d4:	b00d883a 	mov	r6,r22
    44d8:	000967c0 	call	967c <__ltdf2>
    44dc:	103d9116 	blt	r2,zero,3b24 <_dtoa_r+0x6dc>
    44e0:	d9800517 	ldw	r6,20(sp)
    44e4:	d9000317 	ldw	r4,12(sp)
    44e8:	3105883a 	add	r2,r6,r4
    44ec:	e0bd3426 	beq	fp,r2,39c0 <_dtoa_r+0x578>
    44f0:	04500934 	movhi	r17,16420
    44f4:	0021883a 	mov	r16,zero
    44f8:	b80b883a 	mov	r5,r23
    44fc:	b009883a 	mov	r4,r22
    4500:	800d883a 	mov	r6,r16
    4504:	880f883a 	mov	r7,r17
    4508:	0008e400 	call	8e40 <__muldf3>
    450c:	d9401517 	ldw	r5,84(sp)
    4510:	d9001417 	ldw	r4,80(sp)
    4514:	880f883a 	mov	r7,r17
    4518:	000d883a 	mov	r6,zero
    451c:	d8801a15 	stw	r2,104(sp)
    4520:	d8c01b15 	stw	r3,108(sp)
    4524:	0008e400 	call	8e40 <__muldf3>
    4528:	180b883a 	mov	r5,r3
    452c:	1009883a 	mov	r4,r2
    4530:	1823883a 	mov	r17,r3
    4534:	1021883a 	mov	r16,r2
    4538:	00097fc0 	call	97fc <__fixdfsi>
    453c:	1009883a 	mov	r4,r2
    4540:	102b883a 	mov	r21,r2
    4544:	00097040 	call	9704 <__floatsidf>
    4548:	880b883a 	mov	r5,r17
    454c:	8009883a 	mov	r4,r16
    4550:	180f883a 	mov	r7,r3
    4554:	100d883a 	mov	r6,r2
    4558:	0008d4c0 	call	8d4c <__subdf3>
    455c:	1021883a 	mov	r16,r2
    4560:	d9001b17 	ldw	r4,108(sp)
    4564:	1823883a 	mov	r17,r3
    4568:	dc001415 	stw	r16,80(sp)
    456c:	ad400c04 	addi	r21,r21,48
    4570:	dc401515 	stw	r17,84(sp)
    4574:	d8801a17 	ldw	r2,104(sp)
    4578:	e5400005 	stb	r21,0(fp)
    457c:	202f883a 	mov	r23,r4
    4580:	d9c01b17 	ldw	r7,108(sp)
    4584:	d9001417 	ldw	r4,80(sp)
    4588:	880b883a 	mov	r5,r17
    458c:	100d883a 	mov	r6,r2
    4590:	102d883a 	mov	r22,r2
    4594:	e7000044 	addi	fp,fp,1
    4598:	000967c0 	call	967c <__ltdf2>
    459c:	103fc30e 	bge	r2,zero,44ac <_dtoa_r+0x1064>
    45a0:	d9000417 	ldw	r4,16(sp)
    45a4:	d9000d15 	stw	r4,52(sp)
    45a8:	003d7106 	br	3b70 <_dtoa_r+0x728>
    45ac:	d9801717 	ldw	r6,92(sp)
    45b0:	00800084 	movi	r2,2
    45b4:	11bde60e 	bge	r2,r6,3d50 <_dtoa_r+0x908>
    45b8:	203cfb1e 	bne	r4,zero,39a8 <_dtoa_r+0x560>
    45bc:	d9001617 	ldw	r4,88(sp)
    45c0:	900b883a 	mov	r5,r18
    45c4:	01800144 	movi	r6,5
    45c8:	000f883a 	mov	r7,zero
    45cc:	0006bf00 	call	6bf0 <__multadd>
    45d0:	d9000717 	ldw	r4,28(sp)
    45d4:	100b883a 	mov	r5,r2
    45d8:	1025883a 	mov	r18,r2
    45dc:	000602c0 	call	602c <__mcmp>
    45e0:	00bcf10e 	bge	zero,r2,39a8 <_dtoa_r+0x560>
    45e4:	d8c00d17 	ldw	r3,52(sp)
    45e8:	d9000517 	ldw	r4,20(sp)
    45ec:	d8000615 	stw	zero,24(sp)
    45f0:	18c00044 	addi	r3,r3,1
    45f4:	d8c00d15 	stw	r3,52(sp)
    45f8:	00800c44 	movi	r2,49
    45fc:	27000044 	addi	fp,r4,1
    4600:	20800005 	stb	r2,0(r4)
    4604:	003e8906 	br	402c <_dtoa_r+0xbe4>
    4608:	d8c00517 	ldw	r3,20(sp)
    460c:	003bc206 	br	3518 <_dtoa_r+0xd0>
    4610:	01800074 	movhi	r6,1
    4614:	31b4c804 	addi	r6,r6,-11488
    4618:	30c00917 	ldw	r3,36(r6)
    461c:	30800817 	ldw	r2,32(r6)
    4620:	d9001217 	ldw	r4,72(sp)
    4624:	d9401317 	ldw	r5,76(sp)
    4628:	180f883a 	mov	r7,r3
    462c:	100d883a 	mov	r6,r2
    4630:	00092040 	call	9204 <__divdf3>
    4634:	948003cc 	andi	r18,r18,15
    4638:	058000c4 	movi	r22,3
    463c:	1029883a 	mov	r20,r2
    4640:	182b883a 	mov	r21,r3
    4644:	003c8906 	br	386c <_dtoa_r+0x424>
    4648:	d9001017 	ldw	r4,64(sp)
    464c:	d9800917 	ldw	r6,36(sp)
    4650:	0025883a 	mov	r18,zero
    4654:	1105c83a 	sub	r2,r2,r4
    4658:	2089883a 	add	r4,r4,r2
    465c:	308d883a 	add	r6,r6,r2
    4660:	d9001015 	stw	r4,64(sp)
    4664:	d9800915 	stw	r6,36(sp)
    4668:	003e3206 	br	3f34 <_dtoa_r+0xaec>
    466c:	28800044 	addi	r2,r5,1
    4670:	27000044 	addi	fp,r4,1
    4674:	20800005 	stb	r2,0(r4)
    4678:	003e6c06 	br	402c <_dtoa_r+0xbe4>
    467c:	d8800f17 	ldw	r2,60(sp)
    4680:	00bce016 	blt	zero,r2,3a04 <_dtoa_r+0x5bc>
    4684:	d9800f17 	ldw	r6,60(sp)
    4688:	303cc51e 	bne	r6,zero,39a0 <_dtoa_r+0x558>
    468c:	0005883a 	mov	r2,zero
    4690:	00d00534 	movhi	r3,16404
    4694:	980b883a 	mov	r5,r19
    4698:	180f883a 	mov	r7,r3
    469c:	9009883a 	mov	r4,r18
    46a0:	100d883a 	mov	r6,r2
    46a4:	0008e400 	call	8e40 <__muldf3>
    46a8:	180b883a 	mov	r5,r3
    46ac:	a80f883a 	mov	r7,r21
    46b0:	1009883a 	mov	r4,r2
    46b4:	a00d883a 	mov	r6,r20
    46b8:	00095f40 	call	95f4 <__gedf2>
    46bc:	103cb80e 	bge	r2,zero,39a0 <_dtoa_r+0x558>
    46c0:	0027883a 	mov	r19,zero
    46c4:	0025883a 	mov	r18,zero
    46c8:	003fc606 	br	45e4 <_dtoa_r+0x119c>
    46cc:	99400117 	ldw	r5,4(r19)
    46d0:	d9001617 	ldw	r4,88(sp)
    46d4:	00064500 	call	6450 <_Balloc>
    46d8:	99800417 	ldw	r6,16(r19)
    46dc:	11000304 	addi	r4,r2,12
    46e0:	99400304 	addi	r5,r19,12
    46e4:	318d883a 	add	r6,r6,r6
    46e8:	318d883a 	add	r6,r6,r6
    46ec:	31800204 	addi	r6,r6,8
    46f0:	1023883a 	mov	r17,r2
    46f4:	0005cb80 	call	5cb8 <memcpy>
    46f8:	d9001617 	ldw	r4,88(sp)
    46fc:	880b883a 	mov	r5,r17
    4700:	01800044 	movi	r6,1
    4704:	00068140 	call	6814 <__lshift>
    4708:	100b883a 	mov	r5,r2
    470c:	003d9c06 	br	3d80 <_dtoa_r+0x938>
    4710:	00800e44 	movi	r2,57
    4714:	b8807026 	beq	r23,r2,48d8 <_dtoa_r+0x1490>
    4718:	b8800044 	addi	r2,r23,1
    471c:	b7000044 	addi	fp,r22,1
    4720:	b0800005 	stb	r2,0(r22)
    4724:	003e4106 	br	402c <_dtoa_r+0xbe4>
    4728:	d8800317 	ldw	r2,12(sp)
    472c:	01800074 	movhi	r6,1
    4730:	31b49604 	addi	r6,r6,-11688
    4734:	b009883a 	mov	r4,r22
    4738:	100e90fa 	slli	r7,r2,3
    473c:	b80b883a 	mov	r5,r23
    4740:	398f883a 	add	r7,r7,r6
    4744:	38bffe17 	ldw	r2,-8(r7)
    4748:	d9800517 	ldw	r6,20(sp)
    474c:	38ffff17 	ldw	r3,-4(r7)
    4750:	37000044 	addi	fp,r6,1
    4754:	180f883a 	mov	r7,r3
    4758:	100d883a 	mov	r6,r2
    475c:	0008e400 	call	8e40 <__muldf3>
    4760:	a80b883a 	mov	r5,r21
    4764:	a009883a 	mov	r4,r20
    4768:	182f883a 	mov	r23,r3
    476c:	102d883a 	mov	r22,r2
    4770:	00097fc0 	call	97fc <__fixdfsi>
    4774:	1009883a 	mov	r4,r2
    4778:	1027883a 	mov	r19,r2
    477c:	00097040 	call	9704 <__floatsidf>
    4780:	a80b883a 	mov	r5,r21
    4784:	a009883a 	mov	r4,r20
    4788:	180f883a 	mov	r7,r3
    478c:	100d883a 	mov	r6,r2
    4790:	0008d4c0 	call	8d4c <__subdf3>
    4794:	180b883a 	mov	r5,r3
    4798:	d8c00517 	ldw	r3,20(sp)
    479c:	9cc00c04 	addi	r19,r19,48
    47a0:	1009883a 	mov	r4,r2
    47a4:	1cc00005 	stb	r19,0(r3)
    47a8:	2021883a 	mov	r16,r4
    47ac:	d9000317 	ldw	r4,12(sp)
    47b0:	00800044 	movi	r2,1
    47b4:	2823883a 	mov	r17,r5
    47b8:	20802226 	beq	r4,r2,4844 <_dtoa_r+0x13fc>
    47bc:	1029883a 	mov	r20,r2
    47c0:	0005883a 	mov	r2,zero
    47c4:	00d00934 	movhi	r3,16420
    47c8:	180f883a 	mov	r7,r3
    47cc:	100d883a 	mov	r6,r2
    47d0:	880b883a 	mov	r5,r17
    47d4:	8009883a 	mov	r4,r16
    47d8:	0008e400 	call	8e40 <__muldf3>
    47dc:	180b883a 	mov	r5,r3
    47e0:	1009883a 	mov	r4,r2
    47e4:	1823883a 	mov	r17,r3
    47e8:	1021883a 	mov	r16,r2
    47ec:	00097fc0 	call	97fc <__fixdfsi>
    47f0:	1009883a 	mov	r4,r2
    47f4:	102b883a 	mov	r21,r2
    47f8:	00097040 	call	9704 <__floatsidf>
    47fc:	880b883a 	mov	r5,r17
    4800:	8009883a 	mov	r4,r16
    4804:	180f883a 	mov	r7,r3
    4808:	100d883a 	mov	r6,r2
    480c:	0008d4c0 	call	8d4c <__subdf3>
    4810:	180b883a 	mov	r5,r3
    4814:	d8c00517 	ldw	r3,20(sp)
    4818:	1009883a 	mov	r4,r2
    481c:	ad400c04 	addi	r21,r21,48
    4820:	1d05883a 	add	r2,r3,r20
    4824:	15400005 	stb	r21,0(r2)
    4828:	2021883a 	mov	r16,r4
    482c:	d9000317 	ldw	r4,12(sp)
    4830:	a5000044 	addi	r20,r20,1
    4834:	2823883a 	mov	r17,r5
    4838:	a13fe11e 	bne	r20,r4,47c0 <_dtoa_r+0x1378>
    483c:	e505883a 	add	r2,fp,r20
    4840:	173fffc4 	addi	fp,r2,-1
    4844:	0025883a 	mov	r18,zero
    4848:	04cff834 	movhi	r19,16352
    484c:	b009883a 	mov	r4,r22
    4850:	b80b883a 	mov	r5,r23
    4854:	900d883a 	mov	r6,r18
    4858:	980f883a 	mov	r7,r19
    485c:	0008dcc0 	call	8dcc <__adddf3>
    4860:	180b883a 	mov	r5,r3
    4864:	1009883a 	mov	r4,r2
    4868:	800d883a 	mov	r6,r16
    486c:	880f883a 	mov	r7,r17
    4870:	000967c0 	call	967c <__ltdf2>
    4874:	103cab16 	blt	r2,zero,3b24 <_dtoa_r+0x6dc>
    4878:	0009883a 	mov	r4,zero
    487c:	980b883a 	mov	r5,r19
    4880:	b80f883a 	mov	r7,r23
    4884:	b00d883a 	mov	r6,r22
    4888:	0008d4c0 	call	8d4c <__subdf3>
    488c:	180b883a 	mov	r5,r3
    4890:	880f883a 	mov	r7,r17
    4894:	1009883a 	mov	r4,r2
    4898:	800d883a 	mov	r6,r16
    489c:	000956c0 	call	956c <__gtdf2>
    48a0:	00bc470e 	bge	zero,r2,39c0 <_dtoa_r+0x578>
    48a4:	00c00c04 	movi	r3,48
    48a8:	e73fffc4 	addi	fp,fp,-1
    48ac:	e0800007 	ldb	r2,0(fp)
    48b0:	10fffd26 	beq	r2,r3,48a8 <_dtoa_r+0x1460>
    48b4:	d9800417 	ldw	r6,16(sp)
    48b8:	e7000044 	addi	fp,fp,1
    48bc:	d9800d15 	stw	r6,52(sp)
    48c0:	003cab06 	br	3b70 <_dtoa_r+0x728>
    48c4:	d8c00f17 	ldw	r3,60(sp)
    48c8:	d9001117 	ldw	r4,68(sp)
    48cc:	20e1c83a 	sub	r16,r4,r3
    48d0:	0007883a 	mov	r3,zero
    48d4:	003d9b06 	br	3f44 <_dtoa_r+0xafc>
    48d8:	00800e44 	movi	r2,57
    48dc:	b0800005 	stb	r2,0(r22)
    48e0:	b5800044 	addi	r22,r22,1
    48e4:	003dc106 	br	3fec <_dtoa_r+0xba4>
    48e8:	05800084 	movi	r22,2
    48ec:	003bf706 	br	38cc <_dtoa_r+0x484>
    48f0:	d9000f17 	ldw	r4,60(sp)
    48f4:	013c000e 	bge	zero,r4,38f8 <_dtoa_r+0x4b0>
    48f8:	d9800e17 	ldw	r6,56(sp)
    48fc:	01bc300e 	bge	zero,r6,39c0 <_dtoa_r+0x578>
    4900:	0005883a 	mov	r2,zero
    4904:	00d00934 	movhi	r3,16420
    4908:	a80b883a 	mov	r5,r21
    490c:	180f883a 	mov	r7,r3
    4910:	a009883a 	mov	r4,r20
    4914:	100d883a 	mov	r6,r2
    4918:	0008e400 	call	8e40 <__muldf3>
    491c:	b1000044 	addi	r4,r22,1
    4920:	1021883a 	mov	r16,r2
    4924:	1823883a 	mov	r17,r3
    4928:	00097040 	call	9704 <__floatsidf>
    492c:	880b883a 	mov	r5,r17
    4930:	8009883a 	mov	r4,r16
    4934:	180f883a 	mov	r7,r3
    4938:	100d883a 	mov	r6,r2
    493c:	0008e400 	call	8e40 <__muldf3>
    4940:	0011883a 	mov	r8,zero
    4944:	02500734 	movhi	r9,16412
    4948:	180b883a 	mov	r5,r3
    494c:	480f883a 	mov	r7,r9
    4950:	1009883a 	mov	r4,r2
    4954:	400d883a 	mov	r6,r8
    4958:	0008dcc0 	call	8dcc <__adddf3>
    495c:	102d883a 	mov	r22,r2
    4960:	00bf3034 	movhi	r2,64704
    4964:	10ef883a 	add	r23,r2,r3
    4968:	d8800d17 	ldw	r2,52(sp)
    496c:	d8c00e17 	ldw	r3,56(sp)
    4970:	8029883a 	mov	r20,r16
    4974:	10bfffc4 	addi	r2,r2,-1
    4978:	882b883a 	mov	r21,r17
    497c:	d8800415 	stw	r2,16(sp)
    4980:	d8c00315 	stw	r3,12(sp)
    4984:	003e8306 	br	4394 <_dtoa_r+0xf4c>
    4988:	d8800117 	ldw	r2,4(sp)
    498c:	dc001117 	ldw	r16,68(sp)
    4990:	dc801017 	ldw	r18,64(sp)
    4994:	00c00d84 	movi	r3,54
    4998:	1887c83a 	sub	r3,r3,r2
    499c:	003d6906 	br	3f44 <_dtoa_r+0xafc>
    49a0:	01800044 	movi	r6,1
    49a4:	3021883a 	mov	r16,r6
    49a8:	d9800f15 	stw	r6,60(sp)
    49ac:	d9802615 	stw	r6,152(sp)
    49b0:	d9800e15 	stw	r6,56(sp)
    49b4:	003b9306 	br	3804 <_dtoa_r+0x3bc>
    49b8:	b021883a 	mov	r16,r22
    49bc:	dd800f15 	stw	r22,60(sp)
    49c0:	003b9006 	br	3804 <_dtoa_r+0x3bc>
    49c4:	103e221e 	bne	r2,zero,4250 <_dtoa_r+0xe08>
    49c8:	b880004c 	andi	r2,r23,1
    49cc:	1005003a 	cmpeq	r2,r2,zero
    49d0:	103e1f1e 	bne	r2,zero,4250 <_dtoa_r+0xe08>
    49d4:	003e1b06 	br	4244 <_dtoa_r+0xdfc>
    49d8:	d9001617 	ldw	r4,88(sp)
    49dc:	980b883a 	mov	r5,r19
    49e0:	01800284 	movi	r6,10
    49e4:	000f883a 	mov	r7,zero
    49e8:	0006bf00 	call	6bf0 <__multadd>
    49ec:	d8c00e17 	ldw	r3,56(sp)
    49f0:	1027883a 	mov	r19,r2
    49f4:	d8c00f15 	stw	r3,60(sp)
    49f8:	003cd306 	br	3d48 <_dtoa_r+0x900>

000049fc <_fflush_r>:
    49fc:	defffb04 	addi	sp,sp,-20
    4a00:	dcc00315 	stw	r19,12(sp)
    4a04:	dc800215 	stw	r18,8(sp)
    4a08:	dfc00415 	stw	ra,16(sp)
    4a0c:	dc400115 	stw	r17,4(sp)
    4a10:	dc000015 	stw	r16,0(sp)
    4a14:	2027883a 	mov	r19,r4
    4a18:	2825883a 	mov	r18,r5
    4a1c:	20000226 	beq	r4,zero,4a28 <_fflush_r+0x2c>
    4a20:	20800e17 	ldw	r2,56(r4)
    4a24:	10005626 	beq	r2,zero,4b80 <_fflush_r+0x184>
    4a28:	9100030b 	ldhu	r4,12(r18)
    4a2c:	20ffffcc 	andi	r3,r4,65535
    4a30:	18e0001c 	xori	r3,r3,32768
    4a34:	18e00004 	addi	r3,r3,-32768
    4a38:	1880020c 	andi	r2,r3,8
    4a3c:	1000261e 	bne	r2,zero,4ad8 <_fflush_r+0xdc>
    4a40:	90c00117 	ldw	r3,4(r18)
    4a44:	20820014 	ori	r2,r4,2048
    4a48:	9080030d 	sth	r2,12(r18)
    4a4c:	1009883a 	mov	r4,r2
    4a50:	00c0400e 	bge	zero,r3,4b54 <_fflush_r+0x158>
    4a54:	92000a17 	ldw	r8,40(r18)
    4a58:	40004026 	beq	r8,zero,4b5c <_fflush_r+0x160>
    4a5c:	2084000c 	andi	r2,r4,4096
    4a60:	10005326 	beq	r2,zero,4bb0 <_fflush_r+0x1b4>
    4a64:	94001417 	ldw	r16,80(r18)
    4a68:	9080030b 	ldhu	r2,12(r18)
    4a6c:	1080010c 	andi	r2,r2,4
    4a70:	1000481e 	bne	r2,zero,4b94 <_fflush_r+0x198>
    4a74:	91400717 	ldw	r5,28(r18)
    4a78:	9809883a 	mov	r4,r19
    4a7c:	800d883a 	mov	r6,r16
    4a80:	000f883a 	mov	r7,zero
    4a84:	403ee83a 	callr	r8
    4a88:	8080261e 	bne	r16,r2,4b24 <_fflush_r+0x128>
    4a8c:	9080030b 	ldhu	r2,12(r18)
    4a90:	91000417 	ldw	r4,16(r18)
    4a94:	90000115 	stw	zero,4(r18)
    4a98:	10bdffcc 	andi	r2,r2,63487
    4a9c:	10ffffcc 	andi	r3,r2,65535
    4aa0:	18c4000c 	andi	r3,r3,4096
    4aa4:	9080030d 	sth	r2,12(r18)
    4aa8:	91000015 	stw	r4,0(r18)
    4aac:	18002b26 	beq	r3,zero,4b5c <_fflush_r+0x160>
    4ab0:	0007883a 	mov	r3,zero
    4ab4:	1805883a 	mov	r2,r3
    4ab8:	94001415 	stw	r16,80(r18)
    4abc:	dfc00417 	ldw	ra,16(sp)
    4ac0:	dcc00317 	ldw	r19,12(sp)
    4ac4:	dc800217 	ldw	r18,8(sp)
    4ac8:	dc400117 	ldw	r17,4(sp)
    4acc:	dc000017 	ldw	r16,0(sp)
    4ad0:	dec00504 	addi	sp,sp,20
    4ad4:	f800283a 	ret
    4ad8:	94400417 	ldw	r17,16(r18)
    4adc:	88001f26 	beq	r17,zero,4b5c <_fflush_r+0x160>
    4ae0:	90800017 	ldw	r2,0(r18)
    4ae4:	18c000cc 	andi	r3,r3,3
    4ae8:	94400015 	stw	r17,0(r18)
    4aec:	1461c83a 	sub	r16,r2,r17
    4af0:	18002526 	beq	r3,zero,4b88 <_fflush_r+0x18c>
    4af4:	0005883a 	mov	r2,zero
    4af8:	90800215 	stw	r2,8(r18)
    4afc:	0400170e 	bge	zero,r16,4b5c <_fflush_r+0x160>
    4b00:	90c00917 	ldw	r3,36(r18)
    4b04:	91400717 	ldw	r5,28(r18)
    4b08:	880d883a 	mov	r6,r17
    4b0c:	800f883a 	mov	r7,r16
    4b10:	9809883a 	mov	r4,r19
    4b14:	183ee83a 	callr	r3
    4b18:	88a3883a 	add	r17,r17,r2
    4b1c:	80a1c83a 	sub	r16,r16,r2
    4b20:	00bff616 	blt	zero,r2,4afc <_fflush_r+0x100>
    4b24:	9080030b 	ldhu	r2,12(r18)
    4b28:	00ffffc4 	movi	r3,-1
    4b2c:	10801014 	ori	r2,r2,64
    4b30:	9080030d 	sth	r2,12(r18)
    4b34:	1805883a 	mov	r2,r3
    4b38:	dfc00417 	ldw	ra,16(sp)
    4b3c:	dcc00317 	ldw	r19,12(sp)
    4b40:	dc800217 	ldw	r18,8(sp)
    4b44:	dc400117 	ldw	r17,4(sp)
    4b48:	dc000017 	ldw	r16,0(sp)
    4b4c:	dec00504 	addi	sp,sp,20
    4b50:	f800283a 	ret
    4b54:	90800f17 	ldw	r2,60(r18)
    4b58:	00bfbe16 	blt	zero,r2,4a54 <_fflush_r+0x58>
    4b5c:	0007883a 	mov	r3,zero
    4b60:	1805883a 	mov	r2,r3
    4b64:	dfc00417 	ldw	ra,16(sp)
    4b68:	dcc00317 	ldw	r19,12(sp)
    4b6c:	dc800217 	ldw	r18,8(sp)
    4b70:	dc400117 	ldw	r17,4(sp)
    4b74:	dc000017 	ldw	r16,0(sp)
    4b78:	dec00504 	addi	sp,sp,20
    4b7c:	f800283a 	ret
    4b80:	0004c940 	call	4c94 <__sinit>
    4b84:	003fa806 	br	4a28 <_fflush_r+0x2c>
    4b88:	90800517 	ldw	r2,20(r18)
    4b8c:	90800215 	stw	r2,8(r18)
    4b90:	003fda06 	br	4afc <_fflush_r+0x100>
    4b94:	90800117 	ldw	r2,4(r18)
    4b98:	90c00c17 	ldw	r3,48(r18)
    4b9c:	80a1c83a 	sub	r16,r16,r2
    4ba0:	183fb426 	beq	r3,zero,4a74 <_fflush_r+0x78>
    4ba4:	90800f17 	ldw	r2,60(r18)
    4ba8:	80a1c83a 	sub	r16,r16,r2
    4bac:	003fb106 	br	4a74 <_fflush_r+0x78>
    4bb0:	91400717 	ldw	r5,28(r18)
    4bb4:	9809883a 	mov	r4,r19
    4bb8:	000d883a 	mov	r6,zero
    4bbc:	01c00044 	movi	r7,1
    4bc0:	403ee83a 	callr	r8
    4bc4:	1021883a 	mov	r16,r2
    4bc8:	00bfffc4 	movi	r2,-1
    4bcc:	80800226 	beq	r16,r2,4bd8 <_fflush_r+0x1dc>
    4bd0:	92000a17 	ldw	r8,40(r18)
    4bd4:	003fa406 	br	4a68 <_fflush_r+0x6c>
    4bd8:	98c00017 	ldw	r3,0(r19)
    4bdc:	00800744 	movi	r2,29
    4be0:	18bfde26 	beq	r3,r2,4b5c <_fflush_r+0x160>
    4be4:	9080030b 	ldhu	r2,12(r18)
    4be8:	8007883a 	mov	r3,r16
    4bec:	10801014 	ori	r2,r2,64
    4bf0:	9080030d 	sth	r2,12(r18)
    4bf4:	003fcf06 	br	4b34 <_fflush_r+0x138>

00004bf8 <fflush>:
    4bf8:	01400034 	movhi	r5,0
    4bfc:	29527f04 	addi	r5,r5,18940
    4c00:	2007883a 	mov	r3,r4
    4c04:	20000526 	beq	r4,zero,4c1c <fflush+0x24>
    4c08:	00800074 	movhi	r2,1
    4c0c:	10bbb804 	addi	r2,r2,-4384
    4c10:	11000017 	ldw	r4,0(r2)
    4c14:	180b883a 	mov	r5,r3
    4c18:	00049fc1 	jmpi	49fc <_fflush_r>
    4c1c:	00800074 	movhi	r2,1
    4c20:	10bbb904 	addi	r2,r2,-4380
    4c24:	11000017 	ldw	r4,0(r2)
    4c28:	00057fc1 	jmpi	57fc <_fwalk_reent>

00004c2c <std>:
    4c2c:	00800034 	movhi	r2,0
    4c30:	109d7004 	addi	r2,r2,30144
    4c34:	20800b15 	stw	r2,44(r4)
    4c38:	00800034 	movhi	r2,0
    4c3c:	109dab04 	addi	r2,r2,30380
    4c40:	20800815 	stw	r2,32(r4)
    4c44:	00c00034 	movhi	r3,0
    4c48:	18dd8c04 	addi	r3,r3,30256
    4c4c:	00800034 	movhi	r2,0
    4c50:	109d7204 	addi	r2,r2,30152
    4c54:	2140030d 	sth	r5,12(r4)
    4c58:	2180038d 	sth	r6,14(r4)
    4c5c:	20c00915 	stw	r3,36(r4)
    4c60:	20800a15 	stw	r2,40(r4)
    4c64:	20000015 	stw	zero,0(r4)
    4c68:	20000115 	stw	zero,4(r4)
    4c6c:	20000215 	stw	zero,8(r4)
    4c70:	20000415 	stw	zero,16(r4)
    4c74:	20000515 	stw	zero,20(r4)
    4c78:	20000615 	stw	zero,24(r4)
    4c7c:	21000715 	stw	r4,28(r4)
    4c80:	f800283a 	ret

00004c84 <__sfp_lock_acquire>:
    4c84:	f800283a 	ret

00004c88 <__sfp_lock_release>:
    4c88:	f800283a 	ret

00004c8c <__sinit_lock_acquire>:
    4c8c:	f800283a 	ret

00004c90 <__sinit_lock_release>:
    4c90:	f800283a 	ret

00004c94 <__sinit>:
    4c94:	20800e17 	ldw	r2,56(r4)
    4c98:	defffd04 	addi	sp,sp,-12
    4c9c:	dc400115 	stw	r17,4(sp)
    4ca0:	dc000015 	stw	r16,0(sp)
    4ca4:	dfc00215 	stw	ra,8(sp)
    4ca8:	04400044 	movi	r17,1
    4cac:	01400104 	movi	r5,4
    4cb0:	000d883a 	mov	r6,zero
    4cb4:	2021883a 	mov	r16,r4
    4cb8:	2200bb04 	addi	r8,r4,748
    4cbc:	200f883a 	mov	r7,r4
    4cc0:	10000526 	beq	r2,zero,4cd8 <__sinit+0x44>
    4cc4:	dfc00217 	ldw	ra,8(sp)
    4cc8:	dc400117 	ldw	r17,4(sp)
    4ccc:	dc000017 	ldw	r16,0(sp)
    4cd0:	dec00304 	addi	sp,sp,12
    4cd4:	f800283a 	ret
    4cd8:	21000117 	ldw	r4,4(r4)
    4cdc:	00800034 	movhi	r2,0
    4ce0:	10935e04 	addi	r2,r2,19832
    4ce4:	00c000c4 	movi	r3,3
    4ce8:	80800f15 	stw	r2,60(r16)
    4cec:	80c0b915 	stw	r3,740(r16)
    4cf0:	8200ba15 	stw	r8,744(r16)
    4cf4:	84400e15 	stw	r17,56(r16)
    4cf8:	8000b815 	stw	zero,736(r16)
    4cfc:	0004c2c0 	call	4c2c <std>
    4d00:	81000217 	ldw	r4,8(r16)
    4d04:	880d883a 	mov	r6,r17
    4d08:	800f883a 	mov	r7,r16
    4d0c:	01400284 	movi	r5,10
    4d10:	0004c2c0 	call	4c2c <std>
    4d14:	81000317 	ldw	r4,12(r16)
    4d18:	800f883a 	mov	r7,r16
    4d1c:	01400484 	movi	r5,18
    4d20:	01800084 	movi	r6,2
    4d24:	dfc00217 	ldw	ra,8(sp)
    4d28:	dc400117 	ldw	r17,4(sp)
    4d2c:	dc000017 	ldw	r16,0(sp)
    4d30:	dec00304 	addi	sp,sp,12
    4d34:	0004c2c1 	jmpi	4c2c <std>

00004d38 <__fp_lock>:
    4d38:	0005883a 	mov	r2,zero
    4d3c:	f800283a 	ret

00004d40 <__fp_unlock>:
    4d40:	0005883a 	mov	r2,zero
    4d44:	f800283a 	ret

00004d48 <__fp_unlock_all>:
    4d48:	00800074 	movhi	r2,1
    4d4c:	10bbb804 	addi	r2,r2,-4384
    4d50:	11000017 	ldw	r4,0(r2)
    4d54:	01400034 	movhi	r5,0
    4d58:	29535004 	addi	r5,r5,19776
    4d5c:	00058c41 	jmpi	58c4 <_fwalk>

00004d60 <__fp_lock_all>:
    4d60:	00800074 	movhi	r2,1
    4d64:	10bbb804 	addi	r2,r2,-4384
    4d68:	11000017 	ldw	r4,0(r2)
    4d6c:	01400034 	movhi	r5,0
    4d70:	29534e04 	addi	r5,r5,19768
    4d74:	00058c41 	jmpi	58c4 <_fwalk>

00004d78 <_cleanup_r>:
    4d78:	01400034 	movhi	r5,0
    4d7c:	295ea204 	addi	r5,r5,31368
    4d80:	00058c41 	jmpi	58c4 <_fwalk>

00004d84 <_cleanup>:
    4d84:	00800074 	movhi	r2,1
    4d88:	10bbb904 	addi	r2,r2,-4380
    4d8c:	11000017 	ldw	r4,0(r2)
    4d90:	0004d781 	jmpi	4d78 <_cleanup_r>

00004d94 <__sfmoreglue>:
    4d94:	defffc04 	addi	sp,sp,-16
    4d98:	dc000015 	stw	r16,0(sp)
    4d9c:	2821883a 	mov	r16,r5
    4da0:	dc400115 	stw	r17,4(sp)
    4da4:	01401704 	movi	r5,92
    4da8:	2023883a 	mov	r17,r4
    4dac:	8009883a 	mov	r4,r16
    4db0:	dfc00315 	stw	ra,12(sp)
    4db4:	dcc00215 	stw	r19,8(sp)
    4db8:	00007d80 	call	7d8 <__mulsi3>
    4dbc:	11400304 	addi	r5,r2,12
    4dc0:	8809883a 	mov	r4,r17
    4dc4:	1027883a 	mov	r19,r2
    4dc8:	00008380 	call	838 <_malloc_r>
    4dcc:	10c00304 	addi	r3,r2,12
    4dd0:	1023883a 	mov	r17,r2
    4dd4:	1809883a 	mov	r4,r3
    4dd8:	980d883a 	mov	r6,r19
    4ddc:	000b883a 	mov	r5,zero
    4de0:	10000b26 	beq	r2,zero,4e10 <__sfmoreglue+0x7c>
    4de4:	14000115 	stw	r16,4(r2)
    4de8:	10c00215 	stw	r3,8(r2)
    4dec:	10000015 	stw	zero,0(r2)
    4df0:	0005e380 	call	5e38 <memset>
    4df4:	8805883a 	mov	r2,r17
    4df8:	dfc00317 	ldw	ra,12(sp)
    4dfc:	dcc00217 	ldw	r19,8(sp)
    4e00:	dc400117 	ldw	r17,4(sp)
    4e04:	dc000017 	ldw	r16,0(sp)
    4e08:	dec00404 	addi	sp,sp,16
    4e0c:	f800283a 	ret
    4e10:	0023883a 	mov	r17,zero
    4e14:	8805883a 	mov	r2,r17
    4e18:	dfc00317 	ldw	ra,12(sp)
    4e1c:	dcc00217 	ldw	r19,8(sp)
    4e20:	dc400117 	ldw	r17,4(sp)
    4e24:	dc000017 	ldw	r16,0(sp)
    4e28:	dec00404 	addi	sp,sp,16
    4e2c:	f800283a 	ret

00004e30 <__sfp>:
    4e30:	defffd04 	addi	sp,sp,-12
    4e34:	00800074 	movhi	r2,1
    4e38:	10bbb904 	addi	r2,r2,-4380
    4e3c:	dc000015 	stw	r16,0(sp)
    4e40:	14000017 	ldw	r16,0(r2)
    4e44:	dc400115 	stw	r17,4(sp)
    4e48:	dfc00215 	stw	ra,8(sp)
    4e4c:	80800e17 	ldw	r2,56(r16)
    4e50:	2023883a 	mov	r17,r4
    4e54:	10002626 	beq	r2,zero,4ef0 <__sfp+0xc0>
    4e58:	8400b804 	addi	r16,r16,736
    4e5c:	80800117 	ldw	r2,4(r16)
    4e60:	81000217 	ldw	r4,8(r16)
    4e64:	10ffffc4 	addi	r3,r2,-1
    4e68:	18000916 	blt	r3,zero,4e90 <__sfp+0x60>
    4e6c:	2080030f 	ldh	r2,12(r4)
    4e70:	10000b26 	beq	r2,zero,4ea0 <__sfp+0x70>
    4e74:	017fffc4 	movi	r5,-1
    4e78:	00000206 	br	4e84 <__sfp+0x54>
    4e7c:	2080030f 	ldh	r2,12(r4)
    4e80:	10000726 	beq	r2,zero,4ea0 <__sfp+0x70>
    4e84:	18ffffc4 	addi	r3,r3,-1
    4e88:	21001704 	addi	r4,r4,92
    4e8c:	197ffb1e 	bne	r3,r5,4e7c <__sfp+0x4c>
    4e90:	80800017 	ldw	r2,0(r16)
    4e94:	10001926 	beq	r2,zero,4efc <__sfp+0xcc>
    4e98:	1021883a 	mov	r16,r2
    4e9c:	003fef06 	br	4e5c <__sfp+0x2c>
    4ea0:	00bfffc4 	movi	r2,-1
    4ea4:	00c00044 	movi	r3,1
    4ea8:	2080038d 	sth	r2,14(r4)
    4eac:	20c0030d 	sth	r3,12(r4)
    4eb0:	20000015 	stw	zero,0(r4)
    4eb4:	20000215 	stw	zero,8(r4)
    4eb8:	20000115 	stw	zero,4(r4)
    4ebc:	20000415 	stw	zero,16(r4)
    4ec0:	20000515 	stw	zero,20(r4)
    4ec4:	20000615 	stw	zero,24(r4)
    4ec8:	20000c15 	stw	zero,48(r4)
    4ecc:	20000d15 	stw	zero,52(r4)
    4ed0:	20001115 	stw	zero,68(r4)
    4ed4:	20001215 	stw	zero,72(r4)
    4ed8:	2005883a 	mov	r2,r4
    4edc:	dfc00217 	ldw	ra,8(sp)
    4ee0:	dc400117 	ldw	r17,4(sp)
    4ee4:	dc000017 	ldw	r16,0(sp)
    4ee8:	dec00304 	addi	sp,sp,12
    4eec:	f800283a 	ret
    4ef0:	8009883a 	mov	r4,r16
    4ef4:	0004c940 	call	4c94 <__sinit>
    4ef8:	003fd706 	br	4e58 <__sfp+0x28>
    4efc:	8809883a 	mov	r4,r17
    4f00:	01400104 	movi	r5,4
    4f04:	0004d940 	call	4d94 <__sfmoreglue>
    4f08:	80800015 	stw	r2,0(r16)
    4f0c:	103fe21e 	bne	r2,zero,4e98 <__sfp+0x68>
    4f10:	00800304 	movi	r2,12
    4f14:	0009883a 	mov	r4,zero
    4f18:	88800015 	stw	r2,0(r17)
    4f1c:	003fee06 	br	4ed8 <__sfp+0xa8>

00004f20 <_malloc_trim_r>:
    4f20:	defffb04 	addi	sp,sp,-20
    4f24:	dcc00315 	stw	r19,12(sp)
    4f28:	04c00074 	movhi	r19,1
    4f2c:	9cf52f04 	addi	r19,r19,-11076
    4f30:	dc800215 	stw	r18,8(sp)
    4f34:	dc400115 	stw	r17,4(sp)
    4f38:	dc000015 	stw	r16,0(sp)
    4f3c:	2823883a 	mov	r17,r5
    4f40:	2025883a 	mov	r18,r4
    4f44:	dfc00415 	stw	ra,16(sp)
    4f48:	000a9080 	call	a908 <__malloc_lock>
    4f4c:	98800217 	ldw	r2,8(r19)
    4f50:	9009883a 	mov	r4,r18
    4f54:	000b883a 	mov	r5,zero
    4f58:	10c00117 	ldw	r3,4(r2)
    4f5c:	00bfff04 	movi	r2,-4
    4f60:	18a0703a 	and	r16,r3,r2
    4f64:	8463c83a 	sub	r17,r16,r17
    4f68:	8c43fbc4 	addi	r17,r17,4079
    4f6c:	8822d33a 	srli	r17,r17,12
    4f70:	0083ffc4 	movi	r2,4095
    4f74:	8c7fffc4 	addi	r17,r17,-1
    4f78:	8822933a 	slli	r17,r17,12
    4f7c:	1440060e 	bge	r2,r17,4f98 <_malloc_trim_r+0x78>
    4f80:	00010a40 	call	10a4 <_sbrk_r>
    4f84:	98c00217 	ldw	r3,8(r19)
    4f88:	9009883a 	mov	r4,r18
    4f8c:	044bc83a 	sub	r5,zero,r17
    4f90:	80c7883a 	add	r3,r16,r3
    4f94:	10c00926 	beq	r2,r3,4fbc <_malloc_trim_r+0x9c>
    4f98:	000a9280 	call	a928 <__malloc_unlock>
    4f9c:	0005883a 	mov	r2,zero
    4fa0:	dfc00417 	ldw	ra,16(sp)
    4fa4:	dcc00317 	ldw	r19,12(sp)
    4fa8:	dc800217 	ldw	r18,8(sp)
    4fac:	dc400117 	ldw	r17,4(sp)
    4fb0:	dc000017 	ldw	r16,0(sp)
    4fb4:	dec00504 	addi	sp,sp,20
    4fb8:	f800283a 	ret
    4fbc:	9009883a 	mov	r4,r18
    4fc0:	00010a40 	call	10a4 <_sbrk_r>
    4fc4:	844dc83a 	sub	r6,r16,r17
    4fc8:	00ffffc4 	movi	r3,-1
    4fcc:	9009883a 	mov	r4,r18
    4fd0:	000b883a 	mov	r5,zero
    4fd4:	01c00074 	movhi	r7,1
    4fd8:	39c26d04 	addi	r7,r7,2484
    4fdc:	31800054 	ori	r6,r6,1
    4fe0:	10c00926 	beq	r2,r3,5008 <_malloc_trim_r+0xe8>
    4fe4:	38800017 	ldw	r2,0(r7)
    4fe8:	98c00217 	ldw	r3,8(r19)
    4fec:	9009883a 	mov	r4,r18
    4ff0:	1445c83a 	sub	r2,r2,r17
    4ff4:	38800015 	stw	r2,0(r7)
    4ff8:	19800115 	stw	r6,4(r3)
    4ffc:	000a9280 	call	a928 <__malloc_unlock>
    5000:	00800044 	movi	r2,1
    5004:	003fe606 	br	4fa0 <_malloc_trim_r+0x80>
    5008:	00010a40 	call	10a4 <_sbrk_r>
    500c:	99800217 	ldw	r6,8(r19)
    5010:	100f883a 	mov	r7,r2
    5014:	9009883a 	mov	r4,r18
    5018:	1187c83a 	sub	r3,r2,r6
    501c:	008003c4 	movi	r2,15
    5020:	19400054 	ori	r5,r3,1
    5024:	10ffdc0e 	bge	r2,r3,4f98 <_malloc_trim_r+0x78>
    5028:	00800074 	movhi	r2,1
    502c:	10bbb704 	addi	r2,r2,-4388
    5030:	10c00017 	ldw	r3,0(r2)
    5034:	00800074 	movhi	r2,1
    5038:	10826d04 	addi	r2,r2,2484
    503c:	31400115 	stw	r5,4(r6)
    5040:	38c7c83a 	sub	r3,r7,r3
    5044:	10c00015 	stw	r3,0(r2)
    5048:	003fd306 	br	4f98 <_malloc_trim_r+0x78>

0000504c <_free_r>:
    504c:	defffd04 	addi	sp,sp,-12
    5050:	dc400115 	stw	r17,4(sp)
    5054:	dc000015 	stw	r16,0(sp)
    5058:	dfc00215 	stw	ra,8(sp)
    505c:	2821883a 	mov	r16,r5
    5060:	2023883a 	mov	r17,r4
    5064:	28005a26 	beq	r5,zero,51d0 <_free_r+0x184>
    5068:	000a9080 	call	a908 <__malloc_lock>
    506c:	823ffe04 	addi	r8,r16,-8
    5070:	41400117 	ldw	r5,4(r8)
    5074:	00bfff84 	movi	r2,-2
    5078:	02800074 	movhi	r10,1
    507c:	52b52f04 	addi	r10,r10,-11076
    5080:	288e703a 	and	r7,r5,r2
    5084:	41cd883a 	add	r6,r8,r7
    5088:	30c00117 	ldw	r3,4(r6)
    508c:	51000217 	ldw	r4,8(r10)
    5090:	00bfff04 	movi	r2,-4
    5094:	1892703a 	and	r9,r3,r2
    5098:	5017883a 	mov	r11,r10
    509c:	31006726 	beq	r6,r4,523c <_free_r+0x1f0>
    50a0:	2880004c 	andi	r2,r5,1
    50a4:	1005003a 	cmpeq	r2,r2,zero
    50a8:	32400115 	stw	r9,4(r6)
    50ac:	10001a1e 	bne	r2,zero,5118 <_free_r+0xcc>
    50b0:	000b883a 	mov	r5,zero
    50b4:	3247883a 	add	r3,r6,r9
    50b8:	18800117 	ldw	r2,4(r3)
    50bc:	1080004c 	andi	r2,r2,1
    50c0:	1000231e 	bne	r2,zero,5150 <_free_r+0x104>
    50c4:	280ac03a 	cmpne	r5,r5,zero
    50c8:	3a4f883a 	add	r7,r7,r9
    50cc:	2800451e 	bne	r5,zero,51e4 <_free_r+0x198>
    50d0:	31000217 	ldw	r4,8(r6)
    50d4:	00800074 	movhi	r2,1
    50d8:	10b53104 	addi	r2,r2,-11068
    50dc:	20807b26 	beq	r4,r2,52cc <_free_r+0x280>
    50e0:	30800317 	ldw	r2,12(r6)
    50e4:	3a07883a 	add	r3,r7,r8
    50e8:	19c00015 	stw	r7,0(r3)
    50ec:	11000215 	stw	r4,8(r2)
    50f0:	20800315 	stw	r2,12(r4)
    50f4:	38800054 	ori	r2,r7,1
    50f8:	40800115 	stw	r2,4(r8)
    50fc:	28001a26 	beq	r5,zero,5168 <_free_r+0x11c>
    5100:	8809883a 	mov	r4,r17
    5104:	dfc00217 	ldw	ra,8(sp)
    5108:	dc400117 	ldw	r17,4(sp)
    510c:	dc000017 	ldw	r16,0(sp)
    5110:	dec00304 	addi	sp,sp,12
    5114:	000a9281 	jmpi	a928 <__malloc_unlock>
    5118:	80bffe17 	ldw	r2,-8(r16)
    511c:	50c00204 	addi	r3,r10,8
    5120:	4091c83a 	sub	r8,r8,r2
    5124:	41000217 	ldw	r4,8(r8)
    5128:	388f883a 	add	r7,r7,r2
    512c:	20c06126 	beq	r4,r3,52b4 <_free_r+0x268>
    5130:	40800317 	ldw	r2,12(r8)
    5134:	3247883a 	add	r3,r6,r9
    5138:	000b883a 	mov	r5,zero
    513c:	11000215 	stw	r4,8(r2)
    5140:	20800315 	stw	r2,12(r4)
    5144:	18800117 	ldw	r2,4(r3)
    5148:	1080004c 	andi	r2,r2,1
    514c:	103fdd26 	beq	r2,zero,50c4 <_free_r+0x78>
    5150:	38800054 	ori	r2,r7,1
    5154:	3a07883a 	add	r3,r7,r8
    5158:	280ac03a 	cmpne	r5,r5,zero
    515c:	40800115 	stw	r2,4(r8)
    5160:	19c00015 	stw	r7,0(r3)
    5164:	283fe61e 	bne	r5,zero,5100 <_free_r+0xb4>
    5168:	00807fc4 	movi	r2,511
    516c:	11c01f2e 	bgeu	r2,r7,51ec <_free_r+0x1a0>
    5170:	3806d27a 	srli	r3,r7,9
    5174:	1800481e 	bne	r3,zero,5298 <_free_r+0x24c>
    5178:	3804d0fa 	srli	r2,r7,3
    517c:	100690fa 	slli	r3,r2,3
    5180:	1acd883a 	add	r6,r3,r11
    5184:	31400217 	ldw	r5,8(r6)
    5188:	31405926 	beq	r6,r5,52f0 <_free_r+0x2a4>
    518c:	28800117 	ldw	r2,4(r5)
    5190:	00ffff04 	movi	r3,-4
    5194:	10c4703a 	and	r2,r2,r3
    5198:	3880022e 	bgeu	r7,r2,51a4 <_free_r+0x158>
    519c:	29400217 	ldw	r5,8(r5)
    51a0:	317ffa1e 	bne	r6,r5,518c <_free_r+0x140>
    51a4:	29800317 	ldw	r6,12(r5)
    51a8:	41800315 	stw	r6,12(r8)
    51ac:	41400215 	stw	r5,8(r8)
    51b0:	8809883a 	mov	r4,r17
    51b4:	2a000315 	stw	r8,12(r5)
    51b8:	32000215 	stw	r8,8(r6)
    51bc:	dfc00217 	ldw	ra,8(sp)
    51c0:	dc400117 	ldw	r17,4(sp)
    51c4:	dc000017 	ldw	r16,0(sp)
    51c8:	dec00304 	addi	sp,sp,12
    51cc:	000a9281 	jmpi	a928 <__malloc_unlock>
    51d0:	dfc00217 	ldw	ra,8(sp)
    51d4:	dc400117 	ldw	r17,4(sp)
    51d8:	dc000017 	ldw	r16,0(sp)
    51dc:	dec00304 	addi	sp,sp,12
    51e0:	f800283a 	ret
    51e4:	31000217 	ldw	r4,8(r6)
    51e8:	003fbd06 	br	50e0 <_free_r+0x94>
    51ec:	3806d0fa 	srli	r3,r7,3
    51f0:	00800044 	movi	r2,1
    51f4:	51400117 	ldw	r5,4(r10)
    51f8:	180890fa 	slli	r4,r3,3
    51fc:	1807d0ba 	srai	r3,r3,2
    5200:	22c9883a 	add	r4,r4,r11
    5204:	21800217 	ldw	r6,8(r4)
    5208:	10c4983a 	sll	r2,r2,r3
    520c:	41000315 	stw	r4,12(r8)
    5210:	41800215 	stw	r6,8(r8)
    5214:	288ab03a 	or	r5,r5,r2
    5218:	22000215 	stw	r8,8(r4)
    521c:	8809883a 	mov	r4,r17
    5220:	51400115 	stw	r5,4(r10)
    5224:	32000315 	stw	r8,12(r6)
    5228:	dfc00217 	ldw	ra,8(sp)
    522c:	dc400117 	ldw	r17,4(sp)
    5230:	dc000017 	ldw	r16,0(sp)
    5234:	dec00304 	addi	sp,sp,12
    5238:	000a9281 	jmpi	a928 <__malloc_unlock>
    523c:	2880004c 	andi	r2,r5,1
    5240:	3a4d883a 	add	r6,r7,r9
    5244:	1000071e 	bne	r2,zero,5264 <_free_r+0x218>
    5248:	80bffe17 	ldw	r2,-8(r16)
    524c:	4091c83a 	sub	r8,r8,r2
    5250:	41000317 	ldw	r4,12(r8)
    5254:	40c00217 	ldw	r3,8(r8)
    5258:	308d883a 	add	r6,r6,r2
    525c:	20c00215 	stw	r3,8(r4)
    5260:	19000315 	stw	r4,12(r3)
    5264:	00800074 	movhi	r2,1
    5268:	10bbb604 	addi	r2,r2,-4392
    526c:	11000017 	ldw	r4,0(r2)
    5270:	30c00054 	ori	r3,r6,1
    5274:	52000215 	stw	r8,8(r10)
    5278:	40c00115 	stw	r3,4(r8)
    527c:	313fa036 	bltu	r6,r4,5100 <_free_r+0xb4>
    5280:	00800074 	movhi	r2,1
    5284:	10826004 	addi	r2,r2,2432
    5288:	11400017 	ldw	r5,0(r2)
    528c:	8809883a 	mov	r4,r17
    5290:	0004f200 	call	4f20 <_malloc_trim_r>
    5294:	003f9a06 	br	5100 <_free_r+0xb4>
    5298:	00800104 	movi	r2,4
    529c:	10c0072e 	bgeu	r2,r3,52bc <_free_r+0x270>
    52a0:	00800504 	movi	r2,20
    52a4:	10c01936 	bltu	r2,r3,530c <_free_r+0x2c0>
    52a8:	188016c4 	addi	r2,r3,91
    52ac:	100690fa 	slli	r3,r2,3
    52b0:	003fb306 	br	5180 <_free_r+0x134>
    52b4:	01400044 	movi	r5,1
    52b8:	003f7e06 	br	50b4 <_free_r+0x68>
    52bc:	3804d1ba 	srli	r2,r7,6
    52c0:	10800e04 	addi	r2,r2,56
    52c4:	100690fa 	slli	r3,r2,3
    52c8:	003fad06 	br	5180 <_free_r+0x134>
    52cc:	22000315 	stw	r8,12(r4)
    52d0:	22000215 	stw	r8,8(r4)
    52d4:	3a05883a 	add	r2,r7,r8
    52d8:	38c00054 	ori	r3,r7,1
    52dc:	11c00015 	stw	r7,0(r2)
    52e0:	41000215 	stw	r4,8(r8)
    52e4:	40c00115 	stw	r3,4(r8)
    52e8:	41000315 	stw	r4,12(r8)
    52ec:	003f8406 	br	5100 <_free_r+0xb4>
    52f0:	1005d0ba 	srai	r2,r2,2
    52f4:	00c00044 	movi	r3,1
    52f8:	51000117 	ldw	r4,4(r10)
    52fc:	1886983a 	sll	r3,r3,r2
    5300:	20c8b03a 	or	r4,r4,r3
    5304:	51000115 	stw	r4,4(r10)
    5308:	003fa706 	br	51a8 <_free_r+0x15c>
    530c:	00801504 	movi	r2,84
    5310:	10c00436 	bltu	r2,r3,5324 <_free_r+0x2d8>
    5314:	3804d33a 	srli	r2,r7,12
    5318:	10801b84 	addi	r2,r2,110
    531c:	100690fa 	slli	r3,r2,3
    5320:	003f9706 	br	5180 <_free_r+0x134>
    5324:	00805504 	movi	r2,340
    5328:	10c00436 	bltu	r2,r3,533c <_free_r+0x2f0>
    532c:	3804d3fa 	srli	r2,r7,15
    5330:	10801dc4 	addi	r2,r2,119
    5334:	100690fa 	slli	r3,r2,3
    5338:	003f9106 	br	5180 <_free_r+0x134>
    533c:	00815504 	movi	r2,1364
    5340:	10c0032e 	bgeu	r2,r3,5350 <_free_r+0x304>
    5344:	00801f84 	movi	r2,126
    5348:	00c0fc04 	movi	r3,1008
    534c:	003f8c06 	br	5180 <_free_r+0x134>
    5350:	3804d4ba 	srli	r2,r7,18
    5354:	10801f04 	addi	r2,r2,124
    5358:	100690fa 	slli	r3,r2,3
    535c:	003f8806 	br	5180 <_free_r+0x134>

00005360 <__sfvwrite_r>:
    5360:	30800217 	ldw	r2,8(r6)
    5364:	defff504 	addi	sp,sp,-44
    5368:	df000915 	stw	fp,36(sp)
    536c:	dd800715 	stw	r22,28(sp)
    5370:	dc800315 	stw	r18,12(sp)
    5374:	dfc00a15 	stw	ra,40(sp)
    5378:	ddc00815 	stw	r23,32(sp)
    537c:	dd400615 	stw	r21,24(sp)
    5380:	dd000515 	stw	r20,20(sp)
    5384:	dcc00415 	stw	r19,16(sp)
    5388:	dc400215 	stw	r17,8(sp)
    538c:	dc000115 	stw	r16,4(sp)
    5390:	302d883a 	mov	r22,r6
    5394:	2039883a 	mov	fp,r4
    5398:	2825883a 	mov	r18,r5
    539c:	10001c26 	beq	r2,zero,5410 <__sfvwrite_r+0xb0>
    53a0:	29c0030b 	ldhu	r7,12(r5)
    53a4:	3880020c 	andi	r2,r7,8
    53a8:	10002726 	beq	r2,zero,5448 <__sfvwrite_r+0xe8>
    53ac:	28800417 	ldw	r2,16(r5)
    53b0:	10002526 	beq	r2,zero,5448 <__sfvwrite_r+0xe8>
    53b4:	3880008c 	andi	r2,r7,2
    53b8:	b5400017 	ldw	r21,0(r22)
    53bc:	10002826 	beq	r2,zero,5460 <__sfvwrite_r+0x100>
    53c0:	0021883a 	mov	r16,zero
    53c4:	0023883a 	mov	r17,zero
    53c8:	880d883a 	mov	r6,r17
    53cc:	e009883a 	mov	r4,fp
    53d0:	00810004 	movi	r2,1024
    53d4:	80006e26 	beq	r16,zero,5590 <__sfvwrite_r+0x230>
    53d8:	800f883a 	mov	r7,r16
    53dc:	91400717 	ldw	r5,28(r18)
    53e0:	1400012e 	bgeu	r2,r16,53e8 <__sfvwrite_r+0x88>
    53e4:	100f883a 	mov	r7,r2
    53e8:	90c00917 	ldw	r3,36(r18)
    53ec:	183ee83a 	callr	r3
    53f0:	1007883a 	mov	r3,r2
    53f4:	80a1c83a 	sub	r16,r16,r2
    53f8:	88a3883a 	add	r17,r17,r2
    53fc:	00806d0e 	bge	zero,r2,55b4 <__sfvwrite_r+0x254>
    5400:	b0800217 	ldw	r2,8(r22)
    5404:	10c5c83a 	sub	r2,r2,r3
    5408:	b0800215 	stw	r2,8(r22)
    540c:	103fee1e 	bne	r2,zero,53c8 <__sfvwrite_r+0x68>
    5410:	0009883a 	mov	r4,zero
    5414:	2005883a 	mov	r2,r4
    5418:	dfc00a17 	ldw	ra,40(sp)
    541c:	df000917 	ldw	fp,36(sp)
    5420:	ddc00817 	ldw	r23,32(sp)
    5424:	dd800717 	ldw	r22,28(sp)
    5428:	dd400617 	ldw	r21,24(sp)
    542c:	dd000517 	ldw	r20,20(sp)
    5430:	dcc00417 	ldw	r19,16(sp)
    5434:	dc800317 	ldw	r18,12(sp)
    5438:	dc400217 	ldw	r17,8(sp)
    543c:	dc000117 	ldw	r16,4(sp)
    5440:	dec00b04 	addi	sp,sp,44
    5444:	f800283a 	ret
    5448:	00030c80 	call	30c8 <__swsetup_r>
    544c:	1000e41e 	bne	r2,zero,57e0 <__sfvwrite_r+0x480>
    5450:	91c0030b 	ldhu	r7,12(r18)
    5454:	b5400017 	ldw	r21,0(r22)
    5458:	3880008c 	andi	r2,r7,2
    545c:	103fd81e 	bne	r2,zero,53c0 <__sfvwrite_r+0x60>
    5460:	3880004c 	andi	r2,r7,1
    5464:	1005003a 	cmpeq	r2,r2,zero
    5468:	10005726 	beq	r2,zero,55c8 <__sfvwrite_r+0x268>
    546c:	0029883a 	mov	r20,zero
    5470:	002f883a 	mov	r23,zero
    5474:	a0004226 	beq	r20,zero,5580 <__sfvwrite_r+0x220>
    5478:	3880800c 	andi	r2,r7,512
    547c:	94000217 	ldw	r16,8(r18)
    5480:	10008b26 	beq	r2,zero,56b0 <__sfvwrite_r+0x350>
    5484:	800d883a 	mov	r6,r16
    5488:	a400a536 	bltu	r20,r16,5720 <__sfvwrite_r+0x3c0>
    548c:	3881200c 	andi	r2,r7,1152
    5490:	10002726 	beq	r2,zero,5530 <__sfvwrite_r+0x1d0>
    5494:	90800517 	ldw	r2,20(r18)
    5498:	92000417 	ldw	r8,16(r18)
    549c:	91400017 	ldw	r5,0(r18)
    54a0:	1087883a 	add	r3,r2,r2
    54a4:	1887883a 	add	r3,r3,r2
    54a8:	1808d7fa 	srli	r4,r3,31
    54ac:	2a21c83a 	sub	r16,r5,r8
    54b0:	80800044 	addi	r2,r16,1
    54b4:	20c9883a 	add	r4,r4,r3
    54b8:	2027d07a 	srai	r19,r4,1
    54bc:	a085883a 	add	r2,r20,r2
    54c0:	980d883a 	mov	r6,r19
    54c4:	9880022e 	bgeu	r19,r2,54d0 <__sfvwrite_r+0x170>
    54c8:	1027883a 	mov	r19,r2
    54cc:	100d883a 	mov	r6,r2
    54d0:	3881000c 	andi	r2,r7,1024
    54d4:	1000b826 	beq	r2,zero,57b8 <__sfvwrite_r+0x458>
    54d8:	300b883a 	mov	r5,r6
    54dc:	e009883a 	mov	r4,fp
    54e0:	00008380 	call	838 <_malloc_r>
    54e4:	10003126 	beq	r2,zero,55ac <__sfvwrite_r+0x24c>
    54e8:	91400417 	ldw	r5,16(r18)
    54ec:	1009883a 	mov	r4,r2
    54f0:	800d883a 	mov	r6,r16
    54f4:	1023883a 	mov	r17,r2
    54f8:	0005cb80 	call	5cb8 <memcpy>
    54fc:	90c0030b 	ldhu	r3,12(r18)
    5500:	00beffc4 	movi	r2,-1025
    5504:	1886703a 	and	r3,r3,r2
    5508:	18c02014 	ori	r3,r3,128
    550c:	90c0030d 	sth	r3,12(r18)
    5510:	9c07c83a 	sub	r3,r19,r16
    5514:	8c05883a 	add	r2,r17,r16
    5518:	a00d883a 	mov	r6,r20
    551c:	a021883a 	mov	r16,r20
    5520:	90800015 	stw	r2,0(r18)
    5524:	90c00215 	stw	r3,8(r18)
    5528:	94400415 	stw	r17,16(r18)
    552c:	94c00515 	stw	r19,20(r18)
    5530:	91000017 	ldw	r4,0(r18)
    5534:	b80b883a 	mov	r5,r23
    5538:	a023883a 	mov	r17,r20
    553c:	0005d580 	call	5d58 <memmove>
    5540:	90c00217 	ldw	r3,8(r18)
    5544:	90800017 	ldw	r2,0(r18)
    5548:	a027883a 	mov	r19,r20
    554c:	1c07c83a 	sub	r3,r3,r16
    5550:	1405883a 	add	r2,r2,r16
    5554:	90c00215 	stw	r3,8(r18)
    5558:	a021883a 	mov	r16,r20
    555c:	90800015 	stw	r2,0(r18)
    5560:	b0800217 	ldw	r2,8(r22)
    5564:	1405c83a 	sub	r2,r2,r16
    5568:	b0800215 	stw	r2,8(r22)
    556c:	103fa826 	beq	r2,zero,5410 <__sfvwrite_r+0xb0>
    5570:	a469c83a 	sub	r20,r20,r17
    5574:	91c0030b 	ldhu	r7,12(r18)
    5578:	bcef883a 	add	r23,r23,r19
    557c:	a03fbe1e 	bne	r20,zero,5478 <__sfvwrite_r+0x118>
    5580:	adc00017 	ldw	r23,0(r21)
    5584:	ad000117 	ldw	r20,4(r21)
    5588:	ad400204 	addi	r21,r21,8
    558c:	003fb906 	br	5474 <__sfvwrite_r+0x114>
    5590:	ac400017 	ldw	r17,0(r21)
    5594:	ac000117 	ldw	r16,4(r21)
    5598:	ad400204 	addi	r21,r21,8
    559c:	003f8a06 	br	53c8 <__sfvwrite_r+0x68>
    55a0:	91400417 	ldw	r5,16(r18)
    55a4:	e009883a 	mov	r4,fp
    55a8:	000504c0 	call	504c <_free_r>
    55ac:	00800304 	movi	r2,12
    55b0:	e0800015 	stw	r2,0(fp)
    55b4:	9080030b 	ldhu	r2,12(r18)
    55b8:	013fffc4 	movi	r4,-1
    55bc:	10801014 	ori	r2,r2,64
    55c0:	9080030d 	sth	r2,12(r18)
    55c4:	003f9306 	br	5414 <__sfvwrite_r+0xb4>
    55c8:	0027883a 	mov	r19,zero
    55cc:	002f883a 	mov	r23,zero
    55d0:	d8000015 	stw	zero,0(sp)
    55d4:	0029883a 	mov	r20,zero
    55d8:	98001e26 	beq	r19,zero,5654 <__sfvwrite_r+0x2f4>
    55dc:	d8c00017 	ldw	r3,0(sp)
    55e0:	1804c03a 	cmpne	r2,r3,zero
    55e4:	10005e26 	beq	r2,zero,5760 <__sfvwrite_r+0x400>
    55e8:	9821883a 	mov	r16,r19
    55ec:	a4c0012e 	bgeu	r20,r19,55f4 <__sfvwrite_r+0x294>
    55f0:	a021883a 	mov	r16,r20
    55f4:	91000017 	ldw	r4,0(r18)
    55f8:	90800417 	ldw	r2,16(r18)
    55fc:	91800217 	ldw	r6,8(r18)
    5600:	91c00517 	ldw	r7,20(r18)
    5604:	1100022e 	bgeu	r2,r4,5610 <__sfvwrite_r+0x2b0>
    5608:	31e3883a 	add	r17,r6,r7
    560c:	8c001616 	blt	r17,r16,5668 <__sfvwrite_r+0x308>
    5610:	81c03816 	blt	r16,r7,56f4 <__sfvwrite_r+0x394>
    5614:	90c00917 	ldw	r3,36(r18)
    5618:	91400717 	ldw	r5,28(r18)
    561c:	e009883a 	mov	r4,fp
    5620:	b80d883a 	mov	r6,r23
    5624:	183ee83a 	callr	r3
    5628:	1023883a 	mov	r17,r2
    562c:	00bfe10e 	bge	zero,r2,55b4 <__sfvwrite_r+0x254>
    5630:	a469c83a 	sub	r20,r20,r17
    5634:	a0001826 	beq	r20,zero,5698 <__sfvwrite_r+0x338>
    5638:	b0800217 	ldw	r2,8(r22)
    563c:	1445c83a 	sub	r2,r2,r17
    5640:	b0800215 	stw	r2,8(r22)
    5644:	103f7226 	beq	r2,zero,5410 <__sfvwrite_r+0xb0>
    5648:	9c67c83a 	sub	r19,r19,r17
    564c:	bc6f883a 	add	r23,r23,r17
    5650:	983fe21e 	bne	r19,zero,55dc <__sfvwrite_r+0x27c>
    5654:	adc00017 	ldw	r23,0(r21)
    5658:	acc00117 	ldw	r19,4(r21)
    565c:	ad400204 	addi	r21,r21,8
    5660:	d8000015 	stw	zero,0(sp)
    5664:	003fdc06 	br	55d8 <__sfvwrite_r+0x278>
    5668:	b80b883a 	mov	r5,r23
    566c:	880d883a 	mov	r6,r17
    5670:	0005d580 	call	5d58 <memmove>
    5674:	90c00017 	ldw	r3,0(r18)
    5678:	e009883a 	mov	r4,fp
    567c:	900b883a 	mov	r5,r18
    5680:	1c47883a 	add	r3,r3,r17
    5684:	90c00015 	stw	r3,0(r18)
    5688:	00049fc0 	call	49fc <_fflush_r>
    568c:	103fc91e 	bne	r2,zero,55b4 <__sfvwrite_r+0x254>
    5690:	a469c83a 	sub	r20,r20,r17
    5694:	a03fe81e 	bne	r20,zero,5638 <__sfvwrite_r+0x2d8>
    5698:	e009883a 	mov	r4,fp
    569c:	900b883a 	mov	r5,r18
    56a0:	00049fc0 	call	49fc <_fflush_r>
    56a4:	103fc31e 	bne	r2,zero,55b4 <__sfvwrite_r+0x254>
    56a8:	d8000015 	stw	zero,0(sp)
    56ac:	003fe206 	br	5638 <__sfvwrite_r+0x2d8>
    56b0:	91000017 	ldw	r4,0(r18)
    56b4:	90800417 	ldw	r2,16(r18)
    56b8:	1100022e 	bgeu	r2,r4,56c4 <__sfvwrite_r+0x364>
    56bc:	8023883a 	mov	r17,r16
    56c0:	85003136 	bltu	r16,r20,5788 <__sfvwrite_r+0x428>
    56c4:	91c00517 	ldw	r7,20(r18)
    56c8:	a1c01836 	bltu	r20,r7,572c <__sfvwrite_r+0x3cc>
    56cc:	90c00917 	ldw	r3,36(r18)
    56d0:	91400717 	ldw	r5,28(r18)
    56d4:	e009883a 	mov	r4,fp
    56d8:	b80d883a 	mov	r6,r23
    56dc:	183ee83a 	callr	r3
    56e0:	1021883a 	mov	r16,r2
    56e4:	00bfb30e 	bge	zero,r2,55b4 <__sfvwrite_r+0x254>
    56e8:	1023883a 	mov	r17,r2
    56ec:	1027883a 	mov	r19,r2
    56f0:	003f9b06 	br	5560 <__sfvwrite_r+0x200>
    56f4:	b80b883a 	mov	r5,r23
    56f8:	800d883a 	mov	r6,r16
    56fc:	0005d580 	call	5d58 <memmove>
    5700:	90c00217 	ldw	r3,8(r18)
    5704:	90800017 	ldw	r2,0(r18)
    5708:	8023883a 	mov	r17,r16
    570c:	1c07c83a 	sub	r3,r3,r16
    5710:	1405883a 	add	r2,r2,r16
    5714:	90c00215 	stw	r3,8(r18)
    5718:	90800015 	stw	r2,0(r18)
    571c:	003fc406 	br	5630 <__sfvwrite_r+0x2d0>
    5720:	a00d883a 	mov	r6,r20
    5724:	a021883a 	mov	r16,r20
    5728:	003f8106 	br	5530 <__sfvwrite_r+0x1d0>
    572c:	b80b883a 	mov	r5,r23
    5730:	a00d883a 	mov	r6,r20
    5734:	0005d580 	call	5d58 <memmove>
    5738:	90c00217 	ldw	r3,8(r18)
    573c:	90800017 	ldw	r2,0(r18)
    5740:	a021883a 	mov	r16,r20
    5744:	1d07c83a 	sub	r3,r3,r20
    5748:	1505883a 	add	r2,r2,r20
    574c:	a023883a 	mov	r17,r20
    5750:	a027883a 	mov	r19,r20
    5754:	90c00215 	stw	r3,8(r18)
    5758:	90800015 	stw	r2,0(r18)
    575c:	003f8006 	br	5560 <__sfvwrite_r+0x200>
    5760:	b809883a 	mov	r4,r23
    5764:	01400284 	movi	r5,10
    5768:	980d883a 	mov	r6,r19
    576c:	0005bd40 	call	5bd4 <memchr>
    5770:	10001726 	beq	r2,zero,57d0 <__sfvwrite_r+0x470>
    5774:	15c5c83a 	sub	r2,r2,r23
    5778:	15000044 	addi	r20,r2,1
    577c:	00800044 	movi	r2,1
    5780:	d8800015 	stw	r2,0(sp)
    5784:	003f9806 	br	55e8 <__sfvwrite_r+0x288>
    5788:	b80b883a 	mov	r5,r23
    578c:	800d883a 	mov	r6,r16
    5790:	0005d580 	call	5d58 <memmove>
    5794:	90c00017 	ldw	r3,0(r18)
    5798:	e009883a 	mov	r4,fp
    579c:	900b883a 	mov	r5,r18
    57a0:	1c07883a 	add	r3,r3,r16
    57a4:	90c00015 	stw	r3,0(r18)
    57a8:	8027883a 	mov	r19,r16
    57ac:	00049fc0 	call	49fc <_fflush_r>
    57b0:	103f6b26 	beq	r2,zero,5560 <__sfvwrite_r+0x200>
    57b4:	003f7f06 	br	55b4 <__sfvwrite_r+0x254>
    57b8:	400b883a 	mov	r5,r8
    57bc:	e009883a 	mov	r4,fp
    57c0:	0006f5c0 	call	6f5c <_realloc_r>
    57c4:	103f7626 	beq	r2,zero,55a0 <__sfvwrite_r+0x240>
    57c8:	1023883a 	mov	r17,r2
    57cc:	003f5006 	br	5510 <__sfvwrite_r+0x1b0>
    57d0:	00c00044 	movi	r3,1
    57d4:	9d000044 	addi	r20,r19,1
    57d8:	d8c00015 	stw	r3,0(sp)
    57dc:	003f8206 	br	55e8 <__sfvwrite_r+0x288>
    57e0:	9080030b 	ldhu	r2,12(r18)
    57e4:	00c00244 	movi	r3,9
    57e8:	013fffc4 	movi	r4,-1
    57ec:	10801014 	ori	r2,r2,64
    57f0:	9080030d 	sth	r2,12(r18)
    57f4:	e0c00015 	stw	r3,0(fp)
    57f8:	003f0606 	br	5414 <__sfvwrite_r+0xb4>

000057fc <_fwalk_reent>:
    57fc:	defff704 	addi	sp,sp,-36
    5800:	dcc00315 	stw	r19,12(sp)
    5804:	24c0b804 	addi	r19,r4,736
    5808:	dd800615 	stw	r22,24(sp)
    580c:	dd400515 	stw	r21,20(sp)
    5810:	dfc00815 	stw	ra,32(sp)
    5814:	ddc00715 	stw	r23,28(sp)
    5818:	dd000415 	stw	r20,16(sp)
    581c:	dc800215 	stw	r18,8(sp)
    5820:	dc400115 	stw	r17,4(sp)
    5824:	dc000015 	stw	r16,0(sp)
    5828:	202b883a 	mov	r21,r4
    582c:	282d883a 	mov	r22,r5
    5830:	0004c840 	call	4c84 <__sfp_lock_acquire>
    5834:	98002126 	beq	r19,zero,58bc <_fwalk_reent+0xc0>
    5838:	002f883a 	mov	r23,zero
    583c:	9c800117 	ldw	r18,4(r19)
    5840:	9c000217 	ldw	r16,8(r19)
    5844:	90bfffc4 	addi	r2,r18,-1
    5848:	10000d16 	blt	r2,zero,5880 <_fwalk_reent+0x84>
    584c:	0023883a 	mov	r17,zero
    5850:	053fffc4 	movi	r20,-1
    5854:	8080030f 	ldh	r2,12(r16)
    5858:	8c400044 	addi	r17,r17,1
    585c:	10000626 	beq	r2,zero,5878 <_fwalk_reent+0x7c>
    5860:	8080038f 	ldh	r2,14(r16)
    5864:	800b883a 	mov	r5,r16
    5868:	a809883a 	mov	r4,r21
    586c:	15000226 	beq	r2,r20,5878 <_fwalk_reent+0x7c>
    5870:	b03ee83a 	callr	r22
    5874:	b8aeb03a 	or	r23,r23,r2
    5878:	84001704 	addi	r16,r16,92
    587c:	947ff51e 	bne	r18,r17,5854 <_fwalk_reent+0x58>
    5880:	9cc00017 	ldw	r19,0(r19)
    5884:	983fed1e 	bne	r19,zero,583c <_fwalk_reent+0x40>
    5888:	0004c880 	call	4c88 <__sfp_lock_release>
    588c:	b805883a 	mov	r2,r23
    5890:	dfc00817 	ldw	ra,32(sp)
    5894:	ddc00717 	ldw	r23,28(sp)
    5898:	dd800617 	ldw	r22,24(sp)
    589c:	dd400517 	ldw	r21,20(sp)
    58a0:	dd000417 	ldw	r20,16(sp)
    58a4:	dcc00317 	ldw	r19,12(sp)
    58a8:	dc800217 	ldw	r18,8(sp)
    58ac:	dc400117 	ldw	r17,4(sp)
    58b0:	dc000017 	ldw	r16,0(sp)
    58b4:	dec00904 	addi	sp,sp,36
    58b8:	f800283a 	ret
    58bc:	002f883a 	mov	r23,zero
    58c0:	003ff106 	br	5888 <_fwalk_reent+0x8c>

000058c4 <_fwalk>:
    58c4:	defff804 	addi	sp,sp,-32
    58c8:	dcc00315 	stw	r19,12(sp)
    58cc:	24c0b804 	addi	r19,r4,736
    58d0:	dd400515 	stw	r21,20(sp)
    58d4:	dfc00715 	stw	ra,28(sp)
    58d8:	dd800615 	stw	r22,24(sp)
    58dc:	dd000415 	stw	r20,16(sp)
    58e0:	dc800215 	stw	r18,8(sp)
    58e4:	dc400115 	stw	r17,4(sp)
    58e8:	dc000015 	stw	r16,0(sp)
    58ec:	282b883a 	mov	r21,r5
    58f0:	0004c840 	call	4c84 <__sfp_lock_acquire>
    58f4:	98001f26 	beq	r19,zero,5974 <_fwalk+0xb0>
    58f8:	002d883a 	mov	r22,zero
    58fc:	9c800117 	ldw	r18,4(r19)
    5900:	9c000217 	ldw	r16,8(r19)
    5904:	90bfffc4 	addi	r2,r18,-1
    5908:	10000c16 	blt	r2,zero,593c <_fwalk+0x78>
    590c:	0023883a 	mov	r17,zero
    5910:	053fffc4 	movi	r20,-1
    5914:	8080030f 	ldh	r2,12(r16)
    5918:	8c400044 	addi	r17,r17,1
    591c:	10000526 	beq	r2,zero,5934 <_fwalk+0x70>
    5920:	8080038f 	ldh	r2,14(r16)
    5924:	8009883a 	mov	r4,r16
    5928:	15000226 	beq	r2,r20,5934 <_fwalk+0x70>
    592c:	a83ee83a 	callr	r21
    5930:	b0acb03a 	or	r22,r22,r2
    5934:	84001704 	addi	r16,r16,92
    5938:	947ff61e 	bne	r18,r17,5914 <_fwalk+0x50>
    593c:	9cc00017 	ldw	r19,0(r19)
    5940:	983fee1e 	bne	r19,zero,58fc <_fwalk+0x38>
    5944:	0004c880 	call	4c88 <__sfp_lock_release>
    5948:	b005883a 	mov	r2,r22
    594c:	dfc00717 	ldw	ra,28(sp)
    5950:	dd800617 	ldw	r22,24(sp)
    5954:	dd400517 	ldw	r21,20(sp)
    5958:	dd000417 	ldw	r20,16(sp)
    595c:	dcc00317 	ldw	r19,12(sp)
    5960:	dc800217 	ldw	r18,8(sp)
    5964:	dc400117 	ldw	r17,4(sp)
    5968:	dc000017 	ldw	r16,0(sp)
    596c:	dec00804 	addi	sp,sp,32
    5970:	f800283a 	ret
    5974:	002d883a 	mov	r22,zero
    5978:	003ff206 	br	5944 <_fwalk+0x80>

0000597c <__locale_charset>:
    597c:	d0a00517 	ldw	r2,-32748(gp)
    5980:	f800283a 	ret

00005984 <_localeconv_r>:
    5984:	00800074 	movhi	r2,1
    5988:	10b48a04 	addi	r2,r2,-11736
    598c:	f800283a 	ret

00005990 <localeconv>:
    5990:	00800074 	movhi	r2,1
    5994:	10bbb804 	addi	r2,r2,-4384
    5998:	11000017 	ldw	r4,0(r2)
    599c:	00059841 	jmpi	5984 <_localeconv_r>

000059a0 <_setlocale_r>:
    59a0:	defffc04 	addi	sp,sp,-16
    59a4:	00c00074 	movhi	r3,1
    59a8:	18f48504 	addi	r3,r3,-11756
    59ac:	dc800215 	stw	r18,8(sp)
    59b0:	dc400115 	stw	r17,4(sp)
    59b4:	dc000015 	stw	r16,0(sp)
    59b8:	2023883a 	mov	r17,r4
    59bc:	2825883a 	mov	r18,r5
    59c0:	dfc00315 	stw	ra,12(sp)
    59c4:	3021883a 	mov	r16,r6
    59c8:	3009883a 	mov	r4,r6
    59cc:	180b883a 	mov	r5,r3
    59d0:	30000926 	beq	r6,zero,59f8 <_setlocale_r+0x58>
    59d4:	000770c0 	call	770c <strcmp>
    59d8:	8009883a 	mov	r4,r16
    59dc:	01400074 	movhi	r5,1
    59e0:	29747004 	addi	r5,r5,-11840
    59e4:	10000b1e 	bne	r2,zero,5a14 <_setlocale_r+0x74>
    59e8:	8c000d15 	stw	r16,52(r17)
    59ec:	8c800c15 	stw	r18,48(r17)
    59f0:	00c00074 	movhi	r3,1
    59f4:	18f48504 	addi	r3,r3,-11756
    59f8:	1805883a 	mov	r2,r3
    59fc:	dfc00317 	ldw	ra,12(sp)
    5a00:	dc800217 	ldw	r18,8(sp)
    5a04:	dc400117 	ldw	r17,4(sp)
    5a08:	dc000017 	ldw	r16,0(sp)
    5a0c:	dec00404 	addi	sp,sp,16
    5a10:	f800283a 	ret
    5a14:	000770c0 	call	770c <strcmp>
    5a18:	0007883a 	mov	r3,zero
    5a1c:	103ff226 	beq	r2,zero,59e8 <_setlocale_r+0x48>
    5a20:	003ff506 	br	59f8 <_setlocale_r+0x58>

00005a24 <setlocale>:
    5a24:	01800074 	movhi	r6,1
    5a28:	31bbb804 	addi	r6,r6,-4384
    5a2c:	2007883a 	mov	r3,r4
    5a30:	31000017 	ldw	r4,0(r6)
    5a34:	280d883a 	mov	r6,r5
    5a38:	180b883a 	mov	r5,r3
    5a3c:	00059a01 	jmpi	59a0 <_setlocale_r>

00005a40 <__smakebuf_r>:
    5a40:	2880030b 	ldhu	r2,12(r5)
    5a44:	deffed04 	addi	sp,sp,-76
    5a48:	dc401015 	stw	r17,64(sp)
    5a4c:	1080008c 	andi	r2,r2,2
    5a50:	dc000f15 	stw	r16,60(sp)
    5a54:	dfc01215 	stw	ra,72(sp)
    5a58:	dc801115 	stw	r18,68(sp)
    5a5c:	2821883a 	mov	r16,r5
    5a60:	2023883a 	mov	r17,r4
    5a64:	10000b26 	beq	r2,zero,5a94 <__smakebuf_r+0x54>
    5a68:	28c010c4 	addi	r3,r5,67
    5a6c:	00800044 	movi	r2,1
    5a70:	28800515 	stw	r2,20(r5)
    5a74:	28c00415 	stw	r3,16(r5)
    5a78:	28c00015 	stw	r3,0(r5)
    5a7c:	dfc01217 	ldw	ra,72(sp)
    5a80:	dc801117 	ldw	r18,68(sp)
    5a84:	dc401017 	ldw	r17,64(sp)
    5a88:	dc000f17 	ldw	r16,60(sp)
    5a8c:	dec01304 	addi	sp,sp,76
    5a90:	f800283a 	ret
    5a94:	2940038f 	ldh	r5,14(r5)
    5a98:	28002116 	blt	r5,zero,5b20 <__smakebuf_r+0xe0>
    5a9c:	d80d883a 	mov	r6,sp
    5aa0:	0007a9c0 	call	7a9c <_fstat_r>
    5aa4:	10001e16 	blt	r2,zero,5b20 <__smakebuf_r+0xe0>
    5aa8:	d8800117 	ldw	r2,4(sp)
    5aac:	00e00014 	movui	r3,32768
    5ab0:	113c000c 	andi	r4,r2,61440
    5ab4:	20c03126 	beq	r4,r3,5b7c <__smakebuf_r+0x13c>
    5ab8:	8080030b 	ldhu	r2,12(r16)
    5abc:	00c80004 	movi	r3,8192
    5ac0:	10820014 	ori	r2,r2,2048
    5ac4:	8080030d 	sth	r2,12(r16)
    5ac8:	20c01e26 	beq	r4,r3,5b44 <__smakebuf_r+0x104>
    5acc:	04810004 	movi	r18,1024
    5ad0:	8809883a 	mov	r4,r17
    5ad4:	900b883a 	mov	r5,r18
    5ad8:	00008380 	call	838 <_malloc_r>
    5adc:	1009883a 	mov	r4,r2
    5ae0:	10003126 	beq	r2,zero,5ba8 <__smakebuf_r+0x168>
    5ae4:	80c0030b 	ldhu	r3,12(r16)
    5ae8:	00800034 	movhi	r2,0
    5aec:	10935e04 	addi	r2,r2,19832
    5af0:	88800f15 	stw	r2,60(r17)
    5af4:	18c02014 	ori	r3,r3,128
    5af8:	84800515 	stw	r18,20(r16)
    5afc:	80c0030d 	sth	r3,12(r16)
    5b00:	81000415 	stw	r4,16(r16)
    5b04:	81000015 	stw	r4,0(r16)
    5b08:	dfc01217 	ldw	ra,72(sp)
    5b0c:	dc801117 	ldw	r18,68(sp)
    5b10:	dc401017 	ldw	r17,64(sp)
    5b14:	dc000f17 	ldw	r16,60(sp)
    5b18:	dec01304 	addi	sp,sp,76
    5b1c:	f800283a 	ret
    5b20:	80c0030b 	ldhu	r3,12(r16)
    5b24:	1880200c 	andi	r2,r3,128
    5b28:	10000426 	beq	r2,zero,5b3c <__smakebuf_r+0xfc>
    5b2c:	04801004 	movi	r18,64
    5b30:	18820014 	ori	r2,r3,2048
    5b34:	8080030d 	sth	r2,12(r16)
    5b38:	003fe506 	br	5ad0 <__smakebuf_r+0x90>
    5b3c:	04810004 	movi	r18,1024
    5b40:	003ffb06 	br	5b30 <__smakebuf_r+0xf0>
    5b44:	8140038f 	ldh	r5,14(r16)
    5b48:	8809883a 	mov	r4,r17
    5b4c:	0007b100 	call	7b10 <_isatty_r>
    5b50:	103fde26 	beq	r2,zero,5acc <__smakebuf_r+0x8c>
    5b54:	8080030b 	ldhu	r2,12(r16)
    5b58:	80c010c4 	addi	r3,r16,67
    5b5c:	04810004 	movi	r18,1024
    5b60:	10800054 	ori	r2,r2,1
    5b64:	8080030d 	sth	r2,12(r16)
    5b68:	00800044 	movi	r2,1
    5b6c:	80c00415 	stw	r3,16(r16)
    5b70:	80800515 	stw	r2,20(r16)
    5b74:	80c00015 	stw	r3,0(r16)
    5b78:	003fd506 	br	5ad0 <__smakebuf_r+0x90>
    5b7c:	80c00a17 	ldw	r3,40(r16)
    5b80:	00800034 	movhi	r2,0
    5b84:	109d7204 	addi	r2,r2,30152
    5b88:	18bfcb1e 	bne	r3,r2,5ab8 <__smakebuf_r+0x78>
    5b8c:	8080030b 	ldhu	r2,12(r16)
    5b90:	00c10004 	movi	r3,1024
    5b94:	1825883a 	mov	r18,r3
    5b98:	10c4b03a 	or	r2,r2,r3
    5b9c:	8080030d 	sth	r2,12(r16)
    5ba0:	80c01315 	stw	r3,76(r16)
    5ba4:	003fca06 	br	5ad0 <__smakebuf_r+0x90>
    5ba8:	8100030b 	ldhu	r4,12(r16)
    5bac:	2080800c 	andi	r2,r4,512
    5bb0:	103fb21e 	bne	r2,zero,5a7c <__smakebuf_r+0x3c>
    5bb4:	80c010c4 	addi	r3,r16,67
    5bb8:	21000094 	ori	r4,r4,2
    5bbc:	00800044 	movi	r2,1
    5bc0:	80800515 	stw	r2,20(r16)
    5bc4:	8100030d 	sth	r4,12(r16)
    5bc8:	80c00415 	stw	r3,16(r16)
    5bcc:	80c00015 	stw	r3,0(r16)
    5bd0:	003faa06 	br	5a7c <__smakebuf_r+0x3c>

00005bd4 <memchr>:
    5bd4:	008000c4 	movi	r2,3
    5bd8:	29403fcc 	andi	r5,r5,255
    5bdc:	2007883a 	mov	r3,r4
    5be0:	1180022e 	bgeu	r2,r6,5bec <memchr+0x18>
    5be4:	2084703a 	and	r2,r4,r2
    5be8:	10000b26 	beq	r2,zero,5c18 <memchr+0x44>
    5bec:	313fffc4 	addi	r4,r6,-1
    5bf0:	3000051e 	bne	r6,zero,5c08 <memchr+0x34>
    5bf4:	00002c06 	br	5ca8 <memchr+0xd4>
    5bf8:	213fffc4 	addi	r4,r4,-1
    5bfc:	00bfffc4 	movi	r2,-1
    5c00:	18c00044 	addi	r3,r3,1
    5c04:	20802826 	beq	r4,r2,5ca8 <memchr+0xd4>
    5c08:	18800003 	ldbu	r2,0(r3)
    5c0c:	28bffa1e 	bne	r5,r2,5bf8 <memchr+0x24>
    5c10:	1805883a 	mov	r2,r3
    5c14:	f800283a 	ret
    5c18:	0011883a 	mov	r8,zero
    5c1c:	0007883a 	mov	r3,zero
    5c20:	01c00104 	movi	r7,4
    5c24:	4004923a 	slli	r2,r8,8
    5c28:	18c00044 	addi	r3,r3,1
    5c2c:	1151883a 	add	r8,r2,r5
    5c30:	19fffc1e 	bne	r3,r7,5c24 <memchr+0x50>
    5c34:	02bfbff4 	movhi	r10,65279
    5c38:	52bfbfc4 	addi	r10,r10,-257
    5c3c:	02602074 	movhi	r9,32897
    5c40:	4a602004 	addi	r9,r9,-32640
    5c44:	02c000c4 	movi	r11,3
    5c48:	20800017 	ldw	r2,0(r4)
    5c4c:	31bfff04 	addi	r6,r6,-4
    5c50:	200f883a 	mov	r7,r4
    5c54:	1204f03a 	xor	r2,r2,r8
    5c58:	1287883a 	add	r3,r2,r10
    5c5c:	1a46703a 	and	r3,r3,r9
    5c60:	0084303a 	nor	r2,zero,r2
    5c64:	10c4703a 	and	r2,r2,r3
    5c68:	10000b26 	beq	r2,zero,5c98 <memchr+0xc4>
    5c6c:	20800003 	ldbu	r2,0(r4)
    5c70:	28800f26 	beq	r5,r2,5cb0 <memchr+0xdc>
    5c74:	20800043 	ldbu	r2,1(r4)
    5c78:	21c00044 	addi	r7,r4,1
    5c7c:	28800c26 	beq	r5,r2,5cb0 <memchr+0xdc>
    5c80:	20800083 	ldbu	r2,2(r4)
    5c84:	21c00084 	addi	r7,r4,2
    5c88:	28800926 	beq	r5,r2,5cb0 <memchr+0xdc>
    5c8c:	208000c3 	ldbu	r2,3(r4)
    5c90:	21c000c4 	addi	r7,r4,3
    5c94:	28800626 	beq	r5,r2,5cb0 <memchr+0xdc>
    5c98:	21000104 	addi	r4,r4,4
    5c9c:	59bfea36 	bltu	r11,r6,5c48 <memchr+0x74>
    5ca0:	2007883a 	mov	r3,r4
    5ca4:	003fd106 	br	5bec <memchr+0x18>
    5ca8:	0005883a 	mov	r2,zero
    5cac:	f800283a 	ret
    5cb0:	3805883a 	mov	r2,r7
    5cb4:	f800283a 	ret

00005cb8 <memcpy>:
    5cb8:	01c003c4 	movi	r7,15
    5cbc:	2007883a 	mov	r3,r4
    5cc0:	3980032e 	bgeu	r7,r6,5cd0 <memcpy+0x18>
    5cc4:	2904b03a 	or	r2,r5,r4
    5cc8:	108000cc 	andi	r2,r2,3
    5ccc:	10000926 	beq	r2,zero,5cf4 <memcpy+0x3c>
    5cd0:	30000626 	beq	r6,zero,5cec <memcpy+0x34>
    5cd4:	30cd883a 	add	r6,r6,r3
    5cd8:	28800003 	ldbu	r2,0(r5)
    5cdc:	29400044 	addi	r5,r5,1
    5ce0:	18800005 	stb	r2,0(r3)
    5ce4:	18c00044 	addi	r3,r3,1
    5ce8:	30fffb1e 	bne	r6,r3,5cd8 <memcpy+0x20>
    5cec:	2005883a 	mov	r2,r4
    5cf0:	f800283a 	ret
    5cf4:	3811883a 	mov	r8,r7
    5cf8:	200f883a 	mov	r7,r4
    5cfc:	28c00017 	ldw	r3,0(r5)
    5d00:	31bffc04 	addi	r6,r6,-16
    5d04:	38c00015 	stw	r3,0(r7)
    5d08:	28800117 	ldw	r2,4(r5)
    5d0c:	38800115 	stw	r2,4(r7)
    5d10:	28c00217 	ldw	r3,8(r5)
    5d14:	38c00215 	stw	r3,8(r7)
    5d18:	28800317 	ldw	r2,12(r5)
    5d1c:	29400404 	addi	r5,r5,16
    5d20:	38800315 	stw	r2,12(r7)
    5d24:	39c00404 	addi	r7,r7,16
    5d28:	41bff436 	bltu	r8,r6,5cfc <memcpy+0x44>
    5d2c:	008000c4 	movi	r2,3
    5d30:	1180072e 	bgeu	r2,r6,5d50 <memcpy+0x98>
    5d34:	1007883a 	mov	r3,r2
    5d38:	28800017 	ldw	r2,0(r5)
    5d3c:	31bfff04 	addi	r6,r6,-4
    5d40:	29400104 	addi	r5,r5,4
    5d44:	38800015 	stw	r2,0(r7)
    5d48:	39c00104 	addi	r7,r7,4
    5d4c:	19bffa36 	bltu	r3,r6,5d38 <memcpy+0x80>
    5d50:	3807883a 	mov	r3,r7
    5d54:	003fde06 	br	5cd0 <memcpy+0x18>

00005d58 <memmove>:
    5d58:	2807883a 	mov	r3,r5
    5d5c:	2011883a 	mov	r8,r4
    5d60:	29000c2e 	bgeu	r5,r4,5d94 <memmove+0x3c>
    5d64:	298f883a 	add	r7,r5,r6
    5d68:	21c00a2e 	bgeu	r4,r7,5d94 <memmove+0x3c>
    5d6c:	30000726 	beq	r6,zero,5d8c <memmove+0x34>
    5d70:	2187883a 	add	r3,r4,r6
    5d74:	198dc83a 	sub	r6,r3,r6
    5d78:	39ffffc4 	addi	r7,r7,-1
    5d7c:	38800003 	ldbu	r2,0(r7)
    5d80:	18ffffc4 	addi	r3,r3,-1
    5d84:	18800005 	stb	r2,0(r3)
    5d88:	19bffb1e 	bne	r3,r6,5d78 <memmove+0x20>
    5d8c:	2005883a 	mov	r2,r4
    5d90:	f800283a 	ret
    5d94:	01c003c4 	movi	r7,15
    5d98:	39800a36 	bltu	r7,r6,5dc4 <memmove+0x6c>
    5d9c:	303ffb26 	beq	r6,zero,5d8c <memmove+0x34>
    5da0:	400f883a 	mov	r7,r8
    5da4:	320d883a 	add	r6,r6,r8
    5da8:	28800003 	ldbu	r2,0(r5)
    5dac:	29400044 	addi	r5,r5,1
    5db0:	38800005 	stb	r2,0(r7)
    5db4:	39c00044 	addi	r7,r7,1
    5db8:	39bffb1e 	bne	r7,r6,5da8 <memmove+0x50>
    5dbc:	2005883a 	mov	r2,r4
    5dc0:	f800283a 	ret
    5dc4:	1904b03a 	or	r2,r3,r4
    5dc8:	108000cc 	andi	r2,r2,3
    5dcc:	103ff31e 	bne	r2,zero,5d9c <memmove+0x44>
    5dd0:	3811883a 	mov	r8,r7
    5dd4:	180b883a 	mov	r5,r3
    5dd8:	200f883a 	mov	r7,r4
    5ddc:	28c00017 	ldw	r3,0(r5)
    5de0:	31bffc04 	addi	r6,r6,-16
    5de4:	38c00015 	stw	r3,0(r7)
    5de8:	28800117 	ldw	r2,4(r5)
    5dec:	38800115 	stw	r2,4(r7)
    5df0:	28c00217 	ldw	r3,8(r5)
    5df4:	38c00215 	stw	r3,8(r7)
    5df8:	28800317 	ldw	r2,12(r5)
    5dfc:	29400404 	addi	r5,r5,16
    5e00:	38800315 	stw	r2,12(r7)
    5e04:	39c00404 	addi	r7,r7,16
    5e08:	41bff436 	bltu	r8,r6,5ddc <memmove+0x84>
    5e0c:	008000c4 	movi	r2,3
    5e10:	1180072e 	bgeu	r2,r6,5e30 <memmove+0xd8>
    5e14:	1007883a 	mov	r3,r2
    5e18:	28800017 	ldw	r2,0(r5)
    5e1c:	31bfff04 	addi	r6,r6,-4
    5e20:	29400104 	addi	r5,r5,4
    5e24:	38800015 	stw	r2,0(r7)
    5e28:	39c00104 	addi	r7,r7,4
    5e2c:	19bffa36 	bltu	r3,r6,5e18 <memmove+0xc0>
    5e30:	3811883a 	mov	r8,r7
    5e34:	003fd906 	br	5d9c <memmove+0x44>

00005e38 <memset>:
    5e38:	008000c4 	movi	r2,3
    5e3c:	29403fcc 	andi	r5,r5,255
    5e40:	2007883a 	mov	r3,r4
    5e44:	1180022e 	bgeu	r2,r6,5e50 <memset+0x18>
    5e48:	2084703a 	and	r2,r4,r2
    5e4c:	10000826 	beq	r2,zero,5e70 <memset+0x38>
    5e50:	30000526 	beq	r6,zero,5e68 <memset+0x30>
    5e54:	2805883a 	mov	r2,r5
    5e58:	30cd883a 	add	r6,r6,r3
    5e5c:	18800005 	stb	r2,0(r3)
    5e60:	18c00044 	addi	r3,r3,1
    5e64:	19bffd1e 	bne	r3,r6,5e5c <memset+0x24>
    5e68:	2005883a 	mov	r2,r4
    5e6c:	f800283a 	ret
    5e70:	2804923a 	slli	r2,r5,8
    5e74:	020003c4 	movi	r8,15
    5e78:	200f883a 	mov	r7,r4
    5e7c:	2884b03a 	or	r2,r5,r2
    5e80:	1006943a 	slli	r3,r2,16
    5e84:	10c6b03a 	or	r3,r2,r3
    5e88:	41800a2e 	bgeu	r8,r6,5eb4 <memset+0x7c>
    5e8c:	4005883a 	mov	r2,r8
    5e90:	31bffc04 	addi	r6,r6,-16
    5e94:	38c00015 	stw	r3,0(r7)
    5e98:	38c00115 	stw	r3,4(r7)
    5e9c:	38c00215 	stw	r3,8(r7)
    5ea0:	38c00315 	stw	r3,12(r7)
    5ea4:	39c00404 	addi	r7,r7,16
    5ea8:	11bff936 	bltu	r2,r6,5e90 <memset+0x58>
    5eac:	008000c4 	movi	r2,3
    5eb0:	1180052e 	bgeu	r2,r6,5ec8 <memset+0x90>
    5eb4:	31bfff04 	addi	r6,r6,-4
    5eb8:	008000c4 	movi	r2,3
    5ebc:	38c00015 	stw	r3,0(r7)
    5ec0:	39c00104 	addi	r7,r7,4
    5ec4:	11bffb36 	bltu	r2,r6,5eb4 <memset+0x7c>
    5ec8:	3807883a 	mov	r3,r7
    5ecc:	003fe006 	br	5e50 <memset+0x18>

00005ed0 <_Bfree>:
    5ed0:	28000826 	beq	r5,zero,5ef4 <_Bfree+0x24>
    5ed4:	28800117 	ldw	r2,4(r5)
    5ed8:	21001317 	ldw	r4,76(r4)
    5edc:	1085883a 	add	r2,r2,r2
    5ee0:	1085883a 	add	r2,r2,r2
    5ee4:	1105883a 	add	r2,r2,r4
    5ee8:	10c00017 	ldw	r3,0(r2)
    5eec:	28c00015 	stw	r3,0(r5)
    5ef0:	11400015 	stw	r5,0(r2)
    5ef4:	f800283a 	ret

00005ef8 <__hi0bits>:
    5ef8:	20bfffec 	andhi	r2,r4,65535
    5efc:	10001426 	beq	r2,zero,5f50 <__hi0bits+0x58>
    5f00:	0007883a 	mov	r3,zero
    5f04:	20bfc02c 	andhi	r2,r4,65280
    5f08:	1000021e 	bne	r2,zero,5f14 <__hi0bits+0x1c>
    5f0c:	2008923a 	slli	r4,r4,8
    5f10:	18c00204 	addi	r3,r3,8
    5f14:	20bc002c 	andhi	r2,r4,61440
    5f18:	1000021e 	bne	r2,zero,5f24 <__hi0bits+0x2c>
    5f1c:	2008913a 	slli	r4,r4,4
    5f20:	18c00104 	addi	r3,r3,4
    5f24:	20b0002c 	andhi	r2,r4,49152
    5f28:	1000031e 	bne	r2,zero,5f38 <__hi0bits+0x40>
    5f2c:	2105883a 	add	r2,r4,r4
    5f30:	18c00084 	addi	r3,r3,2
    5f34:	1089883a 	add	r4,r2,r2
    5f38:	20000316 	blt	r4,zero,5f48 <__hi0bits+0x50>
    5f3c:	2090002c 	andhi	r2,r4,16384
    5f40:	10000626 	beq	r2,zero,5f5c <__hi0bits+0x64>
    5f44:	18c00044 	addi	r3,r3,1
    5f48:	1805883a 	mov	r2,r3
    5f4c:	f800283a 	ret
    5f50:	2008943a 	slli	r4,r4,16
    5f54:	00c00404 	movi	r3,16
    5f58:	003fea06 	br	5f04 <__hi0bits+0xc>
    5f5c:	00c00804 	movi	r3,32
    5f60:	1805883a 	mov	r2,r3
    5f64:	f800283a 	ret

00005f68 <__lo0bits>:
    5f68:	20c00017 	ldw	r3,0(r4)
    5f6c:	188001cc 	andi	r2,r3,7
    5f70:	10000a26 	beq	r2,zero,5f9c <__lo0bits+0x34>
    5f74:	1880004c 	andi	r2,r3,1
    5f78:	1005003a 	cmpeq	r2,r2,zero
    5f7c:	10002126 	beq	r2,zero,6004 <__lo0bits+0x9c>
    5f80:	1880008c 	andi	r2,r3,2
    5f84:	1000251e 	bne	r2,zero,601c <__lo0bits+0xb4>
    5f88:	1804d0ba 	srli	r2,r3,2
    5f8c:	01400084 	movi	r5,2
    5f90:	20800015 	stw	r2,0(r4)
    5f94:	2805883a 	mov	r2,r5
    5f98:	f800283a 	ret
    5f9c:	18bfffcc 	andi	r2,r3,65535
    5fa0:	10001526 	beq	r2,zero,5ff8 <__lo0bits+0x90>
    5fa4:	000b883a 	mov	r5,zero
    5fa8:	18803fcc 	andi	r2,r3,255
    5fac:	1000021e 	bne	r2,zero,5fb8 <__lo0bits+0x50>
    5fb0:	1806d23a 	srli	r3,r3,8
    5fb4:	29400204 	addi	r5,r5,8
    5fb8:	188003cc 	andi	r2,r3,15
    5fbc:	1000021e 	bne	r2,zero,5fc8 <__lo0bits+0x60>
    5fc0:	1806d13a 	srli	r3,r3,4
    5fc4:	29400104 	addi	r5,r5,4
    5fc8:	188000cc 	andi	r2,r3,3
    5fcc:	1000021e 	bne	r2,zero,5fd8 <__lo0bits+0x70>
    5fd0:	1806d0ba 	srli	r3,r3,2
    5fd4:	29400084 	addi	r5,r5,2
    5fd8:	1880004c 	andi	r2,r3,1
    5fdc:	1000031e 	bne	r2,zero,5fec <__lo0bits+0x84>
    5fe0:	1806d07a 	srli	r3,r3,1
    5fe4:	18000a26 	beq	r3,zero,6010 <__lo0bits+0xa8>
    5fe8:	29400044 	addi	r5,r5,1
    5fec:	2805883a 	mov	r2,r5
    5ff0:	20c00015 	stw	r3,0(r4)
    5ff4:	f800283a 	ret
    5ff8:	1806d43a 	srli	r3,r3,16
    5ffc:	01400404 	movi	r5,16
    6000:	003fe906 	br	5fa8 <__lo0bits+0x40>
    6004:	000b883a 	mov	r5,zero
    6008:	2805883a 	mov	r2,r5
    600c:	f800283a 	ret
    6010:	01400804 	movi	r5,32
    6014:	2805883a 	mov	r2,r5
    6018:	f800283a 	ret
    601c:	1804d07a 	srli	r2,r3,1
    6020:	01400044 	movi	r5,1
    6024:	20800015 	stw	r2,0(r4)
    6028:	003fda06 	br	5f94 <__lo0bits+0x2c>

0000602c <__mcmp>:
    602c:	20800417 	ldw	r2,16(r4)
    6030:	28c00417 	ldw	r3,16(r5)
    6034:	10cfc83a 	sub	r7,r2,r3
    6038:	38000c1e 	bne	r7,zero,606c <__mcmp+0x40>
    603c:	18c5883a 	add	r2,r3,r3
    6040:	1085883a 	add	r2,r2,r2
    6044:	10c00504 	addi	r3,r2,20
    6048:	21000504 	addi	r4,r4,20
    604c:	28cb883a 	add	r5,r5,r3
    6050:	2085883a 	add	r2,r4,r2
    6054:	10bfff04 	addi	r2,r2,-4
    6058:	297fff04 	addi	r5,r5,-4
    605c:	11800017 	ldw	r6,0(r2)
    6060:	28c00017 	ldw	r3,0(r5)
    6064:	30c0031e 	bne	r6,r3,6074 <__mcmp+0x48>
    6068:	20bffa36 	bltu	r4,r2,6054 <__mcmp+0x28>
    606c:	3805883a 	mov	r2,r7
    6070:	f800283a 	ret
    6074:	30c00336 	bltu	r6,r3,6084 <__mcmp+0x58>
    6078:	01c00044 	movi	r7,1
    607c:	3805883a 	mov	r2,r7
    6080:	f800283a 	ret
    6084:	01ffffc4 	movi	r7,-1
    6088:	003ff806 	br	606c <__mcmp+0x40>

0000608c <__ulp>:
    608c:	295ffc2c 	andhi	r5,r5,32752
    6090:	013f3034 	movhi	r4,64704
    6094:	290b883a 	add	r5,r5,r4
    6098:	0145c83a 	sub	r2,zero,r5
    609c:	1007d53a 	srai	r3,r2,20
    60a0:	000d883a 	mov	r6,zero
    60a4:	0140040e 	bge	zero,r5,60b8 <__ulp+0x2c>
    60a8:	280f883a 	mov	r7,r5
    60ac:	3807883a 	mov	r3,r7
    60b0:	3005883a 	mov	r2,r6
    60b4:	f800283a 	ret
    60b8:	008004c4 	movi	r2,19
    60bc:	193ffb04 	addi	r4,r3,-20
    60c0:	10c00c0e 	bge	r2,r3,60f4 <__ulp+0x68>
    60c4:	008007c4 	movi	r2,31
    60c8:	1107c83a 	sub	r3,r2,r4
    60cc:	00800784 	movi	r2,30
    60d0:	01400044 	movi	r5,1
    60d4:	11000216 	blt	r2,r4,60e0 <__ulp+0x54>
    60d8:	00800044 	movi	r2,1
    60dc:	10ca983a 	sll	r5,r2,r3
    60e0:	000f883a 	mov	r7,zero
    60e4:	280d883a 	mov	r6,r5
    60e8:	3807883a 	mov	r3,r7
    60ec:	3005883a 	mov	r2,r6
    60f0:	f800283a 	ret
    60f4:	00800234 	movhi	r2,8
    60f8:	10cfd83a 	sra	r7,r2,r3
    60fc:	000d883a 	mov	r6,zero
    6100:	3005883a 	mov	r2,r6
    6104:	3807883a 	mov	r3,r7
    6108:	f800283a 	ret

0000610c <__b2d>:
    610c:	20800417 	ldw	r2,16(r4)
    6110:	defff904 	addi	sp,sp,-28
    6114:	dd000415 	stw	r20,16(sp)
    6118:	1085883a 	add	r2,r2,r2
    611c:	25000504 	addi	r20,r4,20
    6120:	1085883a 	add	r2,r2,r2
    6124:	dc000015 	stw	r16,0(sp)
    6128:	a0a1883a 	add	r16,r20,r2
    612c:	dd400515 	stw	r21,20(sp)
    6130:	857fff17 	ldw	r21,-4(r16)
    6134:	dc400115 	stw	r17,4(sp)
    6138:	dfc00615 	stw	ra,24(sp)
    613c:	a809883a 	mov	r4,r21
    6140:	2823883a 	mov	r17,r5
    6144:	dcc00315 	stw	r19,12(sp)
    6148:	dc800215 	stw	r18,8(sp)
    614c:	0005ef80 	call	5ef8 <__hi0bits>
    6150:	100b883a 	mov	r5,r2
    6154:	00800804 	movi	r2,32
    6158:	1145c83a 	sub	r2,r2,r5
    615c:	88800015 	stw	r2,0(r17)
    6160:	00800284 	movi	r2,10
    6164:	80ffff04 	addi	r3,r16,-4
    6168:	11401416 	blt	r2,r5,61bc <__b2d+0xb0>
    616c:	008002c4 	movi	r2,11
    6170:	1149c83a 	sub	r4,r2,r5
    6174:	a0c02736 	bltu	r20,r3,6214 <__b2d+0x108>
    6178:	000d883a 	mov	r6,zero
    617c:	28800544 	addi	r2,r5,21
    6180:	a906d83a 	srl	r3,r21,r4
    6184:	a884983a 	sll	r2,r21,r2
    6188:	1ccffc34 	orhi	r19,r3,16368
    618c:	11a4b03a 	or	r18,r2,r6
    6190:	9005883a 	mov	r2,r18
    6194:	9807883a 	mov	r3,r19
    6198:	dfc00617 	ldw	ra,24(sp)
    619c:	dd400517 	ldw	r21,20(sp)
    61a0:	dd000417 	ldw	r20,16(sp)
    61a4:	dcc00317 	ldw	r19,12(sp)
    61a8:	dc800217 	ldw	r18,8(sp)
    61ac:	dc400117 	ldw	r17,4(sp)
    61b0:	dc000017 	ldw	r16,0(sp)
    61b4:	dec00704 	addi	sp,sp,28
    61b8:	f800283a 	ret
    61bc:	a0c00e36 	bltu	r20,r3,61f8 <__b2d+0xec>
    61c0:	293ffd44 	addi	r4,r5,-11
    61c4:	000d883a 	mov	r6,zero
    61c8:	20000f26 	beq	r4,zero,6208 <__b2d+0xfc>
    61cc:	00800804 	movi	r2,32
    61d0:	110bc83a 	sub	r5,r2,r4
    61d4:	a0c01236 	bltu	r20,r3,6220 <__b2d+0x114>
    61d8:	000f883a 	mov	r7,zero
    61dc:	a904983a 	sll	r2,r21,r4
    61e0:	3146d83a 	srl	r3,r6,r5
    61e4:	3108983a 	sll	r4,r6,r4
    61e8:	108ffc34 	orhi	r2,r2,16368
    61ec:	18a6b03a 	or	r19,r3,r2
    61f0:	3924b03a 	or	r18,r7,r4
    61f4:	003fe606 	br	6190 <__b2d+0x84>
    61f8:	293ffd44 	addi	r4,r5,-11
    61fc:	81bffe17 	ldw	r6,-8(r16)
    6200:	80fffe04 	addi	r3,r16,-8
    6204:	203ff11e 	bne	r4,zero,61cc <__b2d+0xc0>
    6208:	accffc34 	orhi	r19,r21,16368
    620c:	3025883a 	mov	r18,r6
    6210:	003fdf06 	br	6190 <__b2d+0x84>
    6214:	18bfff17 	ldw	r2,-4(r3)
    6218:	110cd83a 	srl	r6,r2,r4
    621c:	003fd706 	br	617c <__b2d+0x70>
    6220:	18bfff17 	ldw	r2,-4(r3)
    6224:	114ed83a 	srl	r7,r2,r5
    6228:	003fec06 	br	61dc <__b2d+0xd0>

0000622c <__ratio>:
    622c:	defff904 	addi	sp,sp,-28
    6230:	dc400215 	stw	r17,8(sp)
    6234:	2823883a 	mov	r17,r5
    6238:	d80b883a 	mov	r5,sp
    623c:	dfc00615 	stw	ra,24(sp)
    6240:	dd000515 	stw	r20,20(sp)
    6244:	dcc00415 	stw	r19,16(sp)
    6248:	dc800315 	stw	r18,12(sp)
    624c:	2025883a 	mov	r18,r4
    6250:	000610c0 	call	610c <__b2d>
    6254:	8809883a 	mov	r4,r17
    6258:	d9400104 	addi	r5,sp,4
    625c:	1027883a 	mov	r19,r2
    6260:	1829883a 	mov	r20,r3
    6264:	000610c0 	call	610c <__b2d>
    6268:	89000417 	ldw	r4,16(r17)
    626c:	91c00417 	ldw	r7,16(r18)
    6270:	d9800117 	ldw	r6,4(sp)
    6274:	180b883a 	mov	r5,r3
    6278:	390fc83a 	sub	r7,r7,r4
    627c:	1009883a 	mov	r4,r2
    6280:	d8800017 	ldw	r2,0(sp)
    6284:	380e917a 	slli	r7,r7,5
    6288:	2011883a 	mov	r8,r4
    628c:	1185c83a 	sub	r2,r2,r6
    6290:	11c5883a 	add	r2,r2,r7
    6294:	1006953a 	slli	r3,r2,20
    6298:	2813883a 	mov	r9,r5
    629c:	00800d0e 	bge	zero,r2,62d4 <__ratio+0xa8>
    62a0:	1d29883a 	add	r20,r3,r20
    62a4:	a00b883a 	mov	r5,r20
    62a8:	480f883a 	mov	r7,r9
    62ac:	9809883a 	mov	r4,r19
    62b0:	400d883a 	mov	r6,r8
    62b4:	00092040 	call	9204 <__divdf3>
    62b8:	dfc00617 	ldw	ra,24(sp)
    62bc:	dd000517 	ldw	r20,20(sp)
    62c0:	dcc00417 	ldw	r19,16(sp)
    62c4:	dc800317 	ldw	r18,12(sp)
    62c8:	dc400217 	ldw	r17,8(sp)
    62cc:	dec00704 	addi	sp,sp,28
    62d0:	f800283a 	ret
    62d4:	28d3c83a 	sub	r9,r5,r3
    62d8:	003ff206 	br	62a4 <__ratio+0x78>

000062dc <_mprec_log10>:
    62dc:	defffe04 	addi	sp,sp,-8
    62e0:	008005c4 	movi	r2,23
    62e4:	dc000015 	stw	r16,0(sp)
    62e8:	dfc00115 	stw	ra,4(sp)
    62ec:	2021883a 	mov	r16,r4
    62f0:	11000c16 	blt	r2,r4,6324 <_mprec_log10+0x48>
    62f4:	200490fa 	slli	r2,r4,3
    62f8:	00c00074 	movhi	r3,1
    62fc:	18f49604 	addi	r3,r3,-11688
    6300:	10c5883a 	add	r2,r2,r3
    6304:	12400117 	ldw	r9,4(r2)
    6308:	12000017 	ldw	r8,0(r2)
    630c:	4807883a 	mov	r3,r9
    6310:	4005883a 	mov	r2,r8
    6314:	dfc00117 	ldw	ra,4(sp)
    6318:	dc000017 	ldw	r16,0(sp)
    631c:	dec00204 	addi	sp,sp,8
    6320:	f800283a 	ret
    6324:	0011883a 	mov	r8,zero
    6328:	024ffc34 	movhi	r9,16368
    632c:	0005883a 	mov	r2,zero
    6330:	00d00934 	movhi	r3,16420
    6334:	480b883a 	mov	r5,r9
    6338:	4009883a 	mov	r4,r8
    633c:	180f883a 	mov	r7,r3
    6340:	100d883a 	mov	r6,r2
    6344:	0008e400 	call	8e40 <__muldf3>
    6348:	843fffc4 	addi	r16,r16,-1
    634c:	1011883a 	mov	r8,r2
    6350:	1813883a 	mov	r9,r3
    6354:	803ff51e 	bne	r16,zero,632c <_mprec_log10+0x50>
    6358:	4005883a 	mov	r2,r8
    635c:	4807883a 	mov	r3,r9
    6360:	dfc00117 	ldw	ra,4(sp)
    6364:	dc000017 	ldw	r16,0(sp)
    6368:	dec00204 	addi	sp,sp,8
    636c:	f800283a 	ret

00006370 <__copybits>:
    6370:	297fffc4 	addi	r5,r5,-1
    6374:	30800417 	ldw	r2,16(r6)
    6378:	280bd17a 	srai	r5,r5,5
    637c:	31800504 	addi	r6,r6,20
    6380:	1085883a 	add	r2,r2,r2
    6384:	294b883a 	add	r5,r5,r5
    6388:	294b883a 	add	r5,r5,r5
    638c:	1085883a 	add	r2,r2,r2
    6390:	290b883a 	add	r5,r5,r4
    6394:	3087883a 	add	r3,r6,r2
    6398:	29400104 	addi	r5,r5,4
    639c:	30c0052e 	bgeu	r6,r3,63b4 <__copybits+0x44>
    63a0:	30800017 	ldw	r2,0(r6)
    63a4:	31800104 	addi	r6,r6,4
    63a8:	20800015 	stw	r2,0(r4)
    63ac:	21000104 	addi	r4,r4,4
    63b0:	30fffb36 	bltu	r6,r3,63a0 <__copybits+0x30>
    63b4:	2140032e 	bgeu	r4,r5,63c4 <__copybits+0x54>
    63b8:	20000015 	stw	zero,0(r4)
    63bc:	21000104 	addi	r4,r4,4
    63c0:	217ffd36 	bltu	r4,r5,63b8 <__copybits+0x48>
    63c4:	f800283a 	ret

000063c8 <__any_on>:
    63c8:	20800417 	ldw	r2,16(r4)
    63cc:	2807d17a 	srai	r3,r5,5
    63d0:	21000504 	addi	r4,r4,20
    63d4:	10c00d0e 	bge	r2,r3,640c <__any_on+0x44>
    63d8:	1085883a 	add	r2,r2,r2
    63dc:	1085883a 	add	r2,r2,r2
    63e0:	208d883a 	add	r6,r4,r2
    63e4:	2180182e 	bgeu	r4,r6,6448 <__any_on+0x80>
    63e8:	30bfff17 	ldw	r2,-4(r6)
    63ec:	30ffff04 	addi	r3,r6,-4
    63f0:	1000041e 	bne	r2,zero,6404 <__any_on+0x3c>
    63f4:	20c0142e 	bgeu	r4,r3,6448 <__any_on+0x80>
    63f8:	18ffff04 	addi	r3,r3,-4
    63fc:	18800017 	ldw	r2,0(r3)
    6400:	103ffc26 	beq	r2,zero,63f4 <__any_on+0x2c>
    6404:	00800044 	movi	r2,1
    6408:	f800283a 	ret
    640c:	18800a0e 	bge	r3,r2,6438 <__any_on+0x70>
    6410:	294007cc 	andi	r5,r5,31
    6414:	28000826 	beq	r5,zero,6438 <__any_on+0x70>
    6418:	18c5883a 	add	r2,r3,r3
    641c:	1085883a 	add	r2,r2,r2
    6420:	208d883a 	add	r6,r4,r2
    6424:	30c00017 	ldw	r3,0(r6)
    6428:	1944d83a 	srl	r2,r3,r5
    642c:	1144983a 	sll	r2,r2,r5
    6430:	18bff41e 	bne	r3,r2,6404 <__any_on+0x3c>
    6434:	003feb06 	br	63e4 <__any_on+0x1c>
    6438:	18c5883a 	add	r2,r3,r3
    643c:	1085883a 	add	r2,r2,r2
    6440:	208d883a 	add	r6,r4,r2
    6444:	003fe706 	br	63e4 <__any_on+0x1c>
    6448:	0005883a 	mov	r2,zero
    644c:	f800283a 	ret

00006450 <_Balloc>:
    6450:	20c01317 	ldw	r3,76(r4)
    6454:	defffb04 	addi	sp,sp,-20
    6458:	dcc00315 	stw	r19,12(sp)
    645c:	dc800215 	stw	r18,8(sp)
    6460:	dfc00415 	stw	ra,16(sp)
    6464:	2825883a 	mov	r18,r5
    6468:	dc400115 	stw	r17,4(sp)
    646c:	dc000015 	stw	r16,0(sp)
    6470:	2027883a 	mov	r19,r4
    6474:	01800404 	movi	r6,16
    6478:	01400104 	movi	r5,4
    647c:	18001726 	beq	r3,zero,64dc <_Balloc+0x8c>
    6480:	01400044 	movi	r5,1
    6484:	9485883a 	add	r2,r18,r18
    6488:	2ca2983a 	sll	r17,r5,r18
    648c:	1085883a 	add	r2,r2,r2
    6490:	10c7883a 	add	r3,r2,r3
    6494:	1c000017 	ldw	r16,0(r3)
    6498:	8c4d883a 	add	r6,r17,r17
    649c:	318d883a 	add	r6,r6,r6
    64a0:	9809883a 	mov	r4,r19
    64a4:	31800504 	addi	r6,r6,20
    64a8:	80001226 	beq	r16,zero,64f4 <_Balloc+0xa4>
    64ac:	80800017 	ldw	r2,0(r16)
    64b0:	18800015 	stw	r2,0(r3)
    64b4:	80000415 	stw	zero,16(r16)
    64b8:	80000315 	stw	zero,12(r16)
    64bc:	8005883a 	mov	r2,r16
    64c0:	dfc00417 	ldw	ra,16(sp)
    64c4:	dcc00317 	ldw	r19,12(sp)
    64c8:	dc800217 	ldw	r18,8(sp)
    64cc:	dc400117 	ldw	r17,4(sp)
    64d0:	dc000017 	ldw	r16,0(sp)
    64d4:	dec00504 	addi	sp,sp,20
    64d8:	f800283a 	ret
    64dc:	00078400 	call	7840 <_calloc_r>
    64e0:	1007883a 	mov	r3,r2
    64e4:	0021883a 	mov	r16,zero
    64e8:	98801315 	stw	r2,76(r19)
    64ec:	103fe41e 	bne	r2,zero,6480 <_Balloc+0x30>
    64f0:	003ff206 	br	64bc <_Balloc+0x6c>
    64f4:	00078400 	call	7840 <_calloc_r>
    64f8:	103ff026 	beq	r2,zero,64bc <_Balloc+0x6c>
    64fc:	1021883a 	mov	r16,r2
    6500:	14800115 	stw	r18,4(r2)
    6504:	14400215 	stw	r17,8(r2)
    6508:	003fea06 	br	64b4 <_Balloc+0x64>

0000650c <__d2b>:
    650c:	defff504 	addi	sp,sp,-44
    6510:	dcc00515 	stw	r19,20(sp)
    6514:	04c00044 	movi	r19,1
    6518:	dc000215 	stw	r16,8(sp)
    651c:	2821883a 	mov	r16,r5
    6520:	980b883a 	mov	r5,r19
    6524:	ddc00915 	stw	r23,36(sp)
    6528:	dd800815 	stw	r22,32(sp)
    652c:	dd400715 	stw	r21,28(sp)
    6530:	dd000615 	stw	r20,24(sp)
    6534:	dc800415 	stw	r18,16(sp)
    6538:	dc400315 	stw	r17,12(sp)
    653c:	dfc00a15 	stw	ra,40(sp)
    6540:	3023883a 	mov	r17,r6
    6544:	382d883a 	mov	r22,r7
    6548:	ddc00b17 	ldw	r23,44(sp)
    654c:	00064500 	call	6450 <_Balloc>
    6550:	1025883a 	mov	r18,r2
    6554:	00a00034 	movhi	r2,32768
    6558:	10bfffc4 	addi	r2,r2,-1
    655c:	8888703a 	and	r4,r17,r2
    6560:	202ad53a 	srli	r21,r4,20
    6564:	00800434 	movhi	r2,16
    6568:	10bfffc4 	addi	r2,r2,-1
    656c:	8886703a 	and	r3,r17,r2
    6570:	a829003a 	cmpeq	r20,r21,zero
    6574:	800b883a 	mov	r5,r16
    6578:	d8c00115 	stw	r3,4(sp)
    657c:	94000504 	addi	r16,r18,20
    6580:	a000021e 	bne	r20,zero,658c <__d2b+0x80>
    6584:	18c00434 	orhi	r3,r3,16
    6588:	d8c00115 	stw	r3,4(sp)
    658c:	28002726 	beq	r5,zero,662c <__d2b+0x120>
    6590:	d809883a 	mov	r4,sp
    6594:	d9400015 	stw	r5,0(sp)
    6598:	0005f680 	call	5f68 <__lo0bits>
    659c:	100d883a 	mov	r6,r2
    65a0:	10003526 	beq	r2,zero,6678 <__d2b+0x16c>
    65a4:	d8c00117 	ldw	r3,4(sp)
    65a8:	00800804 	movi	r2,32
    65ac:	1185c83a 	sub	r2,r2,r6
    65b0:	d9000017 	ldw	r4,0(sp)
    65b4:	1886983a 	sll	r3,r3,r2
    65b8:	1906b03a 	or	r3,r3,r4
    65bc:	90c00515 	stw	r3,20(r18)
    65c0:	d8c00117 	ldw	r3,4(sp)
    65c4:	1986d83a 	srl	r3,r3,r6
    65c8:	d8c00115 	stw	r3,4(sp)
    65cc:	180b003a 	cmpeq	r5,r3,zero
    65d0:	00800084 	movi	r2,2
    65d4:	114bc83a 	sub	r5,r2,r5
    65d8:	80c00115 	stw	r3,4(r16)
    65dc:	91400415 	stw	r5,16(r18)
    65e0:	a0001a1e 	bne	r20,zero,664c <__d2b+0x140>
    65e4:	3545883a 	add	r2,r6,r21
    65e8:	10bef344 	addi	r2,r2,-1075
    65ec:	00c00d44 	movi	r3,53
    65f0:	b0800015 	stw	r2,0(r22)
    65f4:	1987c83a 	sub	r3,r3,r6
    65f8:	b8c00015 	stw	r3,0(r23)
    65fc:	9005883a 	mov	r2,r18
    6600:	dfc00a17 	ldw	ra,40(sp)
    6604:	ddc00917 	ldw	r23,36(sp)
    6608:	dd800817 	ldw	r22,32(sp)
    660c:	dd400717 	ldw	r21,28(sp)
    6610:	dd000617 	ldw	r20,24(sp)
    6614:	dcc00517 	ldw	r19,20(sp)
    6618:	dc800417 	ldw	r18,16(sp)
    661c:	dc400317 	ldw	r17,12(sp)
    6620:	dc000217 	ldw	r16,8(sp)
    6624:	dec00b04 	addi	sp,sp,44
    6628:	f800283a 	ret
    662c:	d9000104 	addi	r4,sp,4
    6630:	0005f680 	call	5f68 <__lo0bits>
    6634:	11800804 	addi	r6,r2,32
    6638:	d8800117 	ldw	r2,4(sp)
    663c:	94c00415 	stw	r19,16(r18)
    6640:	980b883a 	mov	r5,r19
    6644:	90800515 	stw	r2,20(r18)
    6648:	a03fe626 	beq	r20,zero,65e4 <__d2b+0xd8>
    664c:	2945883a 	add	r2,r5,r5
    6650:	1085883a 	add	r2,r2,r2
    6654:	1405883a 	add	r2,r2,r16
    6658:	113fff17 	ldw	r4,-4(r2)
    665c:	30fef384 	addi	r3,r6,-1074
    6660:	2820917a 	slli	r16,r5,5
    6664:	b0c00015 	stw	r3,0(r22)
    6668:	0005ef80 	call	5ef8 <__hi0bits>
    666c:	80a1c83a 	sub	r16,r16,r2
    6670:	bc000015 	stw	r16,0(r23)
    6674:	003fe106 	br	65fc <__d2b+0xf0>
    6678:	d8800017 	ldw	r2,0(sp)
    667c:	90800515 	stw	r2,20(r18)
    6680:	d8c00117 	ldw	r3,4(sp)
    6684:	003fd106 	br	65cc <__d2b+0xc0>

00006688 <__mdiff>:
    6688:	defffb04 	addi	sp,sp,-20
    668c:	dc000015 	stw	r16,0(sp)
    6690:	2821883a 	mov	r16,r5
    6694:	dc800215 	stw	r18,8(sp)
    6698:	300b883a 	mov	r5,r6
    669c:	2025883a 	mov	r18,r4
    66a0:	8009883a 	mov	r4,r16
    66a4:	dc400115 	stw	r17,4(sp)
    66a8:	dfc00415 	stw	ra,16(sp)
    66ac:	dcc00315 	stw	r19,12(sp)
    66b0:	3023883a 	mov	r17,r6
    66b4:	000602c0 	call	602c <__mcmp>
    66b8:	10004226 	beq	r2,zero,67c4 <__mdiff+0x13c>
    66bc:	10005016 	blt	r2,zero,6800 <__mdiff+0x178>
    66c0:	0027883a 	mov	r19,zero
    66c4:	81400117 	ldw	r5,4(r16)
    66c8:	9009883a 	mov	r4,r18
    66cc:	00064500 	call	6450 <_Balloc>
    66d0:	1019883a 	mov	r12,r2
    66d4:	82800417 	ldw	r10,16(r16)
    66d8:	88800417 	ldw	r2,16(r17)
    66dc:	81800504 	addi	r6,r16,20
    66e0:	5287883a 	add	r3,r10,r10
    66e4:	1085883a 	add	r2,r2,r2
    66e8:	18c7883a 	add	r3,r3,r3
    66ec:	1085883a 	add	r2,r2,r2
    66f0:	8a000504 	addi	r8,r17,20
    66f4:	64c00315 	stw	r19,12(r12)
    66f8:	30db883a 	add	r13,r6,r3
    66fc:	4097883a 	add	r11,r8,r2
    6700:	61c00504 	addi	r7,r12,20
    6704:	0013883a 	mov	r9,zero
    6708:	31000017 	ldw	r4,0(r6)
    670c:	41400017 	ldw	r5,0(r8)
    6710:	42000104 	addi	r8,r8,4
    6714:	20bfffcc 	andi	r2,r4,65535
    6718:	28ffffcc 	andi	r3,r5,65535
    671c:	10c5c83a 	sub	r2,r2,r3
    6720:	1245883a 	add	r2,r2,r9
    6724:	2008d43a 	srli	r4,r4,16
    6728:	280ad43a 	srli	r5,r5,16
    672c:	1007d43a 	srai	r3,r2,16
    6730:	3880000d 	sth	r2,0(r7)
    6734:	2149c83a 	sub	r4,r4,r5
    6738:	20c9883a 	add	r4,r4,r3
    673c:	3900008d 	sth	r4,2(r7)
    6740:	31800104 	addi	r6,r6,4
    6744:	39c00104 	addi	r7,r7,4
    6748:	2013d43a 	srai	r9,r4,16
    674c:	42ffee36 	bltu	r8,r11,6708 <__mdiff+0x80>
    6750:	33400c2e 	bgeu	r6,r13,6784 <__mdiff+0xfc>
    6754:	30800017 	ldw	r2,0(r6)
    6758:	31800104 	addi	r6,r6,4
    675c:	10ffffcc 	andi	r3,r2,65535
    6760:	1a47883a 	add	r3,r3,r9
    6764:	1004d43a 	srli	r2,r2,16
    6768:	1809d43a 	srai	r4,r3,16
    676c:	38c0000d 	sth	r3,0(r7)
    6770:	1105883a 	add	r2,r2,r4
    6774:	3880008d 	sth	r2,2(r7)
    6778:	1013d43a 	srai	r9,r2,16
    677c:	39c00104 	addi	r7,r7,4
    6780:	337ff436 	bltu	r6,r13,6754 <__mdiff+0xcc>
    6784:	38bfff17 	ldw	r2,-4(r7)
    6788:	38ffff04 	addi	r3,r7,-4
    678c:	1000041e 	bne	r2,zero,67a0 <__mdiff+0x118>
    6790:	18ffff04 	addi	r3,r3,-4
    6794:	18800017 	ldw	r2,0(r3)
    6798:	52bfffc4 	addi	r10,r10,-1
    679c:	103ffc26 	beq	r2,zero,6790 <__mdiff+0x108>
    67a0:	6005883a 	mov	r2,r12
    67a4:	62800415 	stw	r10,16(r12)
    67a8:	dfc00417 	ldw	ra,16(sp)
    67ac:	dcc00317 	ldw	r19,12(sp)
    67b0:	dc800217 	ldw	r18,8(sp)
    67b4:	dc400117 	ldw	r17,4(sp)
    67b8:	dc000017 	ldw	r16,0(sp)
    67bc:	dec00504 	addi	sp,sp,20
    67c0:	f800283a 	ret
    67c4:	9009883a 	mov	r4,r18
    67c8:	000b883a 	mov	r5,zero
    67cc:	00064500 	call	6450 <_Balloc>
    67d0:	1019883a 	mov	r12,r2
    67d4:	00800044 	movi	r2,1
    67d8:	60800415 	stw	r2,16(r12)
    67dc:	6005883a 	mov	r2,r12
    67e0:	60000515 	stw	zero,20(r12)
    67e4:	dfc00417 	ldw	ra,16(sp)
    67e8:	dcc00317 	ldw	r19,12(sp)
    67ec:	dc800217 	ldw	r18,8(sp)
    67f0:	dc400117 	ldw	r17,4(sp)
    67f4:	dc000017 	ldw	r16,0(sp)
    67f8:	dec00504 	addi	sp,sp,20
    67fc:	f800283a 	ret
    6800:	880d883a 	mov	r6,r17
    6804:	04c00044 	movi	r19,1
    6808:	8023883a 	mov	r17,r16
    680c:	3021883a 	mov	r16,r6
    6810:	003fac06 	br	66c4 <__mdiff+0x3c>

00006814 <__lshift>:
    6814:	defff904 	addi	sp,sp,-28
    6818:	28800417 	ldw	r2,16(r5)
    681c:	dc000015 	stw	r16,0(sp)
    6820:	3021d17a 	srai	r16,r6,5
    6824:	28c00217 	ldw	r3,8(r5)
    6828:	10800044 	addi	r2,r2,1
    682c:	dc400115 	stw	r17,4(sp)
    6830:	80a3883a 	add	r17,r16,r2
    6834:	dd400515 	stw	r21,20(sp)
    6838:	dd000415 	stw	r20,16(sp)
    683c:	dc800215 	stw	r18,8(sp)
    6840:	dfc00615 	stw	ra,24(sp)
    6844:	2825883a 	mov	r18,r5
    6848:	dcc00315 	stw	r19,12(sp)
    684c:	3029883a 	mov	r20,r6
    6850:	202b883a 	mov	r21,r4
    6854:	29400117 	ldw	r5,4(r5)
    6858:	1c40030e 	bge	r3,r17,6868 <__lshift+0x54>
    685c:	18c7883a 	add	r3,r3,r3
    6860:	29400044 	addi	r5,r5,1
    6864:	1c7ffd16 	blt	r3,r17,685c <__lshift+0x48>
    6868:	a809883a 	mov	r4,r21
    686c:	00064500 	call	6450 <_Balloc>
    6870:	1027883a 	mov	r19,r2
    6874:	11400504 	addi	r5,r2,20
    6878:	0400090e 	bge	zero,r16,68a0 <__lshift+0x8c>
    687c:	2805883a 	mov	r2,r5
    6880:	0007883a 	mov	r3,zero
    6884:	18c00044 	addi	r3,r3,1
    6888:	10000015 	stw	zero,0(r2)
    688c:	10800104 	addi	r2,r2,4
    6890:	80fffc1e 	bne	r16,r3,6884 <__lshift+0x70>
    6894:	8405883a 	add	r2,r16,r16
    6898:	1085883a 	add	r2,r2,r2
    689c:	288b883a 	add	r5,r5,r2
    68a0:	90800417 	ldw	r2,16(r18)
    68a4:	91000504 	addi	r4,r18,20
    68a8:	a18007cc 	andi	r6,r20,31
    68ac:	1085883a 	add	r2,r2,r2
    68b0:	1085883a 	add	r2,r2,r2
    68b4:	208f883a 	add	r7,r4,r2
    68b8:	30001e26 	beq	r6,zero,6934 <__lshift+0x120>
    68bc:	00800804 	movi	r2,32
    68c0:	1191c83a 	sub	r8,r2,r6
    68c4:	0007883a 	mov	r3,zero
    68c8:	20800017 	ldw	r2,0(r4)
    68cc:	1184983a 	sll	r2,r2,r6
    68d0:	1884b03a 	or	r2,r3,r2
    68d4:	28800015 	stw	r2,0(r5)
    68d8:	20c00017 	ldw	r3,0(r4)
    68dc:	21000104 	addi	r4,r4,4
    68e0:	29400104 	addi	r5,r5,4
    68e4:	1a06d83a 	srl	r3,r3,r8
    68e8:	21fff736 	bltu	r4,r7,68c8 <__lshift+0xb4>
    68ec:	28c00015 	stw	r3,0(r5)
    68f0:	18000126 	beq	r3,zero,68f8 <__lshift+0xe4>
    68f4:	8c400044 	addi	r17,r17,1
    68f8:	88bfffc4 	addi	r2,r17,-1
    68fc:	98800415 	stw	r2,16(r19)
    6900:	a809883a 	mov	r4,r21
    6904:	900b883a 	mov	r5,r18
    6908:	0005ed00 	call	5ed0 <_Bfree>
    690c:	9805883a 	mov	r2,r19
    6910:	dfc00617 	ldw	ra,24(sp)
    6914:	dd400517 	ldw	r21,20(sp)
    6918:	dd000417 	ldw	r20,16(sp)
    691c:	dcc00317 	ldw	r19,12(sp)
    6920:	dc800217 	ldw	r18,8(sp)
    6924:	dc400117 	ldw	r17,4(sp)
    6928:	dc000017 	ldw	r16,0(sp)
    692c:	dec00704 	addi	sp,sp,28
    6930:	f800283a 	ret
    6934:	20800017 	ldw	r2,0(r4)
    6938:	21000104 	addi	r4,r4,4
    693c:	28800015 	stw	r2,0(r5)
    6940:	29400104 	addi	r5,r5,4
    6944:	21ffec2e 	bgeu	r4,r7,68f8 <__lshift+0xe4>
    6948:	20800017 	ldw	r2,0(r4)
    694c:	21000104 	addi	r4,r4,4
    6950:	28800015 	stw	r2,0(r5)
    6954:	29400104 	addi	r5,r5,4
    6958:	21fff636 	bltu	r4,r7,6934 <__lshift+0x120>
    695c:	003fe606 	br	68f8 <__lshift+0xe4>

00006960 <__multiply>:
    6960:	defff004 	addi	sp,sp,-64
    6964:	dc800815 	stw	r18,32(sp)
    6968:	dc400715 	stw	r17,28(sp)
    696c:	2c800417 	ldw	r18,16(r5)
    6970:	34400417 	ldw	r17,16(r6)
    6974:	dcc00915 	stw	r19,36(sp)
    6978:	dc000615 	stw	r16,24(sp)
    697c:	dfc00f15 	stw	ra,60(sp)
    6980:	df000e15 	stw	fp,56(sp)
    6984:	ddc00d15 	stw	r23,52(sp)
    6988:	dd800c15 	stw	r22,48(sp)
    698c:	dd400b15 	stw	r21,44(sp)
    6990:	dd000a15 	stw	r20,40(sp)
    6994:	2821883a 	mov	r16,r5
    6998:	3027883a 	mov	r19,r6
    699c:	9440040e 	bge	r18,r17,69b0 <__multiply+0x50>
    69a0:	8825883a 	mov	r18,r17
    69a4:	2c400417 	ldw	r17,16(r5)
    69a8:	2827883a 	mov	r19,r5
    69ac:	3021883a 	mov	r16,r6
    69b0:	80800217 	ldw	r2,8(r16)
    69b4:	9447883a 	add	r3,r18,r17
    69b8:	d8c00415 	stw	r3,16(sp)
    69bc:	81400117 	ldw	r5,4(r16)
    69c0:	10c0010e 	bge	r2,r3,69c8 <__multiply+0x68>
    69c4:	29400044 	addi	r5,r5,1
    69c8:	00064500 	call	6450 <_Balloc>
    69cc:	d8800515 	stw	r2,20(sp)
    69d0:	d9000417 	ldw	r4,16(sp)
    69d4:	d8c00517 	ldw	r3,20(sp)
    69d8:	2105883a 	add	r2,r4,r4
    69dc:	1085883a 	add	r2,r2,r2
    69e0:	19000504 	addi	r4,r3,20
    69e4:	2085883a 	add	r2,r4,r2
    69e8:	d8800315 	stw	r2,12(sp)
    69ec:	2080052e 	bgeu	r4,r2,6a04 <__multiply+0xa4>
    69f0:	2005883a 	mov	r2,r4
    69f4:	d8c00317 	ldw	r3,12(sp)
    69f8:	10000015 	stw	zero,0(r2)
    69fc:	10800104 	addi	r2,r2,4
    6a00:	10fffc36 	bltu	r2,r3,69f4 <__multiply+0x94>
    6a04:	8c45883a 	add	r2,r17,r17
    6a08:	9487883a 	add	r3,r18,r18
    6a0c:	9dc00504 	addi	r23,r19,20
    6a10:	1085883a 	add	r2,r2,r2
    6a14:	84000504 	addi	r16,r16,20
    6a18:	18c7883a 	add	r3,r3,r3
    6a1c:	b885883a 	add	r2,r23,r2
    6a20:	dc000015 	stw	r16,0(sp)
    6a24:	d8800215 	stw	r2,8(sp)
    6a28:	80f9883a 	add	fp,r16,r3
    6a2c:	b880432e 	bgeu	r23,r2,6b3c <__multiply+0x1dc>
    6a30:	d9000115 	stw	r4,4(sp)
    6a34:	b9000017 	ldw	r4,0(r23)
    6a38:	253fffcc 	andi	r20,r4,65535
    6a3c:	a0001a26 	beq	r20,zero,6aa8 <__multiply+0x148>
    6a40:	dcc00017 	ldw	r19,0(sp)
    6a44:	dc800117 	ldw	r18,4(sp)
    6a48:	002b883a 	mov	r21,zero
    6a4c:	9c400017 	ldw	r17,0(r19)
    6a50:	94000017 	ldw	r16,0(r18)
    6a54:	a009883a 	mov	r4,r20
    6a58:	897fffcc 	andi	r5,r17,65535
    6a5c:	00007d80 	call	7d8 <__mulsi3>
    6a60:	880ad43a 	srli	r5,r17,16
    6a64:	80ffffcc 	andi	r3,r16,65535
    6a68:	a8c7883a 	add	r3,r21,r3
    6a6c:	a009883a 	mov	r4,r20
    6a70:	10e3883a 	add	r17,r2,r3
    6a74:	8020d43a 	srli	r16,r16,16
    6a78:	00007d80 	call	7d8 <__mulsi3>
    6a7c:	8806d43a 	srli	r3,r17,16
    6a80:	1405883a 	add	r2,r2,r16
    6a84:	9cc00104 	addi	r19,r19,4
    6a88:	1887883a 	add	r3,r3,r2
    6a8c:	90c0008d 	sth	r3,2(r18)
    6a90:	9440000d 	sth	r17,0(r18)
    6a94:	182ad43a 	srli	r21,r3,16
    6a98:	94800104 	addi	r18,r18,4
    6a9c:	9f3feb36 	bltu	r19,fp,6a4c <__multiply+0xec>
    6aa0:	95400015 	stw	r21,0(r18)
    6aa4:	b9000017 	ldw	r4,0(r23)
    6aa8:	202ad43a 	srli	r21,r4,16
    6aac:	a8001c26 	beq	r21,zero,6b20 <__multiply+0x1c0>
    6ab0:	d9000117 	ldw	r4,4(sp)
    6ab4:	dd000017 	ldw	r20,0(sp)
    6ab8:	002d883a 	mov	r22,zero
    6abc:	24c00017 	ldw	r19,0(r4)
    6ac0:	2025883a 	mov	r18,r4
    6ac4:	9823883a 	mov	r17,r19
    6ac8:	a4000017 	ldw	r16,0(r20)
    6acc:	a809883a 	mov	r4,r21
    6ad0:	a5000104 	addi	r20,r20,4
    6ad4:	817fffcc 	andi	r5,r16,65535
    6ad8:	00007d80 	call	7d8 <__mulsi3>
    6adc:	8806d43a 	srli	r3,r17,16
    6ae0:	800ad43a 	srli	r5,r16,16
    6ae4:	94c0000d 	sth	r19,0(r18)
    6ae8:	b0c7883a 	add	r3,r22,r3
    6aec:	10e1883a 	add	r16,r2,r3
    6af0:	9400008d 	sth	r16,2(r18)
    6af4:	a809883a 	mov	r4,r21
    6af8:	94800104 	addi	r18,r18,4
    6afc:	00007d80 	call	7d8 <__mulsi3>
    6b00:	94400017 	ldw	r17,0(r18)
    6b04:	8020d43a 	srli	r16,r16,16
    6b08:	88ffffcc 	andi	r3,r17,65535
    6b0c:	10c5883a 	add	r2,r2,r3
    6b10:	80a7883a 	add	r19,r16,r2
    6b14:	982cd43a 	srli	r22,r19,16
    6b18:	a73feb36 	bltu	r20,fp,6ac8 <__multiply+0x168>
    6b1c:	94c00015 	stw	r19,0(r18)
    6b20:	d8800217 	ldw	r2,8(sp)
    6b24:	bdc00104 	addi	r23,r23,4
    6b28:	b880042e 	bgeu	r23,r2,6b3c <__multiply+0x1dc>
    6b2c:	d8c00117 	ldw	r3,4(sp)
    6b30:	18c00104 	addi	r3,r3,4
    6b34:	d8c00115 	stw	r3,4(sp)
    6b38:	003fbe06 	br	6a34 <__multiply+0xd4>
    6b3c:	d9000417 	ldw	r4,16(sp)
    6b40:	01000c0e 	bge	zero,r4,6b74 <__multiply+0x214>
    6b44:	d8c00317 	ldw	r3,12(sp)
    6b48:	18bfff17 	ldw	r2,-4(r3)
    6b4c:	18ffff04 	addi	r3,r3,-4
    6b50:	10000326 	beq	r2,zero,6b60 <__multiply+0x200>
    6b54:	00000706 	br	6b74 <__multiply+0x214>
    6b58:	18800017 	ldw	r2,0(r3)
    6b5c:	1000051e 	bne	r2,zero,6b74 <__multiply+0x214>
    6b60:	d9000417 	ldw	r4,16(sp)
    6b64:	18ffff04 	addi	r3,r3,-4
    6b68:	213fffc4 	addi	r4,r4,-1
    6b6c:	d9000415 	stw	r4,16(sp)
    6b70:	203ff91e 	bne	r4,zero,6b58 <__multiply+0x1f8>
    6b74:	d8800417 	ldw	r2,16(sp)
    6b78:	d8c00517 	ldw	r3,20(sp)
    6b7c:	18800415 	stw	r2,16(r3)
    6b80:	1805883a 	mov	r2,r3
    6b84:	dfc00f17 	ldw	ra,60(sp)
    6b88:	df000e17 	ldw	fp,56(sp)
    6b8c:	ddc00d17 	ldw	r23,52(sp)
    6b90:	dd800c17 	ldw	r22,48(sp)
    6b94:	dd400b17 	ldw	r21,44(sp)
    6b98:	dd000a17 	ldw	r20,40(sp)
    6b9c:	dcc00917 	ldw	r19,36(sp)
    6ba0:	dc800817 	ldw	r18,32(sp)
    6ba4:	dc400717 	ldw	r17,28(sp)
    6ba8:	dc000617 	ldw	r16,24(sp)
    6bac:	dec01004 	addi	sp,sp,64
    6bb0:	f800283a 	ret

00006bb4 <__i2b>:
    6bb4:	defffd04 	addi	sp,sp,-12
    6bb8:	dc000015 	stw	r16,0(sp)
    6bbc:	04000044 	movi	r16,1
    6bc0:	dc800115 	stw	r18,4(sp)
    6bc4:	2825883a 	mov	r18,r5
    6bc8:	800b883a 	mov	r5,r16
    6bcc:	dfc00215 	stw	ra,8(sp)
    6bd0:	00064500 	call	6450 <_Balloc>
    6bd4:	14000415 	stw	r16,16(r2)
    6bd8:	14800515 	stw	r18,20(r2)
    6bdc:	dfc00217 	ldw	ra,8(sp)
    6be0:	dc800117 	ldw	r18,4(sp)
    6be4:	dc000017 	ldw	r16,0(sp)
    6be8:	dec00304 	addi	sp,sp,12
    6bec:	f800283a 	ret

00006bf0 <__multadd>:
    6bf0:	defff604 	addi	sp,sp,-40
    6bf4:	dd800615 	stw	r22,24(sp)
    6bf8:	2d800417 	ldw	r22,16(r5)
    6bfc:	df000815 	stw	fp,32(sp)
    6c00:	ddc00715 	stw	r23,28(sp)
    6c04:	dd400515 	stw	r21,20(sp)
    6c08:	dd000415 	stw	r20,16(sp)
    6c0c:	dcc00315 	stw	r19,12(sp)
    6c10:	dc800215 	stw	r18,8(sp)
    6c14:	dfc00915 	stw	ra,36(sp)
    6c18:	dc400115 	stw	r17,4(sp)
    6c1c:	dc000015 	stw	r16,0(sp)
    6c20:	282f883a 	mov	r23,r5
    6c24:	2039883a 	mov	fp,r4
    6c28:	302b883a 	mov	r21,r6
    6c2c:	3829883a 	mov	r20,r7
    6c30:	2c800504 	addi	r18,r5,20
    6c34:	0027883a 	mov	r19,zero
    6c38:	94400017 	ldw	r17,0(r18)
    6c3c:	a80b883a 	mov	r5,r21
    6c40:	9cc00044 	addi	r19,r19,1
    6c44:	893fffcc 	andi	r4,r17,65535
    6c48:	00007d80 	call	7d8 <__mulsi3>
    6c4c:	8808d43a 	srli	r4,r17,16
    6c50:	1521883a 	add	r16,r2,r20
    6c54:	a80b883a 	mov	r5,r21
    6c58:	00007d80 	call	7d8 <__mulsi3>
    6c5c:	8008d43a 	srli	r4,r16,16
    6c60:	843fffcc 	andi	r16,r16,65535
    6c64:	1105883a 	add	r2,r2,r4
    6c68:	1006943a 	slli	r3,r2,16
    6c6c:	1028d43a 	srli	r20,r2,16
    6c70:	1c07883a 	add	r3,r3,r16
    6c74:	90c00015 	stw	r3,0(r18)
    6c78:	94800104 	addi	r18,r18,4
    6c7c:	9dbfee16 	blt	r19,r22,6c38 <__multadd+0x48>
    6c80:	a0000826 	beq	r20,zero,6ca4 <__multadd+0xb4>
    6c84:	b8800217 	ldw	r2,8(r23)
    6c88:	b080130e 	bge	r22,r2,6cd8 <__multadd+0xe8>
    6c8c:	b585883a 	add	r2,r22,r22
    6c90:	1085883a 	add	r2,r2,r2
    6c94:	15c5883a 	add	r2,r2,r23
    6c98:	b0c00044 	addi	r3,r22,1
    6c9c:	15000515 	stw	r20,20(r2)
    6ca0:	b8c00415 	stw	r3,16(r23)
    6ca4:	b805883a 	mov	r2,r23
    6ca8:	dfc00917 	ldw	ra,36(sp)
    6cac:	df000817 	ldw	fp,32(sp)
    6cb0:	ddc00717 	ldw	r23,28(sp)
    6cb4:	dd800617 	ldw	r22,24(sp)
    6cb8:	dd400517 	ldw	r21,20(sp)
    6cbc:	dd000417 	ldw	r20,16(sp)
    6cc0:	dcc00317 	ldw	r19,12(sp)
    6cc4:	dc800217 	ldw	r18,8(sp)
    6cc8:	dc400117 	ldw	r17,4(sp)
    6ccc:	dc000017 	ldw	r16,0(sp)
    6cd0:	dec00a04 	addi	sp,sp,40
    6cd4:	f800283a 	ret
    6cd8:	b9400117 	ldw	r5,4(r23)
    6cdc:	e009883a 	mov	r4,fp
    6ce0:	29400044 	addi	r5,r5,1
    6ce4:	00064500 	call	6450 <_Balloc>
    6ce8:	b9800417 	ldw	r6,16(r23)
    6cec:	b9400304 	addi	r5,r23,12
    6cf0:	11000304 	addi	r4,r2,12
    6cf4:	318d883a 	add	r6,r6,r6
    6cf8:	318d883a 	add	r6,r6,r6
    6cfc:	31800204 	addi	r6,r6,8
    6d00:	1023883a 	mov	r17,r2
    6d04:	0005cb80 	call	5cb8 <memcpy>
    6d08:	b80b883a 	mov	r5,r23
    6d0c:	e009883a 	mov	r4,fp
    6d10:	0005ed00 	call	5ed0 <_Bfree>
    6d14:	882f883a 	mov	r23,r17
    6d18:	003fdc06 	br	6c8c <__multadd+0x9c>

00006d1c <__pow5mult>:
    6d1c:	defffa04 	addi	sp,sp,-24
    6d20:	308000cc 	andi	r2,r6,3
    6d24:	dd000415 	stw	r20,16(sp)
    6d28:	dcc00315 	stw	r19,12(sp)
    6d2c:	dc000015 	stw	r16,0(sp)
    6d30:	dfc00515 	stw	ra,20(sp)
    6d34:	dc800215 	stw	r18,8(sp)
    6d38:	dc400115 	stw	r17,4(sp)
    6d3c:	3021883a 	mov	r16,r6
    6d40:	2027883a 	mov	r19,r4
    6d44:	2829883a 	mov	r20,r5
    6d48:	10002b1e 	bne	r2,zero,6df8 <__pow5mult+0xdc>
    6d4c:	8025d0ba 	srai	r18,r16,2
    6d50:	90001b26 	beq	r18,zero,6dc0 <__pow5mult+0xa4>
    6d54:	9c001217 	ldw	r16,72(r19)
    6d58:	8000081e 	bne	r16,zero,6d7c <__pow5mult+0x60>
    6d5c:	00003006 	br	6e20 <__pow5mult+0x104>
    6d60:	800b883a 	mov	r5,r16
    6d64:	800d883a 	mov	r6,r16
    6d68:	9809883a 	mov	r4,r19
    6d6c:	90001426 	beq	r18,zero,6dc0 <__pow5mult+0xa4>
    6d70:	80800017 	ldw	r2,0(r16)
    6d74:	10001b26 	beq	r2,zero,6de4 <__pow5mult+0xc8>
    6d78:	1021883a 	mov	r16,r2
    6d7c:	9080004c 	andi	r2,r18,1
    6d80:	1005003a 	cmpeq	r2,r2,zero
    6d84:	9025d07a 	srai	r18,r18,1
    6d88:	800d883a 	mov	r6,r16
    6d8c:	9809883a 	mov	r4,r19
    6d90:	a00b883a 	mov	r5,r20
    6d94:	103ff21e 	bne	r2,zero,6d60 <__pow5mult+0x44>
    6d98:	00069600 	call	6960 <__multiply>
    6d9c:	a00b883a 	mov	r5,r20
    6da0:	9809883a 	mov	r4,r19
    6da4:	1023883a 	mov	r17,r2
    6da8:	0005ed00 	call	5ed0 <_Bfree>
    6dac:	8829883a 	mov	r20,r17
    6db0:	800b883a 	mov	r5,r16
    6db4:	800d883a 	mov	r6,r16
    6db8:	9809883a 	mov	r4,r19
    6dbc:	903fec1e 	bne	r18,zero,6d70 <__pow5mult+0x54>
    6dc0:	a005883a 	mov	r2,r20
    6dc4:	dfc00517 	ldw	ra,20(sp)
    6dc8:	dd000417 	ldw	r20,16(sp)
    6dcc:	dcc00317 	ldw	r19,12(sp)
    6dd0:	dc800217 	ldw	r18,8(sp)
    6dd4:	dc400117 	ldw	r17,4(sp)
    6dd8:	dc000017 	ldw	r16,0(sp)
    6ddc:	dec00604 	addi	sp,sp,24
    6de0:	f800283a 	ret
    6de4:	00069600 	call	6960 <__multiply>
    6de8:	80800015 	stw	r2,0(r16)
    6dec:	1021883a 	mov	r16,r2
    6df0:	10000015 	stw	zero,0(r2)
    6df4:	003fe106 	br	6d7c <__pow5mult+0x60>
    6df8:	1085883a 	add	r2,r2,r2
    6dfc:	00c00074 	movhi	r3,1
    6e00:	18f4dc04 	addi	r3,r3,-11408
    6e04:	1085883a 	add	r2,r2,r2
    6e08:	10c5883a 	add	r2,r2,r3
    6e0c:	11bfff17 	ldw	r6,-4(r2)
    6e10:	000f883a 	mov	r7,zero
    6e14:	0006bf00 	call	6bf0 <__multadd>
    6e18:	1029883a 	mov	r20,r2
    6e1c:	003fcb06 	br	6d4c <__pow5mult+0x30>
    6e20:	9809883a 	mov	r4,r19
    6e24:	01409c44 	movi	r5,625
    6e28:	0006bb40 	call	6bb4 <__i2b>
    6e2c:	98801215 	stw	r2,72(r19)
    6e30:	1021883a 	mov	r16,r2
    6e34:	10000015 	stw	zero,0(r2)
    6e38:	003fd006 	br	6d7c <__pow5mult+0x60>

00006e3c <__s2b>:
    6e3c:	defff904 	addi	sp,sp,-28
    6e40:	dcc00315 	stw	r19,12(sp)
    6e44:	dc800215 	stw	r18,8(sp)
    6e48:	2827883a 	mov	r19,r5
    6e4c:	2025883a 	mov	r18,r4
    6e50:	01400244 	movi	r5,9
    6e54:	39000204 	addi	r4,r7,8
    6e58:	dd000415 	stw	r20,16(sp)
    6e5c:	dc400115 	stw	r17,4(sp)
    6e60:	dfc00615 	stw	ra,24(sp)
    6e64:	dd400515 	stw	r21,20(sp)
    6e68:	dc000015 	stw	r16,0(sp)
    6e6c:	3829883a 	mov	r20,r7
    6e70:	3023883a 	mov	r17,r6
    6e74:	00007080 	call	708 <__divsi3>
    6e78:	00c00044 	movi	r3,1
    6e7c:	1880350e 	bge	r3,r2,6f54 <__s2b+0x118>
    6e80:	000b883a 	mov	r5,zero
    6e84:	18c7883a 	add	r3,r3,r3
    6e88:	29400044 	addi	r5,r5,1
    6e8c:	18bffd16 	blt	r3,r2,6e84 <__s2b+0x48>
    6e90:	9009883a 	mov	r4,r18
    6e94:	00064500 	call	6450 <_Balloc>
    6e98:	1011883a 	mov	r8,r2
    6e9c:	d8800717 	ldw	r2,28(sp)
    6ea0:	00c00044 	movi	r3,1
    6ea4:	01800244 	movi	r6,9
    6ea8:	40800515 	stw	r2,20(r8)
    6eac:	40c00415 	stw	r3,16(r8)
    6eb0:	3440260e 	bge	r6,r17,6f4c <__s2b+0x110>
    6eb4:	3021883a 	mov	r16,r6
    6eb8:	99ab883a 	add	r21,r19,r6
    6ebc:	9c05883a 	add	r2,r19,r16
    6ec0:	11c00007 	ldb	r7,0(r2)
    6ec4:	400b883a 	mov	r5,r8
    6ec8:	9009883a 	mov	r4,r18
    6ecc:	39fff404 	addi	r7,r7,-48
    6ed0:	01800284 	movi	r6,10
    6ed4:	0006bf00 	call	6bf0 <__multadd>
    6ed8:	84000044 	addi	r16,r16,1
    6edc:	1011883a 	mov	r8,r2
    6ee0:	8c3ff61e 	bne	r17,r16,6ebc <__s2b+0x80>
    6ee4:	ac45883a 	add	r2,r21,r17
    6ee8:	117ffe04 	addi	r5,r2,-8
    6eec:	880d883a 	mov	r6,r17
    6ef0:	35000c0e 	bge	r6,r20,6f24 <__s2b+0xe8>
    6ef4:	a185c83a 	sub	r2,r20,r6
    6ef8:	2821883a 	mov	r16,r5
    6efc:	28a3883a 	add	r17,r5,r2
    6f00:	81c00007 	ldb	r7,0(r16)
    6f04:	400b883a 	mov	r5,r8
    6f08:	9009883a 	mov	r4,r18
    6f0c:	39fff404 	addi	r7,r7,-48
    6f10:	01800284 	movi	r6,10
    6f14:	0006bf00 	call	6bf0 <__multadd>
    6f18:	84000044 	addi	r16,r16,1
    6f1c:	1011883a 	mov	r8,r2
    6f20:	847ff71e 	bne	r16,r17,6f00 <__s2b+0xc4>
    6f24:	4005883a 	mov	r2,r8
    6f28:	dfc00617 	ldw	ra,24(sp)
    6f2c:	dd400517 	ldw	r21,20(sp)
    6f30:	dd000417 	ldw	r20,16(sp)
    6f34:	dcc00317 	ldw	r19,12(sp)
    6f38:	dc800217 	ldw	r18,8(sp)
    6f3c:	dc400117 	ldw	r17,4(sp)
    6f40:	dc000017 	ldw	r16,0(sp)
    6f44:	dec00704 	addi	sp,sp,28
    6f48:	f800283a 	ret
    6f4c:	99400284 	addi	r5,r19,10
    6f50:	003fe706 	br	6ef0 <__s2b+0xb4>
    6f54:	000b883a 	mov	r5,zero
    6f58:	003fcd06 	br	6e90 <__s2b+0x54>

00006f5c <_realloc_r>:
    6f5c:	defff404 	addi	sp,sp,-48
    6f60:	dd800815 	stw	r22,32(sp)
    6f64:	dc800415 	stw	r18,16(sp)
    6f68:	dc400315 	stw	r17,12(sp)
    6f6c:	dfc00b15 	stw	ra,44(sp)
    6f70:	df000a15 	stw	fp,40(sp)
    6f74:	ddc00915 	stw	r23,36(sp)
    6f78:	dd400715 	stw	r21,28(sp)
    6f7c:	dd000615 	stw	r20,24(sp)
    6f80:	dcc00515 	stw	r19,20(sp)
    6f84:	dc000215 	stw	r16,8(sp)
    6f88:	2825883a 	mov	r18,r5
    6f8c:	3023883a 	mov	r17,r6
    6f90:	202d883a 	mov	r22,r4
    6f94:	2800c926 	beq	r5,zero,72bc <_realloc_r+0x360>
    6f98:	000a9080 	call	a908 <__malloc_lock>
    6f9c:	943ffe04 	addi	r16,r18,-8
    6fa0:	88c002c4 	addi	r3,r17,11
    6fa4:	00800584 	movi	r2,22
    6fa8:	82000117 	ldw	r8,4(r16)
    6fac:	10c01b2e 	bgeu	r2,r3,701c <_realloc_r+0xc0>
    6fb0:	00bffe04 	movi	r2,-8
    6fb4:	188e703a 	and	r7,r3,r2
    6fb8:	3839883a 	mov	fp,r7
    6fbc:	38001a16 	blt	r7,zero,7028 <_realloc_r+0xcc>
    6fc0:	e4401936 	bltu	fp,r17,7028 <_realloc_r+0xcc>
    6fc4:	013fff04 	movi	r4,-4
    6fc8:	4126703a 	and	r19,r8,r4
    6fcc:	99c02616 	blt	r19,r7,7068 <_realloc_r+0x10c>
    6fd0:	802b883a 	mov	r21,r16
    6fd4:	9829883a 	mov	r20,r19
    6fd8:	84000204 	addi	r16,r16,8
    6fdc:	a80f883a 	mov	r7,r21
    6fe0:	a70dc83a 	sub	r6,r20,fp
    6fe4:	008003c4 	movi	r2,15
    6fe8:	1180c136 	bltu	r2,r6,72f0 <_realloc_r+0x394>
    6fec:	38800117 	ldw	r2,4(r7)
    6ff0:	a549883a 	add	r4,r20,r21
    6ff4:	1080004c 	andi	r2,r2,1
    6ff8:	a084b03a 	or	r2,r20,r2
    6ffc:	38800115 	stw	r2,4(r7)
    7000:	20c00117 	ldw	r3,4(r4)
    7004:	18c00054 	ori	r3,r3,1
    7008:	20c00115 	stw	r3,4(r4)
    700c:	b009883a 	mov	r4,r22
    7010:	000a9280 	call	a928 <__malloc_unlock>
    7014:	8023883a 	mov	r17,r16
    7018:	00000606 	br	7034 <_realloc_r+0xd8>
    701c:	01c00404 	movi	r7,16
    7020:	3839883a 	mov	fp,r7
    7024:	e47fe72e 	bgeu	fp,r17,6fc4 <_realloc_r+0x68>
    7028:	00800304 	movi	r2,12
    702c:	0023883a 	mov	r17,zero
    7030:	b0800015 	stw	r2,0(r22)
    7034:	8805883a 	mov	r2,r17
    7038:	dfc00b17 	ldw	ra,44(sp)
    703c:	df000a17 	ldw	fp,40(sp)
    7040:	ddc00917 	ldw	r23,36(sp)
    7044:	dd800817 	ldw	r22,32(sp)
    7048:	dd400717 	ldw	r21,28(sp)
    704c:	dd000617 	ldw	r20,24(sp)
    7050:	dcc00517 	ldw	r19,20(sp)
    7054:	dc800417 	ldw	r18,16(sp)
    7058:	dc400317 	ldw	r17,12(sp)
    705c:	dc000217 	ldw	r16,8(sp)
    7060:	dec00c04 	addi	sp,sp,48
    7064:	f800283a 	ret
    7068:	00800074 	movhi	r2,1
    706c:	10b52f04 	addi	r2,r2,-11076
    7070:	12400217 	ldw	r9,8(r2)
    7074:	84cd883a 	add	r6,r16,r19
    7078:	802b883a 	mov	r21,r16
    707c:	3240b926 	beq	r6,r9,7364 <_realloc_r+0x408>
    7080:	31400117 	ldw	r5,4(r6)
    7084:	00bfff84 	movi	r2,-2
    7088:	2884703a 	and	r2,r5,r2
    708c:	1185883a 	add	r2,r2,r6
    7090:	10c00117 	ldw	r3,4(r2)
    7094:	18c0004c 	andi	r3,r3,1
    7098:	1807003a 	cmpeq	r3,r3,zero
    709c:	1800a326 	beq	r3,zero,732c <_realloc_r+0x3d0>
    70a0:	2908703a 	and	r4,r5,r4
    70a4:	9929883a 	add	r20,r19,r4
    70a8:	a1c0a30e 	bge	r20,r7,7338 <_realloc_r+0x3dc>
    70ac:	4080004c 	andi	r2,r8,1
    70b0:	1000551e 	bne	r2,zero,7208 <_realloc_r+0x2ac>
    70b4:	80800017 	ldw	r2,0(r16)
    70b8:	80afc83a 	sub	r23,r16,r2
    70bc:	b8c00117 	ldw	r3,4(r23)
    70c0:	00bfff04 	movi	r2,-4
    70c4:	1884703a 	and	r2,r3,r2
    70c8:	30002e26 	beq	r6,zero,7184 <_realloc_r+0x228>
    70cc:	3240b926 	beq	r6,r9,73b4 <_realloc_r+0x458>
    70d0:	98a9883a 	add	r20,r19,r2
    70d4:	2509883a 	add	r4,r4,r20
    70d8:	d9000015 	stw	r4,0(sp)
    70dc:	21c02a16 	blt	r4,r7,7188 <_realloc_r+0x22c>
    70e0:	30800317 	ldw	r2,12(r6)
    70e4:	30c00217 	ldw	r3,8(r6)
    70e8:	01400904 	movi	r5,36
    70ec:	99bfff04 	addi	r6,r19,-4
    70f0:	18800315 	stw	r2,12(r3)
    70f4:	10c00215 	stw	r3,8(r2)
    70f8:	b9000317 	ldw	r4,12(r23)
    70fc:	b8800217 	ldw	r2,8(r23)
    7100:	b82b883a 	mov	r21,r23
    7104:	bc000204 	addi	r16,r23,8
    7108:	20800215 	stw	r2,8(r4)
    710c:	11000315 	stw	r4,12(r2)
    7110:	2980e436 	bltu	r5,r6,74a4 <_realloc_r+0x548>
    7114:	008004c4 	movi	r2,19
    7118:	9009883a 	mov	r4,r18
    711c:	8011883a 	mov	r8,r16
    7120:	11800f2e 	bgeu	r2,r6,7160 <_realloc_r+0x204>
    7124:	90800017 	ldw	r2,0(r18)
    7128:	ba000404 	addi	r8,r23,16
    712c:	91000204 	addi	r4,r18,8
    7130:	b8800215 	stw	r2,8(r23)
    7134:	90c00117 	ldw	r3,4(r18)
    7138:	008006c4 	movi	r2,27
    713c:	b8c00315 	stw	r3,12(r23)
    7140:	1180072e 	bgeu	r2,r6,7160 <_realloc_r+0x204>
    7144:	90c00217 	ldw	r3,8(r18)
    7148:	ba000604 	addi	r8,r23,24
    714c:	91000404 	addi	r4,r18,16
    7150:	b8c00415 	stw	r3,16(r23)
    7154:	90800317 	ldw	r2,12(r18)
    7158:	b8800515 	stw	r2,20(r23)
    715c:	3140e726 	beq	r6,r5,74fc <_realloc_r+0x5a0>
    7160:	20800017 	ldw	r2,0(r4)
    7164:	dd000017 	ldw	r20,0(sp)
    7168:	b80f883a 	mov	r7,r23
    716c:	40800015 	stw	r2,0(r8)
    7170:	20c00117 	ldw	r3,4(r4)
    7174:	40c00115 	stw	r3,4(r8)
    7178:	20800217 	ldw	r2,8(r4)
    717c:	40800215 	stw	r2,8(r8)
    7180:	003f9706 	br	6fe0 <_realloc_r+0x84>
    7184:	98a9883a 	add	r20,r19,r2
    7188:	a1c01f16 	blt	r20,r7,7208 <_realloc_r+0x2ac>
    718c:	b8c00317 	ldw	r3,12(r23)
    7190:	b8800217 	ldw	r2,8(r23)
    7194:	99bfff04 	addi	r6,r19,-4
    7198:	01400904 	movi	r5,36
    719c:	b82b883a 	mov	r21,r23
    71a0:	18800215 	stw	r2,8(r3)
    71a4:	10c00315 	stw	r3,12(r2)
    71a8:	bc000204 	addi	r16,r23,8
    71ac:	2980c336 	bltu	r5,r6,74bc <_realloc_r+0x560>
    71b0:	008004c4 	movi	r2,19
    71b4:	9009883a 	mov	r4,r18
    71b8:	8011883a 	mov	r8,r16
    71bc:	11800f2e 	bgeu	r2,r6,71fc <_realloc_r+0x2a0>
    71c0:	90800017 	ldw	r2,0(r18)
    71c4:	ba000404 	addi	r8,r23,16
    71c8:	91000204 	addi	r4,r18,8
    71cc:	b8800215 	stw	r2,8(r23)
    71d0:	90c00117 	ldw	r3,4(r18)
    71d4:	008006c4 	movi	r2,27
    71d8:	b8c00315 	stw	r3,12(r23)
    71dc:	1180072e 	bgeu	r2,r6,71fc <_realloc_r+0x2a0>
    71e0:	90c00217 	ldw	r3,8(r18)
    71e4:	ba000604 	addi	r8,r23,24
    71e8:	91000404 	addi	r4,r18,16
    71ec:	b8c00415 	stw	r3,16(r23)
    71f0:	90800317 	ldw	r2,12(r18)
    71f4:	b8800515 	stw	r2,20(r23)
    71f8:	3140c726 	beq	r6,r5,7518 <_realloc_r+0x5bc>
    71fc:	20800017 	ldw	r2,0(r4)
    7200:	b80f883a 	mov	r7,r23
    7204:	003fd906 	br	716c <_realloc_r+0x210>
    7208:	880b883a 	mov	r5,r17
    720c:	b009883a 	mov	r4,r22
    7210:	00008380 	call	838 <_malloc_r>
    7214:	1023883a 	mov	r17,r2
    7218:	10002526 	beq	r2,zero,72b0 <_realloc_r+0x354>
    721c:	80800117 	ldw	r2,4(r16)
    7220:	00ffff84 	movi	r3,-2
    7224:	893ffe04 	addi	r4,r17,-8
    7228:	10c4703a 	and	r2,r2,r3
    722c:	8085883a 	add	r2,r16,r2
    7230:	20809526 	beq	r4,r2,7488 <_realloc_r+0x52c>
    7234:	99bfff04 	addi	r6,r19,-4
    7238:	01c00904 	movi	r7,36
    723c:	39804536 	bltu	r7,r6,7354 <_realloc_r+0x3f8>
    7240:	008004c4 	movi	r2,19
    7244:	9009883a 	mov	r4,r18
    7248:	880b883a 	mov	r5,r17
    724c:	11800f2e 	bgeu	r2,r6,728c <_realloc_r+0x330>
    7250:	90800017 	ldw	r2,0(r18)
    7254:	89400204 	addi	r5,r17,8
    7258:	91000204 	addi	r4,r18,8
    725c:	88800015 	stw	r2,0(r17)
    7260:	90c00117 	ldw	r3,4(r18)
    7264:	008006c4 	movi	r2,27
    7268:	88c00115 	stw	r3,4(r17)
    726c:	1180072e 	bgeu	r2,r6,728c <_realloc_r+0x330>
    7270:	90c00217 	ldw	r3,8(r18)
    7274:	89400404 	addi	r5,r17,16
    7278:	91000404 	addi	r4,r18,16
    727c:	88c00215 	stw	r3,8(r17)
    7280:	90800317 	ldw	r2,12(r18)
    7284:	88800315 	stw	r2,12(r17)
    7288:	31c09126 	beq	r6,r7,74d0 <_realloc_r+0x574>
    728c:	20800017 	ldw	r2,0(r4)
    7290:	28800015 	stw	r2,0(r5)
    7294:	20c00117 	ldw	r3,4(r4)
    7298:	28c00115 	stw	r3,4(r5)
    729c:	20800217 	ldw	r2,8(r4)
    72a0:	28800215 	stw	r2,8(r5)
    72a4:	900b883a 	mov	r5,r18
    72a8:	b009883a 	mov	r4,r22
    72ac:	000504c0 	call	504c <_free_r>
    72b0:	b009883a 	mov	r4,r22
    72b4:	000a9280 	call	a928 <__malloc_unlock>
    72b8:	003f5e06 	br	7034 <_realloc_r+0xd8>
    72bc:	300b883a 	mov	r5,r6
    72c0:	dfc00b17 	ldw	ra,44(sp)
    72c4:	df000a17 	ldw	fp,40(sp)
    72c8:	ddc00917 	ldw	r23,36(sp)
    72cc:	dd800817 	ldw	r22,32(sp)
    72d0:	dd400717 	ldw	r21,28(sp)
    72d4:	dd000617 	ldw	r20,24(sp)
    72d8:	dcc00517 	ldw	r19,20(sp)
    72dc:	dc800417 	ldw	r18,16(sp)
    72e0:	dc400317 	ldw	r17,12(sp)
    72e4:	dc000217 	ldw	r16,8(sp)
    72e8:	dec00c04 	addi	sp,sp,48
    72ec:	00008381 	jmpi	838 <_malloc_r>
    72f0:	38800117 	ldw	r2,4(r7)
    72f4:	e54b883a 	add	r5,fp,r21
    72f8:	31000054 	ori	r4,r6,1
    72fc:	1080004c 	andi	r2,r2,1
    7300:	1704b03a 	or	r2,r2,fp
    7304:	38800115 	stw	r2,4(r7)
    7308:	29000115 	stw	r4,4(r5)
    730c:	2987883a 	add	r3,r5,r6
    7310:	18800117 	ldw	r2,4(r3)
    7314:	29400204 	addi	r5,r5,8
    7318:	b009883a 	mov	r4,r22
    731c:	10800054 	ori	r2,r2,1
    7320:	18800115 	stw	r2,4(r3)
    7324:	000504c0 	call	504c <_free_r>
    7328:	003f3806 	br	700c <_realloc_r+0xb0>
    732c:	000d883a 	mov	r6,zero
    7330:	0009883a 	mov	r4,zero
    7334:	003f5d06 	br	70ac <_realloc_r+0x150>
    7338:	30c00217 	ldw	r3,8(r6)
    733c:	30800317 	ldw	r2,12(r6)
    7340:	800f883a 	mov	r7,r16
    7344:	84000204 	addi	r16,r16,8
    7348:	10c00215 	stw	r3,8(r2)
    734c:	18800315 	stw	r2,12(r3)
    7350:	003f2306 	br	6fe0 <_realloc_r+0x84>
    7354:	8809883a 	mov	r4,r17
    7358:	900b883a 	mov	r5,r18
    735c:	0005d580 	call	5d58 <memmove>
    7360:	003fd006 	br	72a4 <_realloc_r+0x348>
    7364:	30800117 	ldw	r2,4(r6)
    7368:	e0c00404 	addi	r3,fp,16
    736c:	1108703a 	and	r4,r2,r4
    7370:	9905883a 	add	r2,r19,r4
    7374:	10ff4d16 	blt	r2,r3,70ac <_realloc_r+0x150>
    7378:	1705c83a 	sub	r2,r2,fp
    737c:	870b883a 	add	r5,r16,fp
    7380:	10800054 	ori	r2,r2,1
    7384:	28800115 	stw	r2,4(r5)
    7388:	80c00117 	ldw	r3,4(r16)
    738c:	00800074 	movhi	r2,1
    7390:	10b52f04 	addi	r2,r2,-11076
    7394:	b009883a 	mov	r4,r22
    7398:	18c0004c 	andi	r3,r3,1
    739c:	e0c6b03a 	or	r3,fp,r3
    73a0:	11400215 	stw	r5,8(r2)
    73a4:	80c00115 	stw	r3,4(r16)
    73a8:	000a9280 	call	a928 <__malloc_unlock>
    73ac:	84400204 	addi	r17,r16,8
    73b0:	003f2006 	br	7034 <_realloc_r+0xd8>
    73b4:	98a9883a 	add	r20,r19,r2
    73b8:	2509883a 	add	r4,r4,r20
    73bc:	e0800404 	addi	r2,fp,16
    73c0:	d9000115 	stw	r4,4(sp)
    73c4:	20bf7016 	blt	r4,r2,7188 <_realloc_r+0x22c>
    73c8:	b8c00317 	ldw	r3,12(r23)
    73cc:	b8800217 	ldw	r2,8(r23)
    73d0:	99bfff04 	addi	r6,r19,-4
    73d4:	01400904 	movi	r5,36
    73d8:	18800215 	stw	r2,8(r3)
    73dc:	10c00315 	stw	r3,12(r2)
    73e0:	bc400204 	addi	r17,r23,8
    73e4:	29804136 	bltu	r5,r6,74ec <_realloc_r+0x590>
    73e8:	008004c4 	movi	r2,19
    73ec:	9009883a 	mov	r4,r18
    73f0:	880f883a 	mov	r7,r17
    73f4:	11800f2e 	bgeu	r2,r6,7434 <_realloc_r+0x4d8>
    73f8:	90800017 	ldw	r2,0(r18)
    73fc:	b9c00404 	addi	r7,r23,16
    7400:	91000204 	addi	r4,r18,8
    7404:	b8800215 	stw	r2,8(r23)
    7408:	90c00117 	ldw	r3,4(r18)
    740c:	008006c4 	movi	r2,27
    7410:	b8c00315 	stw	r3,12(r23)
    7414:	1180072e 	bgeu	r2,r6,7434 <_realloc_r+0x4d8>
    7418:	90c00217 	ldw	r3,8(r18)
    741c:	b9c00604 	addi	r7,r23,24
    7420:	91000404 	addi	r4,r18,16
    7424:	b8c00415 	stw	r3,16(r23)
    7428:	90800317 	ldw	r2,12(r18)
    742c:	b8800515 	stw	r2,20(r23)
    7430:	31404026 	beq	r6,r5,7534 <_realloc_r+0x5d8>
    7434:	20800017 	ldw	r2,0(r4)
    7438:	38800015 	stw	r2,0(r7)
    743c:	20c00117 	ldw	r3,4(r4)
    7440:	38c00115 	stw	r3,4(r7)
    7444:	20800217 	ldw	r2,8(r4)
    7448:	38800215 	stw	r2,8(r7)
    744c:	d8c00117 	ldw	r3,4(sp)
    7450:	bf0b883a 	add	r5,r23,fp
    7454:	b009883a 	mov	r4,r22
    7458:	1f05c83a 	sub	r2,r3,fp
    745c:	10800054 	ori	r2,r2,1
    7460:	28800115 	stw	r2,4(r5)
    7464:	b8c00117 	ldw	r3,4(r23)
    7468:	00800074 	movhi	r2,1
    746c:	10b52f04 	addi	r2,r2,-11076
    7470:	11400215 	stw	r5,8(r2)
    7474:	18c0004c 	andi	r3,r3,1
    7478:	e0c6b03a 	or	r3,fp,r3
    747c:	b8c00115 	stw	r3,4(r23)
    7480:	000a9280 	call	a928 <__malloc_unlock>
    7484:	003eeb06 	br	7034 <_realloc_r+0xd8>
    7488:	20800117 	ldw	r2,4(r4)
    748c:	00ffff04 	movi	r3,-4
    7490:	800f883a 	mov	r7,r16
    7494:	10c4703a 	and	r2,r2,r3
    7498:	98a9883a 	add	r20,r19,r2
    749c:	84000204 	addi	r16,r16,8
    74a0:	003ecf06 	br	6fe0 <_realloc_r+0x84>
    74a4:	900b883a 	mov	r5,r18
    74a8:	8009883a 	mov	r4,r16
    74ac:	0005d580 	call	5d58 <memmove>
    74b0:	dd000017 	ldw	r20,0(sp)
    74b4:	b80f883a 	mov	r7,r23
    74b8:	003ec906 	br	6fe0 <_realloc_r+0x84>
    74bc:	900b883a 	mov	r5,r18
    74c0:	8009883a 	mov	r4,r16
    74c4:	0005d580 	call	5d58 <memmove>
    74c8:	b80f883a 	mov	r7,r23
    74cc:	003ec406 	br	6fe0 <_realloc_r+0x84>
    74d0:	90c00417 	ldw	r3,16(r18)
    74d4:	89400604 	addi	r5,r17,24
    74d8:	91000604 	addi	r4,r18,24
    74dc:	88c00415 	stw	r3,16(r17)
    74e0:	90800517 	ldw	r2,20(r18)
    74e4:	88800515 	stw	r2,20(r17)
    74e8:	003f6806 	br	728c <_realloc_r+0x330>
    74ec:	900b883a 	mov	r5,r18
    74f0:	8809883a 	mov	r4,r17
    74f4:	0005d580 	call	5d58 <memmove>
    74f8:	003fd406 	br	744c <_realloc_r+0x4f0>
    74fc:	90c00417 	ldw	r3,16(r18)
    7500:	91000604 	addi	r4,r18,24
    7504:	ba000804 	addi	r8,r23,32
    7508:	b8c00615 	stw	r3,24(r23)
    750c:	90800517 	ldw	r2,20(r18)
    7510:	b8800715 	stw	r2,28(r23)
    7514:	003f1206 	br	7160 <_realloc_r+0x204>
    7518:	90c00417 	ldw	r3,16(r18)
    751c:	91000604 	addi	r4,r18,24
    7520:	ba000804 	addi	r8,r23,32
    7524:	b8c00615 	stw	r3,24(r23)
    7528:	90800517 	ldw	r2,20(r18)
    752c:	b8800715 	stw	r2,28(r23)
    7530:	003f3206 	br	71fc <_realloc_r+0x2a0>
    7534:	90c00417 	ldw	r3,16(r18)
    7538:	91000604 	addi	r4,r18,24
    753c:	b9c00804 	addi	r7,r23,32
    7540:	b8c00615 	stw	r3,24(r23)
    7544:	90800517 	ldw	r2,20(r18)
    7548:	b8800715 	stw	r2,28(r23)
    754c:	003fb906 	br	7434 <_realloc_r+0x4d8>

00007550 <__isinfd>:
    7550:	200d883a 	mov	r6,r4
    7554:	0109c83a 	sub	r4,zero,r4
    7558:	2188b03a 	or	r4,r4,r6
    755c:	2008d7fa 	srli	r4,r4,31
    7560:	00a00034 	movhi	r2,32768
    7564:	10bfffc4 	addi	r2,r2,-1
    7568:	1144703a 	and	r2,r2,r5
    756c:	2088b03a 	or	r4,r4,r2
    7570:	009ffc34 	movhi	r2,32752
    7574:	1105c83a 	sub	r2,r2,r4
    7578:	0087c83a 	sub	r3,zero,r2
    757c:	10c4b03a 	or	r2,r2,r3
    7580:	1004d7fa 	srli	r2,r2,31
    7584:	00c00044 	movi	r3,1
    7588:	1885c83a 	sub	r2,r3,r2
    758c:	f800283a 	ret

00007590 <__isnand>:
    7590:	200d883a 	mov	r6,r4
    7594:	0109c83a 	sub	r4,zero,r4
    7598:	2188b03a 	or	r4,r4,r6
    759c:	2008d7fa 	srli	r4,r4,31
    75a0:	00a00034 	movhi	r2,32768
    75a4:	10bfffc4 	addi	r2,r2,-1
    75a8:	1144703a 	and	r2,r2,r5
    75ac:	2088b03a 	or	r4,r4,r2
    75b0:	009ffc34 	movhi	r2,32752
    75b4:	1105c83a 	sub	r2,r2,r4
    75b8:	1004d7fa 	srli	r2,r2,31
    75bc:	f800283a 	ret

000075c0 <__sclose>:
    75c0:	2940038f 	ldh	r5,14(r5)
    75c4:	00079081 	jmpi	7908 <_close_r>

000075c8 <__sseek>:
    75c8:	defffe04 	addi	sp,sp,-8
    75cc:	dc000015 	stw	r16,0(sp)
    75d0:	2821883a 	mov	r16,r5
    75d4:	2940038f 	ldh	r5,14(r5)
    75d8:	dfc00115 	stw	ra,4(sp)
    75dc:	0007b800 	call	7b80 <_lseek_r>
    75e0:	1007883a 	mov	r3,r2
    75e4:	00bfffc4 	movi	r2,-1
    75e8:	18800926 	beq	r3,r2,7610 <__sseek+0x48>
    75ec:	8080030b 	ldhu	r2,12(r16)
    75f0:	80c01415 	stw	r3,80(r16)
    75f4:	10840014 	ori	r2,r2,4096
    75f8:	8080030d 	sth	r2,12(r16)
    75fc:	1805883a 	mov	r2,r3
    7600:	dfc00117 	ldw	ra,4(sp)
    7604:	dc000017 	ldw	r16,0(sp)
    7608:	dec00204 	addi	sp,sp,8
    760c:	f800283a 	ret
    7610:	8080030b 	ldhu	r2,12(r16)
    7614:	10bbffcc 	andi	r2,r2,61439
    7618:	8080030d 	sth	r2,12(r16)
    761c:	1805883a 	mov	r2,r3
    7620:	dfc00117 	ldw	ra,4(sp)
    7624:	dc000017 	ldw	r16,0(sp)
    7628:	dec00204 	addi	sp,sp,8
    762c:	f800283a 	ret

00007630 <__swrite>:
    7630:	2880030b 	ldhu	r2,12(r5)
    7634:	defffb04 	addi	sp,sp,-20
    7638:	dcc00315 	stw	r19,12(sp)
    763c:	1080400c 	andi	r2,r2,256
    7640:	dc800215 	stw	r18,8(sp)
    7644:	dc400115 	stw	r17,4(sp)
    7648:	dc000015 	stw	r16,0(sp)
    764c:	3027883a 	mov	r19,r6
    7650:	3825883a 	mov	r18,r7
    7654:	dfc00415 	stw	ra,16(sp)
    7658:	2821883a 	mov	r16,r5
    765c:	000d883a 	mov	r6,zero
    7660:	01c00084 	movi	r7,2
    7664:	2023883a 	mov	r17,r4
    7668:	10000226 	beq	r2,zero,7674 <__swrite+0x44>
    766c:	2940038f 	ldh	r5,14(r5)
    7670:	0007b800 	call	7b80 <_lseek_r>
    7674:	8080030b 	ldhu	r2,12(r16)
    7678:	8140038f 	ldh	r5,14(r16)
    767c:	8809883a 	mov	r4,r17
    7680:	10bbffcc 	andi	r2,r2,61439
    7684:	980d883a 	mov	r6,r19
    7688:	900f883a 	mov	r7,r18
    768c:	8080030d 	sth	r2,12(r16)
    7690:	dfc00417 	ldw	ra,16(sp)
    7694:	dcc00317 	ldw	r19,12(sp)
    7698:	dc800217 	ldw	r18,8(sp)
    769c:	dc400117 	ldw	r17,4(sp)
    76a0:	dc000017 	ldw	r16,0(sp)
    76a4:	dec00504 	addi	sp,sp,20
    76a8:	00077c81 	jmpi	77c8 <_write_r>

000076ac <__sread>:
    76ac:	defffe04 	addi	sp,sp,-8
    76b0:	dc000015 	stw	r16,0(sp)
    76b4:	2821883a 	mov	r16,r5
    76b8:	2940038f 	ldh	r5,14(r5)
    76bc:	dfc00115 	stw	ra,4(sp)
    76c0:	0007bf80 	call	7bf8 <_read_r>
    76c4:	1007883a 	mov	r3,r2
    76c8:	10000816 	blt	r2,zero,76ec <__sread+0x40>
    76cc:	80801417 	ldw	r2,80(r16)
    76d0:	10c5883a 	add	r2,r2,r3
    76d4:	80801415 	stw	r2,80(r16)
    76d8:	1805883a 	mov	r2,r3
    76dc:	dfc00117 	ldw	ra,4(sp)
    76e0:	dc000017 	ldw	r16,0(sp)
    76e4:	dec00204 	addi	sp,sp,8
    76e8:	f800283a 	ret
    76ec:	8080030b 	ldhu	r2,12(r16)
    76f0:	10bbffcc 	andi	r2,r2,61439
    76f4:	8080030d 	sth	r2,12(r16)
    76f8:	1805883a 	mov	r2,r3
    76fc:	dfc00117 	ldw	ra,4(sp)
    7700:	dc000017 	ldw	r16,0(sp)
    7704:	dec00204 	addi	sp,sp,8
    7708:	f800283a 	ret

0000770c <strcmp>:
    770c:	2144b03a 	or	r2,r4,r5
    7710:	108000cc 	andi	r2,r2,3
    7714:	10001d1e 	bne	r2,zero,778c <strcmp+0x80>
    7718:	200f883a 	mov	r7,r4
    771c:	28800017 	ldw	r2,0(r5)
    7720:	21000017 	ldw	r4,0(r4)
    7724:	280d883a 	mov	r6,r5
    7728:	2080161e 	bne	r4,r2,7784 <strcmp+0x78>
    772c:	023fbff4 	movhi	r8,65279
    7730:	423fbfc4 	addi	r8,r8,-257
    7734:	2207883a 	add	r3,r4,r8
    7738:	01602074 	movhi	r5,32897
    773c:	29602004 	addi	r5,r5,-32640
    7740:	1946703a 	and	r3,r3,r5
    7744:	0104303a 	nor	r2,zero,r4
    7748:	10c4703a 	and	r2,r2,r3
    774c:	10001c1e 	bne	r2,zero,77c0 <strcmp+0xb4>
    7750:	4013883a 	mov	r9,r8
    7754:	2811883a 	mov	r8,r5
    7758:	00000106 	br	7760 <strcmp+0x54>
    775c:	1800181e 	bne	r3,zero,77c0 <strcmp+0xb4>
    7760:	39c00104 	addi	r7,r7,4
    7764:	39000017 	ldw	r4,0(r7)
    7768:	31800104 	addi	r6,r6,4
    776c:	31400017 	ldw	r5,0(r6)
    7770:	2245883a 	add	r2,r4,r9
    7774:	1204703a 	and	r2,r2,r8
    7778:	0106303a 	nor	r3,zero,r4
    777c:	1886703a 	and	r3,r3,r2
    7780:	217ff626 	beq	r4,r5,775c <strcmp+0x50>
    7784:	3809883a 	mov	r4,r7
    7788:	300b883a 	mov	r5,r6
    778c:	20c00007 	ldb	r3,0(r4)
    7790:	1800051e 	bne	r3,zero,77a8 <strcmp+0x9c>
    7794:	00000606 	br	77b0 <strcmp+0xa4>
    7798:	21000044 	addi	r4,r4,1
    779c:	20c00007 	ldb	r3,0(r4)
    77a0:	29400044 	addi	r5,r5,1
    77a4:	18000226 	beq	r3,zero,77b0 <strcmp+0xa4>
    77a8:	28800007 	ldb	r2,0(r5)
    77ac:	18bffa26 	beq	r3,r2,7798 <strcmp+0x8c>
    77b0:	20c00003 	ldbu	r3,0(r4)
    77b4:	28800003 	ldbu	r2,0(r5)
    77b8:	1885c83a 	sub	r2,r3,r2
    77bc:	f800283a 	ret
    77c0:	0005883a 	mov	r2,zero
    77c4:	f800283a 	ret

000077c8 <_write_r>:
    77c8:	defffd04 	addi	sp,sp,-12
    77cc:	dc000015 	stw	r16,0(sp)
    77d0:	04000074 	movhi	r16,1
    77d4:	84026304 	addi	r16,r16,2444
    77d8:	dc400115 	stw	r17,4(sp)
    77dc:	80000015 	stw	zero,0(r16)
    77e0:	2023883a 	mov	r17,r4
    77e4:	2809883a 	mov	r4,r5
    77e8:	300b883a 	mov	r5,r6
    77ec:	380d883a 	mov	r6,r7
    77f0:	dfc00215 	stw	ra,8(sp)
    77f4:	000b03c0 	call	b03c <write>
    77f8:	1007883a 	mov	r3,r2
    77fc:	00bfffc4 	movi	r2,-1
    7800:	18800626 	beq	r3,r2,781c <_write_r+0x54>
    7804:	1805883a 	mov	r2,r3
    7808:	dfc00217 	ldw	ra,8(sp)
    780c:	dc400117 	ldw	r17,4(sp)
    7810:	dc000017 	ldw	r16,0(sp)
    7814:	dec00304 	addi	sp,sp,12
    7818:	f800283a 	ret
    781c:	80800017 	ldw	r2,0(r16)
    7820:	103ff826 	beq	r2,zero,7804 <_write_r+0x3c>
    7824:	88800015 	stw	r2,0(r17)
    7828:	1805883a 	mov	r2,r3
    782c:	dfc00217 	ldw	ra,8(sp)
    7830:	dc400117 	ldw	r17,4(sp)
    7834:	dc000017 	ldw	r16,0(sp)
    7838:	dec00304 	addi	sp,sp,12
    783c:	f800283a 	ret

00007840 <_calloc_r>:
    7840:	defffe04 	addi	sp,sp,-8
    7844:	dc400015 	stw	r17,0(sp)
    7848:	2023883a 	mov	r17,r4
    784c:	2809883a 	mov	r4,r5
    7850:	300b883a 	mov	r5,r6
    7854:	dfc00115 	stw	ra,4(sp)
    7858:	00007d80 	call	7d8 <__mulsi3>
    785c:	100b883a 	mov	r5,r2
    7860:	8809883a 	mov	r4,r17
    7864:	00008380 	call	838 <_malloc_r>
    7868:	1023883a 	mov	r17,r2
    786c:	01c00904 	movi	r7,36
    7870:	10000d26 	beq	r2,zero,78a8 <_calloc_r+0x68>
    7874:	10ffff17 	ldw	r3,-4(r2)
    7878:	1009883a 	mov	r4,r2
    787c:	00bfff04 	movi	r2,-4
    7880:	1886703a 	and	r3,r3,r2
    7884:	1887883a 	add	r3,r3,r2
    7888:	180d883a 	mov	r6,r3
    788c:	000b883a 	mov	r5,zero
    7890:	38c01736 	bltu	r7,r3,78f0 <_calloc_r+0xb0>
    7894:	008004c4 	movi	r2,19
    7898:	10c00836 	bltu	r2,r3,78bc <_calloc_r+0x7c>
    789c:	20000215 	stw	zero,8(r4)
    78a0:	20000015 	stw	zero,0(r4)
    78a4:	20000115 	stw	zero,4(r4)
    78a8:	8805883a 	mov	r2,r17
    78ac:	dfc00117 	ldw	ra,4(sp)
    78b0:	dc400017 	ldw	r17,0(sp)
    78b4:	dec00204 	addi	sp,sp,8
    78b8:	f800283a 	ret
    78bc:	008006c4 	movi	r2,27
    78c0:	88000015 	stw	zero,0(r17)
    78c4:	88000115 	stw	zero,4(r17)
    78c8:	89000204 	addi	r4,r17,8
    78cc:	10fff32e 	bgeu	r2,r3,789c <_calloc_r+0x5c>
    78d0:	88000215 	stw	zero,8(r17)
    78d4:	88000315 	stw	zero,12(r17)
    78d8:	89000404 	addi	r4,r17,16
    78dc:	19ffef1e 	bne	r3,r7,789c <_calloc_r+0x5c>
    78e0:	89000604 	addi	r4,r17,24
    78e4:	88000415 	stw	zero,16(r17)
    78e8:	88000515 	stw	zero,20(r17)
    78ec:	003feb06 	br	789c <_calloc_r+0x5c>
    78f0:	0005e380 	call	5e38 <memset>
    78f4:	8805883a 	mov	r2,r17
    78f8:	dfc00117 	ldw	ra,4(sp)
    78fc:	dc400017 	ldw	r17,0(sp)
    7900:	dec00204 	addi	sp,sp,8
    7904:	f800283a 	ret

00007908 <_close_r>:
    7908:	defffd04 	addi	sp,sp,-12
    790c:	dc000015 	stw	r16,0(sp)
    7910:	04000074 	movhi	r16,1
    7914:	84026304 	addi	r16,r16,2444
    7918:	dc400115 	stw	r17,4(sp)
    791c:	80000015 	stw	zero,0(r16)
    7920:	2023883a 	mov	r17,r4
    7924:	2809883a 	mov	r4,r5
    7928:	dfc00215 	stw	ra,8(sp)
    792c:	000a2740 	call	a274 <close>
    7930:	1007883a 	mov	r3,r2
    7934:	00bfffc4 	movi	r2,-1
    7938:	18800626 	beq	r3,r2,7954 <_close_r+0x4c>
    793c:	1805883a 	mov	r2,r3
    7940:	dfc00217 	ldw	ra,8(sp)
    7944:	dc400117 	ldw	r17,4(sp)
    7948:	dc000017 	ldw	r16,0(sp)
    794c:	dec00304 	addi	sp,sp,12
    7950:	f800283a 	ret
    7954:	80800017 	ldw	r2,0(r16)
    7958:	103ff826 	beq	r2,zero,793c <_close_r+0x34>
    795c:	88800015 	stw	r2,0(r17)
    7960:	1805883a 	mov	r2,r3
    7964:	dfc00217 	ldw	ra,8(sp)
    7968:	dc400117 	ldw	r17,4(sp)
    796c:	dc000017 	ldw	r16,0(sp)
    7970:	dec00304 	addi	sp,sp,12
    7974:	f800283a 	ret

00007978 <_fclose_r>:
    7978:	defffc04 	addi	sp,sp,-16
    797c:	dc400115 	stw	r17,4(sp)
    7980:	dc000015 	stw	r16,0(sp)
    7984:	dfc00315 	stw	ra,12(sp)
    7988:	dc800215 	stw	r18,8(sp)
    798c:	2821883a 	mov	r16,r5
    7990:	2023883a 	mov	r17,r4
    7994:	28002926 	beq	r5,zero,7a3c <_fclose_r+0xc4>
    7998:	0004c840 	call	4c84 <__sfp_lock_acquire>
    799c:	88000226 	beq	r17,zero,79a8 <_fclose_r+0x30>
    79a0:	88800e17 	ldw	r2,56(r17)
    79a4:	10002d26 	beq	r2,zero,7a5c <_fclose_r+0xe4>
    79a8:	8080030f 	ldh	r2,12(r16)
    79ac:	10002226 	beq	r2,zero,7a38 <_fclose_r+0xc0>
    79b0:	8809883a 	mov	r4,r17
    79b4:	800b883a 	mov	r5,r16
    79b8:	00049fc0 	call	49fc <_fflush_r>
    79bc:	1025883a 	mov	r18,r2
    79c0:	80800b17 	ldw	r2,44(r16)
    79c4:	10000426 	beq	r2,zero,79d8 <_fclose_r+0x60>
    79c8:	81400717 	ldw	r5,28(r16)
    79cc:	8809883a 	mov	r4,r17
    79d0:	103ee83a 	callr	r2
    79d4:	10002a16 	blt	r2,zero,7a80 <_fclose_r+0x108>
    79d8:	8080030b 	ldhu	r2,12(r16)
    79dc:	1080200c 	andi	r2,r2,128
    79e0:	1000231e 	bne	r2,zero,7a70 <_fclose_r+0xf8>
    79e4:	81400c17 	ldw	r5,48(r16)
    79e8:	28000526 	beq	r5,zero,7a00 <_fclose_r+0x88>
    79ec:	80801004 	addi	r2,r16,64
    79f0:	28800226 	beq	r5,r2,79fc <_fclose_r+0x84>
    79f4:	8809883a 	mov	r4,r17
    79f8:	000504c0 	call	504c <_free_r>
    79fc:	80000c15 	stw	zero,48(r16)
    7a00:	81401117 	ldw	r5,68(r16)
    7a04:	28000326 	beq	r5,zero,7a14 <_fclose_r+0x9c>
    7a08:	8809883a 	mov	r4,r17
    7a0c:	000504c0 	call	504c <_free_r>
    7a10:	80001115 	stw	zero,68(r16)
    7a14:	8000030d 	sth	zero,12(r16)
    7a18:	0004c880 	call	4c88 <__sfp_lock_release>
    7a1c:	9005883a 	mov	r2,r18
    7a20:	dfc00317 	ldw	ra,12(sp)
    7a24:	dc800217 	ldw	r18,8(sp)
    7a28:	dc400117 	ldw	r17,4(sp)
    7a2c:	dc000017 	ldw	r16,0(sp)
    7a30:	dec00404 	addi	sp,sp,16
    7a34:	f800283a 	ret
    7a38:	0004c880 	call	4c88 <__sfp_lock_release>
    7a3c:	0025883a 	mov	r18,zero
    7a40:	9005883a 	mov	r2,r18
    7a44:	dfc00317 	ldw	ra,12(sp)
    7a48:	dc800217 	ldw	r18,8(sp)
    7a4c:	dc400117 	ldw	r17,4(sp)
    7a50:	dc000017 	ldw	r16,0(sp)
    7a54:	dec00404 	addi	sp,sp,16
    7a58:	f800283a 	ret
    7a5c:	8809883a 	mov	r4,r17
    7a60:	0004c940 	call	4c94 <__sinit>
    7a64:	8080030f 	ldh	r2,12(r16)
    7a68:	103fd11e 	bne	r2,zero,79b0 <_fclose_r+0x38>
    7a6c:	003ff206 	br	7a38 <_fclose_r+0xc0>
    7a70:	81400417 	ldw	r5,16(r16)
    7a74:	8809883a 	mov	r4,r17
    7a78:	000504c0 	call	504c <_free_r>
    7a7c:	003fd906 	br	79e4 <_fclose_r+0x6c>
    7a80:	04bfffc4 	movi	r18,-1
    7a84:	003fd406 	br	79d8 <_fclose_r+0x60>

00007a88 <fclose>:
    7a88:	00800074 	movhi	r2,1
    7a8c:	10bbb804 	addi	r2,r2,-4384
    7a90:	200b883a 	mov	r5,r4
    7a94:	11000017 	ldw	r4,0(r2)
    7a98:	00079781 	jmpi	7978 <_fclose_r>

00007a9c <_fstat_r>:
    7a9c:	defffd04 	addi	sp,sp,-12
    7aa0:	dc000015 	stw	r16,0(sp)
    7aa4:	04000074 	movhi	r16,1
    7aa8:	84026304 	addi	r16,r16,2444
    7aac:	dc400115 	stw	r17,4(sp)
    7ab0:	80000015 	stw	zero,0(r16)
    7ab4:	2023883a 	mov	r17,r4
    7ab8:	2809883a 	mov	r4,r5
    7abc:	300b883a 	mov	r5,r6
    7ac0:	dfc00215 	stw	ra,8(sp)
    7ac4:	000a4000 	call	a400 <fstat>
    7ac8:	1007883a 	mov	r3,r2
    7acc:	00bfffc4 	movi	r2,-1
    7ad0:	18800626 	beq	r3,r2,7aec <_fstat_r+0x50>
    7ad4:	1805883a 	mov	r2,r3
    7ad8:	dfc00217 	ldw	ra,8(sp)
    7adc:	dc400117 	ldw	r17,4(sp)
    7ae0:	dc000017 	ldw	r16,0(sp)
    7ae4:	dec00304 	addi	sp,sp,12
    7ae8:	f800283a 	ret
    7aec:	80800017 	ldw	r2,0(r16)
    7af0:	103ff826 	beq	r2,zero,7ad4 <_fstat_r+0x38>
    7af4:	88800015 	stw	r2,0(r17)
    7af8:	1805883a 	mov	r2,r3
    7afc:	dfc00217 	ldw	ra,8(sp)
    7b00:	dc400117 	ldw	r17,4(sp)
    7b04:	dc000017 	ldw	r16,0(sp)
    7b08:	dec00304 	addi	sp,sp,12
    7b0c:	f800283a 	ret

00007b10 <_isatty_r>:
    7b10:	defffd04 	addi	sp,sp,-12
    7b14:	dc000015 	stw	r16,0(sp)
    7b18:	04000074 	movhi	r16,1
    7b1c:	84026304 	addi	r16,r16,2444
    7b20:	dc400115 	stw	r17,4(sp)
    7b24:	80000015 	stw	zero,0(r16)
    7b28:	2023883a 	mov	r17,r4
    7b2c:	2809883a 	mov	r4,r5
    7b30:	dfc00215 	stw	ra,8(sp)
    7b34:	000a5380 	call	a538 <isatty>
    7b38:	1007883a 	mov	r3,r2
    7b3c:	00bfffc4 	movi	r2,-1
    7b40:	18800626 	beq	r3,r2,7b5c <_isatty_r+0x4c>
    7b44:	1805883a 	mov	r2,r3
    7b48:	dfc00217 	ldw	ra,8(sp)
    7b4c:	dc400117 	ldw	r17,4(sp)
    7b50:	dc000017 	ldw	r16,0(sp)
    7b54:	dec00304 	addi	sp,sp,12
    7b58:	f800283a 	ret
    7b5c:	80800017 	ldw	r2,0(r16)
    7b60:	103ff826 	beq	r2,zero,7b44 <_isatty_r+0x34>
    7b64:	88800015 	stw	r2,0(r17)
    7b68:	1805883a 	mov	r2,r3
    7b6c:	dfc00217 	ldw	ra,8(sp)
    7b70:	dc400117 	ldw	r17,4(sp)
    7b74:	dc000017 	ldw	r16,0(sp)
    7b78:	dec00304 	addi	sp,sp,12
    7b7c:	f800283a 	ret

00007b80 <_lseek_r>:
    7b80:	defffd04 	addi	sp,sp,-12
    7b84:	dc000015 	stw	r16,0(sp)
    7b88:	04000074 	movhi	r16,1
    7b8c:	84026304 	addi	r16,r16,2444
    7b90:	dc400115 	stw	r17,4(sp)
    7b94:	80000015 	stw	zero,0(r16)
    7b98:	2023883a 	mov	r17,r4
    7b9c:	2809883a 	mov	r4,r5
    7ba0:	300b883a 	mov	r5,r6
    7ba4:	380d883a 	mov	r6,r7
    7ba8:	dfc00215 	stw	ra,8(sp)
    7bac:	000a7480 	call	a748 <lseek>
    7bb0:	1007883a 	mov	r3,r2
    7bb4:	00bfffc4 	movi	r2,-1
    7bb8:	18800626 	beq	r3,r2,7bd4 <_lseek_r+0x54>
    7bbc:	1805883a 	mov	r2,r3
    7bc0:	dfc00217 	ldw	ra,8(sp)
    7bc4:	dc400117 	ldw	r17,4(sp)
    7bc8:	dc000017 	ldw	r16,0(sp)
    7bcc:	dec00304 	addi	sp,sp,12
    7bd0:	f800283a 	ret
    7bd4:	80800017 	ldw	r2,0(r16)
    7bd8:	103ff826 	beq	r2,zero,7bbc <_lseek_r+0x3c>
    7bdc:	88800015 	stw	r2,0(r17)
    7be0:	1805883a 	mov	r2,r3
    7be4:	dfc00217 	ldw	ra,8(sp)
    7be8:	dc400117 	ldw	r17,4(sp)
    7bec:	dc000017 	ldw	r16,0(sp)
    7bf0:	dec00304 	addi	sp,sp,12
    7bf4:	f800283a 	ret

00007bf8 <_read_r>:
    7bf8:	defffd04 	addi	sp,sp,-12
    7bfc:	dc000015 	stw	r16,0(sp)
    7c00:	04000074 	movhi	r16,1
    7c04:	84026304 	addi	r16,r16,2444
    7c08:	dc400115 	stw	r17,4(sp)
    7c0c:	80000015 	stw	zero,0(r16)
    7c10:	2023883a 	mov	r17,r4
    7c14:	2809883a 	mov	r4,r5
    7c18:	300b883a 	mov	r5,r6
    7c1c:	380d883a 	mov	r6,r7
    7c20:	dfc00215 	stw	ra,8(sp)
    7c24:	000abe00 	call	abe0 <read>
    7c28:	1007883a 	mov	r3,r2
    7c2c:	00bfffc4 	movi	r2,-1
    7c30:	18800626 	beq	r3,r2,7c4c <_read_r+0x54>
    7c34:	1805883a 	mov	r2,r3
    7c38:	dfc00217 	ldw	ra,8(sp)
    7c3c:	dc400117 	ldw	r17,4(sp)
    7c40:	dc000017 	ldw	r16,0(sp)
    7c44:	dec00304 	addi	sp,sp,12
    7c48:	f800283a 	ret
    7c4c:	80800017 	ldw	r2,0(r16)
    7c50:	103ff826 	beq	r2,zero,7c34 <_read_r+0x3c>
    7c54:	88800015 	stw	r2,0(r17)
    7c58:	1805883a 	mov	r2,r3
    7c5c:	dfc00217 	ldw	ra,8(sp)
    7c60:	dc400117 	ldw	r17,4(sp)
    7c64:	dc000017 	ldw	r16,0(sp)
    7c68:	dec00304 	addi	sp,sp,12
    7c6c:	f800283a 	ret

00007c70 <__udivdi3>:
    7c70:	defff104 	addi	sp,sp,-60
    7c74:	0015883a 	mov	r10,zero
    7c78:	2005883a 	mov	r2,r4
    7c7c:	3011883a 	mov	r8,r6
    7c80:	df000d15 	stw	fp,52(sp)
    7c84:	dd400a15 	stw	r21,40(sp)
    7c88:	dcc00815 	stw	r19,32(sp)
    7c8c:	dfc00e15 	stw	ra,56(sp)
    7c90:	ddc00c15 	stw	r23,48(sp)
    7c94:	dd800b15 	stw	r22,44(sp)
    7c98:	dd000915 	stw	r20,36(sp)
    7c9c:	dc800715 	stw	r18,28(sp)
    7ca0:	dc400615 	stw	r17,24(sp)
    7ca4:	dc000515 	stw	r16,20(sp)
    7ca8:	da800315 	stw	r10,12(sp)
    7cac:	4027883a 	mov	r19,r8
    7cb0:	1039883a 	mov	fp,r2
    7cb4:	282b883a 	mov	r21,r5
    7cb8:	da800415 	stw	r10,16(sp)
    7cbc:	3800401e 	bne	r7,zero,7dc0 <__udivdi3+0x150>
    7cc0:	2a006536 	bltu	r5,r8,7e58 <__udivdi3+0x1e8>
    7cc4:	4000b526 	beq	r8,zero,7f9c <__udivdi3+0x32c>
    7cc8:	00bfffd4 	movui	r2,65535
    7ccc:	14c0ad36 	bltu	r2,r19,7f84 <__udivdi3+0x314>
    7cd0:	00803fc4 	movi	r2,255
    7cd4:	14c15e36 	bltu	r2,r19,8250 <__udivdi3+0x5e0>
    7cd8:	000b883a 	mov	r5,zero
    7cdc:	0005883a 	mov	r2,zero
    7ce0:	9884d83a 	srl	r2,r19,r2
    7ce4:	01000074 	movhi	r4,1
    7ce8:	2134e404 	addi	r4,r4,-11376
    7cec:	01800804 	movi	r6,32
    7cf0:	1105883a 	add	r2,r2,r4
    7cf4:	10c00003 	ldbu	r3,0(r2)
    7cf8:	28c7883a 	add	r3,r5,r3
    7cfc:	30e9c83a 	sub	r20,r6,r3
    7d00:	a0010a1e 	bne	r20,zero,812c <__udivdi3+0x4bc>
    7d04:	982ed43a 	srli	r23,r19,16
    7d08:	acebc83a 	sub	r21,r21,r19
    7d0c:	9dbfffcc 	andi	r22,r19,65535
    7d10:	05000044 	movi	r20,1
    7d14:	a809883a 	mov	r4,r21
    7d18:	b80b883a 	mov	r5,r23
    7d1c:	00007c80 	call	7c8 <__udivsi3>
    7d20:	100b883a 	mov	r5,r2
    7d24:	b009883a 	mov	r4,r22
    7d28:	1021883a 	mov	r16,r2
    7d2c:	00007d80 	call	7d8 <__mulsi3>
    7d30:	a809883a 	mov	r4,r21
    7d34:	b80b883a 	mov	r5,r23
    7d38:	1023883a 	mov	r17,r2
    7d3c:	00007d00 	call	7d0 <__umodsi3>
    7d40:	1004943a 	slli	r2,r2,16
    7d44:	e006d43a 	srli	r3,fp,16
    7d48:	10c4b03a 	or	r2,r2,r3
    7d4c:	1440042e 	bgeu	r2,r17,7d60 <__udivdi3+0xf0>
    7d50:	14c5883a 	add	r2,r2,r19
    7d54:	843fffc4 	addi	r16,r16,-1
    7d58:	14c00136 	bltu	r2,r19,7d60 <__udivdi3+0xf0>
    7d5c:	14415c36 	bltu	r2,r17,82d0 <__udivdi3+0x660>
    7d60:	1463c83a 	sub	r17,r2,r17
    7d64:	8809883a 	mov	r4,r17
    7d68:	b80b883a 	mov	r5,r23
    7d6c:	00007c80 	call	7c8 <__udivsi3>
    7d70:	100b883a 	mov	r5,r2
    7d74:	b009883a 	mov	r4,r22
    7d78:	102b883a 	mov	r21,r2
    7d7c:	00007d80 	call	7d8 <__mulsi3>
    7d80:	8809883a 	mov	r4,r17
    7d84:	b80b883a 	mov	r5,r23
    7d88:	1025883a 	mov	r18,r2
    7d8c:	00007d00 	call	7d0 <__umodsi3>
    7d90:	1004943a 	slli	r2,r2,16
    7d94:	e0ffffcc 	andi	r3,fp,65535
    7d98:	10c4b03a 	or	r2,r2,r3
    7d9c:	1480042e 	bgeu	r2,r18,7db0 <__udivdi3+0x140>
    7da0:	9885883a 	add	r2,r19,r2
    7da4:	ad7fffc4 	addi	r21,r21,-1
    7da8:	14c00136 	bltu	r2,r19,7db0 <__udivdi3+0x140>
    7dac:	14813c36 	bltu	r2,r18,82a0 <__udivdi3+0x630>
    7db0:	8004943a 	slli	r2,r16,16
    7db4:	a009883a 	mov	r4,r20
    7db8:	a884b03a 	or	r2,r21,r2
    7dbc:	00001506 	br	7e14 <__udivdi3+0x1a4>
    7dc0:	380d883a 	mov	r6,r7
    7dc4:	29c06c36 	bltu	r5,r7,7f78 <__udivdi3+0x308>
    7dc8:	00bfffd4 	movui	r2,65535
    7dcc:	11c06436 	bltu	r2,r7,7f60 <__udivdi3+0x2f0>
    7dd0:	00803fc4 	movi	r2,255
    7dd4:	11c11836 	bltu	r2,r7,8238 <__udivdi3+0x5c8>
    7dd8:	000b883a 	mov	r5,zero
    7ddc:	0005883a 	mov	r2,zero
    7de0:	3084d83a 	srl	r2,r6,r2
    7de4:	01000074 	movhi	r4,1
    7de8:	2134e404 	addi	r4,r4,-11376
    7dec:	01c00804 	movi	r7,32
    7df0:	1105883a 	add	r2,r2,r4
    7df4:	10c00003 	ldbu	r3,0(r2)
    7df8:	28c7883a 	add	r3,r5,r3
    7dfc:	38edc83a 	sub	r22,r7,r3
    7e00:	b000731e 	bne	r22,zero,7fd0 <__udivdi3+0x360>
    7e04:	35400136 	bltu	r6,r21,7e0c <__udivdi3+0x19c>
    7e08:	e4c05b36 	bltu	fp,r19,7f78 <__udivdi3+0x308>
    7e0c:	00800044 	movi	r2,1
    7e10:	0009883a 	mov	r4,zero
    7e14:	d8800315 	stw	r2,12(sp)
    7e18:	d9400317 	ldw	r5,12(sp)
    7e1c:	2007883a 	mov	r3,r4
    7e20:	d9000415 	stw	r4,16(sp)
    7e24:	2805883a 	mov	r2,r5
    7e28:	dfc00e17 	ldw	ra,56(sp)
    7e2c:	df000d17 	ldw	fp,52(sp)
    7e30:	ddc00c17 	ldw	r23,48(sp)
    7e34:	dd800b17 	ldw	r22,44(sp)
    7e38:	dd400a17 	ldw	r21,40(sp)
    7e3c:	dd000917 	ldw	r20,36(sp)
    7e40:	dcc00817 	ldw	r19,32(sp)
    7e44:	dc800717 	ldw	r18,28(sp)
    7e48:	dc400617 	ldw	r17,24(sp)
    7e4c:	dc000517 	ldw	r16,20(sp)
    7e50:	dec00f04 	addi	sp,sp,60
    7e54:	f800283a 	ret
    7e58:	00bfffd4 	movui	r2,65535
    7e5c:	12005636 	bltu	r2,r8,7fb8 <__udivdi3+0x348>
    7e60:	00803fc4 	movi	r2,255
    7e64:	12010036 	bltu	r2,r8,8268 <__udivdi3+0x5f8>
    7e68:	000b883a 	mov	r5,zero
    7e6c:	0005883a 	mov	r2,zero
    7e70:	9884d83a 	srl	r2,r19,r2
    7e74:	01000074 	movhi	r4,1
    7e78:	2134e404 	addi	r4,r4,-11376
    7e7c:	01800804 	movi	r6,32
    7e80:	1105883a 	add	r2,r2,r4
    7e84:	10c00003 	ldbu	r3,0(r2)
    7e88:	28c7883a 	add	r3,r5,r3
    7e8c:	30cbc83a 	sub	r5,r6,r3
    7e90:	28000626 	beq	r5,zero,7eac <__udivdi3+0x23c>
    7e94:	3145c83a 	sub	r2,r6,r5
    7e98:	e084d83a 	srl	r2,fp,r2
    7e9c:	a946983a 	sll	r3,r21,r5
    7ea0:	e178983a 	sll	fp,fp,r5
    7ea4:	9966983a 	sll	r19,r19,r5
    7ea8:	18aab03a 	or	r21,r3,r2
    7eac:	982ed43a 	srli	r23,r19,16
    7eb0:	a809883a 	mov	r4,r21
    7eb4:	9cbfffcc 	andi	r18,r19,65535
    7eb8:	b80b883a 	mov	r5,r23
    7ebc:	00007c80 	call	7c8 <__udivsi3>
    7ec0:	100b883a 	mov	r5,r2
    7ec4:	9009883a 	mov	r4,r18
    7ec8:	1021883a 	mov	r16,r2
    7ecc:	00007d80 	call	7d8 <__mulsi3>
    7ed0:	a809883a 	mov	r4,r21
    7ed4:	b80b883a 	mov	r5,r23
    7ed8:	1023883a 	mov	r17,r2
    7edc:	00007d00 	call	7d0 <__umodsi3>
    7ee0:	1004943a 	slli	r2,r2,16
    7ee4:	e006d43a 	srli	r3,fp,16
    7ee8:	10c4b03a 	or	r2,r2,r3
    7eec:	1440042e 	bgeu	r2,r17,7f00 <__udivdi3+0x290>
    7ef0:	14c5883a 	add	r2,r2,r19
    7ef4:	843fffc4 	addi	r16,r16,-1
    7ef8:	14c00136 	bltu	r2,r19,7f00 <__udivdi3+0x290>
    7efc:	1440ea36 	bltu	r2,r17,82a8 <__udivdi3+0x638>
    7f00:	1463c83a 	sub	r17,r2,r17
    7f04:	8809883a 	mov	r4,r17
    7f08:	b80b883a 	mov	r5,r23
    7f0c:	00007c80 	call	7c8 <__udivsi3>
    7f10:	100b883a 	mov	r5,r2
    7f14:	9009883a 	mov	r4,r18
    7f18:	102b883a 	mov	r21,r2
    7f1c:	00007d80 	call	7d8 <__mulsi3>
    7f20:	8809883a 	mov	r4,r17
    7f24:	b80b883a 	mov	r5,r23
    7f28:	1025883a 	mov	r18,r2
    7f2c:	00007d00 	call	7d0 <__umodsi3>
    7f30:	1004943a 	slli	r2,r2,16
    7f34:	e0ffffcc 	andi	r3,fp,65535
    7f38:	10c4b03a 	or	r2,r2,r3
    7f3c:	1480042e 	bgeu	r2,r18,7f50 <__udivdi3+0x2e0>
    7f40:	9885883a 	add	r2,r19,r2
    7f44:	ad7fffc4 	addi	r21,r21,-1
    7f48:	14c00136 	bltu	r2,r19,7f50 <__udivdi3+0x2e0>
    7f4c:	1480d936 	bltu	r2,r18,82b4 <__udivdi3+0x644>
    7f50:	8004943a 	slli	r2,r16,16
    7f54:	0009883a 	mov	r4,zero
    7f58:	a884b03a 	or	r2,r21,r2
    7f5c:	003fad06 	br	7e14 <__udivdi3+0x1a4>
    7f60:	00804034 	movhi	r2,256
    7f64:	10bfffc4 	addi	r2,r2,-1
    7f68:	11c0b636 	bltu	r2,r7,8244 <__udivdi3+0x5d4>
    7f6c:	01400404 	movi	r5,16
    7f70:	2805883a 	mov	r2,r5
    7f74:	003f9a06 	br	7de0 <__udivdi3+0x170>
    7f78:	0005883a 	mov	r2,zero
    7f7c:	0009883a 	mov	r4,zero
    7f80:	003fa406 	br	7e14 <__udivdi3+0x1a4>
    7f84:	00804034 	movhi	r2,256
    7f88:	10bfffc4 	addi	r2,r2,-1
    7f8c:	14c0b336 	bltu	r2,r19,825c <__udivdi3+0x5ec>
    7f90:	01400404 	movi	r5,16
    7f94:	2805883a 	mov	r2,r5
    7f98:	003f5106 	br	7ce0 <__udivdi3+0x70>
    7f9c:	01000044 	movi	r4,1
    7fa0:	000b883a 	mov	r5,zero
    7fa4:	00007c80 	call	7c8 <__udivsi3>
    7fa8:	1027883a 	mov	r19,r2
    7fac:	00bfffd4 	movui	r2,65535
    7fb0:	14fff436 	bltu	r2,r19,7f84 <__udivdi3+0x314>
    7fb4:	003f4606 	br	7cd0 <__udivdi3+0x60>
    7fb8:	00804034 	movhi	r2,256
    7fbc:	10bfffc4 	addi	r2,r2,-1
    7fc0:	1200ac36 	bltu	r2,r8,8274 <__udivdi3+0x604>
    7fc4:	01400404 	movi	r5,16
    7fc8:	2805883a 	mov	r2,r5
    7fcc:	003fa806 	br	7e70 <__udivdi3+0x200>
    7fd0:	3d85c83a 	sub	r2,r7,r22
    7fd4:	3588983a 	sll	r4,r6,r22
    7fd8:	9886d83a 	srl	r3,r19,r2
    7fdc:	a8a2d83a 	srl	r17,r21,r2
    7fe0:	e084d83a 	srl	r2,fp,r2
    7fe4:	20eeb03a 	or	r23,r4,r3
    7fe8:	b824d43a 	srli	r18,r23,16
    7fec:	ad86983a 	sll	r3,r21,r22
    7ff0:	8809883a 	mov	r4,r17
    7ff4:	900b883a 	mov	r5,r18
    7ff8:	1886b03a 	or	r3,r3,r2
    7ffc:	d8c00115 	stw	r3,4(sp)
    8000:	bc3fffcc 	andi	r16,r23,65535
    8004:	00007c80 	call	7c8 <__udivsi3>
    8008:	100b883a 	mov	r5,r2
    800c:	8009883a 	mov	r4,r16
    8010:	1029883a 	mov	r20,r2
    8014:	00007d80 	call	7d8 <__mulsi3>
    8018:	900b883a 	mov	r5,r18
    801c:	8809883a 	mov	r4,r17
    8020:	102b883a 	mov	r21,r2
    8024:	00007d00 	call	7d0 <__umodsi3>
    8028:	d9400117 	ldw	r5,4(sp)
    802c:	1004943a 	slli	r2,r2,16
    8030:	9da6983a 	sll	r19,r19,r22
    8034:	2806d43a 	srli	r3,r5,16
    8038:	10c4b03a 	or	r2,r2,r3
    803c:	1540032e 	bgeu	r2,r21,804c <__udivdi3+0x3dc>
    8040:	15c5883a 	add	r2,r2,r23
    8044:	a53fffc4 	addi	r20,r20,-1
    8048:	15c0912e 	bgeu	r2,r23,8290 <__udivdi3+0x620>
    804c:	1563c83a 	sub	r17,r2,r21
    8050:	8809883a 	mov	r4,r17
    8054:	900b883a 	mov	r5,r18
    8058:	00007c80 	call	7c8 <__udivsi3>
    805c:	100b883a 	mov	r5,r2
    8060:	8009883a 	mov	r4,r16
    8064:	102b883a 	mov	r21,r2
    8068:	00007d80 	call	7d8 <__mulsi3>
    806c:	8809883a 	mov	r4,r17
    8070:	900b883a 	mov	r5,r18
    8074:	1021883a 	mov	r16,r2
    8078:	00007d00 	call	7d0 <__umodsi3>
    807c:	da800117 	ldw	r10,4(sp)
    8080:	1004943a 	slli	r2,r2,16
    8084:	50ffffcc 	andi	r3,r10,65535
    8088:	10c6b03a 	or	r3,r2,r3
    808c:	1c00032e 	bgeu	r3,r16,809c <__udivdi3+0x42c>
    8090:	1dc7883a 	add	r3,r3,r23
    8094:	ad7fffc4 	addi	r21,r21,-1
    8098:	1dc0792e 	bgeu	r3,r23,8280 <__udivdi3+0x610>
    809c:	a004943a 	slli	r2,r20,16
    80a0:	982ed43a 	srli	r23,r19,16
    80a4:	9cffffcc 	andi	r19,r19,65535
    80a8:	a8a4b03a 	or	r18,r21,r2
    80ac:	947fffcc 	andi	r17,r18,65535
    80b0:	902ad43a 	srli	r21,r18,16
    80b4:	8809883a 	mov	r4,r17
    80b8:	980b883a 	mov	r5,r19
    80bc:	1c21c83a 	sub	r16,r3,r16
    80c0:	00007d80 	call	7d8 <__mulsi3>
    80c4:	8809883a 	mov	r4,r17
    80c8:	b80b883a 	mov	r5,r23
    80cc:	1029883a 	mov	r20,r2
    80d0:	00007d80 	call	7d8 <__mulsi3>
    80d4:	980b883a 	mov	r5,r19
    80d8:	a809883a 	mov	r4,r21
    80dc:	1023883a 	mov	r17,r2
    80e0:	00007d80 	call	7d8 <__mulsi3>
    80e4:	a809883a 	mov	r4,r21
    80e8:	b80b883a 	mov	r5,r23
    80ec:	1027883a 	mov	r19,r2
    80f0:	00007d80 	call	7d8 <__mulsi3>
    80f4:	1009883a 	mov	r4,r2
    80f8:	a004d43a 	srli	r2,r20,16
    80fc:	8ce3883a 	add	r17,r17,r19
    8100:	1447883a 	add	r3,r2,r17
    8104:	1cc0022e 	bgeu	r3,r19,8110 <__udivdi3+0x4a0>
    8108:	00800074 	movhi	r2,1
    810c:	2089883a 	add	r4,r4,r2
    8110:	1804d43a 	srli	r2,r3,16
    8114:	2085883a 	add	r2,r4,r2
    8118:	80804436 	bltu	r16,r2,822c <__udivdi3+0x5bc>
    811c:	80803e26 	beq	r16,r2,8218 <__udivdi3+0x5a8>
    8120:	9005883a 	mov	r2,r18
    8124:	0009883a 	mov	r4,zero
    8128:	003f3a06 	br	7e14 <__udivdi3+0x1a4>
    812c:	9d26983a 	sll	r19,r19,r20
    8130:	3505c83a 	sub	r2,r6,r20
    8134:	a8a2d83a 	srl	r17,r21,r2
    8138:	982ed43a 	srli	r23,r19,16
    813c:	e084d83a 	srl	r2,fp,r2
    8140:	ad06983a 	sll	r3,r21,r20
    8144:	8809883a 	mov	r4,r17
    8148:	b80b883a 	mov	r5,r23
    814c:	1886b03a 	or	r3,r3,r2
    8150:	d8c00015 	stw	r3,0(sp)
    8154:	9dbfffcc 	andi	r22,r19,65535
    8158:	00007c80 	call	7c8 <__udivsi3>
    815c:	100b883a 	mov	r5,r2
    8160:	b009883a 	mov	r4,r22
    8164:	d8800215 	stw	r2,8(sp)
    8168:	00007d80 	call	7d8 <__mulsi3>
    816c:	8809883a 	mov	r4,r17
    8170:	b80b883a 	mov	r5,r23
    8174:	102b883a 	mov	r21,r2
    8178:	00007d00 	call	7d0 <__umodsi3>
    817c:	d9000017 	ldw	r4,0(sp)
    8180:	1004943a 	slli	r2,r2,16
    8184:	2006d43a 	srli	r3,r4,16
    8188:	10c4b03a 	or	r2,r2,r3
    818c:	1540052e 	bgeu	r2,r21,81a4 <__udivdi3+0x534>
    8190:	d9400217 	ldw	r5,8(sp)
    8194:	14c5883a 	add	r2,r2,r19
    8198:	297fffc4 	addi	r5,r5,-1
    819c:	d9400215 	stw	r5,8(sp)
    81a0:	14c0462e 	bgeu	r2,r19,82bc <__udivdi3+0x64c>
    81a4:	1563c83a 	sub	r17,r2,r21
    81a8:	8809883a 	mov	r4,r17
    81ac:	b80b883a 	mov	r5,r23
    81b0:	00007c80 	call	7c8 <__udivsi3>
    81b4:	100b883a 	mov	r5,r2
    81b8:	b009883a 	mov	r4,r22
    81bc:	1025883a 	mov	r18,r2
    81c0:	00007d80 	call	7d8 <__mulsi3>
    81c4:	8809883a 	mov	r4,r17
    81c8:	b80b883a 	mov	r5,r23
    81cc:	1021883a 	mov	r16,r2
    81d0:	00007d00 	call	7d0 <__umodsi3>
    81d4:	da800017 	ldw	r10,0(sp)
    81d8:	1004943a 	slli	r2,r2,16
    81dc:	50ffffcc 	andi	r3,r10,65535
    81e0:	10c6b03a 	or	r3,r2,r3
    81e4:	1c00062e 	bgeu	r3,r16,8200 <__udivdi3+0x590>
    81e8:	1cc7883a 	add	r3,r3,r19
    81ec:	94bfffc4 	addi	r18,r18,-1
    81f0:	1cc00336 	bltu	r3,r19,8200 <__udivdi3+0x590>
    81f4:	1c00022e 	bgeu	r3,r16,8200 <__udivdi3+0x590>
    81f8:	94bfffc4 	addi	r18,r18,-1
    81fc:	1cc7883a 	add	r3,r3,r19
    8200:	d9000217 	ldw	r4,8(sp)
    8204:	e538983a 	sll	fp,fp,r20
    8208:	1c2bc83a 	sub	r21,r3,r16
    820c:	2004943a 	slli	r2,r4,16
    8210:	90a8b03a 	or	r20,r18,r2
    8214:	003ebf06 	br	7d14 <__udivdi3+0xa4>
    8218:	1804943a 	slli	r2,r3,16
    821c:	e588983a 	sll	r4,fp,r22
    8220:	a0ffffcc 	andi	r3,r20,65535
    8224:	10c5883a 	add	r2,r2,r3
    8228:	20bfbd2e 	bgeu	r4,r2,8120 <__udivdi3+0x4b0>
    822c:	90bfffc4 	addi	r2,r18,-1
    8230:	0009883a 	mov	r4,zero
    8234:	003ef706 	br	7e14 <__udivdi3+0x1a4>
    8238:	01400204 	movi	r5,8
    823c:	2805883a 	mov	r2,r5
    8240:	003ee706 	br	7de0 <__udivdi3+0x170>
    8244:	01400604 	movi	r5,24
    8248:	2805883a 	mov	r2,r5
    824c:	003ee406 	br	7de0 <__udivdi3+0x170>
    8250:	01400204 	movi	r5,8
    8254:	2805883a 	mov	r2,r5
    8258:	003ea106 	br	7ce0 <__udivdi3+0x70>
    825c:	01400604 	movi	r5,24
    8260:	2805883a 	mov	r2,r5
    8264:	003e9e06 	br	7ce0 <__udivdi3+0x70>
    8268:	01400204 	movi	r5,8
    826c:	2805883a 	mov	r2,r5
    8270:	003eff06 	br	7e70 <__udivdi3+0x200>
    8274:	01400604 	movi	r5,24
    8278:	2805883a 	mov	r2,r5
    827c:	003efc06 	br	7e70 <__udivdi3+0x200>
    8280:	1c3f862e 	bgeu	r3,r16,809c <__udivdi3+0x42c>
    8284:	1dc7883a 	add	r3,r3,r23
    8288:	ad7fffc4 	addi	r21,r21,-1
    828c:	003f8306 	br	809c <__udivdi3+0x42c>
    8290:	157f6e2e 	bgeu	r2,r21,804c <__udivdi3+0x3dc>
    8294:	a53fffc4 	addi	r20,r20,-1
    8298:	15c5883a 	add	r2,r2,r23
    829c:	003f6b06 	br	804c <__udivdi3+0x3dc>
    82a0:	ad7fffc4 	addi	r21,r21,-1
    82a4:	003ec206 	br	7db0 <__udivdi3+0x140>
    82a8:	843fffc4 	addi	r16,r16,-1
    82ac:	14c5883a 	add	r2,r2,r19
    82b0:	003f1306 	br	7f00 <__udivdi3+0x290>
    82b4:	ad7fffc4 	addi	r21,r21,-1
    82b8:	003f2506 	br	7f50 <__udivdi3+0x2e0>
    82bc:	157fb92e 	bgeu	r2,r21,81a4 <__udivdi3+0x534>
    82c0:	297fffc4 	addi	r5,r5,-1
    82c4:	14c5883a 	add	r2,r2,r19
    82c8:	d9400215 	stw	r5,8(sp)
    82cc:	003fb506 	br	81a4 <__udivdi3+0x534>
    82d0:	843fffc4 	addi	r16,r16,-1
    82d4:	14c5883a 	add	r2,r2,r19
    82d8:	003ea106 	br	7d60 <__udivdi3+0xf0>

000082dc <__umoddi3>:
    82dc:	defff004 	addi	sp,sp,-64
    82e0:	3011883a 	mov	r8,r6
    82e4:	000d883a 	mov	r6,zero
    82e8:	dd400b15 	stw	r21,44(sp)
    82ec:	dcc00915 	stw	r19,36(sp)
    82f0:	dc000615 	stw	r16,24(sp)
    82f4:	dfc00f15 	stw	ra,60(sp)
    82f8:	df000e15 	stw	fp,56(sp)
    82fc:	ddc00d15 	stw	r23,52(sp)
    8300:	dd800c15 	stw	r22,48(sp)
    8304:	dd000a15 	stw	r20,40(sp)
    8308:	dc800815 	stw	r18,32(sp)
    830c:	dc400715 	stw	r17,28(sp)
    8310:	2817883a 	mov	r11,r5
    8314:	d9800415 	stw	r6,16(sp)
    8318:	4027883a 	mov	r19,r8
    831c:	d9800515 	stw	r6,20(sp)
    8320:	2021883a 	mov	r16,r4
    8324:	282b883a 	mov	r21,r5
    8328:	38002c1e 	bne	r7,zero,83dc <__umoddi3+0x100>
    832c:	2a005636 	bltu	r5,r8,8488 <__umoddi3+0x1ac>
    8330:	40009a26 	beq	r8,zero,859c <__umoddi3+0x2c0>
    8334:	00bfffd4 	movui	r2,65535
    8338:	14c09236 	bltu	r2,r19,8584 <__umoddi3+0x2a8>
    833c:	00803fc4 	movi	r2,255
    8340:	14c15c36 	bltu	r2,r19,88b4 <__umoddi3+0x5d8>
    8344:	000b883a 	mov	r5,zero
    8348:	0005883a 	mov	r2,zero
    834c:	9884d83a 	srl	r2,r19,r2
    8350:	01000074 	movhi	r4,1
    8354:	2134e404 	addi	r4,r4,-11376
    8358:	01800804 	movi	r6,32
    835c:	1105883a 	add	r2,r2,r4
    8360:	10c00003 	ldbu	r3,0(r2)
    8364:	28c7883a 	add	r3,r5,r3
    8368:	30e5c83a 	sub	r18,r6,r3
    836c:	9000a41e 	bne	r18,zero,8600 <__umoddi3+0x324>
    8370:	982ed43a 	srli	r23,r19,16
    8374:	acebc83a 	sub	r21,r21,r19
    8378:	9d3fffcc 	andi	r20,r19,65535
    837c:	002d883a 	mov	r22,zero
    8380:	a809883a 	mov	r4,r21
    8384:	b80b883a 	mov	r5,r23
    8388:	00007c80 	call	7c8 <__udivsi3>
    838c:	100b883a 	mov	r5,r2
    8390:	a009883a 	mov	r4,r20
    8394:	00007d80 	call	7d8 <__mulsi3>
    8398:	a809883a 	mov	r4,r21
    839c:	b80b883a 	mov	r5,r23
    83a0:	1023883a 	mov	r17,r2
    83a4:	00007d00 	call	7d0 <__umodsi3>
    83a8:	1004943a 	slli	r2,r2,16
    83ac:	8006d43a 	srli	r3,r16,16
    83b0:	10c4b03a 	or	r2,r2,r3
    83b4:	1440032e 	bgeu	r2,r17,83c4 <__umoddi3+0xe8>
    83b8:	14c5883a 	add	r2,r2,r19
    83bc:	14c00136 	bltu	r2,r19,83c4 <__umoddi3+0xe8>
    83c0:	14415836 	bltu	r2,r17,8924 <__umoddi3+0x648>
    83c4:	1463c83a 	sub	r17,r2,r17
    83c8:	8809883a 	mov	r4,r17
    83cc:	b80b883a 	mov	r5,r23
    83d0:	00007c80 	call	7c8 <__udivsi3>
    83d4:	a009883a 	mov	r4,r20
    83d8:	00005306 	br	8528 <__umoddi3+0x24c>
    83dc:	380d883a 	mov	r6,r7
    83e0:	29c0132e 	bgeu	r5,r7,8430 <__umoddi3+0x154>
    83e4:	d9000415 	stw	r4,16(sp)
    83e8:	d9400515 	stw	r5,20(sp)
    83ec:	d9400417 	ldw	r5,16(sp)
    83f0:	5813883a 	mov	r9,r11
    83f4:	2811883a 	mov	r8,r5
    83f8:	4005883a 	mov	r2,r8
    83fc:	4807883a 	mov	r3,r9
    8400:	dfc00f17 	ldw	ra,60(sp)
    8404:	df000e17 	ldw	fp,56(sp)
    8408:	ddc00d17 	ldw	r23,52(sp)
    840c:	dd800c17 	ldw	r22,48(sp)
    8410:	dd400b17 	ldw	r21,44(sp)
    8414:	dd000a17 	ldw	r20,40(sp)
    8418:	dcc00917 	ldw	r19,36(sp)
    841c:	dc800817 	ldw	r18,32(sp)
    8420:	dc400717 	ldw	r17,28(sp)
    8424:	dc000617 	ldw	r16,24(sp)
    8428:	dec01004 	addi	sp,sp,64
    842c:	f800283a 	ret
    8430:	00bfffd4 	movui	r2,65535
    8434:	11c06636 	bltu	r2,r7,85d0 <__umoddi3+0x2f4>
    8438:	00803fc4 	movi	r2,255
    843c:	11c12036 	bltu	r2,r7,88c0 <__umoddi3+0x5e4>
    8440:	000b883a 	mov	r5,zero
    8444:	0005883a 	mov	r2,zero
    8448:	3084d83a 	srl	r2,r6,r2
    844c:	01000074 	movhi	r4,1
    8450:	2134e404 	addi	r4,r4,-11376
    8454:	01c00804 	movi	r7,32
    8458:	1105883a 	add	r2,r2,r4
    845c:	10c00003 	ldbu	r3,0(r2)
    8460:	28c7883a 	add	r3,r5,r3
    8464:	38e5c83a 	sub	r18,r7,r3
    8468:	9000941e 	bne	r18,zero,86bc <__umoddi3+0x3e0>
    846c:	35405e36 	bltu	r6,r21,85e8 <__umoddi3+0x30c>
    8470:	84c05d2e 	bgeu	r16,r19,85e8 <__umoddi3+0x30c>
    8474:	8011883a 	mov	r8,r16
    8478:	a813883a 	mov	r9,r21
    847c:	dc000415 	stw	r16,16(sp)
    8480:	dd400515 	stw	r21,20(sp)
    8484:	003fdc06 	br	83f8 <__umoddi3+0x11c>
    8488:	00bfffd4 	movui	r2,65535
    848c:	12004a36 	bltu	r2,r8,85b8 <__umoddi3+0x2dc>
    8490:	00803fc4 	movi	r2,255
    8494:	12010d36 	bltu	r2,r8,88cc <__umoddi3+0x5f0>
    8498:	000b883a 	mov	r5,zero
    849c:	0005883a 	mov	r2,zero
    84a0:	9884d83a 	srl	r2,r19,r2
    84a4:	01000074 	movhi	r4,1
    84a8:	2134e404 	addi	r4,r4,-11376
    84ac:	01800804 	movi	r6,32
    84b0:	1105883a 	add	r2,r2,r4
    84b4:	10c00003 	ldbu	r3,0(r2)
    84b8:	28c7883a 	add	r3,r5,r3
    84bc:	30c7c83a 	sub	r3,r6,r3
    84c0:	1800dc1e 	bne	r3,zero,8834 <__umoddi3+0x558>
    84c4:	002d883a 	mov	r22,zero
    84c8:	982ed43a 	srli	r23,r19,16
    84cc:	a809883a 	mov	r4,r21
    84d0:	9cbfffcc 	andi	r18,r19,65535
    84d4:	b80b883a 	mov	r5,r23
    84d8:	00007c80 	call	7c8 <__udivsi3>
    84dc:	100b883a 	mov	r5,r2
    84e0:	9009883a 	mov	r4,r18
    84e4:	00007d80 	call	7d8 <__mulsi3>
    84e8:	a809883a 	mov	r4,r21
    84ec:	b80b883a 	mov	r5,r23
    84f0:	1023883a 	mov	r17,r2
    84f4:	00007d00 	call	7d0 <__umodsi3>
    84f8:	1004943a 	slli	r2,r2,16
    84fc:	8006d43a 	srli	r3,r16,16
    8500:	10c4b03a 	or	r2,r2,r3
    8504:	1440032e 	bgeu	r2,r17,8514 <__umoddi3+0x238>
    8508:	14c5883a 	add	r2,r2,r19
    850c:	14c00136 	bltu	r2,r19,8514 <__umoddi3+0x238>
    8510:	14410236 	bltu	r2,r17,891c <__umoddi3+0x640>
    8514:	1463c83a 	sub	r17,r2,r17
    8518:	8809883a 	mov	r4,r17
    851c:	b80b883a 	mov	r5,r23
    8520:	00007c80 	call	7c8 <__udivsi3>
    8524:	9009883a 	mov	r4,r18
    8528:	100b883a 	mov	r5,r2
    852c:	00007d80 	call	7d8 <__mulsi3>
    8530:	8809883a 	mov	r4,r17
    8534:	b80b883a 	mov	r5,r23
    8538:	102b883a 	mov	r21,r2
    853c:	00007d00 	call	7d0 <__umodsi3>
    8540:	1004943a 	slli	r2,r2,16
    8544:	80ffffcc 	andi	r3,r16,65535
    8548:	10c4b03a 	or	r2,r2,r3
    854c:	1540042e 	bgeu	r2,r21,8560 <__umoddi3+0x284>
    8550:	14c5883a 	add	r2,r2,r19
    8554:	14c00236 	bltu	r2,r19,8560 <__umoddi3+0x284>
    8558:	1540012e 	bgeu	r2,r21,8560 <__umoddi3+0x284>
    855c:	14c5883a 	add	r2,r2,r19
    8560:	1545c83a 	sub	r2,r2,r21
    8564:	1584d83a 	srl	r2,r2,r22
    8568:	0013883a 	mov	r9,zero
    856c:	d8800415 	stw	r2,16(sp)
    8570:	d8c00417 	ldw	r3,16(sp)
    8574:	0005883a 	mov	r2,zero
    8578:	d8800515 	stw	r2,20(sp)
    857c:	1811883a 	mov	r8,r3
    8580:	003f9d06 	br	83f8 <__umoddi3+0x11c>
    8584:	00804034 	movhi	r2,256
    8588:	10bfffc4 	addi	r2,r2,-1
    858c:	14c0c636 	bltu	r2,r19,88a8 <__umoddi3+0x5cc>
    8590:	01400404 	movi	r5,16
    8594:	2805883a 	mov	r2,r5
    8598:	003f6c06 	br	834c <__umoddi3+0x70>
    859c:	01000044 	movi	r4,1
    85a0:	000b883a 	mov	r5,zero
    85a4:	00007c80 	call	7c8 <__udivsi3>
    85a8:	1027883a 	mov	r19,r2
    85ac:	00bfffd4 	movui	r2,65535
    85b0:	14fff436 	bltu	r2,r19,8584 <__umoddi3+0x2a8>
    85b4:	003f6106 	br	833c <__umoddi3+0x60>
    85b8:	00804034 	movhi	r2,256
    85bc:	10bfffc4 	addi	r2,r2,-1
    85c0:	1200c536 	bltu	r2,r8,88d8 <__umoddi3+0x5fc>
    85c4:	01400404 	movi	r5,16
    85c8:	2805883a 	mov	r2,r5
    85cc:	003fb406 	br	84a0 <__umoddi3+0x1c4>
    85d0:	00804034 	movhi	r2,256
    85d4:	10bfffc4 	addi	r2,r2,-1
    85d8:	11c0c236 	bltu	r2,r7,88e4 <__umoddi3+0x608>
    85dc:	01400404 	movi	r5,16
    85e0:	2805883a 	mov	r2,r5
    85e4:	003f9806 	br	8448 <__umoddi3+0x16c>
    85e8:	84c9c83a 	sub	r4,r16,r19
    85ec:	8105803a 	cmpltu	r2,r16,r4
    85f0:	a987c83a 	sub	r3,r21,r6
    85f4:	18abc83a 	sub	r21,r3,r2
    85f8:	2021883a 	mov	r16,r4
    85fc:	003f9d06 	br	8474 <__umoddi3+0x198>
    8600:	9ca6983a 	sll	r19,r19,r18
    8604:	3485c83a 	sub	r2,r6,r18
    8608:	a8a2d83a 	srl	r17,r21,r2
    860c:	982ed43a 	srli	r23,r19,16
    8610:	ac86983a 	sll	r3,r21,r18
    8614:	8084d83a 	srl	r2,r16,r2
    8618:	8809883a 	mov	r4,r17
    861c:	b80b883a 	mov	r5,r23
    8620:	18b8b03a 	or	fp,r3,r2
    8624:	9d3fffcc 	andi	r20,r19,65535
    8628:	00007c80 	call	7c8 <__udivsi3>
    862c:	100b883a 	mov	r5,r2
    8630:	a009883a 	mov	r4,r20
    8634:	00007d80 	call	7d8 <__mulsi3>
    8638:	8809883a 	mov	r4,r17
    863c:	b80b883a 	mov	r5,r23
    8640:	102b883a 	mov	r21,r2
    8644:	00007d00 	call	7d0 <__umodsi3>
    8648:	1004943a 	slli	r2,r2,16
    864c:	e006d43a 	srli	r3,fp,16
    8650:	902d883a 	mov	r22,r18
    8654:	10c4b03a 	or	r2,r2,r3
    8658:	1540022e 	bgeu	r2,r21,8664 <__umoddi3+0x388>
    865c:	14c5883a 	add	r2,r2,r19
    8660:	14c0ab2e 	bgeu	r2,r19,8910 <__umoddi3+0x634>
    8664:	1563c83a 	sub	r17,r2,r21
    8668:	8809883a 	mov	r4,r17
    866c:	b80b883a 	mov	r5,r23
    8670:	00007c80 	call	7c8 <__udivsi3>
    8674:	100b883a 	mov	r5,r2
    8678:	a009883a 	mov	r4,r20
    867c:	00007d80 	call	7d8 <__mulsi3>
    8680:	8809883a 	mov	r4,r17
    8684:	b80b883a 	mov	r5,r23
    8688:	102b883a 	mov	r21,r2
    868c:	00007d00 	call	7d0 <__umodsi3>
    8690:	1004943a 	slli	r2,r2,16
    8694:	e0ffffcc 	andi	r3,fp,65535
    8698:	10c4b03a 	or	r2,r2,r3
    869c:	1540042e 	bgeu	r2,r21,86b0 <__umoddi3+0x3d4>
    86a0:	14c5883a 	add	r2,r2,r19
    86a4:	14c00236 	bltu	r2,r19,86b0 <__umoddi3+0x3d4>
    86a8:	1540012e 	bgeu	r2,r21,86b0 <__umoddi3+0x3d4>
    86ac:	14c5883a 	add	r2,r2,r19
    86b0:	84a0983a 	sll	r16,r16,r18
    86b4:	156bc83a 	sub	r21,r2,r21
    86b8:	003f3106 	br	8380 <__umoddi3+0xa4>
    86bc:	3c8fc83a 	sub	r7,r7,r18
    86c0:	3486983a 	sll	r3,r6,r18
    86c4:	99c4d83a 	srl	r2,r19,r7
    86c8:	a9e2d83a 	srl	r17,r21,r7
    86cc:	ac8c983a 	sll	r6,r21,r18
    86d0:	18acb03a 	or	r22,r3,r2
    86d4:	b02ed43a 	srli	r23,r22,16
    86d8:	81c4d83a 	srl	r2,r16,r7
    86dc:	8809883a 	mov	r4,r17
    86e0:	b80b883a 	mov	r5,r23
    86e4:	308cb03a 	or	r6,r6,r2
    86e8:	d9c00315 	stw	r7,12(sp)
    86ec:	d9800215 	stw	r6,8(sp)
    86f0:	b53fffcc 	andi	r20,r22,65535
    86f4:	00007c80 	call	7c8 <__udivsi3>
    86f8:	100b883a 	mov	r5,r2
    86fc:	a009883a 	mov	r4,r20
    8700:	1039883a 	mov	fp,r2
    8704:	00007d80 	call	7d8 <__mulsi3>
    8708:	8809883a 	mov	r4,r17
    870c:	b80b883a 	mov	r5,r23
    8710:	102b883a 	mov	r21,r2
    8714:	00007d00 	call	7d0 <__umodsi3>
    8718:	d9000217 	ldw	r4,8(sp)
    871c:	1004943a 	slli	r2,r2,16
    8720:	9ca6983a 	sll	r19,r19,r18
    8724:	2006d43a 	srli	r3,r4,16
    8728:	84a0983a 	sll	r16,r16,r18
    872c:	dcc00015 	stw	r19,0(sp)
    8730:	10c4b03a 	or	r2,r2,r3
    8734:	dc000115 	stw	r16,4(sp)
    8738:	1540032e 	bgeu	r2,r21,8748 <__umoddi3+0x46c>
    873c:	1585883a 	add	r2,r2,r22
    8740:	e73fffc4 	addi	fp,fp,-1
    8744:	15806e2e 	bgeu	r2,r22,8900 <__umoddi3+0x624>
    8748:	1563c83a 	sub	r17,r2,r21
    874c:	8809883a 	mov	r4,r17
    8750:	b80b883a 	mov	r5,r23
    8754:	00007c80 	call	7c8 <__udivsi3>
    8758:	100b883a 	mov	r5,r2
    875c:	a009883a 	mov	r4,r20
    8760:	1021883a 	mov	r16,r2
    8764:	00007d80 	call	7d8 <__mulsi3>
    8768:	b80b883a 	mov	r5,r23
    876c:	8809883a 	mov	r4,r17
    8770:	1029883a 	mov	r20,r2
    8774:	00007d00 	call	7d0 <__umodsi3>
    8778:	d9400217 	ldw	r5,8(sp)
    877c:	1004943a 	slli	r2,r2,16
    8780:	28ffffcc 	andi	r3,r5,65535
    8784:	10c4b03a 	or	r2,r2,r3
    8788:	1500032e 	bgeu	r2,r20,8798 <__umoddi3+0x4bc>
    878c:	1585883a 	add	r2,r2,r22
    8790:	843fffc4 	addi	r16,r16,-1
    8794:	1580562e 	bgeu	r2,r22,88f0 <__umoddi3+0x614>
    8798:	d9800017 	ldw	r6,0(sp)
    879c:	e022943a 	slli	r17,fp,16
    87a0:	302ed43a 	srli	r23,r6,16
    87a4:	8462b03a 	or	r17,r16,r17
    87a8:	34ffffcc 	andi	r19,r6,65535
    87ac:	882ad43a 	srli	r21,r17,16
    87b0:	8c7fffcc 	andi	r17,r17,65535
    87b4:	8809883a 	mov	r4,r17
    87b8:	980b883a 	mov	r5,r19
    87bc:	1521c83a 	sub	r16,r2,r20
    87c0:	00007d80 	call	7d8 <__mulsi3>
    87c4:	8809883a 	mov	r4,r17
    87c8:	b80b883a 	mov	r5,r23
    87cc:	1029883a 	mov	r20,r2
    87d0:	00007d80 	call	7d8 <__mulsi3>
    87d4:	980b883a 	mov	r5,r19
    87d8:	a809883a 	mov	r4,r21
    87dc:	1023883a 	mov	r17,r2
    87e0:	00007d80 	call	7d8 <__mulsi3>
    87e4:	a809883a 	mov	r4,r21
    87e8:	b80b883a 	mov	r5,r23
    87ec:	1027883a 	mov	r19,r2
    87f0:	00007d80 	call	7d8 <__mulsi3>
    87f4:	100b883a 	mov	r5,r2
    87f8:	a004d43a 	srli	r2,r20,16
    87fc:	8ce3883a 	add	r17,r17,r19
    8800:	1449883a 	add	r4,r2,r17
    8804:	24c0022e 	bgeu	r4,r19,8810 <__umoddi3+0x534>
    8808:	00800074 	movhi	r2,1
    880c:	288b883a 	add	r5,r5,r2
    8810:	2004d43a 	srli	r2,r4,16
    8814:	2008943a 	slli	r4,r4,16
    8818:	a0ffffcc 	andi	r3,r20,65535
    881c:	288d883a 	add	r6,r5,r2
    8820:	20c9883a 	add	r4,r4,r3
    8824:	81800b36 	bltu	r16,r6,8854 <__umoddi3+0x578>
    8828:	81804026 	beq	r16,r6,892c <__umoddi3+0x650>
    882c:	818dc83a 	sub	r6,r16,r6
    8830:	00000f06 	br	8870 <__umoddi3+0x594>
    8834:	30c5c83a 	sub	r2,r6,r3
    8838:	182d883a 	mov	r22,r3
    883c:	8084d83a 	srl	r2,r16,r2
    8840:	a8c6983a 	sll	r3,r21,r3
    8844:	9da6983a 	sll	r19,r19,r22
    8848:	85a0983a 	sll	r16,r16,r22
    884c:	18aab03a 	or	r21,r3,r2
    8850:	003f1d06 	br	84c8 <__umoddi3+0x1ec>
    8854:	d8c00017 	ldw	r3,0(sp)
    8858:	20c5c83a 	sub	r2,r4,r3
    885c:	2089803a 	cmpltu	r4,r4,r2
    8860:	3587c83a 	sub	r3,r6,r22
    8864:	1907c83a 	sub	r3,r3,r4
    8868:	80cdc83a 	sub	r6,r16,r3
    886c:	1009883a 	mov	r4,r2
    8870:	d9400117 	ldw	r5,4(sp)
    8874:	2905c83a 	sub	r2,r5,r4
    8878:	2887803a 	cmpltu	r3,r5,r2
    887c:	30c7c83a 	sub	r3,r6,r3
    8880:	d9800317 	ldw	r6,12(sp)
    8884:	1484d83a 	srl	r2,r2,r18
    8888:	1988983a 	sll	r4,r3,r6
    888c:	1c86d83a 	srl	r3,r3,r18
    8890:	2088b03a 	or	r4,r4,r2
    8894:	2011883a 	mov	r8,r4
    8898:	1813883a 	mov	r9,r3
    889c:	d9000415 	stw	r4,16(sp)
    88a0:	d8c00515 	stw	r3,20(sp)
    88a4:	003ed406 	br	83f8 <__umoddi3+0x11c>
    88a8:	01400604 	movi	r5,24
    88ac:	2805883a 	mov	r2,r5
    88b0:	003ea606 	br	834c <__umoddi3+0x70>
    88b4:	01400204 	movi	r5,8
    88b8:	2805883a 	mov	r2,r5
    88bc:	003ea306 	br	834c <__umoddi3+0x70>
    88c0:	01400204 	movi	r5,8
    88c4:	2805883a 	mov	r2,r5
    88c8:	003edf06 	br	8448 <__umoddi3+0x16c>
    88cc:	01400204 	movi	r5,8
    88d0:	2805883a 	mov	r2,r5
    88d4:	003ef206 	br	84a0 <__umoddi3+0x1c4>
    88d8:	01400604 	movi	r5,24
    88dc:	2805883a 	mov	r2,r5
    88e0:	003eef06 	br	84a0 <__umoddi3+0x1c4>
    88e4:	01400604 	movi	r5,24
    88e8:	2805883a 	mov	r2,r5
    88ec:	003ed606 	br	8448 <__umoddi3+0x16c>
    88f0:	153fa92e 	bgeu	r2,r20,8798 <__umoddi3+0x4bc>
    88f4:	843fffc4 	addi	r16,r16,-1
    88f8:	1585883a 	add	r2,r2,r22
    88fc:	003fa606 	br	8798 <__umoddi3+0x4bc>
    8900:	157f912e 	bgeu	r2,r21,8748 <__umoddi3+0x46c>
    8904:	e73fffc4 	addi	fp,fp,-1
    8908:	1585883a 	add	r2,r2,r22
    890c:	003f8e06 	br	8748 <__umoddi3+0x46c>
    8910:	157f542e 	bgeu	r2,r21,8664 <__umoddi3+0x388>
    8914:	14c5883a 	add	r2,r2,r19
    8918:	003f5206 	br	8664 <__umoddi3+0x388>
    891c:	14c5883a 	add	r2,r2,r19
    8920:	003efc06 	br	8514 <__umoddi3+0x238>
    8924:	14c5883a 	add	r2,r2,r19
    8928:	003ea606 	br	83c4 <__umoddi3+0xe8>
    892c:	d8800117 	ldw	r2,4(sp)
    8930:	113fc836 	bltu	r2,r4,8854 <__umoddi3+0x578>
    8934:	000d883a 	mov	r6,zero
    8938:	003fcd06 	br	8870 <__umoddi3+0x594>

0000893c <_fpadd_parts>:
    893c:	defff804 	addi	sp,sp,-32
    8940:	dcc00315 	stw	r19,12(sp)
    8944:	2027883a 	mov	r19,r4
    8948:	21000017 	ldw	r4,0(r4)
    894c:	00c00044 	movi	r3,1
    8950:	dd400515 	stw	r21,20(sp)
    8954:	dd000415 	stw	r20,16(sp)
    8958:	ddc00715 	stw	r23,28(sp)
    895c:	dd800615 	stw	r22,24(sp)
    8960:	dc800215 	stw	r18,8(sp)
    8964:	dc400115 	stw	r17,4(sp)
    8968:	dc000015 	stw	r16,0(sp)
    896c:	282b883a 	mov	r21,r5
    8970:	3029883a 	mov	r20,r6
    8974:	1900632e 	bgeu	r3,r4,8b04 <_fpadd_parts+0x1c8>
    8978:	28800017 	ldw	r2,0(r5)
    897c:	1880812e 	bgeu	r3,r2,8b84 <_fpadd_parts+0x248>
    8980:	00c00104 	movi	r3,4
    8984:	20c0dc26 	beq	r4,r3,8cf8 <_fpadd_parts+0x3bc>
    8988:	10c07e26 	beq	r2,r3,8b84 <_fpadd_parts+0x248>
    898c:	00c00084 	movi	r3,2
    8990:	10c06726 	beq	r2,r3,8b30 <_fpadd_parts+0x1f4>
    8994:	20c07b26 	beq	r4,r3,8b84 <_fpadd_parts+0x248>
    8998:	9dc00217 	ldw	r23,8(r19)
    899c:	28c00217 	ldw	r3,8(r5)
    89a0:	9c400317 	ldw	r17,12(r19)
    89a4:	2bc00317 	ldw	r15,12(r5)
    89a8:	b8cdc83a 	sub	r6,r23,r3
    89ac:	9c800417 	ldw	r18,16(r19)
    89b0:	2c000417 	ldw	r16,16(r5)
    89b4:	3009883a 	mov	r4,r6
    89b8:	30009716 	blt	r6,zero,8c18 <_fpadd_parts+0x2dc>
    89bc:	00800fc4 	movi	r2,63
    89c0:	11806b16 	blt	r2,r6,8b70 <_fpadd_parts+0x234>
    89c4:	0100a40e 	bge	zero,r4,8c58 <_fpadd_parts+0x31c>
    89c8:	35bff804 	addi	r22,r6,-32
    89cc:	b000bc16 	blt	r22,zero,8cc0 <_fpadd_parts+0x384>
    89d0:	8596d83a 	srl	r11,r16,r22
    89d4:	0019883a 	mov	r12,zero
    89d8:	0013883a 	mov	r9,zero
    89dc:	01000044 	movi	r4,1
    89e0:	0015883a 	mov	r10,zero
    89e4:	b000be16 	blt	r22,zero,8ce0 <_fpadd_parts+0x3a4>
    89e8:	2590983a 	sll	r8,r4,r22
    89ec:	000f883a 	mov	r7,zero
    89f0:	00bfffc4 	movi	r2,-1
    89f4:	3889883a 	add	r4,r7,r2
    89f8:	408b883a 	add	r5,r8,r2
    89fc:	21cd803a 	cmpltu	r6,r4,r7
    8a00:	314b883a 	add	r5,r6,r5
    8a04:	7904703a 	and	r2,r15,r4
    8a08:	8146703a 	and	r3,r16,r5
    8a0c:	10c4b03a 	or	r2,r2,r3
    8a10:	10000226 	beq	r2,zero,8a1c <_fpadd_parts+0xe0>
    8a14:	02400044 	movi	r9,1
    8a18:	0015883a 	mov	r10,zero
    8a1c:	5a5eb03a 	or	r15,r11,r9
    8a20:	62a0b03a 	or	r16,r12,r10
    8a24:	99400117 	ldw	r5,4(r19)
    8a28:	a8800117 	ldw	r2,4(r21)
    8a2c:	28806e26 	beq	r5,r2,8be8 <_fpadd_parts+0x2ac>
    8a30:	28006626 	beq	r5,zero,8bcc <_fpadd_parts+0x290>
    8a34:	7c45c83a 	sub	r2,r15,r17
    8a38:	7889803a 	cmpltu	r4,r15,r2
    8a3c:	8487c83a 	sub	r3,r16,r18
    8a40:	1909c83a 	sub	r4,r3,r4
    8a44:	100d883a 	mov	r6,r2
    8a48:	200f883a 	mov	r7,r4
    8a4c:	38007716 	blt	r7,zero,8c2c <_fpadd_parts+0x2f0>
    8a50:	a5c00215 	stw	r23,8(r20)
    8a54:	a1c00415 	stw	r7,16(r20)
    8a58:	a0000115 	stw	zero,4(r20)
    8a5c:	a1800315 	stw	r6,12(r20)
    8a60:	a2000317 	ldw	r8,12(r20)
    8a64:	a2400417 	ldw	r9,16(r20)
    8a68:	00bfffc4 	movi	r2,-1
    8a6c:	408b883a 	add	r5,r8,r2
    8a70:	2a09803a 	cmpltu	r4,r5,r8
    8a74:	488d883a 	add	r6,r9,r2
    8a78:	01c40034 	movhi	r7,4096
    8a7c:	39ffffc4 	addi	r7,r7,-1
    8a80:	218d883a 	add	r6,r4,r6
    8a84:	39801736 	bltu	r7,r6,8ae4 <_fpadd_parts+0x1a8>
    8a88:	31c06526 	beq	r6,r7,8c20 <_fpadd_parts+0x2e4>
    8a8c:	a3000217 	ldw	r12,8(r20)
    8a90:	4209883a 	add	r4,r8,r8
    8a94:	00bfffc4 	movi	r2,-1
    8a98:	220f803a 	cmpltu	r7,r4,r8
    8a9c:	4a4b883a 	add	r5,r9,r9
    8aa0:	394f883a 	add	r7,r7,r5
    8aa4:	2095883a 	add	r10,r4,r2
    8aa8:	3897883a 	add	r11,r7,r2
    8aac:	510d803a 	cmpltu	r6,r10,r4
    8ab0:	6099883a 	add	r12,r12,r2
    8ab4:	32d7883a 	add	r11,r6,r11
    8ab8:	00840034 	movhi	r2,4096
    8abc:	10bfffc4 	addi	r2,r2,-1
    8ac0:	2011883a 	mov	r8,r4
    8ac4:	3813883a 	mov	r9,r7
    8ac8:	a1000315 	stw	r4,12(r20)
    8acc:	a1c00415 	stw	r7,16(r20)
    8ad0:	a3000215 	stw	r12,8(r20)
    8ad4:	12c00336 	bltu	r2,r11,8ae4 <_fpadd_parts+0x1a8>
    8ad8:	58bfed1e 	bne	r11,r2,8a90 <_fpadd_parts+0x154>
    8adc:	00bfff84 	movi	r2,-2
    8ae0:	12bfeb2e 	bgeu	r2,r10,8a90 <_fpadd_parts+0x154>
    8ae4:	a2800417 	ldw	r10,16(r20)
    8ae8:	008000c4 	movi	r2,3
    8aec:	00c80034 	movhi	r3,8192
    8af0:	18ffffc4 	addi	r3,r3,-1
    8af4:	a2400317 	ldw	r9,12(r20)
    8af8:	a0800015 	stw	r2,0(r20)
    8afc:	1a802336 	bltu	r3,r10,8b8c <_fpadd_parts+0x250>
    8b00:	a027883a 	mov	r19,r20
    8b04:	9805883a 	mov	r2,r19
    8b08:	ddc00717 	ldw	r23,28(sp)
    8b0c:	dd800617 	ldw	r22,24(sp)
    8b10:	dd400517 	ldw	r21,20(sp)
    8b14:	dd000417 	ldw	r20,16(sp)
    8b18:	dcc00317 	ldw	r19,12(sp)
    8b1c:	dc800217 	ldw	r18,8(sp)
    8b20:	dc400117 	ldw	r17,4(sp)
    8b24:	dc000017 	ldw	r16,0(sp)
    8b28:	dec00804 	addi	sp,sp,32
    8b2c:	f800283a 	ret
    8b30:	20fff41e 	bne	r4,r3,8b04 <_fpadd_parts+0x1c8>
    8b34:	31000015 	stw	r4,0(r6)
    8b38:	98800117 	ldw	r2,4(r19)
    8b3c:	30800115 	stw	r2,4(r6)
    8b40:	98c00217 	ldw	r3,8(r19)
    8b44:	30c00215 	stw	r3,8(r6)
    8b48:	98800317 	ldw	r2,12(r19)
    8b4c:	30800315 	stw	r2,12(r6)
    8b50:	98c00417 	ldw	r3,16(r19)
    8b54:	30c00415 	stw	r3,16(r6)
    8b58:	98800117 	ldw	r2,4(r19)
    8b5c:	28c00117 	ldw	r3,4(r5)
    8b60:	3027883a 	mov	r19,r6
    8b64:	10c4703a 	and	r2,r2,r3
    8b68:	30800115 	stw	r2,4(r6)
    8b6c:	003fe506 	br	8b04 <_fpadd_parts+0x1c8>
    8b70:	1dc02616 	blt	r3,r23,8c0c <_fpadd_parts+0x2d0>
    8b74:	0023883a 	mov	r17,zero
    8b78:	182f883a 	mov	r23,r3
    8b7c:	0025883a 	mov	r18,zero
    8b80:	003fa806 	br	8a24 <_fpadd_parts+0xe8>
    8b84:	a827883a 	mov	r19,r21
    8b88:	003fde06 	br	8b04 <_fpadd_parts+0x1c8>
    8b8c:	01800044 	movi	r6,1
    8b90:	500497fa 	slli	r2,r10,31
    8b94:	4808d07a 	srli	r4,r9,1
    8b98:	518ad83a 	srl	r5,r10,r6
    8b9c:	a2000217 	ldw	r8,8(r20)
    8ba0:	1108b03a 	or	r4,r2,r4
    8ba4:	0007883a 	mov	r3,zero
    8ba8:	4984703a 	and	r2,r9,r6
    8bac:	208cb03a 	or	r6,r4,r2
    8bb0:	28ceb03a 	or	r7,r5,r3
    8bb4:	42000044 	addi	r8,r8,1
    8bb8:	a027883a 	mov	r19,r20
    8bbc:	a1c00415 	stw	r7,16(r20)
    8bc0:	a2000215 	stw	r8,8(r20)
    8bc4:	a1800315 	stw	r6,12(r20)
    8bc8:	003fce06 	br	8b04 <_fpadd_parts+0x1c8>
    8bcc:	8bc5c83a 	sub	r2,r17,r15
    8bd0:	8889803a 	cmpltu	r4,r17,r2
    8bd4:	9407c83a 	sub	r3,r18,r16
    8bd8:	1909c83a 	sub	r4,r3,r4
    8bdc:	100d883a 	mov	r6,r2
    8be0:	200f883a 	mov	r7,r4
    8be4:	003f9906 	br	8a4c <_fpadd_parts+0x110>
    8be8:	7c45883a 	add	r2,r15,r17
    8bec:	13c9803a 	cmpltu	r4,r2,r15
    8bf0:	8487883a 	add	r3,r16,r18
    8bf4:	20c9883a 	add	r4,r4,r3
    8bf8:	a1400115 	stw	r5,4(r20)
    8bfc:	a5c00215 	stw	r23,8(r20)
    8c00:	a0800315 	stw	r2,12(r20)
    8c04:	a1000415 	stw	r4,16(r20)
    8c08:	003fb606 	br	8ae4 <_fpadd_parts+0x1a8>
    8c0c:	001f883a 	mov	r15,zero
    8c10:	0021883a 	mov	r16,zero
    8c14:	003f8306 	br	8a24 <_fpadd_parts+0xe8>
    8c18:	018dc83a 	sub	r6,zero,r6
    8c1c:	003f6706 	br	89bc <_fpadd_parts+0x80>
    8c20:	00bfff84 	movi	r2,-2
    8c24:	117faf36 	bltu	r2,r5,8ae4 <_fpadd_parts+0x1a8>
    8c28:	003f9806 	br	8a8c <_fpadd_parts+0x150>
    8c2c:	0005883a 	mov	r2,zero
    8c30:	1189c83a 	sub	r4,r2,r6
    8c34:	1105803a 	cmpltu	r2,r2,r4
    8c38:	01cbc83a 	sub	r5,zero,r7
    8c3c:	2885c83a 	sub	r2,r5,r2
    8c40:	01800044 	movi	r6,1
    8c44:	a1800115 	stw	r6,4(r20)
    8c48:	a5c00215 	stw	r23,8(r20)
    8c4c:	a1000315 	stw	r4,12(r20)
    8c50:	a0800415 	stw	r2,16(r20)
    8c54:	003f8206 	br	8a60 <_fpadd_parts+0x124>
    8c58:	203f7226 	beq	r4,zero,8a24 <_fpadd_parts+0xe8>
    8c5c:	35bff804 	addi	r22,r6,-32
    8c60:	b9af883a 	add	r23,r23,r6
    8c64:	b0003116 	blt	r22,zero,8d2c <_fpadd_parts+0x3f0>
    8c68:	959ad83a 	srl	r13,r18,r22
    8c6c:	001d883a 	mov	r14,zero
    8c70:	000f883a 	mov	r7,zero
    8c74:	01000044 	movi	r4,1
    8c78:	0011883a 	mov	r8,zero
    8c7c:	b0002516 	blt	r22,zero,8d14 <_fpadd_parts+0x3d8>
    8c80:	2594983a 	sll	r10,r4,r22
    8c84:	0013883a 	mov	r9,zero
    8c88:	00bfffc4 	movi	r2,-1
    8c8c:	4889883a 	add	r4,r9,r2
    8c90:	508b883a 	add	r5,r10,r2
    8c94:	224d803a 	cmpltu	r6,r4,r9
    8c98:	314b883a 	add	r5,r6,r5
    8c9c:	8904703a 	and	r2,r17,r4
    8ca0:	9146703a 	and	r3,r18,r5
    8ca4:	10c4b03a 	or	r2,r2,r3
    8ca8:	10000226 	beq	r2,zero,8cb4 <_fpadd_parts+0x378>
    8cac:	01c00044 	movi	r7,1
    8cb0:	0011883a 	mov	r8,zero
    8cb4:	69e2b03a 	or	r17,r13,r7
    8cb8:	7224b03a 	or	r18,r14,r8
    8cbc:	003f5906 	br	8a24 <_fpadd_parts+0xe8>
    8cc0:	8407883a 	add	r3,r16,r16
    8cc4:	008007c4 	movi	r2,31
    8cc8:	1185c83a 	sub	r2,r2,r6
    8ccc:	1886983a 	sll	r3,r3,r2
    8cd0:	7996d83a 	srl	r11,r15,r6
    8cd4:	8198d83a 	srl	r12,r16,r6
    8cd8:	1ad6b03a 	or	r11,r3,r11
    8cdc:	003f3e06 	br	89d8 <_fpadd_parts+0x9c>
    8ce0:	2006d07a 	srli	r3,r4,1
    8ce4:	008007c4 	movi	r2,31
    8ce8:	1185c83a 	sub	r2,r2,r6
    8cec:	1890d83a 	srl	r8,r3,r2
    8cf0:	218e983a 	sll	r7,r4,r6
    8cf4:	003f3e06 	br	89f0 <_fpadd_parts+0xb4>
    8cf8:	113f821e 	bne	r2,r4,8b04 <_fpadd_parts+0x1c8>
    8cfc:	28c00117 	ldw	r3,4(r5)
    8d00:	98800117 	ldw	r2,4(r19)
    8d04:	10ff7f26 	beq	r2,r3,8b04 <_fpadd_parts+0x1c8>
    8d08:	04c00074 	movhi	r19,1
    8d0c:	9cf4df04 	addi	r19,r19,-11396
    8d10:	003f7c06 	br	8b04 <_fpadd_parts+0x1c8>
    8d14:	2006d07a 	srli	r3,r4,1
    8d18:	008007c4 	movi	r2,31
    8d1c:	1185c83a 	sub	r2,r2,r6
    8d20:	1894d83a 	srl	r10,r3,r2
    8d24:	2192983a 	sll	r9,r4,r6
    8d28:	003fd706 	br	8c88 <_fpadd_parts+0x34c>
    8d2c:	9487883a 	add	r3,r18,r18
    8d30:	008007c4 	movi	r2,31
    8d34:	1185c83a 	sub	r2,r2,r6
    8d38:	1886983a 	sll	r3,r3,r2
    8d3c:	899ad83a 	srl	r13,r17,r6
    8d40:	919cd83a 	srl	r14,r18,r6
    8d44:	1b5ab03a 	or	r13,r3,r13
    8d48:	003fc906 	br	8c70 <_fpadd_parts+0x334>

00008d4c <__subdf3>:
    8d4c:	deffea04 	addi	sp,sp,-88
    8d50:	dcc01415 	stw	r19,80(sp)
    8d54:	dcc00404 	addi	r19,sp,16
    8d58:	2011883a 	mov	r8,r4
    8d5c:	2813883a 	mov	r9,r5
    8d60:	dc401315 	stw	r17,76(sp)
    8d64:	d809883a 	mov	r4,sp
    8d68:	980b883a 	mov	r5,r19
    8d6c:	dc400904 	addi	r17,sp,36
    8d70:	dfc01515 	stw	ra,84(sp)
    8d74:	da400115 	stw	r9,4(sp)
    8d78:	d9c00315 	stw	r7,12(sp)
    8d7c:	da000015 	stw	r8,0(sp)
    8d80:	d9800215 	stw	r6,8(sp)
    8d84:	0009f200 	call	9f20 <__unpack_d>
    8d88:	d9000204 	addi	r4,sp,8
    8d8c:	880b883a 	mov	r5,r17
    8d90:	0009f200 	call	9f20 <__unpack_d>
    8d94:	d8800a17 	ldw	r2,40(sp)
    8d98:	880b883a 	mov	r5,r17
    8d9c:	9809883a 	mov	r4,r19
    8da0:	d9800e04 	addi	r6,sp,56
    8da4:	1080005c 	xori	r2,r2,1
    8da8:	d8800a15 	stw	r2,40(sp)
    8dac:	000893c0 	call	893c <_fpadd_parts>
    8db0:	1009883a 	mov	r4,r2
    8db4:	0009c0c0 	call	9c0c <__pack_d>
    8db8:	dfc01517 	ldw	ra,84(sp)
    8dbc:	dcc01417 	ldw	r19,80(sp)
    8dc0:	dc401317 	ldw	r17,76(sp)
    8dc4:	dec01604 	addi	sp,sp,88
    8dc8:	f800283a 	ret

00008dcc <__adddf3>:
    8dcc:	deffea04 	addi	sp,sp,-88
    8dd0:	dcc01415 	stw	r19,80(sp)
    8dd4:	dcc00404 	addi	r19,sp,16
    8dd8:	2011883a 	mov	r8,r4
    8ddc:	2813883a 	mov	r9,r5
    8de0:	dc401315 	stw	r17,76(sp)
    8de4:	d809883a 	mov	r4,sp
    8de8:	980b883a 	mov	r5,r19
    8dec:	dc400904 	addi	r17,sp,36
    8df0:	dfc01515 	stw	ra,84(sp)
    8df4:	da400115 	stw	r9,4(sp)
    8df8:	d9c00315 	stw	r7,12(sp)
    8dfc:	da000015 	stw	r8,0(sp)
    8e00:	d9800215 	stw	r6,8(sp)
    8e04:	0009f200 	call	9f20 <__unpack_d>
    8e08:	d9000204 	addi	r4,sp,8
    8e0c:	880b883a 	mov	r5,r17
    8e10:	0009f200 	call	9f20 <__unpack_d>
    8e14:	d9800e04 	addi	r6,sp,56
    8e18:	9809883a 	mov	r4,r19
    8e1c:	880b883a 	mov	r5,r17
    8e20:	000893c0 	call	893c <_fpadd_parts>
    8e24:	1009883a 	mov	r4,r2
    8e28:	0009c0c0 	call	9c0c <__pack_d>
    8e2c:	dfc01517 	ldw	ra,84(sp)
    8e30:	dcc01417 	ldw	r19,80(sp)
    8e34:	dc401317 	ldw	r17,76(sp)
    8e38:	dec01604 	addi	sp,sp,88
    8e3c:	f800283a 	ret

00008e40 <__muldf3>:
    8e40:	deffe004 	addi	sp,sp,-128
    8e44:	dc401815 	stw	r17,96(sp)
    8e48:	dc400404 	addi	r17,sp,16
    8e4c:	2011883a 	mov	r8,r4
    8e50:	2813883a 	mov	r9,r5
    8e54:	dc001715 	stw	r16,92(sp)
    8e58:	d809883a 	mov	r4,sp
    8e5c:	880b883a 	mov	r5,r17
    8e60:	dc000904 	addi	r16,sp,36
    8e64:	dfc01f15 	stw	ra,124(sp)
    8e68:	da400115 	stw	r9,4(sp)
    8e6c:	d9c00315 	stw	r7,12(sp)
    8e70:	da000015 	stw	r8,0(sp)
    8e74:	d9800215 	stw	r6,8(sp)
    8e78:	ddc01e15 	stw	r23,120(sp)
    8e7c:	dd801d15 	stw	r22,116(sp)
    8e80:	dd401c15 	stw	r21,112(sp)
    8e84:	dd001b15 	stw	r20,108(sp)
    8e88:	dcc01a15 	stw	r19,104(sp)
    8e8c:	dc801915 	stw	r18,100(sp)
    8e90:	0009f200 	call	9f20 <__unpack_d>
    8e94:	d9000204 	addi	r4,sp,8
    8e98:	800b883a 	mov	r5,r16
    8e9c:	0009f200 	call	9f20 <__unpack_d>
    8ea0:	d9000417 	ldw	r4,16(sp)
    8ea4:	00800044 	movi	r2,1
    8ea8:	1100102e 	bgeu	r2,r4,8eec <__muldf3+0xac>
    8eac:	d8c00917 	ldw	r3,36(sp)
    8eb0:	10c0062e 	bgeu	r2,r3,8ecc <__muldf3+0x8c>
    8eb4:	00800104 	movi	r2,4
    8eb8:	20800a26 	beq	r4,r2,8ee4 <__muldf3+0xa4>
    8ebc:	1880cc26 	beq	r3,r2,91f0 <__muldf3+0x3b0>
    8ec0:	00800084 	movi	r2,2
    8ec4:	20800926 	beq	r4,r2,8eec <__muldf3+0xac>
    8ec8:	1880191e 	bne	r3,r2,8f30 <__muldf3+0xf0>
    8ecc:	d8c00a17 	ldw	r3,40(sp)
    8ed0:	d8800517 	ldw	r2,20(sp)
    8ed4:	8009883a 	mov	r4,r16
    8ed8:	10c4c03a 	cmpne	r2,r2,r3
    8edc:	d8800a15 	stw	r2,40(sp)
    8ee0:	00000706 	br	8f00 <__muldf3+0xc0>
    8ee4:	00800084 	movi	r2,2
    8ee8:	1880c326 	beq	r3,r2,91f8 <__muldf3+0x3b8>
    8eec:	d8800517 	ldw	r2,20(sp)
    8ef0:	d8c00a17 	ldw	r3,40(sp)
    8ef4:	8809883a 	mov	r4,r17
    8ef8:	10c4c03a 	cmpne	r2,r2,r3
    8efc:	d8800515 	stw	r2,20(sp)
    8f00:	0009c0c0 	call	9c0c <__pack_d>
    8f04:	dfc01f17 	ldw	ra,124(sp)
    8f08:	ddc01e17 	ldw	r23,120(sp)
    8f0c:	dd801d17 	ldw	r22,116(sp)
    8f10:	dd401c17 	ldw	r21,112(sp)
    8f14:	dd001b17 	ldw	r20,108(sp)
    8f18:	dcc01a17 	ldw	r19,104(sp)
    8f1c:	dc801917 	ldw	r18,100(sp)
    8f20:	dc401817 	ldw	r17,96(sp)
    8f24:	dc001717 	ldw	r16,92(sp)
    8f28:	dec02004 	addi	sp,sp,128
    8f2c:	f800283a 	ret
    8f30:	dd800717 	ldw	r22,28(sp)
    8f34:	dc800c17 	ldw	r18,48(sp)
    8f38:	002b883a 	mov	r21,zero
    8f3c:	0023883a 	mov	r17,zero
    8f40:	a80b883a 	mov	r5,r21
    8f44:	b00d883a 	mov	r6,r22
    8f48:	880f883a 	mov	r7,r17
    8f4c:	ddc00817 	ldw	r23,32(sp)
    8f50:	dcc00d17 	ldw	r19,52(sp)
    8f54:	9009883a 	mov	r4,r18
    8f58:	0009a680 	call	9a68 <__muldi3>
    8f5c:	001b883a 	mov	r13,zero
    8f60:	680f883a 	mov	r7,r13
    8f64:	b009883a 	mov	r4,r22
    8f68:	000b883a 	mov	r5,zero
    8f6c:	980d883a 	mov	r6,r19
    8f70:	b82d883a 	mov	r22,r23
    8f74:	002f883a 	mov	r23,zero
    8f78:	db401615 	stw	r13,88(sp)
    8f7c:	d8801315 	stw	r2,76(sp)
    8f80:	d8c01415 	stw	r3,80(sp)
    8f84:	dcc01515 	stw	r19,84(sp)
    8f88:	0009a680 	call	9a68 <__muldi3>
    8f8c:	b00d883a 	mov	r6,r22
    8f90:	000b883a 	mov	r5,zero
    8f94:	9009883a 	mov	r4,r18
    8f98:	b80f883a 	mov	r7,r23
    8f9c:	1021883a 	mov	r16,r2
    8fa0:	1823883a 	mov	r17,r3
    8fa4:	0009a680 	call	9a68 <__muldi3>
    8fa8:	8085883a 	add	r2,r16,r2
    8fac:	140d803a 	cmpltu	r6,r2,r16
    8fb0:	88c7883a 	add	r3,r17,r3
    8fb4:	30cd883a 	add	r6,r6,r3
    8fb8:	1029883a 	mov	r20,r2
    8fbc:	302b883a 	mov	r21,r6
    8fc0:	da801317 	ldw	r10,76(sp)
    8fc4:	dac01417 	ldw	r11,80(sp)
    8fc8:	db001517 	ldw	r12,84(sp)
    8fcc:	db401617 	ldw	r13,88(sp)
    8fd0:	3440612e 	bgeu	r6,r17,9158 <__muldf3+0x318>
    8fd4:	0009883a 	mov	r4,zero
    8fd8:	5105883a 	add	r2,r10,r4
    8fdc:	128d803a 	cmpltu	r6,r2,r10
    8fe0:	5d07883a 	add	r3,r11,r20
    8fe4:	30cd883a 	add	r6,r6,r3
    8fe8:	0021883a 	mov	r16,zero
    8fec:	04400044 	movi	r17,1
    8ff0:	1025883a 	mov	r18,r2
    8ff4:	3027883a 	mov	r19,r6
    8ff8:	32c06236 	bltu	r6,r11,9184 <__muldf3+0x344>
    8ffc:	59807a26 	beq	r11,r6,91e8 <__muldf3+0x3a8>
    9000:	680b883a 	mov	r5,r13
    9004:	b80f883a 	mov	r7,r23
    9008:	6009883a 	mov	r4,r12
    900c:	b00d883a 	mov	r6,r22
    9010:	0009a680 	call	9a68 <__muldi3>
    9014:	1009883a 	mov	r4,r2
    9018:	000f883a 	mov	r7,zero
    901c:	1545883a 	add	r2,r2,r21
    9020:	1111803a 	cmpltu	r8,r2,r4
    9024:	19c7883a 	add	r3,r3,r7
    9028:	40c7883a 	add	r3,r8,r3
    902c:	88cb883a 	add	r5,r17,r3
    9030:	d8c00617 	ldw	r3,24(sp)
    9034:	8089883a 	add	r4,r16,r2
    9038:	d8800b17 	ldw	r2,44(sp)
    903c:	18c00104 	addi	r3,r3,4
    9040:	240d803a 	cmpltu	r6,r4,r16
    9044:	10c7883a 	add	r3,r2,r3
    9048:	2013883a 	mov	r9,r4
    904c:	d8800a17 	ldw	r2,40(sp)
    9050:	d9000517 	ldw	r4,20(sp)
    9054:	314d883a 	add	r6,r6,r5
    9058:	3015883a 	mov	r10,r6
    905c:	2088c03a 	cmpne	r4,r4,r2
    9060:	00880034 	movhi	r2,8192
    9064:	10bfffc4 	addi	r2,r2,-1
    9068:	d9000f15 	stw	r4,60(sp)
    906c:	d8c01015 	stw	r3,64(sp)
    9070:	1180162e 	bgeu	r2,r6,90cc <__muldf3+0x28c>
    9074:	1811883a 	mov	r8,r3
    9078:	101f883a 	mov	r15,r2
    907c:	980497fa 	slli	r2,r19,31
    9080:	9016d07a 	srli	r11,r18,1
    9084:	500697fa 	slli	r3,r10,31
    9088:	480cd07a 	srli	r6,r9,1
    908c:	500ed07a 	srli	r7,r10,1
    9090:	12d6b03a 	or	r11,r2,r11
    9094:	00800044 	movi	r2,1
    9098:	198cb03a 	or	r6,r3,r6
    909c:	4888703a 	and	r4,r9,r2
    90a0:	9818d07a 	srli	r12,r19,1
    90a4:	001b883a 	mov	r13,zero
    90a8:	03a00034 	movhi	r14,32768
    90ac:	3013883a 	mov	r9,r6
    90b0:	3815883a 	mov	r10,r7
    90b4:	4091883a 	add	r8,r8,r2
    90b8:	20000226 	beq	r4,zero,90c4 <__muldf3+0x284>
    90bc:	5b64b03a 	or	r18,r11,r13
    90c0:	63a6b03a 	or	r19,r12,r14
    90c4:	7abfed36 	bltu	r15,r10,907c <__muldf3+0x23c>
    90c8:	da001015 	stw	r8,64(sp)
    90cc:	00840034 	movhi	r2,4096
    90d0:	10bfffc4 	addi	r2,r2,-1
    90d4:	12801436 	bltu	r2,r10,9128 <__muldf3+0x2e8>
    90d8:	da001017 	ldw	r8,64(sp)
    90dc:	101f883a 	mov	r15,r2
    90e0:	4a45883a 	add	r2,r9,r9
    90e4:	124d803a 	cmpltu	r6,r2,r9
    90e8:	5287883a 	add	r3,r10,r10
    90ec:	9497883a 	add	r11,r18,r18
    90f0:	5c8f803a 	cmpltu	r7,r11,r18
    90f4:	9cd9883a 	add	r12,r19,r19
    90f8:	01000044 	movi	r4,1
    90fc:	30cd883a 	add	r6,r6,r3
    9100:	3b0f883a 	add	r7,r7,r12
    9104:	423fffc4 	addi	r8,r8,-1
    9108:	1013883a 	mov	r9,r2
    910c:	3015883a 	mov	r10,r6
    9110:	111ab03a 	or	r13,r2,r4
    9114:	98003016 	blt	r19,zero,91d8 <__muldf3+0x398>
    9118:	5825883a 	mov	r18,r11
    911c:	3827883a 	mov	r19,r7
    9120:	7abfef2e 	bgeu	r15,r10,90e0 <__muldf3+0x2a0>
    9124:	da001015 	stw	r8,64(sp)
    9128:	00803fc4 	movi	r2,255
    912c:	488e703a 	and	r7,r9,r2
    9130:	00802004 	movi	r2,128
    9134:	0007883a 	mov	r3,zero
    9138:	0011883a 	mov	r8,zero
    913c:	38801826 	beq	r7,r2,91a0 <__muldf3+0x360>
    9140:	008000c4 	movi	r2,3
    9144:	d9000e04 	addi	r4,sp,56
    9148:	da801215 	stw	r10,72(sp)
    914c:	d8800e15 	stw	r2,56(sp)
    9150:	da401115 	stw	r9,68(sp)
    9154:	003f6a06 	br	8f00 <__muldf3+0xc0>
    9158:	89802126 	beq	r17,r6,91e0 <__muldf3+0x3a0>
    915c:	0009883a 	mov	r4,zero
    9160:	5105883a 	add	r2,r10,r4
    9164:	128d803a 	cmpltu	r6,r2,r10
    9168:	5d07883a 	add	r3,r11,r20
    916c:	30cd883a 	add	r6,r6,r3
    9170:	0021883a 	mov	r16,zero
    9174:	0023883a 	mov	r17,zero
    9178:	1025883a 	mov	r18,r2
    917c:	3027883a 	mov	r19,r6
    9180:	32ff9e2e 	bgeu	r6,r11,8ffc <__muldf3+0x1bc>
    9184:	00800044 	movi	r2,1
    9188:	8089883a 	add	r4,r16,r2
    918c:	240d803a 	cmpltu	r6,r4,r16
    9190:	344d883a 	add	r6,r6,r17
    9194:	2021883a 	mov	r16,r4
    9198:	3023883a 	mov	r17,r6
    919c:	003f9806 	br	9000 <__muldf3+0x1c0>
    91a0:	403fe71e 	bne	r8,zero,9140 <__muldf3+0x300>
    91a4:	01004004 	movi	r4,256
    91a8:	4904703a 	and	r2,r9,r4
    91ac:	10c4b03a 	or	r2,r2,r3
    91b0:	103fe31e 	bne	r2,zero,9140 <__muldf3+0x300>
    91b4:	94c4b03a 	or	r2,r18,r19
    91b8:	103fe126 	beq	r2,zero,9140 <__muldf3+0x300>
    91bc:	49c5883a 	add	r2,r9,r7
    91c0:	1251803a 	cmpltu	r8,r2,r9
    91c4:	4291883a 	add	r8,r8,r10
    91c8:	013fc004 	movi	r4,-256
    91cc:	1112703a 	and	r9,r2,r4
    91d0:	4015883a 	mov	r10,r8
    91d4:	003fda06 	br	9140 <__muldf3+0x300>
    91d8:	6813883a 	mov	r9,r13
    91dc:	003fce06 	br	9118 <__muldf3+0x2d8>
    91e0:	143f7c36 	bltu	r2,r16,8fd4 <__muldf3+0x194>
    91e4:	003fdd06 	br	915c <__muldf3+0x31c>
    91e8:	12bf852e 	bgeu	r2,r10,9000 <__muldf3+0x1c0>
    91ec:	003fe506 	br	9184 <__muldf3+0x344>
    91f0:	00800084 	movi	r2,2
    91f4:	20bf351e 	bne	r4,r2,8ecc <__muldf3+0x8c>
    91f8:	01000074 	movhi	r4,1
    91fc:	2134df04 	addi	r4,r4,-11396
    9200:	003f3f06 	br	8f00 <__muldf3+0xc0>

00009204 <__divdf3>:
    9204:	deffed04 	addi	sp,sp,-76
    9208:	dcc01115 	stw	r19,68(sp)
    920c:	dcc00404 	addi	r19,sp,16
    9210:	2011883a 	mov	r8,r4
    9214:	2813883a 	mov	r9,r5
    9218:	dc000e15 	stw	r16,56(sp)
    921c:	d809883a 	mov	r4,sp
    9220:	980b883a 	mov	r5,r19
    9224:	dc000904 	addi	r16,sp,36
    9228:	dfc01215 	stw	ra,72(sp)
    922c:	da400115 	stw	r9,4(sp)
    9230:	d9c00315 	stw	r7,12(sp)
    9234:	da000015 	stw	r8,0(sp)
    9238:	d9800215 	stw	r6,8(sp)
    923c:	dc801015 	stw	r18,64(sp)
    9240:	dc400f15 	stw	r17,60(sp)
    9244:	0009f200 	call	9f20 <__unpack_d>
    9248:	d9000204 	addi	r4,sp,8
    924c:	800b883a 	mov	r5,r16
    9250:	0009f200 	call	9f20 <__unpack_d>
    9254:	d9000417 	ldw	r4,16(sp)
    9258:	00800044 	movi	r2,1
    925c:	11000b2e 	bgeu	r2,r4,928c <__divdf3+0x88>
    9260:	d9400917 	ldw	r5,36(sp)
    9264:	1140762e 	bgeu	r2,r5,9440 <__divdf3+0x23c>
    9268:	d8800517 	ldw	r2,20(sp)
    926c:	d8c00a17 	ldw	r3,40(sp)
    9270:	01800104 	movi	r6,4
    9274:	10c4f03a 	xor	r2,r2,r3
    9278:	d8800515 	stw	r2,20(sp)
    927c:	21800226 	beq	r4,r6,9288 <__divdf3+0x84>
    9280:	00800084 	movi	r2,2
    9284:	2080141e 	bne	r4,r2,92d8 <__divdf3+0xd4>
    9288:	29000926 	beq	r5,r4,92b0 <__divdf3+0xac>
    928c:	9809883a 	mov	r4,r19
    9290:	0009c0c0 	call	9c0c <__pack_d>
    9294:	dfc01217 	ldw	ra,72(sp)
    9298:	dcc01117 	ldw	r19,68(sp)
    929c:	dc801017 	ldw	r18,64(sp)
    92a0:	dc400f17 	ldw	r17,60(sp)
    92a4:	dc000e17 	ldw	r16,56(sp)
    92a8:	dec01304 	addi	sp,sp,76
    92ac:	f800283a 	ret
    92b0:	01000074 	movhi	r4,1
    92b4:	2134df04 	addi	r4,r4,-11396
    92b8:	0009c0c0 	call	9c0c <__pack_d>
    92bc:	dfc01217 	ldw	ra,72(sp)
    92c0:	dcc01117 	ldw	r19,68(sp)
    92c4:	dc801017 	ldw	r18,64(sp)
    92c8:	dc400f17 	ldw	r17,60(sp)
    92cc:	dc000e17 	ldw	r16,56(sp)
    92d0:	dec01304 	addi	sp,sp,76
    92d4:	f800283a 	ret
    92d8:	29805b26 	beq	r5,r6,9448 <__divdf3+0x244>
    92dc:	28802d26 	beq	r5,r2,9394 <__divdf3+0x190>
    92e0:	d8c00617 	ldw	r3,24(sp)
    92e4:	d8800b17 	ldw	r2,44(sp)
    92e8:	d9c00817 	ldw	r7,32(sp)
    92ec:	dc400d17 	ldw	r17,52(sp)
    92f0:	188bc83a 	sub	r5,r3,r2
    92f4:	d9800717 	ldw	r6,28(sp)
    92f8:	dc000c17 	ldw	r16,48(sp)
    92fc:	d9400615 	stw	r5,24(sp)
    9300:	3c403836 	bltu	r7,r17,93e4 <__divdf3+0x1e0>
    9304:	89c03626 	beq	r17,r7,93e0 <__divdf3+0x1dc>
    9308:	0015883a 	mov	r10,zero
    930c:	001d883a 	mov	r14,zero
    9310:	02c40034 	movhi	r11,4096
    9314:	001f883a 	mov	r15,zero
    9318:	003f883a 	mov	ra,zero
    931c:	04800f44 	movi	r18,61
    9320:	00000f06 	br	9360 <__divdf3+0x15c>
    9324:	601d883a 	mov	r14,r12
    9328:	681f883a 	mov	r15,r13
    932c:	400d883a 	mov	r6,r8
    9330:	100f883a 	mov	r7,r2
    9334:	3191883a 	add	r8,r6,r6
    9338:	5808d07a 	srli	r4,r11,1
    933c:	4185803a 	cmpltu	r2,r8,r6
    9340:	39d3883a 	add	r9,r7,r7
    9344:	28c6b03a 	or	r3,r5,r3
    9348:	1245883a 	add	r2,r2,r9
    934c:	1815883a 	mov	r10,r3
    9350:	2017883a 	mov	r11,r4
    9354:	400d883a 	mov	r6,r8
    9358:	100f883a 	mov	r7,r2
    935c:	fc801726 	beq	ra,r18,93bc <__divdf3+0x1b8>
    9360:	580a97fa 	slli	r5,r11,31
    9364:	5006d07a 	srli	r3,r10,1
    9368:	ffc00044 	addi	ra,ra,1
    936c:	3c7ff136 	bltu	r7,r17,9334 <__divdf3+0x130>
    9370:	3411c83a 	sub	r8,r6,r16
    9374:	3205803a 	cmpltu	r2,r6,r8
    9378:	3c53c83a 	sub	r9,r7,r17
    937c:	7298b03a 	or	r12,r14,r10
    9380:	7adab03a 	or	r13,r15,r11
    9384:	4885c83a 	sub	r2,r9,r2
    9388:	89ffe61e 	bne	r17,r7,9324 <__divdf3+0x120>
    938c:	343fe936 	bltu	r6,r16,9334 <__divdf3+0x130>
    9390:	003fe406 	br	9324 <__divdf3+0x120>
    9394:	9809883a 	mov	r4,r19
    9398:	d9800415 	stw	r6,16(sp)
    939c:	0009c0c0 	call	9c0c <__pack_d>
    93a0:	dfc01217 	ldw	ra,72(sp)
    93a4:	dcc01117 	ldw	r19,68(sp)
    93a8:	dc801017 	ldw	r18,64(sp)
    93ac:	dc400f17 	ldw	r17,60(sp)
    93b0:	dc000e17 	ldw	r16,56(sp)
    93b4:	dec01304 	addi	sp,sp,76
    93b8:	f800283a 	ret
    93bc:	00803fc4 	movi	r2,255
    93c0:	7090703a 	and	r8,r14,r2
    93c4:	00802004 	movi	r2,128
    93c8:	0007883a 	mov	r3,zero
    93cc:	0013883a 	mov	r9,zero
    93d0:	40800d26 	beq	r8,r2,9408 <__divdf3+0x204>
    93d4:	dbc00815 	stw	r15,32(sp)
    93d8:	db800715 	stw	r14,28(sp)
    93dc:	003fab06 	br	928c <__divdf3+0x88>
    93e0:	343fc92e 	bgeu	r6,r16,9308 <__divdf3+0x104>
    93e4:	3185883a 	add	r2,r6,r6
    93e8:	1189803a 	cmpltu	r4,r2,r6
    93ec:	39c7883a 	add	r3,r7,r7
    93f0:	20c9883a 	add	r4,r4,r3
    93f4:	297fffc4 	addi	r5,r5,-1
    93f8:	100d883a 	mov	r6,r2
    93fc:	200f883a 	mov	r7,r4
    9400:	d9400615 	stw	r5,24(sp)
    9404:	003fc006 	br	9308 <__divdf3+0x104>
    9408:	483ff21e 	bne	r9,zero,93d4 <__divdf3+0x1d0>
    940c:	01004004 	movi	r4,256
    9410:	7104703a 	and	r2,r14,r4
    9414:	10c4b03a 	or	r2,r2,r3
    9418:	103fee1e 	bne	r2,zero,93d4 <__divdf3+0x1d0>
    941c:	31c4b03a 	or	r2,r6,r7
    9420:	103fec26 	beq	r2,zero,93d4 <__divdf3+0x1d0>
    9424:	7205883a 	add	r2,r14,r8
    9428:	1391803a 	cmpltu	r8,r2,r14
    942c:	43d1883a 	add	r8,r8,r15
    9430:	013fc004 	movi	r4,-256
    9434:	111c703a 	and	r14,r2,r4
    9438:	401f883a 	mov	r15,r8
    943c:	003fe506 	br	93d4 <__divdf3+0x1d0>
    9440:	8009883a 	mov	r4,r16
    9444:	003f9206 	br	9290 <__divdf3+0x8c>
    9448:	9809883a 	mov	r4,r19
    944c:	d8000715 	stw	zero,28(sp)
    9450:	d8000815 	stw	zero,32(sp)
    9454:	d8000615 	stw	zero,24(sp)
    9458:	003f8d06 	br	9290 <__divdf3+0x8c>

0000945c <__eqdf2>:
    945c:	deffef04 	addi	sp,sp,-68
    9460:	dc400f15 	stw	r17,60(sp)
    9464:	dc400404 	addi	r17,sp,16
    9468:	2005883a 	mov	r2,r4
    946c:	2807883a 	mov	r3,r5
    9470:	dc000e15 	stw	r16,56(sp)
    9474:	d809883a 	mov	r4,sp
    9478:	880b883a 	mov	r5,r17
    947c:	dc000904 	addi	r16,sp,36
    9480:	d8c00115 	stw	r3,4(sp)
    9484:	d8800015 	stw	r2,0(sp)
    9488:	d9800215 	stw	r6,8(sp)
    948c:	dfc01015 	stw	ra,64(sp)
    9490:	d9c00315 	stw	r7,12(sp)
    9494:	0009f200 	call	9f20 <__unpack_d>
    9498:	d9000204 	addi	r4,sp,8
    949c:	800b883a 	mov	r5,r16
    94a0:	0009f200 	call	9f20 <__unpack_d>
    94a4:	d8800417 	ldw	r2,16(sp)
    94a8:	00c00044 	movi	r3,1
    94ac:	180d883a 	mov	r6,r3
    94b0:	1880062e 	bgeu	r3,r2,94cc <__eqdf2+0x70>
    94b4:	d8800917 	ldw	r2,36(sp)
    94b8:	8809883a 	mov	r4,r17
    94bc:	800b883a 	mov	r5,r16
    94c0:	1880022e 	bgeu	r3,r2,94cc <__eqdf2+0x70>
    94c4:	000a0580 	call	a058 <__fpcmp_parts_d>
    94c8:	100d883a 	mov	r6,r2
    94cc:	3005883a 	mov	r2,r6
    94d0:	dfc01017 	ldw	ra,64(sp)
    94d4:	dc400f17 	ldw	r17,60(sp)
    94d8:	dc000e17 	ldw	r16,56(sp)
    94dc:	dec01104 	addi	sp,sp,68
    94e0:	f800283a 	ret

000094e4 <__nedf2>:
    94e4:	deffef04 	addi	sp,sp,-68
    94e8:	dc400f15 	stw	r17,60(sp)
    94ec:	dc400404 	addi	r17,sp,16
    94f0:	2005883a 	mov	r2,r4
    94f4:	2807883a 	mov	r3,r5
    94f8:	dc000e15 	stw	r16,56(sp)
    94fc:	d809883a 	mov	r4,sp
    9500:	880b883a 	mov	r5,r17
    9504:	dc000904 	addi	r16,sp,36
    9508:	d8c00115 	stw	r3,4(sp)
    950c:	d8800015 	stw	r2,0(sp)
    9510:	d9800215 	stw	r6,8(sp)
    9514:	dfc01015 	stw	ra,64(sp)
    9518:	d9c00315 	stw	r7,12(sp)
    951c:	0009f200 	call	9f20 <__unpack_d>
    9520:	d9000204 	addi	r4,sp,8
    9524:	800b883a 	mov	r5,r16
    9528:	0009f200 	call	9f20 <__unpack_d>
    952c:	d8800417 	ldw	r2,16(sp)
    9530:	00c00044 	movi	r3,1
    9534:	180d883a 	mov	r6,r3
    9538:	1880062e 	bgeu	r3,r2,9554 <__nedf2+0x70>
    953c:	d8800917 	ldw	r2,36(sp)
    9540:	8809883a 	mov	r4,r17
    9544:	800b883a 	mov	r5,r16
    9548:	1880022e 	bgeu	r3,r2,9554 <__nedf2+0x70>
    954c:	000a0580 	call	a058 <__fpcmp_parts_d>
    9550:	100d883a 	mov	r6,r2
    9554:	3005883a 	mov	r2,r6
    9558:	dfc01017 	ldw	ra,64(sp)
    955c:	dc400f17 	ldw	r17,60(sp)
    9560:	dc000e17 	ldw	r16,56(sp)
    9564:	dec01104 	addi	sp,sp,68
    9568:	f800283a 	ret

0000956c <__gtdf2>:
    956c:	deffef04 	addi	sp,sp,-68
    9570:	dc400f15 	stw	r17,60(sp)
    9574:	dc400404 	addi	r17,sp,16
    9578:	2005883a 	mov	r2,r4
    957c:	2807883a 	mov	r3,r5
    9580:	dc000e15 	stw	r16,56(sp)
    9584:	d809883a 	mov	r4,sp
    9588:	880b883a 	mov	r5,r17
    958c:	dc000904 	addi	r16,sp,36
    9590:	d8c00115 	stw	r3,4(sp)
    9594:	d8800015 	stw	r2,0(sp)
    9598:	d9800215 	stw	r6,8(sp)
    959c:	dfc01015 	stw	ra,64(sp)
    95a0:	d9c00315 	stw	r7,12(sp)
    95a4:	0009f200 	call	9f20 <__unpack_d>
    95a8:	d9000204 	addi	r4,sp,8
    95ac:	800b883a 	mov	r5,r16
    95b0:	0009f200 	call	9f20 <__unpack_d>
    95b4:	d8800417 	ldw	r2,16(sp)
    95b8:	00c00044 	movi	r3,1
    95bc:	01bfffc4 	movi	r6,-1
    95c0:	1880062e 	bgeu	r3,r2,95dc <__gtdf2+0x70>
    95c4:	d8800917 	ldw	r2,36(sp)
    95c8:	8809883a 	mov	r4,r17
    95cc:	800b883a 	mov	r5,r16
    95d0:	1880022e 	bgeu	r3,r2,95dc <__gtdf2+0x70>
    95d4:	000a0580 	call	a058 <__fpcmp_parts_d>
    95d8:	100d883a 	mov	r6,r2
    95dc:	3005883a 	mov	r2,r6
    95e0:	dfc01017 	ldw	ra,64(sp)
    95e4:	dc400f17 	ldw	r17,60(sp)
    95e8:	dc000e17 	ldw	r16,56(sp)
    95ec:	dec01104 	addi	sp,sp,68
    95f0:	f800283a 	ret

000095f4 <__gedf2>:
    95f4:	deffef04 	addi	sp,sp,-68
    95f8:	dc400f15 	stw	r17,60(sp)
    95fc:	dc400404 	addi	r17,sp,16
    9600:	2005883a 	mov	r2,r4
    9604:	2807883a 	mov	r3,r5
    9608:	dc000e15 	stw	r16,56(sp)
    960c:	d809883a 	mov	r4,sp
    9610:	880b883a 	mov	r5,r17
    9614:	dc000904 	addi	r16,sp,36
    9618:	d8c00115 	stw	r3,4(sp)
    961c:	d8800015 	stw	r2,0(sp)
    9620:	d9800215 	stw	r6,8(sp)
    9624:	dfc01015 	stw	ra,64(sp)
    9628:	d9c00315 	stw	r7,12(sp)
    962c:	0009f200 	call	9f20 <__unpack_d>
    9630:	d9000204 	addi	r4,sp,8
    9634:	800b883a 	mov	r5,r16
    9638:	0009f200 	call	9f20 <__unpack_d>
    963c:	d8800417 	ldw	r2,16(sp)
    9640:	00c00044 	movi	r3,1
    9644:	01bfffc4 	movi	r6,-1
    9648:	1880062e 	bgeu	r3,r2,9664 <__gedf2+0x70>
    964c:	d8800917 	ldw	r2,36(sp)
    9650:	8809883a 	mov	r4,r17
    9654:	800b883a 	mov	r5,r16
    9658:	1880022e 	bgeu	r3,r2,9664 <__gedf2+0x70>
    965c:	000a0580 	call	a058 <__fpcmp_parts_d>
    9660:	100d883a 	mov	r6,r2
    9664:	3005883a 	mov	r2,r6
    9668:	dfc01017 	ldw	ra,64(sp)
    966c:	dc400f17 	ldw	r17,60(sp)
    9670:	dc000e17 	ldw	r16,56(sp)
    9674:	dec01104 	addi	sp,sp,68
    9678:	f800283a 	ret

0000967c <__ltdf2>:
    967c:	deffef04 	addi	sp,sp,-68
    9680:	dc400f15 	stw	r17,60(sp)
    9684:	dc400404 	addi	r17,sp,16
    9688:	2005883a 	mov	r2,r4
    968c:	2807883a 	mov	r3,r5
    9690:	dc000e15 	stw	r16,56(sp)
    9694:	d809883a 	mov	r4,sp
    9698:	880b883a 	mov	r5,r17
    969c:	dc000904 	addi	r16,sp,36
    96a0:	d8c00115 	stw	r3,4(sp)
    96a4:	d8800015 	stw	r2,0(sp)
    96a8:	d9800215 	stw	r6,8(sp)
    96ac:	dfc01015 	stw	ra,64(sp)
    96b0:	d9c00315 	stw	r7,12(sp)
    96b4:	0009f200 	call	9f20 <__unpack_d>
    96b8:	d9000204 	addi	r4,sp,8
    96bc:	800b883a 	mov	r5,r16
    96c0:	0009f200 	call	9f20 <__unpack_d>
    96c4:	d8800417 	ldw	r2,16(sp)
    96c8:	00c00044 	movi	r3,1
    96cc:	180d883a 	mov	r6,r3
    96d0:	1880062e 	bgeu	r3,r2,96ec <__ltdf2+0x70>
    96d4:	d8800917 	ldw	r2,36(sp)
    96d8:	8809883a 	mov	r4,r17
    96dc:	800b883a 	mov	r5,r16
    96e0:	1880022e 	bgeu	r3,r2,96ec <__ltdf2+0x70>
    96e4:	000a0580 	call	a058 <__fpcmp_parts_d>
    96e8:	100d883a 	mov	r6,r2
    96ec:	3005883a 	mov	r2,r6
    96f0:	dfc01017 	ldw	ra,64(sp)
    96f4:	dc400f17 	ldw	r17,60(sp)
    96f8:	dc000e17 	ldw	r16,56(sp)
    96fc:	dec01104 	addi	sp,sp,68
    9700:	f800283a 	ret

00009704 <__floatsidf>:
    9704:	2006d7fa 	srli	r3,r4,31
    9708:	defff604 	addi	sp,sp,-40
    970c:	008000c4 	movi	r2,3
    9710:	dfc00915 	stw	ra,36(sp)
    9714:	dcc00815 	stw	r19,32(sp)
    9718:	dc800715 	stw	r18,28(sp)
    971c:	dc400615 	stw	r17,24(sp)
    9720:	dc000515 	stw	r16,20(sp)
    9724:	d8800015 	stw	r2,0(sp)
    9728:	d8c00115 	stw	r3,4(sp)
    972c:	20000f1e 	bne	r4,zero,976c <__floatsidf+0x68>
    9730:	00800084 	movi	r2,2
    9734:	d8800015 	stw	r2,0(sp)
    9738:	d809883a 	mov	r4,sp
    973c:	0009c0c0 	call	9c0c <__pack_d>
    9740:	1009883a 	mov	r4,r2
    9744:	180b883a 	mov	r5,r3
    9748:	2005883a 	mov	r2,r4
    974c:	2807883a 	mov	r3,r5
    9750:	dfc00917 	ldw	ra,36(sp)
    9754:	dcc00817 	ldw	r19,32(sp)
    9758:	dc800717 	ldw	r18,28(sp)
    975c:	dc400617 	ldw	r17,24(sp)
    9760:	dc000517 	ldw	r16,20(sp)
    9764:	dec00a04 	addi	sp,sp,40
    9768:	f800283a 	ret
    976c:	00800f04 	movi	r2,60
    9770:	1807003a 	cmpeq	r3,r3,zero
    9774:	d8800215 	stw	r2,8(sp)
    9778:	18001126 	beq	r3,zero,97c0 <__floatsidf+0xbc>
    977c:	0027883a 	mov	r19,zero
    9780:	2025883a 	mov	r18,r4
    9784:	d9000315 	stw	r4,12(sp)
    9788:	dcc00415 	stw	r19,16(sp)
    978c:	0009b8c0 	call	9b8c <__clzsi2>
    9790:	11000744 	addi	r4,r2,29
    9794:	013fe80e 	bge	zero,r4,9738 <__floatsidf+0x34>
    9798:	10bfff44 	addi	r2,r2,-3
    979c:	10000c16 	blt	r2,zero,97d0 <__floatsidf+0xcc>
    97a0:	90a2983a 	sll	r17,r18,r2
    97a4:	0021883a 	mov	r16,zero
    97a8:	d8800217 	ldw	r2,8(sp)
    97ac:	dc400415 	stw	r17,16(sp)
    97b0:	dc000315 	stw	r16,12(sp)
    97b4:	1105c83a 	sub	r2,r2,r4
    97b8:	d8800215 	stw	r2,8(sp)
    97bc:	003fde06 	br	9738 <__floatsidf+0x34>
    97c0:	00a00034 	movhi	r2,32768
    97c4:	20800a26 	beq	r4,r2,97f0 <__floatsidf+0xec>
    97c8:	0109c83a 	sub	r4,zero,r4
    97cc:	003feb06 	br	977c <__floatsidf+0x78>
    97d0:	9006d07a 	srli	r3,r18,1
    97d4:	008007c4 	movi	r2,31
    97d8:	1105c83a 	sub	r2,r2,r4
    97dc:	1886d83a 	srl	r3,r3,r2
    97e0:	9922983a 	sll	r17,r19,r4
    97e4:	9120983a 	sll	r16,r18,r4
    97e8:	1c62b03a 	or	r17,r3,r17
    97ec:	003fee06 	br	97a8 <__floatsidf+0xa4>
    97f0:	0009883a 	mov	r4,zero
    97f4:	01707834 	movhi	r5,49632
    97f8:	003fd306 	br	9748 <__floatsidf+0x44>

000097fc <__fixdfsi>:
    97fc:	defff804 	addi	sp,sp,-32
    9800:	2005883a 	mov	r2,r4
    9804:	2807883a 	mov	r3,r5
    9808:	d809883a 	mov	r4,sp
    980c:	d9400204 	addi	r5,sp,8
    9810:	d8c00115 	stw	r3,4(sp)
    9814:	d8800015 	stw	r2,0(sp)
    9818:	dfc00715 	stw	ra,28(sp)
    981c:	0009f200 	call	9f20 <__unpack_d>
    9820:	d8c00217 	ldw	r3,8(sp)
    9824:	00800084 	movi	r2,2
    9828:	1880051e 	bne	r3,r2,9840 <__fixdfsi+0x44>
    982c:	0007883a 	mov	r3,zero
    9830:	1805883a 	mov	r2,r3
    9834:	dfc00717 	ldw	ra,28(sp)
    9838:	dec00804 	addi	sp,sp,32
    983c:	f800283a 	ret
    9840:	00800044 	movi	r2,1
    9844:	10fff92e 	bgeu	r2,r3,982c <__fixdfsi+0x30>
    9848:	00800104 	movi	r2,4
    984c:	18800426 	beq	r3,r2,9860 <__fixdfsi+0x64>
    9850:	d8c00417 	ldw	r3,16(sp)
    9854:	183ff516 	blt	r3,zero,982c <__fixdfsi+0x30>
    9858:	00800784 	movi	r2,30
    985c:	10c0080e 	bge	r2,r3,9880 <__fixdfsi+0x84>
    9860:	d8800317 	ldw	r2,12(sp)
    9864:	1000121e 	bne	r2,zero,98b0 <__fixdfsi+0xb4>
    9868:	00e00034 	movhi	r3,32768
    986c:	18ffffc4 	addi	r3,r3,-1
    9870:	1805883a 	mov	r2,r3
    9874:	dfc00717 	ldw	ra,28(sp)
    9878:	dec00804 	addi	sp,sp,32
    987c:	f800283a 	ret
    9880:	00800f04 	movi	r2,60
    9884:	10d1c83a 	sub	r8,r2,r3
    9888:	40bff804 	addi	r2,r8,-32
    988c:	d9800517 	ldw	r6,20(sp)
    9890:	d9c00617 	ldw	r7,24(sp)
    9894:	10000816 	blt	r2,zero,98b8 <__fixdfsi+0xbc>
    9898:	3888d83a 	srl	r4,r7,r2
    989c:	d8800317 	ldw	r2,12(sp)
    98a0:	2007883a 	mov	r3,r4
    98a4:	103fe226 	beq	r2,zero,9830 <__fixdfsi+0x34>
    98a8:	0107c83a 	sub	r3,zero,r4
    98ac:	003fe006 	br	9830 <__fixdfsi+0x34>
    98b0:	00e00034 	movhi	r3,32768
    98b4:	003fde06 	br	9830 <__fixdfsi+0x34>
    98b8:	39c7883a 	add	r3,r7,r7
    98bc:	008007c4 	movi	r2,31
    98c0:	1205c83a 	sub	r2,r2,r8
    98c4:	1886983a 	sll	r3,r3,r2
    98c8:	3208d83a 	srl	r4,r6,r8
    98cc:	1908b03a 	or	r4,r3,r4
    98d0:	003ff206 	br	989c <__fixdfsi+0xa0>

000098d4 <__floatunsidf>:
    98d4:	defff204 	addi	sp,sp,-56
    98d8:	dfc00d15 	stw	ra,52(sp)
    98dc:	ddc00c15 	stw	r23,48(sp)
    98e0:	dd800b15 	stw	r22,44(sp)
    98e4:	dd400a15 	stw	r21,40(sp)
    98e8:	dd000915 	stw	r20,36(sp)
    98ec:	dcc00815 	stw	r19,32(sp)
    98f0:	dc800715 	stw	r18,28(sp)
    98f4:	dc400615 	stw	r17,24(sp)
    98f8:	dc000515 	stw	r16,20(sp)
    98fc:	d8000115 	stw	zero,4(sp)
    9900:	20000f1e 	bne	r4,zero,9940 <__floatunsidf+0x6c>
    9904:	00800084 	movi	r2,2
    9908:	d8800015 	stw	r2,0(sp)
    990c:	d809883a 	mov	r4,sp
    9910:	0009c0c0 	call	9c0c <__pack_d>
    9914:	dfc00d17 	ldw	ra,52(sp)
    9918:	ddc00c17 	ldw	r23,48(sp)
    991c:	dd800b17 	ldw	r22,44(sp)
    9920:	dd400a17 	ldw	r21,40(sp)
    9924:	dd000917 	ldw	r20,36(sp)
    9928:	dcc00817 	ldw	r19,32(sp)
    992c:	dc800717 	ldw	r18,28(sp)
    9930:	dc400617 	ldw	r17,24(sp)
    9934:	dc000517 	ldw	r16,20(sp)
    9938:	dec00e04 	addi	sp,sp,56
    993c:	f800283a 	ret
    9940:	008000c4 	movi	r2,3
    9944:	00c00f04 	movi	r3,60
    9948:	002f883a 	mov	r23,zero
    994c:	202d883a 	mov	r22,r4
    9950:	d8800015 	stw	r2,0(sp)
    9954:	d8c00215 	stw	r3,8(sp)
    9958:	d9000315 	stw	r4,12(sp)
    995c:	ddc00415 	stw	r23,16(sp)
    9960:	0009b8c0 	call	9b8c <__clzsi2>
    9964:	12400744 	addi	r9,r2,29
    9968:	48000b16 	blt	r9,zero,9998 <__floatunsidf+0xc4>
    996c:	483fe726 	beq	r9,zero,990c <__floatunsidf+0x38>
    9970:	10bfff44 	addi	r2,r2,-3
    9974:	10002e16 	blt	r2,zero,9a30 <__floatunsidf+0x15c>
    9978:	b0a2983a 	sll	r17,r22,r2
    997c:	0021883a 	mov	r16,zero
    9980:	d8800217 	ldw	r2,8(sp)
    9984:	dc400415 	stw	r17,16(sp)
    9988:	dc000315 	stw	r16,12(sp)
    998c:	1245c83a 	sub	r2,r2,r9
    9990:	d8800215 	stw	r2,8(sp)
    9994:	003fdd06 	br	990c <__floatunsidf+0x38>
    9998:	0255c83a 	sub	r10,zero,r9
    999c:	51bff804 	addi	r6,r10,-32
    99a0:	30001b16 	blt	r6,zero,9a10 <__floatunsidf+0x13c>
    99a4:	b9a8d83a 	srl	r20,r23,r6
    99a8:	002b883a 	mov	r21,zero
    99ac:	000f883a 	mov	r7,zero
    99b0:	01000044 	movi	r4,1
    99b4:	0011883a 	mov	r8,zero
    99b8:	30002516 	blt	r6,zero,9a50 <__floatunsidf+0x17c>
    99bc:	21a6983a 	sll	r19,r4,r6
    99c0:	0025883a 	mov	r18,zero
    99c4:	00bfffc4 	movi	r2,-1
    99c8:	9089883a 	add	r4,r18,r2
    99cc:	988b883a 	add	r5,r19,r2
    99d0:	248d803a 	cmpltu	r6,r4,r18
    99d4:	314b883a 	add	r5,r6,r5
    99d8:	b104703a 	and	r2,r22,r4
    99dc:	b946703a 	and	r3,r23,r5
    99e0:	10c4b03a 	or	r2,r2,r3
    99e4:	10000226 	beq	r2,zero,99f0 <__floatunsidf+0x11c>
    99e8:	01c00044 	movi	r7,1
    99ec:	0011883a 	mov	r8,zero
    99f0:	d9000217 	ldw	r4,8(sp)
    99f4:	a1c4b03a 	or	r2,r20,r7
    99f8:	aa06b03a 	or	r3,r21,r8
    99fc:	2249c83a 	sub	r4,r4,r9
    9a00:	d8c00415 	stw	r3,16(sp)
    9a04:	d9000215 	stw	r4,8(sp)
    9a08:	d8800315 	stw	r2,12(sp)
    9a0c:	003fbf06 	br	990c <__floatunsidf+0x38>
    9a10:	bdc7883a 	add	r3,r23,r23
    9a14:	008007c4 	movi	r2,31
    9a18:	1285c83a 	sub	r2,r2,r10
    9a1c:	1886983a 	sll	r3,r3,r2
    9a20:	b2a8d83a 	srl	r20,r22,r10
    9a24:	baaad83a 	srl	r21,r23,r10
    9a28:	1d28b03a 	or	r20,r3,r20
    9a2c:	003fdf06 	br	99ac <__floatunsidf+0xd8>
    9a30:	b006d07a 	srli	r3,r22,1
    9a34:	008007c4 	movi	r2,31
    9a38:	1245c83a 	sub	r2,r2,r9
    9a3c:	1886d83a 	srl	r3,r3,r2
    9a40:	ba62983a 	sll	r17,r23,r9
    9a44:	b260983a 	sll	r16,r22,r9
    9a48:	1c62b03a 	or	r17,r3,r17
    9a4c:	003fcc06 	br	9980 <__floatunsidf+0xac>
    9a50:	2006d07a 	srli	r3,r4,1
    9a54:	008007c4 	movi	r2,31
    9a58:	1285c83a 	sub	r2,r2,r10
    9a5c:	18a6d83a 	srl	r19,r3,r2
    9a60:	22a4983a 	sll	r18,r4,r10
    9a64:	003fd706 	br	99c4 <__floatunsidf+0xf0>

00009a68 <__muldi3>:
    9a68:	defff204 	addi	sp,sp,-56
    9a6c:	df000c15 	stw	fp,48(sp)
    9a70:	3038d43a 	srli	fp,r6,16
    9a74:	dd000815 	stw	r20,32(sp)
    9a78:	dc400515 	stw	r17,20(sp)
    9a7c:	2028d43a 	srli	r20,r4,16
    9a80:	247fffcc 	andi	r17,r4,65535
    9a84:	dc000415 	stw	r16,16(sp)
    9a88:	343fffcc 	andi	r16,r6,65535
    9a8c:	dcc00715 	stw	r19,28(sp)
    9a90:	d9000015 	stw	r4,0(sp)
    9a94:	2827883a 	mov	r19,r5
    9a98:	8809883a 	mov	r4,r17
    9a9c:	d9400115 	stw	r5,4(sp)
    9aa0:	800b883a 	mov	r5,r16
    9aa4:	d9800215 	stw	r6,8(sp)
    9aa8:	dfc00d15 	stw	ra,52(sp)
    9aac:	d9c00315 	stw	r7,12(sp)
    9ab0:	dd800a15 	stw	r22,40(sp)
    9ab4:	dd400915 	stw	r21,36(sp)
    9ab8:	302d883a 	mov	r22,r6
    9abc:	ddc00b15 	stw	r23,44(sp)
    9ac0:	dc800615 	stw	r18,24(sp)
    9ac4:	00007d80 	call	7d8 <__mulsi3>
    9ac8:	8809883a 	mov	r4,r17
    9acc:	e00b883a 	mov	r5,fp
    9ad0:	102b883a 	mov	r21,r2
    9ad4:	00007d80 	call	7d8 <__mulsi3>
    9ad8:	800b883a 	mov	r5,r16
    9adc:	a009883a 	mov	r4,r20
    9ae0:	1023883a 	mov	r17,r2
    9ae4:	00007d80 	call	7d8 <__mulsi3>
    9ae8:	a009883a 	mov	r4,r20
    9aec:	e00b883a 	mov	r5,fp
    9af0:	1021883a 	mov	r16,r2
    9af4:	00007d80 	call	7d8 <__mulsi3>
    9af8:	a8ffffcc 	andi	r3,r21,65535
    9afc:	a82ad43a 	srli	r21,r21,16
    9b00:	8c23883a 	add	r17,r17,r16
    9b04:	1011883a 	mov	r8,r2
    9b08:	ac6b883a 	add	r21,r21,r17
    9b0c:	a804943a 	slli	r2,r21,16
    9b10:	b009883a 	mov	r4,r22
    9b14:	980b883a 	mov	r5,r19
    9b18:	10c7883a 	add	r3,r2,r3
    9b1c:	a812d43a 	srli	r9,r21,16
    9b20:	180d883a 	mov	r6,r3
    9b24:	ac00022e 	bgeu	r21,r16,9b30 <__muldi3+0xc8>
    9b28:	00800074 	movhi	r2,1
    9b2c:	4091883a 	add	r8,r8,r2
    9b30:	4267883a 	add	r19,r8,r9
    9b34:	302d883a 	mov	r22,r6
    9b38:	00007d80 	call	7d8 <__mulsi3>
    9b3c:	d9400317 	ldw	r5,12(sp)
    9b40:	d9000017 	ldw	r4,0(sp)
    9b44:	1023883a 	mov	r17,r2
    9b48:	00007d80 	call	7d8 <__mulsi3>
    9b4c:	14cb883a 	add	r5,r2,r19
    9b50:	894b883a 	add	r5,r17,r5
    9b54:	b005883a 	mov	r2,r22
    9b58:	2807883a 	mov	r3,r5
    9b5c:	dfc00d17 	ldw	ra,52(sp)
    9b60:	df000c17 	ldw	fp,48(sp)
    9b64:	ddc00b17 	ldw	r23,44(sp)
    9b68:	dd800a17 	ldw	r22,40(sp)
    9b6c:	dd400917 	ldw	r21,36(sp)
    9b70:	dd000817 	ldw	r20,32(sp)
    9b74:	dcc00717 	ldw	r19,28(sp)
    9b78:	dc800617 	ldw	r18,24(sp)
    9b7c:	dc400517 	ldw	r17,20(sp)
    9b80:	dc000417 	ldw	r16,16(sp)
    9b84:	dec00e04 	addi	sp,sp,56
    9b88:	f800283a 	ret

00009b8c <__clzsi2>:
    9b8c:	00bfffd4 	movui	r2,65535
    9b90:	11000e36 	bltu	r2,r4,9bcc <__clzsi2+0x40>
    9b94:	00803fc4 	movi	r2,255
    9b98:	01400204 	movi	r5,8
    9b9c:	0007883a 	mov	r3,zero
    9ba0:	11001036 	bltu	r2,r4,9be4 <__clzsi2+0x58>
    9ba4:	000b883a 	mov	r5,zero
    9ba8:	20c6d83a 	srl	r3,r4,r3
    9bac:	00800074 	movhi	r2,1
    9bb0:	10b4e404 	addi	r2,r2,-11376
    9bb4:	1887883a 	add	r3,r3,r2
    9bb8:	18800003 	ldbu	r2,0(r3)
    9bbc:	00c00804 	movi	r3,32
    9bc0:	2885883a 	add	r2,r5,r2
    9bc4:	1885c83a 	sub	r2,r3,r2
    9bc8:	f800283a 	ret
    9bcc:	01400404 	movi	r5,16
    9bd0:	00804034 	movhi	r2,256
    9bd4:	10bfffc4 	addi	r2,r2,-1
    9bd8:	2807883a 	mov	r3,r5
    9bdc:	113ff22e 	bgeu	r2,r4,9ba8 <__clzsi2+0x1c>
    9be0:	01400604 	movi	r5,24
    9be4:	2807883a 	mov	r3,r5
    9be8:	20c6d83a 	srl	r3,r4,r3
    9bec:	00800074 	movhi	r2,1
    9bf0:	10b4e404 	addi	r2,r2,-11376
    9bf4:	1887883a 	add	r3,r3,r2
    9bf8:	18800003 	ldbu	r2,0(r3)
    9bfc:	00c00804 	movi	r3,32
    9c00:	2885883a 	add	r2,r5,r2
    9c04:	1885c83a 	sub	r2,r3,r2
    9c08:	f800283a 	ret

00009c0c <__pack_d>:
    9c0c:	20c00017 	ldw	r3,0(r4)
    9c10:	defffd04 	addi	sp,sp,-12
    9c14:	dc000015 	stw	r16,0(sp)
    9c18:	dc800215 	stw	r18,8(sp)
    9c1c:	dc400115 	stw	r17,4(sp)
    9c20:	00800044 	movi	r2,1
    9c24:	22000317 	ldw	r8,12(r4)
    9c28:	001f883a 	mov	r15,zero
    9c2c:	22400417 	ldw	r9,16(r4)
    9c30:	24000117 	ldw	r16,4(r4)
    9c34:	10c0552e 	bgeu	r2,r3,9d8c <__pack_d+0x180>
    9c38:	00800104 	movi	r2,4
    9c3c:	18804f26 	beq	r3,r2,9d7c <__pack_d+0x170>
    9c40:	00800084 	movi	r2,2
    9c44:	18800226 	beq	r3,r2,9c50 <__pack_d+0x44>
    9c48:	4244b03a 	or	r2,r8,r9
    9c4c:	10001a1e 	bne	r2,zero,9cb8 <__pack_d+0xac>
    9c50:	000d883a 	mov	r6,zero
    9c54:	000f883a 	mov	r7,zero
    9c58:	0011883a 	mov	r8,zero
    9c5c:	00800434 	movhi	r2,16
    9c60:	10bfffc4 	addi	r2,r2,-1
    9c64:	301d883a 	mov	r14,r6
    9c68:	3884703a 	and	r2,r7,r2
    9c6c:	400a953a 	slli	r5,r8,20
    9c70:	79bffc2c 	andhi	r6,r15,65520
    9c74:	308cb03a 	or	r6,r6,r2
    9c78:	00e00434 	movhi	r3,32784
    9c7c:	18ffffc4 	addi	r3,r3,-1
    9c80:	800497fa 	slli	r2,r16,31
    9c84:	30c6703a 	and	r3,r6,r3
    9c88:	1946b03a 	or	r3,r3,r5
    9c8c:	01600034 	movhi	r5,32768
    9c90:	297fffc4 	addi	r5,r5,-1
    9c94:	194a703a 	and	r5,r3,r5
    9c98:	288ab03a 	or	r5,r5,r2
    9c9c:	2807883a 	mov	r3,r5
    9ca0:	7005883a 	mov	r2,r14
    9ca4:	dc800217 	ldw	r18,8(sp)
    9ca8:	dc400117 	ldw	r17,4(sp)
    9cac:	dc000017 	ldw	r16,0(sp)
    9cb0:	dec00304 	addi	sp,sp,12
    9cb4:	f800283a 	ret
    9cb8:	21000217 	ldw	r4,8(r4)
    9cbc:	00bf0084 	movi	r2,-1022
    9cc0:	20803f16 	blt	r4,r2,9dc0 <__pack_d+0x1b4>
    9cc4:	0080ffc4 	movi	r2,1023
    9cc8:	11002c16 	blt	r2,r4,9d7c <__pack_d+0x170>
    9ccc:	00803fc4 	movi	r2,255
    9cd0:	408c703a 	and	r6,r8,r2
    9cd4:	00802004 	movi	r2,128
    9cd8:	0007883a 	mov	r3,zero
    9cdc:	000f883a 	mov	r7,zero
    9ce0:	2280ffc4 	addi	r10,r4,1023
    9ce4:	30801e26 	beq	r6,r2,9d60 <__pack_d+0x154>
    9ce8:	00801fc4 	movi	r2,127
    9cec:	4089883a 	add	r4,r8,r2
    9cf0:	220d803a 	cmpltu	r6,r4,r8
    9cf4:	324d883a 	add	r6,r6,r9
    9cf8:	2011883a 	mov	r8,r4
    9cfc:	3013883a 	mov	r9,r6
    9d00:	00880034 	movhi	r2,8192
    9d04:	10bfffc4 	addi	r2,r2,-1
    9d08:	12400d36 	bltu	r2,r9,9d40 <__pack_d+0x134>
    9d0c:	4804963a 	slli	r2,r9,24
    9d10:	400cd23a 	srli	r6,r8,8
    9d14:	480ed23a 	srli	r7,r9,8
    9d18:	013fffc4 	movi	r4,-1
    9d1c:	118cb03a 	or	r6,r2,r6
    9d20:	01400434 	movhi	r5,16
    9d24:	297fffc4 	addi	r5,r5,-1
    9d28:	3104703a 	and	r2,r6,r4
    9d2c:	3946703a 	and	r3,r7,r5
    9d30:	5201ffcc 	andi	r8,r10,2047
    9d34:	100d883a 	mov	r6,r2
    9d38:	180f883a 	mov	r7,r3
    9d3c:	003fc706 	br	9c5c <__pack_d+0x50>
    9d40:	480897fa 	slli	r4,r9,31
    9d44:	4004d07a 	srli	r2,r8,1
    9d48:	4806d07a 	srli	r3,r9,1
    9d4c:	52800044 	addi	r10,r10,1
    9d50:	2084b03a 	or	r2,r4,r2
    9d54:	1011883a 	mov	r8,r2
    9d58:	1813883a 	mov	r9,r3
    9d5c:	003feb06 	br	9d0c <__pack_d+0x100>
    9d60:	383fe11e 	bne	r7,zero,9ce8 <__pack_d+0xdc>
    9d64:	01004004 	movi	r4,256
    9d68:	4104703a 	and	r2,r8,r4
    9d6c:	10c4b03a 	or	r2,r2,r3
    9d70:	103fe326 	beq	r2,zero,9d00 <__pack_d+0xf4>
    9d74:	3005883a 	mov	r2,r6
    9d78:	003fdc06 	br	9cec <__pack_d+0xe0>
    9d7c:	000d883a 	mov	r6,zero
    9d80:	000f883a 	mov	r7,zero
    9d84:	0201ffc4 	movi	r8,2047
    9d88:	003fb406 	br	9c5c <__pack_d+0x50>
    9d8c:	0005883a 	mov	r2,zero
    9d90:	00c00234 	movhi	r3,8
    9d94:	408cb03a 	or	r6,r8,r2
    9d98:	48ceb03a 	or	r7,r9,r3
    9d9c:	013fffc4 	movi	r4,-1
    9da0:	01400434 	movhi	r5,16
    9da4:	297fffc4 	addi	r5,r5,-1
    9da8:	3104703a 	and	r2,r6,r4
    9dac:	3946703a 	and	r3,r7,r5
    9db0:	100d883a 	mov	r6,r2
    9db4:	180f883a 	mov	r7,r3
    9db8:	0201ffc4 	movi	r8,2047
    9dbc:	003fa706 	br	9c5c <__pack_d+0x50>
    9dc0:	1109c83a 	sub	r4,r2,r4
    9dc4:	00800e04 	movi	r2,56
    9dc8:	11004316 	blt	r2,r4,9ed8 <__pack_d+0x2cc>
    9dcc:	21fff804 	addi	r7,r4,-32
    9dd0:	38004516 	blt	r7,zero,9ee8 <__pack_d+0x2dc>
    9dd4:	49d8d83a 	srl	r12,r9,r7
    9dd8:	001b883a 	mov	r13,zero
    9ddc:	0023883a 	mov	r17,zero
    9de0:	01400044 	movi	r5,1
    9de4:	0025883a 	mov	r18,zero
    9de8:	38004716 	blt	r7,zero,9f08 <__pack_d+0x2fc>
    9dec:	29d6983a 	sll	r11,r5,r7
    9df0:	0015883a 	mov	r10,zero
    9df4:	00bfffc4 	movi	r2,-1
    9df8:	5089883a 	add	r4,r10,r2
    9dfc:	588b883a 	add	r5,r11,r2
    9e00:	228d803a 	cmpltu	r6,r4,r10
    9e04:	314b883a 	add	r5,r6,r5
    9e08:	4104703a 	and	r2,r8,r4
    9e0c:	4946703a 	and	r3,r9,r5
    9e10:	10c4b03a 	or	r2,r2,r3
    9e14:	10000226 	beq	r2,zero,9e20 <__pack_d+0x214>
    9e18:	04400044 	movi	r17,1
    9e1c:	0025883a 	mov	r18,zero
    9e20:	00803fc4 	movi	r2,255
    9e24:	644eb03a 	or	r7,r12,r17
    9e28:	3892703a 	and	r9,r7,r2
    9e2c:	00802004 	movi	r2,128
    9e30:	6c90b03a 	or	r8,r13,r18
    9e34:	0015883a 	mov	r10,zero
    9e38:	48801626 	beq	r9,r2,9e94 <__pack_d+0x288>
    9e3c:	01001fc4 	movi	r4,127
    9e40:	3905883a 	add	r2,r7,r4
    9e44:	11cd803a 	cmpltu	r6,r2,r7
    9e48:	320d883a 	add	r6,r6,r8
    9e4c:	100f883a 	mov	r7,r2
    9e50:	00840034 	movhi	r2,4096
    9e54:	10bfffc4 	addi	r2,r2,-1
    9e58:	3011883a 	mov	r8,r6
    9e5c:	0007883a 	mov	r3,zero
    9e60:	11801b36 	bltu	r2,r6,9ed0 <__pack_d+0x2c4>
    9e64:	4004963a 	slli	r2,r8,24
    9e68:	3808d23a 	srli	r4,r7,8
    9e6c:	400ad23a 	srli	r5,r8,8
    9e70:	1813883a 	mov	r9,r3
    9e74:	1108b03a 	or	r4,r2,r4
    9e78:	00bfffc4 	movi	r2,-1
    9e7c:	00c00434 	movhi	r3,16
    9e80:	18ffffc4 	addi	r3,r3,-1
    9e84:	208c703a 	and	r6,r4,r2
    9e88:	28ce703a 	and	r7,r5,r3
    9e8c:	4a01ffcc 	andi	r8,r9,2047
    9e90:	003f7206 	br	9c5c <__pack_d+0x50>
    9e94:	503fe91e 	bne	r10,zero,9e3c <__pack_d+0x230>
    9e98:	01004004 	movi	r4,256
    9e9c:	3904703a 	and	r2,r7,r4
    9ea0:	0007883a 	mov	r3,zero
    9ea4:	10c4b03a 	or	r2,r2,r3
    9ea8:	10000626 	beq	r2,zero,9ec4 <__pack_d+0x2b8>
    9eac:	3a45883a 	add	r2,r7,r9
    9eb0:	11cd803a 	cmpltu	r6,r2,r7
    9eb4:	320d883a 	add	r6,r6,r8
    9eb8:	100f883a 	mov	r7,r2
    9ebc:	3011883a 	mov	r8,r6
    9ec0:	0007883a 	mov	r3,zero
    9ec4:	00840034 	movhi	r2,4096
    9ec8:	10bfffc4 	addi	r2,r2,-1
    9ecc:	123fe52e 	bgeu	r2,r8,9e64 <__pack_d+0x258>
    9ed0:	00c00044 	movi	r3,1
    9ed4:	003fe306 	br	9e64 <__pack_d+0x258>
    9ed8:	0009883a 	mov	r4,zero
    9edc:	0013883a 	mov	r9,zero
    9ee0:	000b883a 	mov	r5,zero
    9ee4:	003fe406 	br	9e78 <__pack_d+0x26c>
    9ee8:	4a47883a 	add	r3,r9,r9
    9eec:	008007c4 	movi	r2,31
    9ef0:	1105c83a 	sub	r2,r2,r4
    9ef4:	1886983a 	sll	r3,r3,r2
    9ef8:	4118d83a 	srl	r12,r8,r4
    9efc:	491ad83a 	srl	r13,r9,r4
    9f00:	1b18b03a 	or	r12,r3,r12
    9f04:	003fb506 	br	9ddc <__pack_d+0x1d0>
    9f08:	2806d07a 	srli	r3,r5,1
    9f0c:	008007c4 	movi	r2,31
    9f10:	1105c83a 	sub	r2,r2,r4
    9f14:	1896d83a 	srl	r11,r3,r2
    9f18:	2914983a 	sll	r10,r5,r4
    9f1c:	003fb506 	br	9df4 <__pack_d+0x1e8>

00009f20 <__unpack_d>:
    9f20:	20c00117 	ldw	r3,4(r4)
    9f24:	22400017 	ldw	r9,0(r4)
    9f28:	00800434 	movhi	r2,16
    9f2c:	10bfffc4 	addi	r2,r2,-1
    9f30:	1808d53a 	srli	r4,r3,20
    9f34:	180cd7fa 	srli	r6,r3,31
    9f38:	1894703a 	and	r10,r3,r2
    9f3c:	2201ffcc 	andi	r8,r4,2047
    9f40:	281b883a 	mov	r13,r5
    9f44:	4817883a 	mov	r11,r9
    9f48:	29800115 	stw	r6,4(r5)
    9f4c:	5019883a 	mov	r12,r10
    9f50:	40001e1e 	bne	r8,zero,9fcc <__unpack_d+0xac>
    9f54:	4a84b03a 	or	r2,r9,r10
    9f58:	10001926 	beq	r2,zero,9fc0 <__unpack_d+0xa0>
    9f5c:	4804d63a 	srli	r2,r9,24
    9f60:	500c923a 	slli	r6,r10,8
    9f64:	013f0084 	movi	r4,-1022
    9f68:	00c40034 	movhi	r3,4096
    9f6c:	18ffffc4 	addi	r3,r3,-1
    9f70:	118cb03a 	or	r6,r2,r6
    9f74:	008000c4 	movi	r2,3
    9f78:	480a923a 	slli	r5,r9,8
    9f7c:	68800015 	stw	r2,0(r13)
    9f80:	69000215 	stw	r4,8(r13)
    9f84:	19800b36 	bltu	r3,r6,9fb4 <__unpack_d+0x94>
    9f88:	200f883a 	mov	r7,r4
    9f8c:	1811883a 	mov	r8,r3
    9f90:	2945883a 	add	r2,r5,r5
    9f94:	1149803a 	cmpltu	r4,r2,r5
    9f98:	3187883a 	add	r3,r6,r6
    9f9c:	20c9883a 	add	r4,r4,r3
    9fa0:	100b883a 	mov	r5,r2
    9fa4:	200d883a 	mov	r6,r4
    9fa8:	39ffffc4 	addi	r7,r7,-1
    9fac:	413ff82e 	bgeu	r8,r4,9f90 <__unpack_d+0x70>
    9fb0:	69c00215 	stw	r7,8(r13)
    9fb4:	69800415 	stw	r6,16(r13)
    9fb8:	69400315 	stw	r5,12(r13)
    9fbc:	f800283a 	ret
    9fc0:	00800084 	movi	r2,2
    9fc4:	28800015 	stw	r2,0(r5)
    9fc8:	f800283a 	ret
    9fcc:	0081ffc4 	movi	r2,2047
    9fd0:	40800f26 	beq	r8,r2,a010 <__unpack_d+0xf0>
    9fd4:	480cd63a 	srli	r6,r9,24
    9fd8:	5006923a 	slli	r3,r10,8
    9fdc:	4804923a 	slli	r2,r9,8
    9fe0:	0009883a 	mov	r4,zero
    9fe4:	30c6b03a 	or	r3,r6,r3
    9fe8:	01440034 	movhi	r5,4096
    9fec:	110cb03a 	or	r6,r2,r4
    9ff0:	423f0044 	addi	r8,r8,-1023
    9ff4:	194eb03a 	or	r7,r3,r5
    9ff8:	008000c4 	movi	r2,3
    9ffc:	69c00415 	stw	r7,16(r13)
    a000:	6a000215 	stw	r8,8(r13)
    a004:	68800015 	stw	r2,0(r13)
    a008:	69800315 	stw	r6,12(r13)
    a00c:	f800283a 	ret
    a010:	4a84b03a 	or	r2,r9,r10
    a014:	1000031e 	bne	r2,zero,a024 <__unpack_d+0x104>
    a018:	00800104 	movi	r2,4
    a01c:	28800015 	stw	r2,0(r5)
    a020:	f800283a 	ret
    a024:	0009883a 	mov	r4,zero
    a028:	01400234 	movhi	r5,8
    a02c:	4904703a 	and	r2,r9,r4
    a030:	5146703a 	and	r3,r10,r5
    a034:	10c4b03a 	or	r2,r2,r3
    a038:	10000526 	beq	r2,zero,a050 <__unpack_d+0x130>
    a03c:	00800044 	movi	r2,1
    a040:	68800015 	stw	r2,0(r13)
    a044:	6b000415 	stw	r12,16(r13)
    a048:	6ac00315 	stw	r11,12(r13)
    a04c:	f800283a 	ret
    a050:	68000015 	stw	zero,0(r13)
    a054:	003ffb06 	br	a044 <__unpack_d+0x124>

0000a058 <__fpcmp_parts_d>:
    a058:	21800017 	ldw	r6,0(r4)
    a05c:	00c00044 	movi	r3,1
    a060:	19800a2e 	bgeu	r3,r6,a08c <__fpcmp_parts_d+0x34>
    a064:	28800017 	ldw	r2,0(r5)
    a068:	1880082e 	bgeu	r3,r2,a08c <__fpcmp_parts_d+0x34>
    a06c:	00c00104 	movi	r3,4
    a070:	30c02626 	beq	r6,r3,a10c <__fpcmp_parts_d+0xb4>
    a074:	10c02226 	beq	r2,r3,a100 <__fpcmp_parts_d+0xa8>
    a078:	00c00084 	movi	r3,2
    a07c:	30c00526 	beq	r6,r3,a094 <__fpcmp_parts_d+0x3c>
    a080:	10c0071e 	bne	r2,r3,a0a0 <__fpcmp_parts_d+0x48>
    a084:	20800117 	ldw	r2,4(r4)
    a088:	1000091e 	bne	r2,zero,a0b0 <__fpcmp_parts_d+0x58>
    a08c:	00800044 	movi	r2,1
    a090:	f800283a 	ret
    a094:	10c01a1e 	bne	r2,r3,a100 <__fpcmp_parts_d+0xa8>
    a098:	0005883a 	mov	r2,zero
    a09c:	f800283a 	ret
    a0a0:	22000117 	ldw	r8,4(r4)
    a0a4:	28800117 	ldw	r2,4(r5)
    a0a8:	40800326 	beq	r8,r2,a0b8 <__fpcmp_parts_d+0x60>
    a0ac:	403ff726 	beq	r8,zero,a08c <__fpcmp_parts_d+0x34>
    a0b0:	00bfffc4 	movi	r2,-1
    a0b4:	f800283a 	ret
    a0b8:	20c00217 	ldw	r3,8(r4)
    a0bc:	28800217 	ldw	r2,8(r5)
    a0c0:	10fffa16 	blt	r2,r3,a0ac <__fpcmp_parts_d+0x54>
    a0c4:	18800916 	blt	r3,r2,a0ec <__fpcmp_parts_d+0x94>
    a0c8:	21c00417 	ldw	r7,16(r4)
    a0cc:	28c00417 	ldw	r3,16(r5)
    a0d0:	21800317 	ldw	r6,12(r4)
    a0d4:	28800317 	ldw	r2,12(r5)
    a0d8:	19fff436 	bltu	r3,r7,a0ac <__fpcmp_parts_d+0x54>
    a0dc:	38c00526 	beq	r7,r3,a0f4 <__fpcmp_parts_d+0x9c>
    a0e0:	38c00236 	bltu	r7,r3,a0ec <__fpcmp_parts_d+0x94>
    a0e4:	19ffec1e 	bne	r3,r7,a098 <__fpcmp_parts_d+0x40>
    a0e8:	30bfeb2e 	bgeu	r6,r2,a098 <__fpcmp_parts_d+0x40>
    a0ec:	403fe71e 	bne	r8,zero,a08c <__fpcmp_parts_d+0x34>
    a0f0:	003fef06 	br	a0b0 <__fpcmp_parts_d+0x58>
    a0f4:	11bffa2e 	bgeu	r2,r6,a0e0 <__fpcmp_parts_d+0x88>
    a0f8:	403fe426 	beq	r8,zero,a08c <__fpcmp_parts_d+0x34>
    a0fc:	003fec06 	br	a0b0 <__fpcmp_parts_d+0x58>
    a100:	28800117 	ldw	r2,4(r5)
    a104:	103fe11e 	bne	r2,zero,a08c <__fpcmp_parts_d+0x34>
    a108:	003fe906 	br	a0b0 <__fpcmp_parts_d+0x58>
    a10c:	11bfdd1e 	bne	r2,r6,a084 <__fpcmp_parts_d+0x2c>
    a110:	28c00117 	ldw	r3,4(r5)
    a114:	20800117 	ldw	r2,4(r4)
    a118:	1885c83a 	sub	r2,r3,r2
    a11c:	f800283a 	ret

0000a120 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    a120:	defff404 	addi	sp,sp,-48
    a124:	df000b15 	stw	fp,44(sp)
    a128:	df000b04 	addi	fp,sp,44
    a12c:	e13ffb15 	stw	r4,-20(fp)
    a130:	e17ffc15 	stw	r5,-16(fp)
    a134:	e1bffd15 	stw	r6,-12(fp)
    a138:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    a13c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    a140:	00800074 	movhi	r2,1
    a144:	10826a04 	addi	r2,r2,2472
    a148:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    a14c:	1005003a 	cmpeq	r2,r2,zero
    a150:	1000411e 	bne	r2,zero,a258 <alt_alarm_start+0x138>
  {
    if (alarm)
    a154:	e0bffb17 	ldw	r2,-20(fp)
    a158:	1005003a 	cmpeq	r2,r2,zero
    a15c:	10003b1e 	bne	r2,zero,a24c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    a160:	e0fffb17 	ldw	r3,-20(fp)
    a164:	e0bffd17 	ldw	r2,-12(fp)
    a168:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    a16c:	e0fffb17 	ldw	r3,-20(fp)
    a170:	e0bffe17 	ldw	r2,-8(fp)
    a174:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a178:	0005303a 	rdctl	r2,status
    a17c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a180:	e0fff817 	ldw	r3,-32(fp)
    a184:	00bfff84 	movi	r2,-2
    a188:	1884703a 	and	r2,r3,r2
    a18c:	1001703a 	wrctl	status,r2
  
  return context;
    a190:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    a194:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    a198:	00800074 	movhi	r2,1
    a19c:	10826b04 	addi	r2,r2,2476
    a1a0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    a1a4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    a1a8:	e0fffc17 	ldw	r3,-16(fp)
    a1ac:	e0bff917 	ldw	r2,-28(fp)
    a1b0:	1885883a 	add	r2,r3,r2
    a1b4:	10c00044 	addi	r3,r2,1
    a1b8:	e0bffb17 	ldw	r2,-20(fp)
    a1bc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    a1c0:	e0bffb17 	ldw	r2,-20(fp)
    a1c4:	10c00217 	ldw	r3,8(r2)
    a1c8:	e0bff917 	ldw	r2,-28(fp)
    a1cc:	1880042e 	bgeu	r3,r2,a1e0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    a1d0:	e0fffb17 	ldw	r3,-20(fp)
    a1d4:	00800044 	movi	r2,1
    a1d8:	18800405 	stb	r2,16(r3)
    a1dc:	00000206 	br	a1e8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    a1e0:	e0bffb17 	ldw	r2,-20(fp)
    a1e4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    a1e8:	e0fffb17 	ldw	r3,-20(fp)
    a1ec:	00800074 	movhi	r2,1
    a1f0:	10bbc304 	addi	r2,r2,-4340
    a1f4:	e0bff615 	stw	r2,-40(fp)
    a1f8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a1fc:	e0fff717 	ldw	r3,-36(fp)
    a200:	e0bff617 	ldw	r2,-40(fp)
    a204:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    a208:	e0bff617 	ldw	r2,-40(fp)
    a20c:	10c00017 	ldw	r3,0(r2)
    a210:	e0bff717 	ldw	r2,-36(fp)
    a214:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    a218:	e0bff617 	ldw	r2,-40(fp)
    a21c:	10c00017 	ldw	r3,0(r2)
    a220:	e0bff717 	ldw	r2,-36(fp)
    a224:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    a228:	e0fff617 	ldw	r3,-40(fp)
    a22c:	e0bff717 	ldw	r2,-36(fp)
    a230:	18800015 	stw	r2,0(r3)
    a234:	e0bffa17 	ldw	r2,-24(fp)
    a238:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a23c:	e0bff517 	ldw	r2,-44(fp)
    a240:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    a244:	e03fff15 	stw	zero,-4(fp)
    a248:	00000506 	br	a260 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    a24c:	00bffa84 	movi	r2,-22
    a250:	e0bfff15 	stw	r2,-4(fp)
    a254:	00000206 	br	a260 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    a258:	00bfde84 	movi	r2,-134
    a25c:	e0bfff15 	stw	r2,-4(fp)
    a260:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    a264:	e037883a 	mov	sp,fp
    a268:	df000017 	ldw	fp,0(sp)
    a26c:	dec00104 	addi	sp,sp,4
    a270:	f800283a 	ret

0000a274 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a274:	defff804 	addi	sp,sp,-32
    a278:	dfc00715 	stw	ra,28(sp)
    a27c:	df000615 	stw	fp,24(sp)
    a280:	df000604 	addi	fp,sp,24
    a284:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a288:	e0bffc17 	ldw	r2,-16(fp)
    a28c:	1004803a 	cmplt	r2,r2,zero
    a290:	1000091e 	bne	r2,zero,a2b8 <close+0x44>
    a294:	e13ffc17 	ldw	r4,-16(fp)
    a298:	01400304 	movi	r5,12
    a29c:	00007d80 	call	7d8 <__mulsi3>
    a2a0:	1007883a 	mov	r3,r2
    a2a4:	00800074 	movhi	r2,1
    a2a8:	10b73e04 	addi	r2,r2,-8968
    a2ac:	1887883a 	add	r3,r3,r2
    a2b0:	e0ffff15 	stw	r3,-4(fp)
    a2b4:	00000106 	br	a2bc <close+0x48>
    a2b8:	e03fff15 	stw	zero,-4(fp)
    a2bc:	e0bfff17 	ldw	r2,-4(fp)
    a2c0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    a2c4:	e0bffb17 	ldw	r2,-20(fp)
    a2c8:	1005003a 	cmpeq	r2,r2,zero
    a2cc:	10001d1e 	bne	r2,zero,a344 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a2d0:	e0bffb17 	ldw	r2,-20(fp)
    a2d4:	10800017 	ldw	r2,0(r2)
    a2d8:	10800417 	ldw	r2,16(r2)
    a2dc:	1005003a 	cmpeq	r2,r2,zero
    a2e0:	1000071e 	bne	r2,zero,a300 <close+0x8c>
    a2e4:	e0bffb17 	ldw	r2,-20(fp)
    a2e8:	10800017 	ldw	r2,0(r2)
    a2ec:	10800417 	ldw	r2,16(r2)
    a2f0:	e13ffb17 	ldw	r4,-20(fp)
    a2f4:	103ee83a 	callr	r2
    a2f8:	e0bffe15 	stw	r2,-8(fp)
    a2fc:	00000106 	br	a304 <close+0x90>
    a300:	e03ffe15 	stw	zero,-8(fp)
    a304:	e0bffe17 	ldw	r2,-8(fp)
    a308:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a30c:	e13ffc17 	ldw	r4,-16(fp)
    a310:	000ad640 	call	ad64 <alt_release_fd>
    if (rval < 0)
    a314:	e0bffa17 	ldw	r2,-24(fp)
    a318:	1004403a 	cmpge	r2,r2,zero
    a31c:	1000071e 	bne	r2,zero,a33c <close+0xc8>
    {
      ALT_ERRNO = -rval;
    a320:	000a3740 	call	a374 <alt_get_errno>
    a324:	e0fffa17 	ldw	r3,-24(fp)
    a328:	00c7c83a 	sub	r3,zero,r3
    a32c:	10c00015 	stw	r3,0(r2)
      return -1;
    a330:	00bfffc4 	movi	r2,-1
    a334:	e0bffd15 	stw	r2,-12(fp)
    a338:	00000806 	br	a35c <close+0xe8>
    }
    return 0;
    a33c:	e03ffd15 	stw	zero,-12(fp)
    a340:	00000606 	br	a35c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a344:	000a3740 	call	a374 <alt_get_errno>
    a348:	1007883a 	mov	r3,r2
    a34c:	00801444 	movi	r2,81
    a350:	18800015 	stw	r2,0(r3)
    return -1;
    a354:	00bfffc4 	movi	r2,-1
    a358:	e0bffd15 	stw	r2,-12(fp)
    a35c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    a360:	e037883a 	mov	sp,fp
    a364:	dfc00117 	ldw	ra,4(sp)
    a368:	df000017 	ldw	fp,0(sp)
    a36c:	dec00204 	addi	sp,sp,8
    a370:	f800283a 	ret

0000a374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a374:	defffd04 	addi	sp,sp,-12
    a378:	dfc00215 	stw	ra,8(sp)
    a37c:	df000115 	stw	fp,4(sp)
    a380:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a384:	00800074 	movhi	r2,1
    a388:	10bbc104 	addi	r2,r2,-4348
    a38c:	10800017 	ldw	r2,0(r2)
    a390:	1005003a 	cmpeq	r2,r2,zero
    a394:	1000061e 	bne	r2,zero,a3b0 <alt_get_errno+0x3c>
    a398:	00800074 	movhi	r2,1
    a39c:	10bbc104 	addi	r2,r2,-4348
    a3a0:	10800017 	ldw	r2,0(r2)
    a3a4:	103ee83a 	callr	r2
    a3a8:	e0bfff15 	stw	r2,-4(fp)
    a3ac:	00000306 	br	a3bc <alt_get_errno+0x48>
    a3b0:	00800074 	movhi	r2,1
    a3b4:	10826304 	addi	r2,r2,2444
    a3b8:	e0bfff15 	stw	r2,-4(fp)
    a3bc:	e0bfff17 	ldw	r2,-4(fp)
}
    a3c0:	e037883a 	mov	sp,fp
    a3c4:	dfc00117 	ldw	ra,4(sp)
    a3c8:	df000017 	ldw	fp,0(sp)
    a3cc:	dec00204 	addi	sp,sp,8
    a3d0:	f800283a 	ret

0000a3d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a3d4:	defffc04 	addi	sp,sp,-16
    a3d8:	df000315 	stw	fp,12(sp)
    a3dc:	df000304 	addi	fp,sp,12
    a3e0:	e13ffd15 	stw	r4,-12(fp)
    a3e4:	e17ffe15 	stw	r5,-8(fp)
    a3e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a3ec:	e0bfff17 	ldw	r2,-4(fp)
}
    a3f0:	e037883a 	mov	sp,fp
    a3f4:	df000017 	ldw	fp,0(sp)
    a3f8:	dec00104 	addi	sp,sp,4
    a3fc:	f800283a 	ret

0000a400 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    a400:	defff904 	addi	sp,sp,-28
    a404:	dfc00615 	stw	ra,24(sp)
    a408:	df000515 	stw	fp,20(sp)
    a40c:	df000504 	addi	fp,sp,20
    a410:	e13ffc15 	stw	r4,-16(fp)
    a414:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a418:	e0bffc17 	ldw	r2,-16(fp)
    a41c:	1004803a 	cmplt	r2,r2,zero
    a420:	1000091e 	bne	r2,zero,a448 <fstat+0x48>
    a424:	e13ffc17 	ldw	r4,-16(fp)
    a428:	01400304 	movi	r5,12
    a42c:	00007d80 	call	7d8 <__mulsi3>
    a430:	1007883a 	mov	r3,r2
    a434:	00800074 	movhi	r2,1
    a438:	10b73e04 	addi	r2,r2,-8968
    a43c:	1887883a 	add	r3,r3,r2
    a440:	e0ffff15 	stw	r3,-4(fp)
    a444:	00000106 	br	a44c <fstat+0x4c>
    a448:	e03fff15 	stw	zero,-4(fp)
    a44c:	e0bfff17 	ldw	r2,-4(fp)
    a450:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    a454:	e0bffb17 	ldw	r2,-20(fp)
    a458:	1005003a 	cmpeq	r2,r2,zero
    a45c:	1000121e 	bne	r2,zero,a4a8 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    a460:	e0bffb17 	ldw	r2,-20(fp)
    a464:	10800017 	ldw	r2,0(r2)
    a468:	10800817 	ldw	r2,32(r2)
    a46c:	1005003a 	cmpeq	r2,r2,zero
    a470:	1000081e 	bne	r2,zero,a494 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    a474:	e0bffb17 	ldw	r2,-20(fp)
    a478:	10800017 	ldw	r2,0(r2)
    a47c:	10800817 	ldw	r2,32(r2)
    a480:	e13ffb17 	ldw	r4,-20(fp)
    a484:	e17ffd17 	ldw	r5,-12(fp)
    a488:	103ee83a 	callr	r2
    a48c:	e0bffe15 	stw	r2,-8(fp)
    a490:	00000b06 	br	a4c0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    a494:	e0fffd17 	ldw	r3,-12(fp)
    a498:	00880004 	movi	r2,8192
    a49c:	18800115 	stw	r2,4(r3)
      return 0;
    a4a0:	e03ffe15 	stw	zero,-8(fp)
    a4a4:	00000606 	br	a4c0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a4a8:	000a4d80 	call	a4d8 <alt_get_errno>
    a4ac:	1007883a 	mov	r3,r2
    a4b0:	00801444 	movi	r2,81
    a4b4:	18800015 	stw	r2,0(r3)
    return -1;
    a4b8:	00bfffc4 	movi	r2,-1
    a4bc:	e0bffe15 	stw	r2,-8(fp)
    a4c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a4c4:	e037883a 	mov	sp,fp
    a4c8:	dfc00117 	ldw	ra,4(sp)
    a4cc:	df000017 	ldw	fp,0(sp)
    a4d0:	dec00204 	addi	sp,sp,8
    a4d4:	f800283a 	ret

0000a4d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a4d8:	defffd04 	addi	sp,sp,-12
    a4dc:	dfc00215 	stw	ra,8(sp)
    a4e0:	df000115 	stw	fp,4(sp)
    a4e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a4e8:	00800074 	movhi	r2,1
    a4ec:	10bbc104 	addi	r2,r2,-4348
    a4f0:	10800017 	ldw	r2,0(r2)
    a4f4:	1005003a 	cmpeq	r2,r2,zero
    a4f8:	1000061e 	bne	r2,zero,a514 <alt_get_errno+0x3c>
    a4fc:	00800074 	movhi	r2,1
    a500:	10bbc104 	addi	r2,r2,-4348
    a504:	10800017 	ldw	r2,0(r2)
    a508:	103ee83a 	callr	r2
    a50c:	e0bfff15 	stw	r2,-4(fp)
    a510:	00000306 	br	a520 <alt_get_errno+0x48>
    a514:	00800074 	movhi	r2,1
    a518:	10826304 	addi	r2,r2,2444
    a51c:	e0bfff15 	stw	r2,-4(fp)
    a520:	e0bfff17 	ldw	r2,-4(fp)
}
    a524:	e037883a 	mov	sp,fp
    a528:	dfc00117 	ldw	ra,4(sp)
    a52c:	df000017 	ldw	fp,0(sp)
    a530:	dec00204 	addi	sp,sp,8
    a534:	f800283a 	ret

0000a538 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a538:	deffeb04 	addi	sp,sp,-84
    a53c:	dfc01415 	stw	ra,80(sp)
    a540:	df001315 	stw	fp,76(sp)
    a544:	df001304 	addi	fp,sp,76
    a548:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a54c:	e0bffd17 	ldw	r2,-12(fp)
    a550:	1004803a 	cmplt	r2,r2,zero
    a554:	1000091e 	bne	r2,zero,a57c <isatty+0x44>
    a558:	e13ffd17 	ldw	r4,-12(fp)
    a55c:	01400304 	movi	r5,12
    a560:	00007d80 	call	7d8 <__mulsi3>
    a564:	1007883a 	mov	r3,r2
    a568:	00800074 	movhi	r2,1
    a56c:	10b73e04 	addi	r2,r2,-8968
    a570:	1887883a 	add	r3,r3,r2
    a574:	e0ffff15 	stw	r3,-4(fp)
    a578:	00000106 	br	a580 <isatty+0x48>
    a57c:	e03fff15 	stw	zero,-4(fp)
    a580:	e0bfff17 	ldw	r2,-4(fp)
    a584:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    a588:	e0bfed17 	ldw	r2,-76(fp)
    a58c:	1005003a 	cmpeq	r2,r2,zero
    a590:	10000f1e 	bne	r2,zero,a5d0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a594:	e0bfed17 	ldw	r2,-76(fp)
    a598:	10800017 	ldw	r2,0(r2)
    a59c:	10800817 	ldw	r2,32(r2)
    a5a0:	1004c03a 	cmpne	r2,r2,zero
    a5a4:	1000031e 	bne	r2,zero,a5b4 <isatty+0x7c>
    {
      return 1;
    a5a8:	00800044 	movi	r2,1
    a5ac:	e0bffe15 	stw	r2,-8(fp)
    a5b0:	00000c06 	br	a5e4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a5b4:	e17fee04 	addi	r5,fp,-72
    a5b8:	e13ffd17 	ldw	r4,-12(fp)
    a5bc:	000a4000 	call	a400 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a5c0:	e0bfef17 	ldw	r2,-68(fp)
    a5c4:	10880020 	cmpeqi	r2,r2,8192
    a5c8:	e0bffe15 	stw	r2,-8(fp)
    a5cc:	00000506 	br	a5e4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a5d0:	000a5fc0 	call	a5fc <alt_get_errno>
    a5d4:	1007883a 	mov	r3,r2
    a5d8:	00801444 	movi	r2,81
    a5dc:	18800015 	stw	r2,0(r3)
    return 0;
    a5e0:	e03ffe15 	stw	zero,-8(fp)
    a5e4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a5e8:	e037883a 	mov	sp,fp
    a5ec:	dfc00117 	ldw	ra,4(sp)
    a5f0:	df000017 	ldw	fp,0(sp)
    a5f4:	dec00204 	addi	sp,sp,8
    a5f8:	f800283a 	ret

0000a5fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a5fc:	defffd04 	addi	sp,sp,-12
    a600:	dfc00215 	stw	ra,8(sp)
    a604:	df000115 	stw	fp,4(sp)
    a608:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a60c:	00800074 	movhi	r2,1
    a610:	10bbc104 	addi	r2,r2,-4348
    a614:	10800017 	ldw	r2,0(r2)
    a618:	1005003a 	cmpeq	r2,r2,zero
    a61c:	1000061e 	bne	r2,zero,a638 <alt_get_errno+0x3c>
    a620:	00800074 	movhi	r2,1
    a624:	10bbc104 	addi	r2,r2,-4348
    a628:	10800017 	ldw	r2,0(r2)
    a62c:	103ee83a 	callr	r2
    a630:	e0bfff15 	stw	r2,-4(fp)
    a634:	00000306 	br	a644 <alt_get_errno+0x48>
    a638:	00800074 	movhi	r2,1
    a63c:	10826304 	addi	r2,r2,2444
    a640:	e0bfff15 	stw	r2,-4(fp)
    a644:	e0bfff17 	ldw	r2,-4(fp)
}
    a648:	e037883a 	mov	sp,fp
    a64c:	dfc00117 	ldw	ra,4(sp)
    a650:	df000017 	ldw	fp,0(sp)
    a654:	dec00204 	addi	sp,sp,8
    a658:	f800283a 	ret

0000a65c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a65c:	defffe04 	addi	sp,sp,-8
    a660:	dfc00115 	stw	ra,4(sp)
    a664:	df000015 	stw	fp,0(sp)
    a668:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a66c:	01000074 	movhi	r4,1
    a670:	213bc604 	addi	r4,r4,-4328
    a674:	01400074 	movhi	r5,1
    a678:	29752f04 	addi	r5,r5,-11076
    a67c:	01800074 	movhi	r6,1
    a680:	31bbc604 	addi	r6,r6,-4328
    a684:	000a6dc0 	call	a6dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a688:	01000034 	movhi	r4,0
    a68c:	21000804 	addi	r4,r4,32
    a690:	01400034 	movhi	r5,0
    a694:	29400804 	addi	r5,r5,32
    a698:	01800034 	movhi	r6,0
    a69c:	31807204 	addi	r6,r6,456
    a6a0:	000a6dc0 	call	a6dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a6a4:	01000074 	movhi	r4,1
    a6a8:	21344c04 	addi	r4,r4,-11984
    a6ac:	01400074 	movhi	r5,1
    a6b0:	29744c04 	addi	r5,r5,-11984
    a6b4:	01800074 	movhi	r6,1
    a6b8:	31b52f04 	addi	r6,r6,-11076
    a6bc:	000a6dc0 	call	a6dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a6c0:	000be340 	call	be34 <alt_dcache_flush_all>
  alt_icache_flush_all();
    a6c4:	000c02c0 	call	c02c <alt_icache_flush_all>
}
    a6c8:	e037883a 	mov	sp,fp
    a6cc:	dfc00117 	ldw	ra,4(sp)
    a6d0:	df000017 	ldw	fp,0(sp)
    a6d4:	dec00204 	addi	sp,sp,8
    a6d8:	f800283a 	ret

0000a6dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a6dc:	defffc04 	addi	sp,sp,-16
    a6e0:	df000315 	stw	fp,12(sp)
    a6e4:	df000304 	addi	fp,sp,12
    a6e8:	e13ffd15 	stw	r4,-12(fp)
    a6ec:	e17ffe15 	stw	r5,-8(fp)
    a6f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a6f4:	e0fffe17 	ldw	r3,-8(fp)
    a6f8:	e0bffd17 	ldw	r2,-12(fp)
    a6fc:	18800e26 	beq	r3,r2,a738 <alt_load_section+0x5c>
  {
    while( to != end )
    a700:	00000a06 	br	a72c <alt_load_section+0x50>
    {
      *to++ = *from++;
    a704:	e0bffd17 	ldw	r2,-12(fp)
    a708:	10c00017 	ldw	r3,0(r2)
    a70c:	e0bffe17 	ldw	r2,-8(fp)
    a710:	10c00015 	stw	r3,0(r2)
    a714:	e0bffe17 	ldw	r2,-8(fp)
    a718:	10800104 	addi	r2,r2,4
    a71c:	e0bffe15 	stw	r2,-8(fp)
    a720:	e0bffd17 	ldw	r2,-12(fp)
    a724:	10800104 	addi	r2,r2,4
    a728:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a72c:	e0fffe17 	ldw	r3,-8(fp)
    a730:	e0bfff17 	ldw	r2,-4(fp)
    a734:	18bff31e 	bne	r3,r2,a704 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a738:	e037883a 	mov	sp,fp
    a73c:	df000017 	ldw	fp,0(sp)
    a740:	dec00104 	addi	sp,sp,4
    a744:	f800283a 	ret

0000a748 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a748:	defff804 	addi	sp,sp,-32
    a74c:	dfc00715 	stw	ra,28(sp)
    a750:	df000615 	stw	fp,24(sp)
    a754:	df000604 	addi	fp,sp,24
    a758:	e13ffc15 	stw	r4,-16(fp)
    a75c:	e17ffd15 	stw	r5,-12(fp)
    a760:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a764:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a768:	e0bffc17 	ldw	r2,-16(fp)
    a76c:	1004803a 	cmplt	r2,r2,zero
    a770:	1000091e 	bne	r2,zero,a798 <lseek+0x50>
    a774:	e13ffc17 	ldw	r4,-16(fp)
    a778:	01400304 	movi	r5,12
    a77c:	00007d80 	call	7d8 <__mulsi3>
    a780:	1007883a 	mov	r3,r2
    a784:	00800074 	movhi	r2,1
    a788:	10b73e04 	addi	r2,r2,-8968
    a78c:	1887883a 	add	r3,r3,r2
    a790:	e0ffff15 	stw	r3,-4(fp)
    a794:	00000106 	br	a79c <lseek+0x54>
    a798:	e03fff15 	stw	zero,-4(fp)
    a79c:	e0bfff17 	ldw	r2,-4(fp)
    a7a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    a7a4:	e0bffb17 	ldw	r2,-20(fp)
    a7a8:	1005003a 	cmpeq	r2,r2,zero
    a7ac:	1000111e 	bne	r2,zero,a7f4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a7b0:	e0bffb17 	ldw	r2,-20(fp)
    a7b4:	10800017 	ldw	r2,0(r2)
    a7b8:	10800717 	ldw	r2,28(r2)
    a7bc:	1005003a 	cmpeq	r2,r2,zero
    a7c0:	1000091e 	bne	r2,zero,a7e8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a7c4:	e0bffb17 	ldw	r2,-20(fp)
    a7c8:	10800017 	ldw	r2,0(r2)
    a7cc:	10800717 	ldw	r2,28(r2)
    a7d0:	e13ffb17 	ldw	r4,-20(fp)
    a7d4:	e17ffd17 	ldw	r5,-12(fp)
    a7d8:	e1bffe17 	ldw	r6,-8(fp)
    a7dc:	103ee83a 	callr	r2
    a7e0:	e0bffa15 	stw	r2,-24(fp)
    a7e4:	00000506 	br	a7fc <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a7e8:	00bfde84 	movi	r2,-134
    a7ec:	e0bffa15 	stw	r2,-24(fp)
    a7f0:	00000206 	br	a7fc <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    a7f4:	00bfebc4 	movi	r2,-81
    a7f8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a7fc:	e0bffa17 	ldw	r2,-24(fp)
    a800:	1004403a 	cmpge	r2,r2,zero
    a804:	1000071e 	bne	r2,zero,a824 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    a808:	000a83c0 	call	a83c <alt_get_errno>
    a80c:	1007883a 	mov	r3,r2
    a810:	e0bffa17 	ldw	r2,-24(fp)
    a814:	0085c83a 	sub	r2,zero,r2
    a818:	18800015 	stw	r2,0(r3)
    rc = -1;
    a81c:	00bfffc4 	movi	r2,-1
    a820:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a824:	e0bffa17 	ldw	r2,-24(fp)
}
    a828:	e037883a 	mov	sp,fp
    a82c:	dfc00117 	ldw	ra,4(sp)
    a830:	df000017 	ldw	fp,0(sp)
    a834:	dec00204 	addi	sp,sp,8
    a838:	f800283a 	ret

0000a83c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a83c:	defffd04 	addi	sp,sp,-12
    a840:	dfc00215 	stw	ra,8(sp)
    a844:	df000115 	stw	fp,4(sp)
    a848:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a84c:	00800074 	movhi	r2,1
    a850:	10bbc104 	addi	r2,r2,-4348
    a854:	10800017 	ldw	r2,0(r2)
    a858:	1005003a 	cmpeq	r2,r2,zero
    a85c:	1000061e 	bne	r2,zero,a878 <alt_get_errno+0x3c>
    a860:	00800074 	movhi	r2,1
    a864:	10bbc104 	addi	r2,r2,-4348
    a868:	10800017 	ldw	r2,0(r2)
    a86c:	103ee83a 	callr	r2
    a870:	e0bfff15 	stw	r2,-4(fp)
    a874:	00000306 	br	a884 <alt_get_errno+0x48>
    a878:	00800074 	movhi	r2,1
    a87c:	10826304 	addi	r2,r2,2444
    a880:	e0bfff15 	stw	r2,-4(fp)
    a884:	e0bfff17 	ldw	r2,-4(fp)
}
    a888:	e037883a 	mov	sp,fp
    a88c:	dfc00117 	ldw	ra,4(sp)
    a890:	df000017 	ldw	fp,0(sp)
    a894:	dec00204 	addi	sp,sp,8
    a898:	f800283a 	ret

0000a89c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a89c:	defffd04 	addi	sp,sp,-12
    a8a0:	dfc00215 	stw	ra,8(sp)
    a8a4:	df000115 	stw	fp,4(sp)
    a8a8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a8ac:	0009883a 	mov	r4,zero
    a8b0:	000b1c00 	call	b1c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a8b4:	000b1f40 	call	b1f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a8b8:	01000074 	movhi	r4,1
    a8bc:	21352704 	addi	r4,r4,-11108
    a8c0:	01400074 	movhi	r5,1
    a8c4:	29752704 	addi	r5,r5,-11108
    a8c8:	01800074 	movhi	r6,1
    a8cc:	31b52704 	addi	r6,r6,-11108
    a8d0:	000c3ec0 	call	c3ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a8d4:	000bf640 	call	bf64 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a8d8:	01000074 	movhi	r4,1
    a8dc:	212ff204 	addi	r4,r4,-16440
    a8e0:	000c9ec0 	call	c9ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a8e4:	d126b117 	ldw	r4,-25916(gp)
    a8e8:	d166b217 	ldw	r5,-25912(gp)
    a8ec:	d1a6b317 	ldw	r6,-25908(gp)
    a8f0:	000029c0 	call	29c <main>
    a8f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a8f8:	01000044 	movi	r4,1
    a8fc:	000a2740 	call	a274 <close>
  exit (result);
    a900:	e13fff17 	ldw	r4,-4(fp)
    a904:	000ca000 	call	ca00 <exit>

0000a908 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a908:	defffe04 	addi	sp,sp,-8
    a90c:	df000115 	stw	fp,4(sp)
    a910:	df000104 	addi	fp,sp,4
    a914:	e13fff15 	stw	r4,-4(fp)
}
    a918:	e037883a 	mov	sp,fp
    a91c:	df000017 	ldw	fp,0(sp)
    a920:	dec00104 	addi	sp,sp,4
    a924:	f800283a 	ret

0000a928 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a928:	defffe04 	addi	sp,sp,-8
    a92c:	df000115 	stw	fp,4(sp)
    a930:	df000104 	addi	fp,sp,4
    a934:	e13fff15 	stw	r4,-4(fp)
}
    a938:	e037883a 	mov	sp,fp
    a93c:	df000017 	ldw	fp,0(sp)
    a940:	dec00104 	addi	sp,sp,4
    a944:	f800283a 	ret

0000a948 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    a948:	defff204 	addi	sp,sp,-56
    a94c:	dfc00a15 	stw	ra,40(sp)
    a950:	df000915 	stw	fp,36(sp)
    a954:	df000904 	addi	fp,sp,36
    a958:	e1400215 	stw	r5,8(fp)
    a95c:	e1800315 	stw	r6,12(fp)
    a960:	e1c00415 	stw	r7,16(fp)
    a964:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    a968:	e0800204 	addi	r2,fp,8
    a96c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    a970:	e0bfff17 	ldw	r2,-4(fp)
    a974:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    a978:	00007806 	br	ab5c <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    a97c:	e0bffc07 	ldb	r2,-16(fp)
    a980:	10800960 	cmpeqi	r2,r2,37
    a984:	1000031e 	bne	r2,zero,a994 <alt_printf+0x4c>
        {
            alt_putchar(c);
    a988:	e13ffc07 	ldb	r4,-16(fp)
    a98c:	000aba00 	call	aba0 <alt_putchar>
    a990:	00007206 	br	ab5c <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    a994:	e0bffd17 	ldw	r2,-12(fp)
    a998:	10800003 	ldbu	r2,0(r2)
    a99c:	e0bffc05 	stb	r2,-16(fp)
    a9a0:	e0bffc07 	ldb	r2,-16(fp)
    a9a4:	1004c03a 	cmpne	r2,r2,zero
    a9a8:	1007883a 	mov	r3,r2
    a9ac:	e0bffd17 	ldw	r2,-12(fp)
    a9b0:	10800044 	addi	r2,r2,1
    a9b4:	e0bffd15 	stw	r2,-12(fp)
    a9b8:	18803fcc 	andi	r2,r3,255
    a9bc:	1005003a 	cmpeq	r2,r2,zero
    a9c0:	1000721e 	bne	r2,zero,ab8c <alt_printf+0x244>
            {
                if (c == '%')
    a9c4:	e0bffc07 	ldb	r2,-16(fp)
    a9c8:	10800958 	cmpnei	r2,r2,37
    a9cc:	1000031e 	bne	r2,zero,a9dc <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    a9d0:	e13ffc07 	ldb	r4,-16(fp)
    a9d4:	000aba00 	call	aba0 <alt_putchar>
    a9d8:	00006006 	br	ab5c <alt_printf+0x214>
                } 
                else if (c == 'c')
    a9dc:	e0bffc07 	ldb	r2,-16(fp)
    a9e0:	108018d8 	cmpnei	r2,r2,99
    a9e4:	1000091e 	bne	r2,zero,aa0c <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    a9e8:	e0fffe17 	ldw	r3,-8(fp)
    a9ec:	18800104 	addi	r2,r3,4
    a9f0:	e0bffe15 	stw	r2,-8(fp)
    a9f4:	1805883a 	mov	r2,r3
    a9f8:	10800017 	ldw	r2,0(r2)
    a9fc:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    aa00:	e13ffb17 	ldw	r4,-20(fp)
    aa04:	000aba00 	call	aba0 <alt_putchar>
    aa08:	00005406 	br	ab5c <alt_printf+0x214>
                }
                else if (c == 'x')
    aa0c:	e0bffc07 	ldb	r2,-16(fp)
    aa10:	10801e18 	cmpnei	r2,r2,120
    aa14:	1000371e 	bne	r2,zero,aaf4 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    aa18:	e0fffe17 	ldw	r3,-8(fp)
    aa1c:	18800104 	addi	r2,r3,4
    aa20:	e0bffe15 	stw	r2,-8(fp)
    aa24:	1805883a 	mov	r2,r3
    aa28:	10800017 	ldw	r2,0(r2)
    aa2c:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    aa30:	e0bffa17 	ldw	r2,-24(fp)
    aa34:	1004c03a 	cmpne	r2,r2,zero
    aa38:	1000031e 	bne	r2,zero,aa48 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    aa3c:	01000c04 	movi	r4,48
    aa40:	000aba00 	call	aba0 <alt_putchar>
                        continue;
    aa44:	00004506 	br	ab5c <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    aa48:	00800704 	movi	r2,28
    aa4c:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    aa50:	00000306 	br	aa60 <alt_printf+0x118>
                        digit_shift -= 4;
    aa54:	e0bff817 	ldw	r2,-32(fp)
    aa58:	10bfff04 	addi	r2,r2,-4
    aa5c:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    aa60:	00c003c4 	movi	r3,15
    aa64:	e0bff817 	ldw	r2,-32(fp)
    aa68:	1884983a 	sll	r2,r3,r2
    aa6c:	1007883a 	mov	r3,r2
    aa70:	e0bffa17 	ldw	r2,-24(fp)
    aa74:	1884703a 	and	r2,r3,r2
    aa78:	1005003a 	cmpeq	r2,r2,zero
    aa7c:	103ff51e 	bne	r2,zero,aa54 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    aa80:	00001806 	br	aae4 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    aa84:	00c003c4 	movi	r3,15
    aa88:	e0bff817 	ldw	r2,-32(fp)
    aa8c:	1884983a 	sll	r2,r3,r2
    aa90:	1007883a 	mov	r3,r2
    aa94:	e0bffa17 	ldw	r2,-24(fp)
    aa98:	1886703a 	and	r3,r3,r2
    aa9c:	e0bff817 	ldw	r2,-32(fp)
    aaa0:	1884d83a 	srl	r2,r3,r2
    aaa4:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    aaa8:	e0bff917 	ldw	r2,-28(fp)
    aaac:	108002a8 	cmpgeui	r2,r2,10
    aab0:	1000041e 	bne	r2,zero,aac4 <alt_printf+0x17c>
                            c = '0' + digit;
    aab4:	e0bff917 	ldw	r2,-28(fp)
    aab8:	10800c04 	addi	r2,r2,48
    aabc:	e0bffc05 	stb	r2,-16(fp)
    aac0:	00000306 	br	aad0 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    aac4:	e0bff917 	ldw	r2,-28(fp)
    aac8:	108015c4 	addi	r2,r2,87
    aacc:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    aad0:	e13ffc07 	ldb	r4,-16(fp)
    aad4:	000aba00 	call	aba0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    aad8:	e0bff817 	ldw	r2,-32(fp)
    aadc:	10bfff04 	addi	r2,r2,-4
    aae0:	e0bff815 	stw	r2,-32(fp)
    aae4:	e0bff817 	ldw	r2,-32(fp)
    aae8:	1004403a 	cmpge	r2,r2,zero
    aaec:	103fe51e 	bne	r2,zero,aa84 <alt_printf+0x13c>
    aaf0:	00001a06 	br	ab5c <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    aaf4:	e0bffc07 	ldb	r2,-16(fp)
    aaf8:	10801cd8 	cmpnei	r2,r2,115
    aafc:	1000171e 	bne	r2,zero,ab5c <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    ab00:	e0fffe17 	ldw	r3,-8(fp)
    ab04:	18800104 	addi	r2,r3,4
    ab08:	e0bffe15 	stw	r2,-8(fp)
    ab0c:	1805883a 	mov	r2,r3
    ab10:	10800017 	ldw	r2,0(r2)
    ab14:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    ab18:	00000906 	br	ab40 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    ab1c:	e0bff717 	ldw	r2,-36(fp)
    ab20:	10800003 	ldbu	r2,0(r2)
    ab24:	11003fcc 	andi	r4,r2,255
    ab28:	2100201c 	xori	r4,r4,128
    ab2c:	213fe004 	addi	r4,r4,-128
    ab30:	e0bff717 	ldw	r2,-36(fp)
    ab34:	10800044 	addi	r2,r2,1
    ab38:	e0bff715 	stw	r2,-36(fp)
    ab3c:	000aba00 	call	aba0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    ab40:	e0bff717 	ldw	r2,-36(fp)
    ab44:	10800003 	ldbu	r2,0(r2)
    ab48:	10803fcc 	andi	r2,r2,255
    ab4c:	1080201c 	xori	r2,r2,128
    ab50:	10bfe004 	addi	r2,r2,-128
    ab54:	1004c03a 	cmpne	r2,r2,zero
    ab58:	103ff01e 	bne	r2,zero,ab1c <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    ab5c:	e0bffd17 	ldw	r2,-12(fp)
    ab60:	10800003 	ldbu	r2,0(r2)
    ab64:	e0bffc05 	stb	r2,-16(fp)
    ab68:	e0bffc07 	ldb	r2,-16(fp)
    ab6c:	1004c03a 	cmpne	r2,r2,zero
    ab70:	1007883a 	mov	r3,r2
    ab74:	e0bffd17 	ldw	r2,-12(fp)
    ab78:	10800044 	addi	r2,r2,1
    ab7c:	e0bffd15 	stw	r2,-12(fp)
    ab80:	18803fcc 	andi	r2,r3,255
    ab84:	1004c03a 	cmpne	r2,r2,zero
    ab88:	103f7c1e 	bne	r2,zero,a97c <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    ab8c:	e037883a 	mov	sp,fp
    ab90:	dfc00117 	ldw	ra,4(sp)
    ab94:	df000017 	ldw	fp,0(sp)
    ab98:	dec00504 	addi	sp,sp,20
    ab9c:	f800283a 	ret

0000aba0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    aba0:	defffd04 	addi	sp,sp,-12
    aba4:	dfc00215 	stw	ra,8(sp)
    aba8:	df000115 	stw	fp,4(sp)
    abac:	df000104 	addi	fp,sp,4
    abb0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    abb4:	00800074 	movhi	r2,1
    abb8:	10bbb804 	addi	r2,r2,-4384
    abbc:	10800017 	ldw	r2,0(r2)
    abc0:	11400217 	ldw	r5,8(r2)
    abc4:	e13fff17 	ldw	r4,-4(fp)
    abc8:	000caac0 	call	caac <putc>
#endif
}
    abcc:	e037883a 	mov	sp,fp
    abd0:	dfc00117 	ldw	ra,4(sp)
    abd4:	df000017 	ldw	fp,0(sp)
    abd8:	dec00204 	addi	sp,sp,8
    abdc:	f800283a 	ret

0000abe0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    abe0:	defff704 	addi	sp,sp,-36
    abe4:	dfc00815 	stw	ra,32(sp)
    abe8:	df000715 	stw	fp,28(sp)
    abec:	df000704 	addi	fp,sp,28
    abf0:	e13ffb15 	stw	r4,-20(fp)
    abf4:	e17ffc15 	stw	r5,-16(fp)
    abf8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    abfc:	e0bffb17 	ldw	r2,-20(fp)
    ac00:	1004803a 	cmplt	r2,r2,zero
    ac04:	1000091e 	bne	r2,zero,ac2c <read+0x4c>
    ac08:	e13ffb17 	ldw	r4,-20(fp)
    ac0c:	01400304 	movi	r5,12
    ac10:	00007d80 	call	7d8 <__mulsi3>
    ac14:	1007883a 	mov	r3,r2
    ac18:	00800074 	movhi	r2,1
    ac1c:	10b73e04 	addi	r2,r2,-8968
    ac20:	1887883a 	add	r3,r3,r2
    ac24:	e0ffff15 	stw	r3,-4(fp)
    ac28:	00000106 	br	ac30 <read+0x50>
    ac2c:	e03fff15 	stw	zero,-4(fp)
    ac30:	e0bfff17 	ldw	r2,-4(fp)
    ac34:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    ac38:	e0bffa17 	ldw	r2,-24(fp)
    ac3c:	1005003a 	cmpeq	r2,r2,zero
    ac40:	1000241e 	bne	r2,zero,acd4 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ac44:	e0bffa17 	ldw	r2,-24(fp)
    ac48:	10800217 	ldw	r2,8(r2)
    ac4c:	108000cc 	andi	r2,r2,3
    ac50:	10800060 	cmpeqi	r2,r2,1
    ac54:	10001a1e 	bne	r2,zero,acc0 <read+0xe0>
    ac58:	e0bffa17 	ldw	r2,-24(fp)
    ac5c:	10800017 	ldw	r2,0(r2)
    ac60:	10800517 	ldw	r2,20(r2)
    ac64:	1005003a 	cmpeq	r2,r2,zero
    ac68:	1000151e 	bne	r2,zero,acc0 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ac6c:	e0bffa17 	ldw	r2,-24(fp)
    ac70:	10800017 	ldw	r2,0(r2)
    ac74:	10800517 	ldw	r2,20(r2)
    ac78:	e17ffc17 	ldw	r5,-16(fp)
    ac7c:	e1bffd17 	ldw	r6,-12(fp)
    ac80:	e13ffa17 	ldw	r4,-24(fp)
    ac84:	103ee83a 	callr	r2
    ac88:	e0bff915 	stw	r2,-28(fp)
    ac8c:	e0bff917 	ldw	r2,-28(fp)
    ac90:	1004403a 	cmpge	r2,r2,zero
    ac94:	1000071e 	bne	r2,zero,acb4 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    ac98:	000ad040 	call	ad04 <alt_get_errno>
    ac9c:	e0fff917 	ldw	r3,-28(fp)
    aca0:	00c7c83a 	sub	r3,zero,r3
    aca4:	10c00015 	stw	r3,0(r2)
          return -1;
    aca8:	00bfffc4 	movi	r2,-1
    acac:	e0bffe15 	stw	r2,-8(fp)
    acb0:	00000e06 	br	acec <read+0x10c>
        }
        return rval;
    acb4:	e0bff917 	ldw	r2,-28(fp)
    acb8:	e0bffe15 	stw	r2,-8(fp)
    acbc:	00000b06 	br	acec <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    acc0:	000ad040 	call	ad04 <alt_get_errno>
    acc4:	1007883a 	mov	r3,r2
    acc8:	00800344 	movi	r2,13
    accc:	18800015 	stw	r2,0(r3)
    acd0:	00000406 	br	ace4 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    acd4:	000ad040 	call	ad04 <alt_get_errno>
    acd8:	1007883a 	mov	r3,r2
    acdc:	00801444 	movi	r2,81
    ace0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ace4:	00bfffc4 	movi	r2,-1
    ace8:	e0bffe15 	stw	r2,-8(fp)
    acec:	e0bffe17 	ldw	r2,-8(fp)
}
    acf0:	e037883a 	mov	sp,fp
    acf4:	dfc00117 	ldw	ra,4(sp)
    acf8:	df000017 	ldw	fp,0(sp)
    acfc:	dec00204 	addi	sp,sp,8
    ad00:	f800283a 	ret

0000ad04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ad04:	defffd04 	addi	sp,sp,-12
    ad08:	dfc00215 	stw	ra,8(sp)
    ad0c:	df000115 	stw	fp,4(sp)
    ad10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ad14:	00800074 	movhi	r2,1
    ad18:	10bbc104 	addi	r2,r2,-4348
    ad1c:	10800017 	ldw	r2,0(r2)
    ad20:	1005003a 	cmpeq	r2,r2,zero
    ad24:	1000061e 	bne	r2,zero,ad40 <alt_get_errno+0x3c>
    ad28:	00800074 	movhi	r2,1
    ad2c:	10bbc104 	addi	r2,r2,-4348
    ad30:	10800017 	ldw	r2,0(r2)
    ad34:	103ee83a 	callr	r2
    ad38:	e0bfff15 	stw	r2,-4(fp)
    ad3c:	00000306 	br	ad4c <alt_get_errno+0x48>
    ad40:	00800074 	movhi	r2,1
    ad44:	10826304 	addi	r2,r2,2444
    ad48:	e0bfff15 	stw	r2,-4(fp)
    ad4c:	e0bfff17 	ldw	r2,-4(fp)
}
    ad50:	e037883a 	mov	sp,fp
    ad54:	dfc00117 	ldw	ra,4(sp)
    ad58:	df000017 	ldw	fp,0(sp)
    ad5c:	dec00204 	addi	sp,sp,8
    ad60:	f800283a 	ret

0000ad64 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ad64:	defffc04 	addi	sp,sp,-16
    ad68:	dfc00315 	stw	ra,12(sp)
    ad6c:	df000215 	stw	fp,8(sp)
    ad70:	dc000115 	stw	r16,4(sp)
    ad74:	df000104 	addi	fp,sp,4
    ad78:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ad7c:	e0bfff17 	ldw	r2,-4(fp)
    ad80:	108000d0 	cmplti	r2,r2,3
    ad84:	10000f1e 	bne	r2,zero,adc4 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    ad88:	e13fff17 	ldw	r4,-4(fp)
    ad8c:	04000074 	movhi	r16,1
    ad90:	84373e04 	addi	r16,r16,-8968
    ad94:	01400304 	movi	r5,12
    ad98:	00007d80 	call	7d8 <__mulsi3>
    ad9c:	1405883a 	add	r2,r2,r16
    ada0:	10800204 	addi	r2,r2,8
    ada4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ada8:	e13fff17 	ldw	r4,-4(fp)
    adac:	04000074 	movhi	r16,1
    adb0:	84373e04 	addi	r16,r16,-8968
    adb4:	01400304 	movi	r5,12
    adb8:	00007d80 	call	7d8 <__mulsi3>
    adbc:	1405883a 	add	r2,r2,r16
    adc0:	10000015 	stw	zero,0(r2)
  }
}
    adc4:	e037883a 	mov	sp,fp
    adc8:	dfc00217 	ldw	ra,8(sp)
    adcc:	df000117 	ldw	fp,4(sp)
    add0:	dc000017 	ldw	r16,0(sp)
    add4:	dec00304 	addi	sp,sp,12
    add8:	f800283a 	ret

0000addc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    addc:	defff804 	addi	sp,sp,-32
    ade0:	df000715 	stw	fp,28(sp)
    ade4:	df000704 	addi	fp,sp,28
    ade8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    adec:	0005303a 	rdctl	r2,status
    adf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    adf4:	e0fffb17 	ldw	r3,-20(fp)
    adf8:	00bfff84 	movi	r2,-2
    adfc:	1884703a 	and	r2,r3,r2
    ae00:	1001703a 	wrctl	status,r2
  
  return context;
    ae04:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ae08:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ae0c:	d0a00c17 	ldw	r2,-32720(gp)
    ae10:	10c000c4 	addi	r3,r2,3
    ae14:	00bfff04 	movi	r2,-4
    ae18:	1884703a 	and	r2,r3,r2
    ae1c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ae20:	d0e00c17 	ldw	r3,-32720(gp)
    ae24:	e0bffe17 	ldw	r2,-8(fp)
    ae28:	1887883a 	add	r3,r3,r2
    ae2c:	00802034 	movhi	r2,128
    ae30:	10800004 	addi	r2,r2,0
    ae34:	10c0072e 	bgeu	r2,r3,ae54 <sbrk+0x78>
    ae38:	e0bffd17 	ldw	r2,-12(fp)
    ae3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ae40:	e0bffa17 	ldw	r2,-24(fp)
    ae44:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ae48:	00bfffc4 	movi	r2,-1
    ae4c:	e0bfff15 	stw	r2,-4(fp)
    ae50:	00000c06 	br	ae84 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    ae54:	d0a00c17 	ldw	r2,-32720(gp)
    ae58:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    ae5c:	d0e00c17 	ldw	r3,-32720(gp)
    ae60:	e0bffe17 	ldw	r2,-8(fp)
    ae64:	1885883a 	add	r2,r3,r2
    ae68:	d0a00c15 	stw	r2,-32720(gp)
    ae6c:	e0bffd17 	ldw	r2,-12(fp)
    ae70:	e0bff915 	stw	r2,-28(fp)
    ae74:	e0bff917 	ldw	r2,-28(fp)
    ae78:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ae7c:	e0bffc17 	ldw	r2,-16(fp)
    ae80:	e0bfff15 	stw	r2,-4(fp)
    ae84:	e0bfff17 	ldw	r2,-4(fp)
} 
    ae88:	e037883a 	mov	sp,fp
    ae8c:	df000017 	ldw	fp,0(sp)
    ae90:	dec00104 	addi	sp,sp,4
    ae94:	f800283a 	ret

0000ae98 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ae98:	defffa04 	addi	sp,sp,-24
    ae9c:	df000515 	stw	fp,20(sp)
    aea0:	df000504 	addi	fp,sp,20
    aea4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aea8:	0005303a 	rdctl	r2,status
    aeac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aeb0:	e0fffd17 	ldw	r3,-12(fp)
    aeb4:	00bfff84 	movi	r2,-2
    aeb8:	1884703a 	and	r2,r3,r2
    aebc:	1001703a 	wrctl	status,r2
  
  return context;
    aec0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    aec4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    aec8:	e0bfff17 	ldw	r2,-4(fp)
    aecc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    aed0:	e0bffc17 	ldw	r2,-16(fp)
    aed4:	10c00017 	ldw	r3,0(r2)
    aed8:	e0bffc17 	ldw	r2,-16(fp)
    aedc:	10800117 	ldw	r2,4(r2)
    aee0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    aee4:	e0bffc17 	ldw	r2,-16(fp)
    aee8:	10c00117 	ldw	r3,4(r2)
    aeec:	e0bffc17 	ldw	r2,-16(fp)
    aef0:	10800017 	ldw	r2,0(r2)
    aef4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    aef8:	e0fffc17 	ldw	r3,-16(fp)
    aefc:	e0bffc17 	ldw	r2,-16(fp)
    af00:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    af04:	e0fffc17 	ldw	r3,-16(fp)
    af08:	e0bffc17 	ldw	r2,-16(fp)
    af0c:	18800015 	stw	r2,0(r3)
    af10:	e0bffe17 	ldw	r2,-8(fp)
    af14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    af18:	e0bffb17 	ldw	r2,-20(fp)
    af1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    af20:	e037883a 	mov	sp,fp
    af24:	df000017 	ldw	fp,0(sp)
    af28:	dec00104 	addi	sp,sp,4
    af2c:	f800283a 	ret

0000af30 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    af30:	defffb04 	addi	sp,sp,-20
    af34:	dfc00415 	stw	ra,16(sp)
    af38:	df000315 	stw	fp,12(sp)
    af3c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    af40:	d0a00d17 	ldw	r2,-32716(gp)
    af44:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    af48:	d0a6b517 	ldw	r2,-25900(gp)
    af4c:	10800044 	addi	r2,r2,1
    af50:	d0a6b515 	stw	r2,-25900(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    af54:	00003106 	br	b01c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    af58:	e0bffe17 	ldw	r2,-8(fp)
    af5c:	10800017 	ldw	r2,0(r2)
    af60:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    af64:	e0bffe17 	ldw	r2,-8(fp)
    af68:	10800403 	ldbu	r2,16(r2)
    af6c:	10803fcc 	andi	r2,r2,255
    af70:	1005003a 	cmpeq	r2,r2,zero
    af74:	1000051e 	bne	r2,zero,af8c <alt_tick+0x5c>
    af78:	d0a6b517 	ldw	r2,-25900(gp)
    af7c:	1004c03a 	cmpne	r2,r2,zero
    af80:	1000021e 	bne	r2,zero,af8c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    af84:	e0bffe17 	ldw	r2,-8(fp)
    af88:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    af8c:	e0bffe17 	ldw	r2,-8(fp)
    af90:	10c00217 	ldw	r3,8(r2)
    af94:	d0a6b517 	ldw	r2,-25900(gp)
    af98:	10c01e36 	bltu	r2,r3,b014 <alt_tick+0xe4>
    af9c:	e0bffe17 	ldw	r2,-8(fp)
    afa0:	10800403 	ldbu	r2,16(r2)
    afa4:	10803fcc 	andi	r2,r2,255
    afa8:	1004c03a 	cmpne	r2,r2,zero
    afac:	1000191e 	bne	r2,zero,b014 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    afb0:	e0bffe17 	ldw	r2,-8(fp)
    afb4:	10c00317 	ldw	r3,12(r2)
    afb8:	e0bffe17 	ldw	r2,-8(fp)
    afbc:	11000517 	ldw	r4,20(r2)
    afc0:	183ee83a 	callr	r3
    afc4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    afc8:	e0bffd17 	ldw	r2,-12(fp)
    afcc:	1004c03a 	cmpne	r2,r2,zero
    afd0:	1000031e 	bne	r2,zero,afe0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    afd4:	e13ffe17 	ldw	r4,-8(fp)
    afd8:	000ae980 	call	ae98 <alt_alarm_stop>
    afdc:	00000d06 	br	b014 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    afe0:	e0bffe17 	ldw	r2,-8(fp)
    afe4:	10c00217 	ldw	r3,8(r2)
    afe8:	e0bffd17 	ldw	r2,-12(fp)
    afec:	1887883a 	add	r3,r3,r2
    aff0:	e0bffe17 	ldw	r2,-8(fp)
    aff4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    aff8:	e0bffe17 	ldw	r2,-8(fp)
    affc:	10c00217 	ldw	r3,8(r2)
    b000:	d0a6b517 	ldw	r2,-25900(gp)
    b004:	1880032e 	bgeu	r3,r2,b014 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    b008:	e0fffe17 	ldw	r3,-8(fp)
    b00c:	00800044 	movi	r2,1
    b010:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    b014:	e0bfff17 	ldw	r2,-4(fp)
    b018:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b01c:	d0e00d04 	addi	r3,gp,-32716
    b020:	e0bffe17 	ldw	r2,-8(fp)
    b024:	10ffcc1e 	bne	r2,r3,af58 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    b028:	e037883a 	mov	sp,fp
    b02c:	dfc00117 	ldw	ra,4(sp)
    b030:	df000017 	ldw	fp,0(sp)
    b034:	dec00204 	addi	sp,sp,8
    b038:	f800283a 	ret

0000b03c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b03c:	defff704 	addi	sp,sp,-36
    b040:	dfc00815 	stw	ra,32(sp)
    b044:	df000715 	stw	fp,28(sp)
    b048:	df000704 	addi	fp,sp,28
    b04c:	e13ffb15 	stw	r4,-20(fp)
    b050:	e17ffc15 	stw	r5,-16(fp)
    b054:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b058:	e0bffb17 	ldw	r2,-20(fp)
    b05c:	1004803a 	cmplt	r2,r2,zero
    b060:	1000091e 	bne	r2,zero,b088 <write+0x4c>
    b064:	e13ffb17 	ldw	r4,-20(fp)
    b068:	01400304 	movi	r5,12
    b06c:	00007d80 	call	7d8 <__mulsi3>
    b070:	1007883a 	mov	r3,r2
    b074:	00800074 	movhi	r2,1
    b078:	10b73e04 	addi	r2,r2,-8968
    b07c:	1887883a 	add	r3,r3,r2
    b080:	e0ffff15 	stw	r3,-4(fp)
    b084:	00000106 	br	b08c <write+0x50>
    b088:	e03fff15 	stw	zero,-4(fp)
    b08c:	e0bfff17 	ldw	r2,-4(fp)
    b090:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b094:	e0bffa17 	ldw	r2,-24(fp)
    b098:	1005003a 	cmpeq	r2,r2,zero
    b09c:	1000241e 	bne	r2,zero,b130 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b0a0:	e0bffa17 	ldw	r2,-24(fp)
    b0a4:	10800217 	ldw	r2,8(r2)
    b0a8:	108000cc 	andi	r2,r2,3
    b0ac:	1005003a 	cmpeq	r2,r2,zero
    b0b0:	10001a1e 	bne	r2,zero,b11c <write+0xe0>
    b0b4:	e0bffa17 	ldw	r2,-24(fp)
    b0b8:	10800017 	ldw	r2,0(r2)
    b0bc:	10800617 	ldw	r2,24(r2)
    b0c0:	1005003a 	cmpeq	r2,r2,zero
    b0c4:	1000151e 	bne	r2,zero,b11c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b0c8:	e0bffa17 	ldw	r2,-24(fp)
    b0cc:	10800017 	ldw	r2,0(r2)
    b0d0:	10800617 	ldw	r2,24(r2)
    b0d4:	e17ffc17 	ldw	r5,-16(fp)
    b0d8:	e1bffd17 	ldw	r6,-12(fp)
    b0dc:	e13ffa17 	ldw	r4,-24(fp)
    b0e0:	103ee83a 	callr	r2
    b0e4:	e0bff915 	stw	r2,-28(fp)
    b0e8:	e0bff917 	ldw	r2,-28(fp)
    b0ec:	1004403a 	cmpge	r2,r2,zero
    b0f0:	1000071e 	bne	r2,zero,b110 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    b0f4:	000b1600 	call	b160 <alt_get_errno>
    b0f8:	e0fff917 	ldw	r3,-28(fp)
    b0fc:	00c7c83a 	sub	r3,zero,r3
    b100:	10c00015 	stw	r3,0(r2)
        return -1;
    b104:	00bfffc4 	movi	r2,-1
    b108:	e0bffe15 	stw	r2,-8(fp)
    b10c:	00000e06 	br	b148 <write+0x10c>
      }
      return rval;
    b110:	e0bff917 	ldw	r2,-28(fp)
    b114:	e0bffe15 	stw	r2,-8(fp)
    b118:	00000b06 	br	b148 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b11c:	000b1600 	call	b160 <alt_get_errno>
    b120:	1007883a 	mov	r3,r2
    b124:	00800344 	movi	r2,13
    b128:	18800015 	stw	r2,0(r3)
    b12c:	00000406 	br	b140 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b130:	000b1600 	call	b160 <alt_get_errno>
    b134:	1007883a 	mov	r3,r2
    b138:	00801444 	movi	r2,81
    b13c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b140:	00bfffc4 	movi	r2,-1
    b144:	e0bffe15 	stw	r2,-8(fp)
    b148:	e0bffe17 	ldw	r2,-8(fp)
}
    b14c:	e037883a 	mov	sp,fp
    b150:	dfc00117 	ldw	ra,4(sp)
    b154:	df000017 	ldw	fp,0(sp)
    b158:	dec00204 	addi	sp,sp,8
    b15c:	f800283a 	ret

0000b160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b160:	defffd04 	addi	sp,sp,-12
    b164:	dfc00215 	stw	ra,8(sp)
    b168:	df000115 	stw	fp,4(sp)
    b16c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b170:	00800074 	movhi	r2,1
    b174:	10bbc104 	addi	r2,r2,-4348
    b178:	10800017 	ldw	r2,0(r2)
    b17c:	1005003a 	cmpeq	r2,r2,zero
    b180:	1000061e 	bne	r2,zero,b19c <alt_get_errno+0x3c>
    b184:	00800074 	movhi	r2,1
    b188:	10bbc104 	addi	r2,r2,-4348
    b18c:	10800017 	ldw	r2,0(r2)
    b190:	103ee83a 	callr	r2
    b194:	e0bfff15 	stw	r2,-4(fp)
    b198:	00000306 	br	b1a8 <alt_get_errno+0x48>
    b19c:	00800074 	movhi	r2,1
    b1a0:	10826304 	addi	r2,r2,2444
    b1a4:	e0bfff15 	stw	r2,-4(fp)
    b1a8:	e0bfff17 	ldw	r2,-4(fp)
}
    b1ac:	e037883a 	mov	sp,fp
    b1b0:	dfc00117 	ldw	ra,4(sp)
    b1b4:	df000017 	ldw	fp,0(sp)
    b1b8:	dec00204 	addi	sp,sp,8
    b1bc:	f800283a 	ret

0000b1c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b1c0:	defffd04 	addi	sp,sp,-12
    b1c4:	dfc00215 	stw	ra,8(sp)
    b1c8:	df000115 	stw	fp,4(sp)
    b1cc:	df000104 	addi	fp,sp,4
    b1d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    b1d4:	000c7480 	call	c748 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b1d8:	00800044 	movi	r2,1
    b1dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b1e0:	e037883a 	mov	sp,fp
    b1e4:	dfc00117 	ldw	ra,4(sp)
    b1e8:	df000017 	ldw	fp,0(sp)
    b1ec:	dec00204 	addi	sp,sp,8
    b1f0:	f800283a 	ret

0000b1f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b1f4:	defffe04 	addi	sp,sp,-8
    b1f8:	dfc00115 	stw	ra,4(sp)
    b1fc:	df000015 	stw	fp,0(sp)
    b200:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    b204:	01040034 	movhi	r4,4096
    b208:	21080004 	addi	r4,r4,8192
    b20c:	000b883a 	mov	r5,zero
    b210:	000d883a 	mov	r6,zero
    b214:	01c00204 	movi	r7,8
    b218:	000bda40 	call	bda4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    b21c:	01000074 	movhi	r4,1
    b220:	2137a804 	addi	r4,r4,-8544
    b224:	000b883a 	mov	r5,zero
    b228:	01800204 	movi	r6,8
    b22c:	000b3d00 	call	b3d0 <altera_avalon_jtag_uart_init>
    b230:	01000074 	movhi	r4,1
    b234:	21379e04 	addi	r4,r4,-8584
    b238:	000b2500 	call	b250 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    b23c:	e037883a 	mov	sp,fp
    b240:	dfc00117 	ldw	ra,4(sp)
    b244:	df000017 	ldw	fp,0(sp)
    b248:	dec00204 	addi	sp,sp,8
    b24c:	f800283a 	ret

0000b250 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b250:	defffd04 	addi	sp,sp,-12
    b254:	dfc00215 	stw	ra,8(sp)
    b258:	df000115 	stw	fp,4(sp)
    b25c:	df000104 	addi	fp,sp,4
    b260:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b264:	e13fff17 	ldw	r4,-4(fp)
    b268:	01400074 	movhi	r5,1
    b26c:	297bbe04 	addi	r5,r5,-4360
    b270:	000be500 	call	be50 <alt_dev_llist_insert>
}
    b274:	e037883a 	mov	sp,fp
    b278:	dfc00117 	ldw	ra,4(sp)
    b27c:	df000017 	ldw	fp,0(sp)
    b280:	dec00204 	addi	sp,sp,8
    b284:	f800283a 	ret

0000b288 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b288:	defffa04 	addi	sp,sp,-24
    b28c:	dfc00515 	stw	ra,20(sp)
    b290:	df000415 	stw	fp,16(sp)
    b294:	df000404 	addi	fp,sp,16
    b298:	e13ffd15 	stw	r4,-12(fp)
    b29c:	e17ffe15 	stw	r5,-8(fp)
    b2a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b2a4:	e0bffd17 	ldw	r2,-12(fp)
    b2a8:	10800017 	ldw	r2,0(r2)
    b2ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b2b0:	e0bffc17 	ldw	r2,-16(fp)
    b2b4:	11000a04 	addi	r4,r2,40
    b2b8:	e0bffd17 	ldw	r2,-12(fp)
    b2bc:	11c00217 	ldw	r7,8(r2)
    b2c0:	e17ffe17 	ldw	r5,-8(fp)
    b2c4:	e1bfff17 	ldw	r6,-4(fp)
    b2c8:	000b8d00 	call	b8d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b2cc:	e037883a 	mov	sp,fp
    b2d0:	dfc00117 	ldw	ra,4(sp)
    b2d4:	df000017 	ldw	fp,0(sp)
    b2d8:	dec00204 	addi	sp,sp,8
    b2dc:	f800283a 	ret

0000b2e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b2e0:	defffa04 	addi	sp,sp,-24
    b2e4:	dfc00515 	stw	ra,20(sp)
    b2e8:	df000415 	stw	fp,16(sp)
    b2ec:	df000404 	addi	fp,sp,16
    b2f0:	e13ffd15 	stw	r4,-12(fp)
    b2f4:	e17ffe15 	stw	r5,-8(fp)
    b2f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b2fc:	e0bffd17 	ldw	r2,-12(fp)
    b300:	10800017 	ldw	r2,0(r2)
    b304:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b308:	e0bffc17 	ldw	r2,-16(fp)
    b30c:	11000a04 	addi	r4,r2,40
    b310:	e0bffd17 	ldw	r2,-12(fp)
    b314:	11c00217 	ldw	r7,8(r2)
    b318:	e17ffe17 	ldw	r5,-8(fp)
    b31c:	e1bfff17 	ldw	r6,-4(fp)
    b320:	000baf40 	call	baf4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b324:	e037883a 	mov	sp,fp
    b328:	dfc00117 	ldw	ra,4(sp)
    b32c:	df000017 	ldw	fp,0(sp)
    b330:	dec00204 	addi	sp,sp,8
    b334:	f800283a 	ret

0000b338 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b338:	defffc04 	addi	sp,sp,-16
    b33c:	dfc00315 	stw	ra,12(sp)
    b340:	df000215 	stw	fp,8(sp)
    b344:	df000204 	addi	fp,sp,8
    b348:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b34c:	e0bfff17 	ldw	r2,-4(fp)
    b350:	10800017 	ldw	r2,0(r2)
    b354:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b358:	e0bffe17 	ldw	r2,-8(fp)
    b35c:	11000a04 	addi	r4,r2,40
    b360:	e0bfff17 	ldw	r2,-4(fp)
    b364:	11400217 	ldw	r5,8(r2)
    b368:	000b7680 	call	b768 <altera_avalon_jtag_uart_close>
}
    b36c:	e037883a 	mov	sp,fp
    b370:	dfc00117 	ldw	ra,4(sp)
    b374:	df000017 	ldw	fp,0(sp)
    b378:	dec00204 	addi	sp,sp,8
    b37c:	f800283a 	ret

0000b380 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b380:	defffa04 	addi	sp,sp,-24
    b384:	dfc00515 	stw	ra,20(sp)
    b388:	df000415 	stw	fp,16(sp)
    b38c:	df000404 	addi	fp,sp,16
    b390:	e13ffd15 	stw	r4,-12(fp)
    b394:	e17ffe15 	stw	r5,-8(fp)
    b398:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b39c:	e0bffd17 	ldw	r2,-12(fp)
    b3a0:	10800017 	ldw	r2,0(r2)
    b3a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b3a8:	e0bffc17 	ldw	r2,-16(fp)
    b3ac:	11000a04 	addi	r4,r2,40
    b3b0:	e17ffe17 	ldw	r5,-8(fp)
    b3b4:	e1bfff17 	ldw	r6,-4(fp)
    b3b8:	000b7dc0 	call	b7dc <altera_avalon_jtag_uart_ioctl>
}
    b3bc:	e037883a 	mov	sp,fp
    b3c0:	dfc00117 	ldw	ra,4(sp)
    b3c4:	df000017 	ldw	fp,0(sp)
    b3c8:	dec00204 	addi	sp,sp,8
    b3cc:	f800283a 	ret

0000b3d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b3d0:	defffa04 	addi	sp,sp,-24
    b3d4:	dfc00515 	stw	ra,20(sp)
    b3d8:	df000415 	stw	fp,16(sp)
    b3dc:	df000404 	addi	fp,sp,16
    b3e0:	e13ffd15 	stw	r4,-12(fp)
    b3e4:	e17ffe15 	stw	r5,-8(fp)
    b3e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b3ec:	e0fffd17 	ldw	r3,-12(fp)
    b3f0:	00800044 	movi	r2,1
    b3f4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b3f8:	e0bffd17 	ldw	r2,-12(fp)
    b3fc:	10800017 	ldw	r2,0(r2)
    b400:	11000104 	addi	r4,r2,4
    b404:	e0bffd17 	ldw	r2,-12(fp)
    b408:	10800817 	ldw	r2,32(r2)
    b40c:	1007883a 	mov	r3,r2
    b410:	2005883a 	mov	r2,r4
    b414:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b418:	e13ffe17 	ldw	r4,-8(fp)
    b41c:	e17fff17 	ldw	r5,-4(fp)
    b420:	d8000015 	stw	zero,0(sp)
    b424:	01800074 	movhi	r6,1
    b428:	31ad2404 	addi	r6,r6,-19312
    b42c:	e1fffd17 	ldw	r7,-12(fp)
    b430:	000c0480 	call	c048 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b434:	e0bffd17 	ldw	r2,-12(fp)
    b438:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b43c:	e0bffd17 	ldw	r2,-12(fp)
    b440:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b444:	00800074 	movhi	r2,1
    b448:	10826a04 	addi	r2,r2,2472
    b44c:	10800017 	ldw	r2,0(r2)
    b450:	100b883a 	mov	r5,r2
    b454:	01800074 	movhi	r6,1
    b458:	31adae04 	addi	r6,r6,-18760
    b45c:	e1fffd17 	ldw	r7,-12(fp)
    b460:	000a1200 	call	a120 <alt_alarm_start>
    b464:	1004403a 	cmpge	r2,r2,zero
    b468:	1000041e 	bne	r2,zero,b47c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b46c:	e0fffd17 	ldw	r3,-12(fp)
    b470:	00a00034 	movhi	r2,32768
    b474:	10bfffc4 	addi	r2,r2,-1
    b478:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b47c:	e037883a 	mov	sp,fp
    b480:	dfc00117 	ldw	ra,4(sp)
    b484:	df000017 	ldw	fp,0(sp)
    b488:	dec00204 	addi	sp,sp,8
    b48c:	f800283a 	ret

0000b490 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b490:	defff804 	addi	sp,sp,-32
    b494:	df000715 	stw	fp,28(sp)
    b498:	df000704 	addi	fp,sp,28
    b49c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b4a0:	e0bfff17 	ldw	r2,-4(fp)
    b4a4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    b4a8:	e0bffe17 	ldw	r2,-8(fp)
    b4ac:	10800017 	ldw	r2,0(r2)
    b4b0:	e0bffd15 	stw	r2,-12(fp)
    b4b4:	00000006 	br	b4b8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b4b8:	e0bffd17 	ldw	r2,-12(fp)
    b4bc:	10800104 	addi	r2,r2,4
    b4c0:	10800037 	ldwio	r2,0(r2)
    b4c4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    b4c8:	e0bffc17 	ldw	r2,-16(fp)
    b4cc:	1080c00c 	andi	r2,r2,768
    b4d0:	1005003a 	cmpeq	r2,r2,zero
    b4d4:	1000741e 	bne	r2,zero,b6a8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    b4d8:	e0bffc17 	ldw	r2,-16(fp)
    b4dc:	1080400c 	andi	r2,r2,256
    b4e0:	1005003a 	cmpeq	r2,r2,zero
    b4e4:	1000351e 	bne	r2,zero,b5bc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    b4e8:	00800074 	movhi	r2,1
    b4ec:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b4f0:	e0bffe17 	ldw	r2,-8(fp)
    b4f4:	10800a17 	ldw	r2,40(r2)
    b4f8:	10800044 	addi	r2,r2,1
    b4fc:	1081ffcc 	andi	r2,r2,2047
    b500:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    b504:	e0bffe17 	ldw	r2,-8(fp)
    b508:	10c00b17 	ldw	r3,44(r2)
    b50c:	e0bffa17 	ldw	r2,-24(fp)
    b510:	18801626 	beq	r3,r2,b56c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b514:	e0bffd17 	ldw	r2,-12(fp)
    b518:	10800037 	ldwio	r2,0(r2)
    b51c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    b520:	e0bffb17 	ldw	r2,-20(fp)
    b524:	10a0000c 	andi	r2,r2,32768
    b528:	1005003a 	cmpeq	r2,r2,zero
    b52c:	10000f1e 	bne	r2,zero,b56c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b530:	e0bffe17 	ldw	r2,-8(fp)
    b534:	10c00a17 	ldw	r3,40(r2)
    b538:	e0bffb17 	ldw	r2,-20(fp)
    b53c:	1009883a 	mov	r4,r2
    b540:	e0bffe17 	ldw	r2,-8(fp)
    b544:	1885883a 	add	r2,r3,r2
    b548:	10800e04 	addi	r2,r2,56
    b54c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b550:	e0bffe17 	ldw	r2,-8(fp)
    b554:	10800a17 	ldw	r2,40(r2)
    b558:	10800044 	addi	r2,r2,1
    b55c:	10c1ffcc 	andi	r3,r2,2047
    b560:	e0bffe17 	ldw	r2,-8(fp)
    b564:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    b568:	003fe106 	br	b4f0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    b56c:	e0bffb17 	ldw	r2,-20(fp)
    b570:	10bfffec 	andhi	r2,r2,65535
    b574:	1005003a 	cmpeq	r2,r2,zero
    b578:	1000101e 	bne	r2,zero,b5bc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b57c:	e0bffe17 	ldw	r2,-8(fp)
    b580:	10c00817 	ldw	r3,32(r2)
    b584:	00bfff84 	movi	r2,-2
    b588:	1886703a 	and	r3,r3,r2
    b58c:	e0bffe17 	ldw	r2,-8(fp)
    b590:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    b594:	e0bffd17 	ldw	r2,-12(fp)
    b598:	11000104 	addi	r4,r2,4
    b59c:	e0bffe17 	ldw	r2,-8(fp)
    b5a0:	10800817 	ldw	r2,32(r2)
    b5a4:	1007883a 	mov	r3,r2
    b5a8:	2005883a 	mov	r2,r4
    b5ac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b5b0:	e0bffd17 	ldw	r2,-12(fp)
    b5b4:	10800104 	addi	r2,r2,4
    b5b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    b5bc:	e0bffc17 	ldw	r2,-16(fp)
    b5c0:	1080800c 	andi	r2,r2,512
    b5c4:	1005003a 	cmpeq	r2,r2,zero
    b5c8:	103fbb1e 	bne	r2,zero,b4b8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    b5cc:	e0bffc17 	ldw	r2,-16(fp)
    b5d0:	10bfffec 	andhi	r2,r2,65535
    b5d4:	1004d43a 	srli	r2,r2,16
    b5d8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    b5dc:	00001506 	br	b634 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    b5e0:	e13ffd17 	ldw	r4,-12(fp)
    b5e4:	e0bffe17 	ldw	r2,-8(fp)
    b5e8:	10c00d17 	ldw	r3,52(r2)
    b5ec:	e0bffe17 	ldw	r2,-8(fp)
    b5f0:	1885883a 	add	r2,r3,r2
    b5f4:	10820e04 	addi	r2,r2,2104
    b5f8:	10800003 	ldbu	r2,0(r2)
    b5fc:	10c03fcc 	andi	r3,r2,255
    b600:	18c0201c 	xori	r3,r3,128
    b604:	18ffe004 	addi	r3,r3,-128
    b608:	2005883a 	mov	r2,r4
    b60c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b610:	e0bffe17 	ldw	r2,-8(fp)
    b614:	10800d17 	ldw	r2,52(r2)
    b618:	10800044 	addi	r2,r2,1
    b61c:	10c1ffcc 	andi	r3,r2,2047
    b620:	e0bffe17 	ldw	r2,-8(fp)
    b624:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    b628:	e0bff917 	ldw	r2,-28(fp)
    b62c:	10bfffc4 	addi	r2,r2,-1
    b630:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    b634:	e0bff917 	ldw	r2,-28(fp)
    b638:	1005003a 	cmpeq	r2,r2,zero
    b63c:	1000051e 	bne	r2,zero,b654 <altera_avalon_jtag_uart_irq+0x1c4>
    b640:	e0bffe17 	ldw	r2,-8(fp)
    b644:	10c00d17 	ldw	r3,52(r2)
    b648:	e0bffe17 	ldw	r2,-8(fp)
    b64c:	10800c17 	ldw	r2,48(r2)
    b650:	18bfe31e 	bne	r3,r2,b5e0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    b654:	e0bff917 	ldw	r2,-28(fp)
    b658:	1005003a 	cmpeq	r2,r2,zero
    b65c:	103f961e 	bne	r2,zero,b4b8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b660:	e0bffe17 	ldw	r2,-8(fp)
    b664:	10c00817 	ldw	r3,32(r2)
    b668:	00bfff44 	movi	r2,-3
    b66c:	1886703a 	and	r3,r3,r2
    b670:	e0bffe17 	ldw	r2,-8(fp)
    b674:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b678:	e0bffe17 	ldw	r2,-8(fp)
    b67c:	10800017 	ldw	r2,0(r2)
    b680:	11000104 	addi	r4,r2,4
    b684:	e0bffe17 	ldw	r2,-8(fp)
    b688:	10800817 	ldw	r2,32(r2)
    b68c:	1007883a 	mov	r3,r2
    b690:	2005883a 	mov	r2,r4
    b694:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b698:	e0bffd17 	ldw	r2,-12(fp)
    b69c:	10800104 	addi	r2,r2,4
    b6a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    b6a4:	003f8406 	br	b4b8 <altera_avalon_jtag_uart_irq+0x28>
}
    b6a8:	e037883a 	mov	sp,fp
    b6ac:	df000017 	ldw	fp,0(sp)
    b6b0:	dec00104 	addi	sp,sp,4
    b6b4:	f800283a 	ret

0000b6b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    b6b8:	defffc04 	addi	sp,sp,-16
    b6bc:	df000315 	stw	fp,12(sp)
    b6c0:	df000304 	addi	fp,sp,12
    b6c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    b6c8:	e0bfff17 	ldw	r2,-4(fp)
    b6cc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    b6d0:	e0bffe17 	ldw	r2,-8(fp)
    b6d4:	10800017 	ldw	r2,0(r2)
    b6d8:	10800104 	addi	r2,r2,4
    b6dc:	10800037 	ldwio	r2,0(r2)
    b6e0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    b6e4:	e0bffd17 	ldw	r2,-12(fp)
    b6e8:	1081000c 	andi	r2,r2,1024
    b6ec:	1005003a 	cmpeq	r2,r2,zero
    b6f0:	10000c1e 	bne	r2,zero,b724 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    b6f4:	e0bffe17 	ldw	r2,-8(fp)
    b6f8:	10800017 	ldw	r2,0(r2)
    b6fc:	11000104 	addi	r4,r2,4
    b700:	e0bffe17 	ldw	r2,-8(fp)
    b704:	10800817 	ldw	r2,32(r2)
    b708:	10810014 	ori	r2,r2,1024
    b70c:	1007883a 	mov	r3,r2
    b710:	2005883a 	mov	r2,r4
    b714:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    b718:	e0bffe17 	ldw	r2,-8(fp)
    b71c:	10000915 	stw	zero,36(r2)
    b720:	00000a06 	br	b74c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    b724:	e0bffe17 	ldw	r2,-8(fp)
    b728:	10c00917 	ldw	r3,36(r2)
    b72c:	00a00034 	movhi	r2,32768
    b730:	10bfff04 	addi	r2,r2,-4
    b734:	10c00536 	bltu	r2,r3,b74c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    b738:	e0bffe17 	ldw	r2,-8(fp)
    b73c:	10800917 	ldw	r2,36(r2)
    b740:	10c00044 	addi	r3,r2,1
    b744:	e0bffe17 	ldw	r2,-8(fp)
    b748:	10c00915 	stw	r3,36(r2)
    b74c:	00800074 	movhi	r2,1
    b750:	10826a04 	addi	r2,r2,2472
    b754:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    b758:	e037883a 	mov	sp,fp
    b75c:	df000017 	ldw	fp,0(sp)
    b760:	dec00104 	addi	sp,sp,4
    b764:	f800283a 	ret

0000b768 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b768:	defffc04 	addi	sp,sp,-16
    b76c:	df000315 	stw	fp,12(sp)
    b770:	df000304 	addi	fp,sp,12
    b774:	e13ffd15 	stw	r4,-12(fp)
    b778:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b77c:	00000706 	br	b79c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    b780:	e0bffe17 	ldw	r2,-8(fp)
    b784:	1090000c 	andi	r2,r2,16384
    b788:	1005003a 	cmpeq	r2,r2,zero
    b78c:	1000031e 	bne	r2,zero,b79c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    b790:	00bffd44 	movi	r2,-11
    b794:	e0bfff15 	stw	r2,-4(fp)
    b798:	00000b06 	br	b7c8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b79c:	e0bffd17 	ldw	r2,-12(fp)
    b7a0:	10c00d17 	ldw	r3,52(r2)
    b7a4:	e0bffd17 	ldw	r2,-12(fp)
    b7a8:	10800c17 	ldw	r2,48(r2)
    b7ac:	18800526 	beq	r3,r2,b7c4 <altera_avalon_jtag_uart_close+0x5c>
    b7b0:	e0bffd17 	ldw	r2,-12(fp)
    b7b4:	10c00917 	ldw	r3,36(r2)
    b7b8:	e0bffd17 	ldw	r2,-12(fp)
    b7bc:	10800117 	ldw	r2,4(r2)
    b7c0:	18bfef36 	bltu	r3,r2,b780 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b7c4:	e03fff15 	stw	zero,-4(fp)
    b7c8:	e0bfff17 	ldw	r2,-4(fp)
}
    b7cc:	e037883a 	mov	sp,fp
    b7d0:	df000017 	ldw	fp,0(sp)
    b7d4:	dec00104 	addi	sp,sp,4
    b7d8:	f800283a 	ret

0000b7dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b7dc:	defff804 	addi	sp,sp,-32
    b7e0:	df000715 	stw	fp,28(sp)
    b7e4:	df000704 	addi	fp,sp,28
    b7e8:	e13ffb15 	stw	r4,-20(fp)
    b7ec:	e17ffc15 	stw	r5,-16(fp)
    b7f0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    b7f4:	00bff9c4 	movi	r2,-25
    b7f8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    b7fc:	e0bffc17 	ldw	r2,-16(fp)
    b800:	e0bfff15 	stw	r2,-4(fp)
    b804:	e0ffff17 	ldw	r3,-4(fp)
    b808:	189a8060 	cmpeqi	r2,r3,27137
    b80c:	1000041e 	bne	r2,zero,b820 <altera_avalon_jtag_uart_ioctl+0x44>
    b810:	e0ffff17 	ldw	r3,-4(fp)
    b814:	189a80a0 	cmpeqi	r2,r3,27138
    b818:	10001b1e 	bne	r2,zero,b888 <altera_avalon_jtag_uart_ioctl+0xac>
    b81c:	00002706 	br	b8bc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b820:	e0bffb17 	ldw	r2,-20(fp)
    b824:	10c00117 	ldw	r3,4(r2)
    b828:	00a00034 	movhi	r2,32768
    b82c:	10bfffc4 	addi	r2,r2,-1
    b830:	18802226 	beq	r3,r2,b8bc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    b834:	e0bffd17 	ldw	r2,-12(fp)
    b838:	10800017 	ldw	r2,0(r2)
    b83c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b840:	e0bff917 	ldw	r2,-28(fp)
    b844:	10800090 	cmplti	r2,r2,2
    b848:	1000071e 	bne	r2,zero,b868 <altera_avalon_jtag_uart_ioctl+0x8c>
    b84c:	e0fff917 	ldw	r3,-28(fp)
    b850:	00a00034 	movhi	r2,32768
    b854:	10bfffc4 	addi	r2,r2,-1
    b858:	18800326 	beq	r3,r2,b868 <altera_avalon_jtag_uart_ioctl+0x8c>
    b85c:	e0bff917 	ldw	r2,-28(fp)
    b860:	e0bffe15 	stw	r2,-8(fp)
    b864:	00000306 	br	b874 <altera_avalon_jtag_uart_ioctl+0x98>
    b868:	00e00034 	movhi	r3,32768
    b86c:	18ffff84 	addi	r3,r3,-2
    b870:	e0fffe15 	stw	r3,-8(fp)
    b874:	e0bffb17 	ldw	r2,-20(fp)
    b878:	e0fffe17 	ldw	r3,-8(fp)
    b87c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    b880:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    b884:	00000d06 	br	b8bc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b888:	e0bffb17 	ldw	r2,-20(fp)
    b88c:	10c00117 	ldw	r3,4(r2)
    b890:	00a00034 	movhi	r2,32768
    b894:	10bfffc4 	addi	r2,r2,-1
    b898:	18800826 	beq	r3,r2,b8bc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b89c:	e13ffd17 	ldw	r4,-12(fp)
    b8a0:	e0bffb17 	ldw	r2,-20(fp)
    b8a4:	10c00917 	ldw	r3,36(r2)
    b8a8:	e0bffb17 	ldw	r2,-20(fp)
    b8ac:	10800117 	ldw	r2,4(r2)
    b8b0:	1885803a 	cmpltu	r2,r3,r2
    b8b4:	20800015 	stw	r2,0(r4)
      rc = 0;
    b8b8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    b8bc:	e0bffa17 	ldw	r2,-24(fp)
}
    b8c0:	e037883a 	mov	sp,fp
    b8c4:	df000017 	ldw	fp,0(sp)
    b8c8:	dec00104 	addi	sp,sp,4
    b8cc:	f800283a 	ret

0000b8d0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b8d0:	defff204 	addi	sp,sp,-56
    b8d4:	dfc00d15 	stw	ra,52(sp)
    b8d8:	df000c15 	stw	fp,48(sp)
    b8dc:	df000c04 	addi	fp,sp,48
    b8e0:	e13ffb15 	stw	r4,-20(fp)
    b8e4:	e17ffc15 	stw	r5,-16(fp)
    b8e8:	e1bffd15 	stw	r6,-12(fp)
    b8ec:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    b8f0:	e0bffc17 	ldw	r2,-16(fp)
    b8f4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b8f8:	00004806 	br	ba1c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b8fc:	e0bffb17 	ldw	r2,-20(fp)
    b900:	10800a17 	ldw	r2,40(r2)
    b904:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    b908:	e0bffb17 	ldw	r2,-20(fp)
    b90c:	10800b17 	ldw	r2,44(r2)
    b910:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    b914:	e0fff717 	ldw	r3,-36(fp)
    b918:	e0bff617 	ldw	r2,-40(fp)
    b91c:	18800536 	bltu	r3,r2,b934 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    b920:	e0bff717 	ldw	r2,-36(fp)
    b924:	e0fff617 	ldw	r3,-40(fp)
    b928:	10c5c83a 	sub	r2,r2,r3
    b92c:	e0bff815 	stw	r2,-32(fp)
    b930:	00000406 	br	b944 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b934:	00820004 	movi	r2,2048
    b938:	e0fff617 	ldw	r3,-40(fp)
    b93c:	10c5c83a 	sub	r2,r2,r3
    b940:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b944:	e0bff817 	ldw	r2,-32(fp)
    b948:	1005003a 	cmpeq	r2,r2,zero
    b94c:	10001f1e 	bne	r2,zero,b9cc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    b950:	e0fffd17 	ldw	r3,-12(fp)
    b954:	e0bff817 	ldw	r2,-32(fp)
    b958:	1880022e 	bgeu	r3,r2,b964 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    b95c:	e0bffd17 	ldw	r2,-12(fp)
    b960:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b964:	e0bffb17 	ldw	r2,-20(fp)
    b968:	10c00e04 	addi	r3,r2,56
    b96c:	e0bff617 	ldw	r2,-40(fp)
    b970:	1887883a 	add	r3,r3,r2
    b974:	e0bffa17 	ldw	r2,-24(fp)
    b978:	1009883a 	mov	r4,r2
    b97c:	180b883a 	mov	r5,r3
    b980:	e1bff817 	ldw	r6,-32(fp)
    b984:	0005cb80 	call	5cb8 <memcpy>
      ptr   += n;
    b988:	e0fff817 	ldw	r3,-32(fp)
    b98c:	e0bffa17 	ldw	r2,-24(fp)
    b990:	10c5883a 	add	r2,r2,r3
    b994:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    b998:	e0fffd17 	ldw	r3,-12(fp)
    b99c:	e0bff817 	ldw	r2,-32(fp)
    b9a0:	1885c83a 	sub	r2,r3,r2
    b9a4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b9a8:	e0fff617 	ldw	r3,-40(fp)
    b9ac:	e0bff817 	ldw	r2,-32(fp)
    b9b0:	1885883a 	add	r2,r3,r2
    b9b4:	10c1ffcc 	andi	r3,r2,2047
    b9b8:	e0bffb17 	ldw	r2,-20(fp)
    b9bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b9c0:	e0bffd17 	ldw	r2,-12(fp)
    b9c4:	10800048 	cmpgei	r2,r2,1
    b9c8:	103fcc1e 	bne	r2,zero,b8fc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    b9cc:	e0fffa17 	ldw	r3,-24(fp)
    b9d0:	e0bffc17 	ldw	r2,-16(fp)
    b9d4:	1880141e 	bne	r3,r2,ba28 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b9d8:	e0bffe17 	ldw	r2,-8(fp)
    b9dc:	1090000c 	andi	r2,r2,16384
    b9e0:	1004c03a 	cmpne	r2,r2,zero
    b9e4:	1000101e 	bne	r2,zero,ba28 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b9e8:	e0bffb17 	ldw	r2,-20(fp)
    b9ec:	10c00a17 	ldw	r3,40(r2)
    b9f0:	e0bff717 	ldw	r2,-36(fp)
    b9f4:	1880051e 	bne	r3,r2,ba0c <altera_avalon_jtag_uart_read+0x13c>
    b9f8:	e0bffb17 	ldw	r2,-20(fp)
    b9fc:	10c00917 	ldw	r3,36(r2)
    ba00:	e0bffb17 	ldw	r2,-20(fp)
    ba04:	10800117 	ldw	r2,4(r2)
    ba08:	18bff736 	bltu	r3,r2,b9e8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ba0c:	e0bffb17 	ldw	r2,-20(fp)
    ba10:	10c00a17 	ldw	r3,40(r2)
    ba14:	e0bff717 	ldw	r2,-36(fp)
    ba18:	18800326 	beq	r3,r2,ba28 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ba1c:	e0bffd17 	ldw	r2,-12(fp)
    ba20:	10800048 	cmpgei	r2,r2,1
    ba24:	103fb51e 	bne	r2,zero,b8fc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ba28:	e0fffa17 	ldw	r3,-24(fp)
    ba2c:	e0bffc17 	ldw	r2,-16(fp)
    ba30:	18801926 	beq	r3,r2,ba98 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba34:	0005303a 	rdctl	r2,status
    ba38:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba3c:	e0fff517 	ldw	r3,-44(fp)
    ba40:	00bfff84 	movi	r2,-2
    ba44:	1884703a 	and	r2,r3,r2
    ba48:	1001703a 	wrctl	status,r2
  
  return context;
    ba4c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ba50:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ba54:	e0bffb17 	ldw	r2,-20(fp)
    ba58:	10800817 	ldw	r2,32(r2)
    ba5c:	10c00054 	ori	r3,r2,1
    ba60:	e0bffb17 	ldw	r2,-20(fp)
    ba64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ba68:	e0bffb17 	ldw	r2,-20(fp)
    ba6c:	10800017 	ldw	r2,0(r2)
    ba70:	11000104 	addi	r4,r2,4
    ba74:	e0bffb17 	ldw	r2,-20(fp)
    ba78:	10800817 	ldw	r2,32(r2)
    ba7c:	1007883a 	mov	r3,r2
    ba80:	2005883a 	mov	r2,r4
    ba84:	10c00035 	stwio	r3,0(r2)
    ba88:	e0bff917 	ldw	r2,-28(fp)
    ba8c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba90:	e0bff417 	ldw	r2,-48(fp)
    ba94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ba98:	e0fffa17 	ldw	r3,-24(fp)
    ba9c:	e0bffc17 	ldw	r2,-16(fp)
    baa0:	18800526 	beq	r3,r2,bab8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    baa4:	e0fffa17 	ldw	r3,-24(fp)
    baa8:	e0bffc17 	ldw	r2,-16(fp)
    baac:	1887c83a 	sub	r3,r3,r2
    bab0:	e0ffff15 	stw	r3,-4(fp)
    bab4:	00000906 	br	badc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    bab8:	e0bffe17 	ldw	r2,-8(fp)
    babc:	1090000c 	andi	r2,r2,16384
    bac0:	1005003a 	cmpeq	r2,r2,zero
    bac4:	1000031e 	bne	r2,zero,bad4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    bac8:	00bffd44 	movi	r2,-11
    bacc:	e0bfff15 	stw	r2,-4(fp)
    bad0:	00000206 	br	badc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    bad4:	00bffec4 	movi	r2,-5
    bad8:	e0bfff15 	stw	r2,-4(fp)
    badc:	e0bfff17 	ldw	r2,-4(fp)
}
    bae0:	e037883a 	mov	sp,fp
    bae4:	dfc00117 	ldw	ra,4(sp)
    bae8:	df000017 	ldw	fp,0(sp)
    baec:	dec00204 	addi	sp,sp,8
    baf0:	f800283a 	ret

0000baf4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    baf4:	defff204 	addi	sp,sp,-56
    baf8:	dfc00d15 	stw	ra,52(sp)
    bafc:	df000c15 	stw	fp,48(sp)
    bb00:	df000c04 	addi	fp,sp,48
    bb04:	e13ffb15 	stw	r4,-20(fp)
    bb08:	e17ffc15 	stw	r5,-16(fp)
    bb0c:	e1bffd15 	stw	r6,-12(fp)
    bb10:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    bb14:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    bb18:	e0bffc17 	ldw	r2,-16(fp)
    bb1c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bb20:	00003a06 	br	bc0c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    bb24:	e0bffb17 	ldw	r2,-20(fp)
    bb28:	10800c17 	ldw	r2,48(r2)
    bb2c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    bb30:	e0bffb17 	ldw	r2,-20(fp)
    bb34:	10800d17 	ldw	r2,52(r2)
    bb38:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    bb3c:	e0fffa17 	ldw	r3,-24(fp)
    bb40:	e0bff917 	ldw	r2,-28(fp)
    bb44:	1880062e 	bgeu	r3,r2,bb60 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    bb48:	e0fff917 	ldw	r3,-28(fp)
    bb4c:	e0bffa17 	ldw	r2,-24(fp)
    bb50:	1885c83a 	sub	r2,r3,r2
    bb54:	10bfffc4 	addi	r2,r2,-1
    bb58:	e0bff815 	stw	r2,-32(fp)
    bb5c:	00000c06 	br	bb90 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    bb60:	e0bff917 	ldw	r2,-28(fp)
    bb64:	1005003a 	cmpeq	r2,r2,zero
    bb68:	1000051e 	bne	r2,zero,bb80 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    bb6c:	00820004 	movi	r2,2048
    bb70:	e0fffa17 	ldw	r3,-24(fp)
    bb74:	10c5c83a 	sub	r2,r2,r3
    bb78:	e0bff815 	stw	r2,-32(fp)
    bb7c:	00000406 	br	bb90 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    bb80:	0081ffc4 	movi	r2,2047
    bb84:	e0fffa17 	ldw	r3,-24(fp)
    bb88:	10c5c83a 	sub	r2,r2,r3
    bb8c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    bb90:	e0bff817 	ldw	r2,-32(fp)
    bb94:	1005003a 	cmpeq	r2,r2,zero
    bb98:	10001f1e 	bne	r2,zero,bc18 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    bb9c:	e0fffd17 	ldw	r3,-12(fp)
    bba0:	e0bff817 	ldw	r2,-32(fp)
    bba4:	1880022e 	bgeu	r3,r2,bbb0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    bba8:	e0bffd17 	ldw	r2,-12(fp)
    bbac:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    bbb0:	e0bffb17 	ldw	r2,-20(fp)
    bbb4:	10c20e04 	addi	r3,r2,2104
    bbb8:	e0bffa17 	ldw	r2,-24(fp)
    bbbc:	1885883a 	add	r2,r3,r2
    bbc0:	e0fffc17 	ldw	r3,-16(fp)
    bbc4:	1009883a 	mov	r4,r2
    bbc8:	180b883a 	mov	r5,r3
    bbcc:	e1bff817 	ldw	r6,-32(fp)
    bbd0:	0005cb80 	call	5cb8 <memcpy>
      ptr   += n;
    bbd4:	e0fff817 	ldw	r3,-32(fp)
    bbd8:	e0bffc17 	ldw	r2,-16(fp)
    bbdc:	10c5883a 	add	r2,r2,r3
    bbe0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    bbe4:	e0fffd17 	ldw	r3,-12(fp)
    bbe8:	e0bff817 	ldw	r2,-32(fp)
    bbec:	1885c83a 	sub	r2,r3,r2
    bbf0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bbf4:	e0fffa17 	ldw	r3,-24(fp)
    bbf8:	e0bff817 	ldw	r2,-32(fp)
    bbfc:	1885883a 	add	r2,r3,r2
    bc00:	10c1ffcc 	andi	r3,r2,2047
    bc04:	e0bffb17 	ldw	r2,-20(fp)
    bc08:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bc0c:	e0bffd17 	ldw	r2,-12(fp)
    bc10:	10800048 	cmpgei	r2,r2,1
    bc14:	103fc31e 	bne	r2,zero,bb24 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bc18:	0005303a 	rdctl	r2,status
    bc1c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bc20:	e0fff517 	ldw	r3,-44(fp)
    bc24:	00bfff84 	movi	r2,-2
    bc28:	1884703a 	and	r2,r3,r2
    bc2c:	1001703a 	wrctl	status,r2
  
  return context;
    bc30:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    bc34:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bc38:	e0bffb17 	ldw	r2,-20(fp)
    bc3c:	10800817 	ldw	r2,32(r2)
    bc40:	10c00094 	ori	r3,r2,2
    bc44:	e0bffb17 	ldw	r2,-20(fp)
    bc48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bc4c:	e0bffb17 	ldw	r2,-20(fp)
    bc50:	10800017 	ldw	r2,0(r2)
    bc54:	11000104 	addi	r4,r2,4
    bc58:	e0bffb17 	ldw	r2,-20(fp)
    bc5c:	10800817 	ldw	r2,32(r2)
    bc60:	1007883a 	mov	r3,r2
    bc64:	2005883a 	mov	r2,r4
    bc68:	10c00035 	stwio	r3,0(r2)
    bc6c:	e0bff717 	ldw	r2,-36(fp)
    bc70:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc74:	e0bff417 	ldw	r2,-48(fp)
    bc78:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    bc7c:	e0bffd17 	ldw	r2,-12(fp)
    bc80:	10800050 	cmplti	r2,r2,1
    bc84:	1000111e 	bne	r2,zero,bccc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    bc88:	e0bffe17 	ldw	r2,-8(fp)
    bc8c:	1090000c 	andi	r2,r2,16384
    bc90:	1004c03a 	cmpne	r2,r2,zero
    bc94:	1000101e 	bne	r2,zero,bcd8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    bc98:	e0bffb17 	ldw	r2,-20(fp)
    bc9c:	10c00d17 	ldw	r3,52(r2)
    bca0:	e0bff917 	ldw	r2,-28(fp)
    bca4:	1880051e 	bne	r3,r2,bcbc <altera_avalon_jtag_uart_write+0x1c8>
    bca8:	e0bffb17 	ldw	r2,-20(fp)
    bcac:	10c00917 	ldw	r3,36(r2)
    bcb0:	e0bffb17 	ldw	r2,-20(fp)
    bcb4:	10800117 	ldw	r2,4(r2)
    bcb8:	18bff736 	bltu	r3,r2,bc98 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    bcbc:	e0bffb17 	ldw	r2,-20(fp)
    bcc0:	10c00d17 	ldw	r3,52(r2)
    bcc4:	e0bff917 	ldw	r2,-28(fp)
    bcc8:	18800326 	beq	r3,r2,bcd8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    bccc:	e0bffd17 	ldw	r2,-12(fp)
    bcd0:	10800048 	cmpgei	r2,r2,1
    bcd4:	103fcd1e 	bne	r2,zero,bc0c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    bcd8:	e0fffc17 	ldw	r3,-16(fp)
    bcdc:	e0bff617 	ldw	r2,-40(fp)
    bce0:	18800526 	beq	r3,r2,bcf8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    bce4:	e0fffc17 	ldw	r3,-16(fp)
    bce8:	e0bff617 	ldw	r2,-40(fp)
    bcec:	1887c83a 	sub	r3,r3,r2
    bcf0:	e0ffff15 	stw	r3,-4(fp)
    bcf4:	00000906 	br	bd1c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    bcf8:	e0bffe17 	ldw	r2,-8(fp)
    bcfc:	1090000c 	andi	r2,r2,16384
    bd00:	1005003a 	cmpeq	r2,r2,zero
    bd04:	1000031e 	bne	r2,zero,bd14 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    bd08:	00bffd44 	movi	r2,-11
    bd0c:	e0bfff15 	stw	r2,-4(fp)
    bd10:	00000206 	br	bd1c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    bd14:	00bffec4 	movi	r2,-5
    bd18:	e0bfff15 	stw	r2,-4(fp)
    bd1c:	e0bfff17 	ldw	r2,-4(fp)
}
    bd20:	e037883a 	mov	sp,fp
    bd24:	dfc00117 	ldw	ra,4(sp)
    bd28:	df000017 	ldw	fp,0(sp)
    bd2c:	dec00204 	addi	sp,sp,8
    bd30:	f800283a 	ret

0000bd34 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    bd34:	defffa04 	addi	sp,sp,-24
    bd38:	dfc00515 	stw	ra,20(sp)
    bd3c:	df000415 	stw	fp,16(sp)
    bd40:	df000404 	addi	fp,sp,16
    bd44:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    bd48:	e0bfff17 	ldw	r2,-4(fp)
    bd4c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    bd50:	e0bfff17 	ldw	r2,-4(fp)
    bd54:	10800104 	addi	r2,r2,4
    bd58:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd5c:	0005303a 	rdctl	r2,status
    bd60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd64:	e0fffd17 	ldw	r3,-12(fp)
    bd68:	00bfff84 	movi	r2,-2
    bd6c:	1884703a 	and	r2,r3,r2
    bd70:	1001703a 	wrctl	status,r2
  
  return context;
    bd74:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    bd78:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    bd7c:	000af300 	call	af30 <alt_tick>
    bd80:	e0bffe17 	ldw	r2,-8(fp)
    bd84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd88:	e0bffc17 	ldw	r2,-16(fp)
    bd8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    bd90:	e037883a 	mov	sp,fp
    bd94:	dfc00117 	ldw	ra,4(sp)
    bd98:	df000017 	ldw	fp,0(sp)
    bd9c:	dec00204 	addi	sp,sp,8
    bda0:	f800283a 	ret

0000bda4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    bda4:	defff804 	addi	sp,sp,-32
    bda8:	dfc00715 	stw	ra,28(sp)
    bdac:	df000615 	stw	fp,24(sp)
    bdb0:	df000604 	addi	fp,sp,24
    bdb4:	e13ffc15 	stw	r4,-16(fp)
    bdb8:	e17ffd15 	stw	r5,-12(fp)
    bdbc:	e1bffe15 	stw	r6,-8(fp)
    bdc0:	e1ffff15 	stw	r7,-4(fp)
    bdc4:	e0bfff17 	ldw	r2,-4(fp)
    bdc8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    bdcc:	00800074 	movhi	r2,1
    bdd0:	10826a04 	addi	r2,r2,2472
    bdd4:	10800017 	ldw	r2,0(r2)
    bdd8:	1004c03a 	cmpne	r2,r2,zero
    bddc:	1000041e 	bne	r2,zero,bdf0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    bde0:	00c00074 	movhi	r3,1
    bde4:	18c26a04 	addi	r3,r3,2472
    bde8:	e0bffb17 	ldw	r2,-20(fp)
    bdec:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    bdf0:	e0bffc17 	ldw	r2,-16(fp)
    bdf4:	10800104 	addi	r2,r2,4
    bdf8:	1007883a 	mov	r3,r2
    bdfc:	008001c4 	movi	r2,7
    be00:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    be04:	d8000015 	stw	zero,0(sp)
    be08:	e13ffd17 	ldw	r4,-12(fp)
    be0c:	e17ffe17 	ldw	r5,-8(fp)
    be10:	01800074 	movhi	r6,1
    be14:	31af4d04 	addi	r6,r6,-17100
    be18:	e1fffc17 	ldw	r7,-16(fp)
    be1c:	000c0480 	call	c048 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    be20:	e037883a 	mov	sp,fp
    be24:	dfc00117 	ldw	ra,4(sp)
    be28:	df000017 	ldw	fp,0(sp)
    be2c:	dec00204 	addi	sp,sp,8
    be30:	f800283a 	ret

0000be34 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    be34:	deffff04 	addi	sp,sp,-4
    be38:	df000015 	stw	fp,0(sp)
    be3c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    be40:	e037883a 	mov	sp,fp
    be44:	df000017 	ldw	fp,0(sp)
    be48:	dec00104 	addi	sp,sp,4
    be4c:	f800283a 	ret

0000be50 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    be50:	defff904 	addi	sp,sp,-28
    be54:	dfc00615 	stw	ra,24(sp)
    be58:	df000515 	stw	fp,20(sp)
    be5c:	df000504 	addi	fp,sp,20
    be60:	e13ffd15 	stw	r4,-12(fp)
    be64:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    be68:	e0bffd17 	ldw	r2,-12(fp)
    be6c:	1005003a 	cmpeq	r2,r2,zero
    be70:	1000041e 	bne	r2,zero,be84 <alt_dev_llist_insert+0x34>
    be74:	e0bffd17 	ldw	r2,-12(fp)
    be78:	10800217 	ldw	r2,8(r2)
    be7c:	1004c03a 	cmpne	r2,r2,zero
    be80:	1000071e 	bne	r2,zero,bea0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    be84:	000bf040 	call	bf04 <alt_get_errno>
    be88:	1007883a 	mov	r3,r2
    be8c:	00800584 	movi	r2,22
    be90:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    be94:	00bffa84 	movi	r2,-22
    be98:	e0bfff15 	stw	r2,-4(fp)
    be9c:	00001306 	br	beec <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bea0:	e0fffd17 	ldw	r3,-12(fp)
    bea4:	e0bffe17 	ldw	r2,-8(fp)
    bea8:	e0bffb15 	stw	r2,-20(fp)
    beac:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    beb0:	e0fffc17 	ldw	r3,-16(fp)
    beb4:	e0bffb17 	ldw	r2,-20(fp)
    beb8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    bebc:	e0bffb17 	ldw	r2,-20(fp)
    bec0:	10c00017 	ldw	r3,0(r2)
    bec4:	e0bffc17 	ldw	r2,-16(fp)
    bec8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    becc:	e0bffb17 	ldw	r2,-20(fp)
    bed0:	10c00017 	ldw	r3,0(r2)
    bed4:	e0bffc17 	ldw	r2,-16(fp)
    bed8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    bedc:	e0fffb17 	ldw	r3,-20(fp)
    bee0:	e0bffc17 	ldw	r2,-16(fp)
    bee4:	18800015 	stw	r2,0(r3)

  return 0;  
    bee8:	e03fff15 	stw	zero,-4(fp)
    beec:	e0bfff17 	ldw	r2,-4(fp)
}
    bef0:	e037883a 	mov	sp,fp
    bef4:	dfc00117 	ldw	ra,4(sp)
    bef8:	df000017 	ldw	fp,0(sp)
    befc:	dec00204 	addi	sp,sp,8
    bf00:	f800283a 	ret

0000bf04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bf04:	defffd04 	addi	sp,sp,-12
    bf08:	dfc00215 	stw	ra,8(sp)
    bf0c:	df000115 	stw	fp,4(sp)
    bf10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bf14:	00800074 	movhi	r2,1
    bf18:	10bbc104 	addi	r2,r2,-4348
    bf1c:	10800017 	ldw	r2,0(r2)
    bf20:	1005003a 	cmpeq	r2,r2,zero
    bf24:	1000061e 	bne	r2,zero,bf40 <alt_get_errno+0x3c>
    bf28:	00800074 	movhi	r2,1
    bf2c:	10bbc104 	addi	r2,r2,-4348
    bf30:	10800017 	ldw	r2,0(r2)
    bf34:	103ee83a 	callr	r2
    bf38:	e0bfff15 	stw	r2,-4(fp)
    bf3c:	00000306 	br	bf4c <alt_get_errno+0x48>
    bf40:	00800074 	movhi	r2,1
    bf44:	10826304 	addi	r2,r2,2444
    bf48:	e0bfff15 	stw	r2,-4(fp)
    bf4c:	e0bfff17 	ldw	r2,-4(fp)
}
    bf50:	e037883a 	mov	sp,fp
    bf54:	dfc00117 	ldw	ra,4(sp)
    bf58:	df000017 	ldw	fp,0(sp)
    bf5c:	dec00204 	addi	sp,sp,8
    bf60:	f800283a 	ret

0000bf64 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    bf64:	defffd04 	addi	sp,sp,-12
    bf68:	dfc00215 	stw	ra,8(sp)
    bf6c:	df000115 	stw	fp,4(sp)
    bf70:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bf74:	00bfff04 	movi	r2,-4
    bf78:	00c00074 	movhi	r3,1
    bf7c:	18f44c04 	addi	r3,r3,-11984
    bf80:	1885883a 	add	r2,r3,r2
    bf84:	e0bfff15 	stw	r2,-4(fp)
    bf88:	00000606 	br	bfa4 <_do_ctors+0x40>
        (*ctor) (); 
    bf8c:	e0bfff17 	ldw	r2,-4(fp)
    bf90:	10800017 	ldw	r2,0(r2)
    bf94:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bf98:	e0bfff17 	ldw	r2,-4(fp)
    bf9c:	10bfff04 	addi	r2,r2,-4
    bfa0:	e0bfff15 	stw	r2,-4(fp)
    bfa4:	e0ffff17 	ldw	r3,-4(fp)
    bfa8:	00800074 	movhi	r2,1
    bfac:	10b44b04 	addi	r2,r2,-11988
    bfb0:	18bff62e 	bgeu	r3,r2,bf8c <_do_ctors+0x28>
        (*ctor) (); 
}
    bfb4:	e037883a 	mov	sp,fp
    bfb8:	dfc00117 	ldw	ra,4(sp)
    bfbc:	df000017 	ldw	fp,0(sp)
    bfc0:	dec00204 	addi	sp,sp,8
    bfc4:	f800283a 	ret

0000bfc8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    bfc8:	defffd04 	addi	sp,sp,-12
    bfcc:	dfc00215 	stw	ra,8(sp)
    bfd0:	df000115 	stw	fp,4(sp)
    bfd4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bfd8:	00bfff04 	movi	r2,-4
    bfdc:	00c00074 	movhi	r3,1
    bfe0:	18f44c04 	addi	r3,r3,-11984
    bfe4:	1885883a 	add	r2,r3,r2
    bfe8:	e0bfff15 	stw	r2,-4(fp)
    bfec:	00000606 	br	c008 <_do_dtors+0x40>
        (*dtor) (); 
    bff0:	e0bfff17 	ldw	r2,-4(fp)
    bff4:	10800017 	ldw	r2,0(r2)
    bff8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bffc:	e0bfff17 	ldw	r2,-4(fp)
    c000:	10bfff04 	addi	r2,r2,-4
    c004:	e0bfff15 	stw	r2,-4(fp)
    c008:	e0ffff17 	ldw	r3,-4(fp)
    c00c:	00800074 	movhi	r2,1
    c010:	10b44c04 	addi	r2,r2,-11984
    c014:	18bff62e 	bgeu	r3,r2,bff0 <_do_dtors+0x28>
        (*dtor) (); 
}
    c018:	e037883a 	mov	sp,fp
    c01c:	dfc00117 	ldw	ra,4(sp)
    c020:	df000017 	ldw	fp,0(sp)
    c024:	dec00204 	addi	sp,sp,8
    c028:	f800283a 	ret

0000c02c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c02c:	deffff04 	addi	sp,sp,-4
    c030:	df000015 	stw	fp,0(sp)
    c034:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    c038:	e037883a 	mov	sp,fp
    c03c:	df000017 	ldw	fp,0(sp)
    c040:	dec00104 	addi	sp,sp,4
    c044:	f800283a 	ret

0000c048 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c048:	defff904 	addi	sp,sp,-28
    c04c:	dfc00615 	stw	ra,24(sp)
    c050:	df000515 	stw	fp,20(sp)
    c054:	df000504 	addi	fp,sp,20
    c058:	e13ffc15 	stw	r4,-16(fp)
    c05c:	e17ffd15 	stw	r5,-12(fp)
    c060:	e1bffe15 	stw	r6,-8(fp)
    c064:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    c068:	e0800217 	ldw	r2,8(fp)
    c06c:	d8800015 	stw	r2,0(sp)
    c070:	e13ffc17 	ldw	r4,-16(fp)
    c074:	e17ffd17 	ldw	r5,-12(fp)
    c078:	e1bffe17 	ldw	r6,-8(fp)
    c07c:	e1ffff17 	ldw	r7,-4(fp)
    c080:	000c21c0 	call	c21c <alt_iic_isr_register>
}  
    c084:	e037883a 	mov	sp,fp
    c088:	dfc00117 	ldw	ra,4(sp)
    c08c:	df000017 	ldw	fp,0(sp)
    c090:	dec00204 	addi	sp,sp,8
    c094:	f800283a 	ret

0000c098 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    c098:	defff904 	addi	sp,sp,-28
    c09c:	df000615 	stw	fp,24(sp)
    c0a0:	df000604 	addi	fp,sp,24
    c0a4:	e13ffe15 	stw	r4,-8(fp)
    c0a8:	e17fff15 	stw	r5,-4(fp)
    c0ac:	e0bfff17 	ldw	r2,-4(fp)
    c0b0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c0b4:	0005303a 	rdctl	r2,status
    c0b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c0bc:	e0fffb17 	ldw	r3,-20(fp)
    c0c0:	00bfff84 	movi	r2,-2
    c0c4:	1884703a 	and	r2,r3,r2
    c0c8:	1001703a 	wrctl	status,r2
  
  return context;
    c0cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c0d0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    c0d4:	e0fffc17 	ldw	r3,-16(fp)
    c0d8:	00800044 	movi	r2,1
    c0dc:	10c4983a 	sll	r2,r2,r3
    c0e0:	1007883a 	mov	r3,r2
    c0e4:	00800074 	movhi	r2,1
    c0e8:	10826c04 	addi	r2,r2,2480
    c0ec:	10800017 	ldw	r2,0(r2)
    c0f0:	1886b03a 	or	r3,r3,r2
    c0f4:	00800074 	movhi	r2,1
    c0f8:	10826c04 	addi	r2,r2,2480
    c0fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c100:	00800074 	movhi	r2,1
    c104:	10826c04 	addi	r2,r2,2480
    c108:	10800017 	ldw	r2,0(r2)
    c10c:	100170fa 	wrctl	ienable,r2
    c110:	e0bffd17 	ldw	r2,-12(fp)
    c114:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c118:	e0bffa17 	ldw	r2,-24(fp)
    c11c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c120:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c124:	e037883a 	mov	sp,fp
    c128:	df000017 	ldw	fp,0(sp)
    c12c:	dec00104 	addi	sp,sp,4
    c130:	f800283a 	ret

0000c134 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    c134:	defff904 	addi	sp,sp,-28
    c138:	df000615 	stw	fp,24(sp)
    c13c:	df000604 	addi	fp,sp,24
    c140:	e13ffe15 	stw	r4,-8(fp)
    c144:	e17fff15 	stw	r5,-4(fp)
    c148:	e0bfff17 	ldw	r2,-4(fp)
    c14c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c150:	0005303a 	rdctl	r2,status
    c154:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c158:	e0fffb17 	ldw	r3,-20(fp)
    c15c:	00bfff84 	movi	r2,-2
    c160:	1884703a 	and	r2,r3,r2
    c164:	1001703a 	wrctl	status,r2
  
  return context;
    c168:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c16c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    c170:	e0fffc17 	ldw	r3,-16(fp)
    c174:	00800044 	movi	r2,1
    c178:	10c4983a 	sll	r2,r2,r3
    c17c:	0084303a 	nor	r2,zero,r2
    c180:	1007883a 	mov	r3,r2
    c184:	00800074 	movhi	r2,1
    c188:	10826c04 	addi	r2,r2,2480
    c18c:	10800017 	ldw	r2,0(r2)
    c190:	1886703a 	and	r3,r3,r2
    c194:	00800074 	movhi	r2,1
    c198:	10826c04 	addi	r2,r2,2480
    c19c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c1a0:	00800074 	movhi	r2,1
    c1a4:	10826c04 	addi	r2,r2,2480
    c1a8:	10800017 	ldw	r2,0(r2)
    c1ac:	100170fa 	wrctl	ienable,r2
    c1b0:	e0bffd17 	ldw	r2,-12(fp)
    c1b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c1b8:	e0bffa17 	ldw	r2,-24(fp)
    c1bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c1c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c1c4:	e037883a 	mov	sp,fp
    c1c8:	df000017 	ldw	fp,0(sp)
    c1cc:	dec00104 	addi	sp,sp,4
    c1d0:	f800283a 	ret

0000c1d4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c1d4:	defffc04 	addi	sp,sp,-16
    c1d8:	df000315 	stw	fp,12(sp)
    c1dc:	df000304 	addi	fp,sp,12
    c1e0:	e13ffe15 	stw	r4,-8(fp)
    c1e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c1e8:	000530fa 	rdctl	r2,ienable
    c1ec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c1f0:	e0ffff17 	ldw	r3,-4(fp)
    c1f4:	00800044 	movi	r2,1
    c1f8:	10c4983a 	sll	r2,r2,r3
    c1fc:	1007883a 	mov	r3,r2
    c200:	e0bffd17 	ldw	r2,-12(fp)
    c204:	1884703a 	and	r2,r3,r2
    c208:	1004c03a 	cmpne	r2,r2,zero
}
    c20c:	e037883a 	mov	sp,fp
    c210:	df000017 	ldw	fp,0(sp)
    c214:	dec00104 	addi	sp,sp,4
    c218:	f800283a 	ret

0000c21c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c21c:	defff404 	addi	sp,sp,-48
    c220:	dfc00b15 	stw	ra,44(sp)
    c224:	df000a15 	stw	fp,40(sp)
    c228:	df000a04 	addi	fp,sp,40
    c22c:	e13ffb15 	stw	r4,-20(fp)
    c230:	e17ffc15 	stw	r5,-16(fp)
    c234:	e1bffd15 	stw	r6,-12(fp)
    c238:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    c23c:	00bffa84 	movi	r2,-22
    c240:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c244:	e0bffc17 	ldw	r2,-16(fp)
    c248:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c24c:	e0bff917 	ldw	r2,-28(fp)
    c250:	10800808 	cmpgei	r2,r2,32
    c254:	1000291e 	bne	r2,zero,c2fc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c258:	0005303a 	rdctl	r2,status
    c25c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c260:	e0fff717 	ldw	r3,-36(fp)
    c264:	00bfff84 	movi	r2,-2
    c268:	1884703a 	and	r2,r3,r2
    c26c:	1001703a 	wrctl	status,r2
  
  return context;
    c270:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c274:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    c278:	e0bff917 	ldw	r2,-28(fp)
    c27c:	00c00074 	movhi	r3,1
    c280:	18c2c504 	addi	r3,r3,2836
    c284:	100490fa 	slli	r2,r2,3
    c288:	10c7883a 	add	r3,r2,r3
    c28c:	e0bffd17 	ldw	r2,-12(fp)
    c290:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    c294:	e0bff917 	ldw	r2,-28(fp)
    c298:	00c00074 	movhi	r3,1
    c29c:	18c2c504 	addi	r3,r3,2836
    c2a0:	100490fa 	slli	r2,r2,3
    c2a4:	10c5883a 	add	r2,r2,r3
    c2a8:	10c00104 	addi	r3,r2,4
    c2ac:	e0bffe17 	ldw	r2,-8(fp)
    c2b0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c2b4:	e0bffd17 	ldw	r2,-12(fp)
    c2b8:	1005003a 	cmpeq	r2,r2,zero
    c2bc:	1000051e 	bne	r2,zero,c2d4 <alt_iic_isr_register+0xb8>
    c2c0:	e17ff917 	ldw	r5,-28(fp)
    c2c4:	e13ffb17 	ldw	r4,-20(fp)
    c2c8:	000c0980 	call	c098 <alt_ic_irq_enable>
    c2cc:	e0bfff15 	stw	r2,-4(fp)
    c2d0:	00000406 	br	c2e4 <alt_iic_isr_register+0xc8>
    c2d4:	e17ff917 	ldw	r5,-28(fp)
    c2d8:	e13ffb17 	ldw	r4,-20(fp)
    c2dc:	000c1340 	call	c134 <alt_ic_irq_disable>
    c2e0:	e0bfff15 	stw	r2,-4(fp)
    c2e4:	e0bfff17 	ldw	r2,-4(fp)
    c2e8:	e0bffa15 	stw	r2,-24(fp)
    c2ec:	e0bff817 	ldw	r2,-32(fp)
    c2f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c2f4:	e0bff617 	ldw	r2,-40(fp)
    c2f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c2fc:	e0bffa17 	ldw	r2,-24(fp)
}
    c300:	e037883a 	mov	sp,fp
    c304:	dfc00117 	ldw	ra,4(sp)
    c308:	df000017 	ldw	fp,0(sp)
    c30c:	dec00204 	addi	sp,sp,8
    c310:	f800283a 	ret

0000c314 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c314:	defff804 	addi	sp,sp,-32
    c318:	dfc00715 	stw	ra,28(sp)
    c31c:	df000615 	stw	fp,24(sp)
    c320:	dc000515 	stw	r16,20(sp)
    c324:	df000504 	addi	fp,sp,20
    c328:	e13ffc15 	stw	r4,-16(fp)
    c32c:	e17ffd15 	stw	r5,-12(fp)
    c330:	e1bffe15 	stw	r6,-8(fp)
    c334:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c338:	e13ffd17 	ldw	r4,-12(fp)
    c33c:	e17ffe17 	ldw	r5,-8(fp)
    c340:	e1bfff17 	ldw	r6,-4(fp)
    c344:	000c55c0 	call	c55c <open>
    c348:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c34c:	e0bffb17 	ldw	r2,-20(fp)
    c350:	1004803a 	cmplt	r2,r2,zero
    c354:	10001f1e 	bne	r2,zero,c3d4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c358:	e13ffb17 	ldw	r4,-20(fp)
    c35c:	04000074 	movhi	r16,1
    c360:	84373e04 	addi	r16,r16,-8968
    c364:	01400304 	movi	r5,12
    c368:	00007d80 	call	7d8 <__mulsi3>
    c36c:	1405883a 	add	r2,r2,r16
    c370:	10c00017 	ldw	r3,0(r2)
    c374:	e0bffc17 	ldw	r2,-16(fp)
    c378:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c37c:	e13ffb17 	ldw	r4,-20(fp)
    c380:	04000074 	movhi	r16,1
    c384:	84373e04 	addi	r16,r16,-8968
    c388:	01400304 	movi	r5,12
    c38c:	00007d80 	call	7d8 <__mulsi3>
    c390:	1405883a 	add	r2,r2,r16
    c394:	10800104 	addi	r2,r2,4
    c398:	10c00017 	ldw	r3,0(r2)
    c39c:	e0bffc17 	ldw	r2,-16(fp)
    c3a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c3a4:	e13ffb17 	ldw	r4,-20(fp)
    c3a8:	04000074 	movhi	r16,1
    c3ac:	84373e04 	addi	r16,r16,-8968
    c3b0:	01400304 	movi	r5,12
    c3b4:	00007d80 	call	7d8 <__mulsi3>
    c3b8:	1405883a 	add	r2,r2,r16
    c3bc:	10800204 	addi	r2,r2,8
    c3c0:	10c00017 	ldw	r3,0(r2)
    c3c4:	e0bffc17 	ldw	r2,-16(fp)
    c3c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c3cc:	e13ffb17 	ldw	r4,-20(fp)
    c3d0:	000ad640 	call	ad64 <alt_release_fd>
  }
} 
    c3d4:	e037883a 	mov	sp,fp
    c3d8:	dfc00217 	ldw	ra,8(sp)
    c3dc:	df000117 	ldw	fp,4(sp)
    c3e0:	dc000017 	ldw	r16,0(sp)
    c3e4:	dec00304 	addi	sp,sp,12
    c3e8:	f800283a 	ret

0000c3ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c3ec:	defffb04 	addi	sp,sp,-20
    c3f0:	dfc00415 	stw	ra,16(sp)
    c3f4:	df000315 	stw	fp,12(sp)
    c3f8:	df000304 	addi	fp,sp,12
    c3fc:	e13ffd15 	stw	r4,-12(fp)
    c400:	e17ffe15 	stw	r5,-8(fp)
    c404:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c408:	01000074 	movhi	r4,1
    c40c:	21374104 	addi	r4,r4,-8956
    c410:	e17ffd17 	ldw	r5,-12(fp)
    c414:	01800044 	movi	r6,1
    c418:	01c07fc4 	movi	r7,511
    c41c:	000c3140 	call	c314 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c420:	01000074 	movhi	r4,1
    c424:	21373e04 	addi	r4,r4,-8968
    c428:	e17ffe17 	ldw	r5,-8(fp)
    c42c:	000d883a 	mov	r6,zero
    c430:	01c07fc4 	movi	r7,511
    c434:	000c3140 	call	c314 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c438:	01000074 	movhi	r4,1
    c43c:	21374404 	addi	r4,r4,-8944
    c440:	e17fff17 	ldw	r5,-4(fp)
    c444:	01800044 	movi	r6,1
    c448:	01c07fc4 	movi	r7,511
    c44c:	000c3140 	call	c314 <alt_open_fd>
}  
    c450:	e037883a 	mov	sp,fp
    c454:	dfc00117 	ldw	ra,4(sp)
    c458:	df000017 	ldw	fp,0(sp)
    c45c:	dec00204 	addi	sp,sp,8
    c460:	f800283a 	ret

0000c464 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c464:	defffa04 	addi	sp,sp,-24
    c468:	dfc00515 	stw	ra,20(sp)
    c46c:	df000415 	stw	fp,16(sp)
    c470:	dc000315 	stw	r16,12(sp)
    c474:	df000304 	addi	fp,sp,12
    c478:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c47c:	e0bffe17 	ldw	r2,-8(fp)
    c480:	10800217 	ldw	r2,8(r2)
    c484:	10d00034 	orhi	r3,r2,16384
    c488:	e0bffe17 	ldw	r2,-8(fp)
    c48c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c490:	e03ffd15 	stw	zero,-12(fp)
    c494:	00002306 	br	c524 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c498:	e13ffd17 	ldw	r4,-12(fp)
    c49c:	04000074 	movhi	r16,1
    c4a0:	84373e04 	addi	r16,r16,-8968
    c4a4:	01400304 	movi	r5,12
    c4a8:	00007d80 	call	7d8 <__mulsi3>
    c4ac:	1405883a 	add	r2,r2,r16
    c4b0:	10c00017 	ldw	r3,0(r2)
    c4b4:	e0bffe17 	ldw	r2,-8(fp)
    c4b8:	10800017 	ldw	r2,0(r2)
    c4bc:	1880161e 	bne	r3,r2,c518 <alt_file_locked+0xb4>
    c4c0:	e13ffd17 	ldw	r4,-12(fp)
    c4c4:	04000074 	movhi	r16,1
    c4c8:	84373e04 	addi	r16,r16,-8968
    c4cc:	01400304 	movi	r5,12
    c4d0:	00007d80 	call	7d8 <__mulsi3>
    c4d4:	1405883a 	add	r2,r2,r16
    c4d8:	10800204 	addi	r2,r2,8
    c4dc:	10800017 	ldw	r2,0(r2)
    c4e0:	1004403a 	cmpge	r2,r2,zero
    c4e4:	10000c1e 	bne	r2,zero,c518 <alt_file_locked+0xb4>
    c4e8:	e13ffd17 	ldw	r4,-12(fp)
    c4ec:	01400304 	movi	r5,12
    c4f0:	00007d80 	call	7d8 <__mulsi3>
    c4f4:	1007883a 	mov	r3,r2
    c4f8:	00800074 	movhi	r2,1
    c4fc:	10b73e04 	addi	r2,r2,-8968
    c500:	1887883a 	add	r3,r3,r2
    c504:	e0bffe17 	ldw	r2,-8(fp)
    c508:	18800326 	beq	r3,r2,c518 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c50c:	00bffcc4 	movi	r2,-13
    c510:	e0bfff15 	stw	r2,-4(fp)
    c514:	00000a06 	br	c540 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c518:	e0bffd17 	ldw	r2,-12(fp)
    c51c:	10800044 	addi	r2,r2,1
    c520:	e0bffd15 	stw	r2,-12(fp)
    c524:	00800074 	movhi	r2,1
    c528:	10bbc004 	addi	r2,r2,-4352
    c52c:	10800017 	ldw	r2,0(r2)
    c530:	1007883a 	mov	r3,r2
    c534:	e0bffd17 	ldw	r2,-12(fp)
    c538:	18bfd72e 	bgeu	r3,r2,c498 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c53c:	e03fff15 	stw	zero,-4(fp)
    c540:	e0bfff17 	ldw	r2,-4(fp)
}
    c544:	e037883a 	mov	sp,fp
    c548:	dfc00217 	ldw	ra,8(sp)
    c54c:	df000117 	ldw	fp,4(sp)
    c550:	dc000017 	ldw	r16,0(sp)
    c554:	dec00304 	addi	sp,sp,12
    c558:	f800283a 	ret

0000c55c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c55c:	defff404 	addi	sp,sp,-48
    c560:	dfc00b15 	stw	ra,44(sp)
    c564:	df000a15 	stw	fp,40(sp)
    c568:	df000a04 	addi	fp,sp,40
    c56c:	e13ffb15 	stw	r4,-20(fp)
    c570:	e17ffc15 	stw	r5,-16(fp)
    c574:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c578:	00bfffc4 	movi	r2,-1
    c57c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    c580:	00bffb44 	movi	r2,-19
    c584:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    c588:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c58c:	e13ffb17 	ldw	r4,-20(fp)
    c590:	01400074 	movhi	r5,1
    c594:	297bbe04 	addi	r5,r5,-4360
    c598:	000c7680 	call	c768 <alt_find_dev>
    c59c:	e0bffa15 	stw	r2,-24(fp)
    c5a0:	e0bffa17 	ldw	r2,-24(fp)
    c5a4:	1004c03a 	cmpne	r2,r2,zero
    c5a8:	1000051e 	bne	r2,zero,c5c0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c5ac:	e13ffb17 	ldw	r4,-20(fp)
    c5b0:	000c7fc0 	call	c7fc <alt_find_file>
    c5b4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    c5b8:	00800044 	movi	r2,1
    c5bc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c5c0:	e0bffa17 	ldw	r2,-24(fp)
    c5c4:	1005003a 	cmpeq	r2,r2,zero
    c5c8:	1000311e 	bne	r2,zero,c690 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c5cc:	e13ffa17 	ldw	r4,-24(fp)
    c5d0:	000c91c0 	call	c91c <alt_get_fd>
    c5d4:	e0bff815 	stw	r2,-32(fp)
    c5d8:	e0bff817 	ldw	r2,-32(fp)
    c5dc:	1004403a 	cmpge	r2,r2,zero
    c5e0:	1000031e 	bne	r2,zero,c5f0 <open+0x94>
    {
      status = index;
    c5e4:	e0bff817 	ldw	r2,-32(fp)
    c5e8:	e0bff715 	stw	r2,-36(fp)
    c5ec:	00002a06 	br	c698 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    c5f0:	e13ff817 	ldw	r4,-32(fp)
    c5f4:	01400304 	movi	r5,12
    c5f8:	00007d80 	call	7d8 <__mulsi3>
    c5fc:	1007883a 	mov	r3,r2
    c600:	00800074 	movhi	r2,1
    c604:	10b73e04 	addi	r2,r2,-8968
    c608:	1885883a 	add	r2,r3,r2
    c60c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c610:	e0fffc17 	ldw	r3,-16(fp)
    c614:	00900034 	movhi	r2,16384
    c618:	10bfffc4 	addi	r2,r2,-1
    c61c:	1886703a 	and	r3,r3,r2
    c620:	e0bff917 	ldw	r2,-28(fp)
    c624:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c628:	e0bff617 	ldw	r2,-40(fp)
    c62c:	1004c03a 	cmpne	r2,r2,zero
    c630:	1000061e 	bne	r2,zero,c64c <open+0xf0>
    c634:	e13ff917 	ldw	r4,-28(fp)
    c638:	000c4640 	call	c464 <alt_file_locked>
    c63c:	e0bff715 	stw	r2,-36(fp)
    c640:	e0bff717 	ldw	r2,-36(fp)
    c644:	1004803a 	cmplt	r2,r2,zero
    c648:	1000131e 	bne	r2,zero,c698 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c64c:	e0bffa17 	ldw	r2,-24(fp)
    c650:	10800317 	ldw	r2,12(r2)
    c654:	1005003a 	cmpeq	r2,r2,zero
    c658:	1000091e 	bne	r2,zero,c680 <open+0x124>
    c65c:	e0bffa17 	ldw	r2,-24(fp)
    c660:	10800317 	ldw	r2,12(r2)
    c664:	e13ff917 	ldw	r4,-28(fp)
    c668:	e17ffb17 	ldw	r5,-20(fp)
    c66c:	e1bffc17 	ldw	r6,-16(fp)
    c670:	e1fffd17 	ldw	r7,-12(fp)
    c674:	103ee83a 	callr	r2
    c678:	e0bfff15 	stw	r2,-4(fp)
    c67c:	00000106 	br	c684 <open+0x128>
    c680:	e03fff15 	stw	zero,-4(fp)
    c684:	e0bfff17 	ldw	r2,-4(fp)
    c688:	e0bff715 	stw	r2,-36(fp)
    c68c:	00000206 	br	c698 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c690:	00bffb44 	movi	r2,-19
    c694:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c698:	e0bff717 	ldw	r2,-36(fp)
    c69c:	1004403a 	cmpge	r2,r2,zero
    c6a0:	1000091e 	bne	r2,zero,c6c8 <open+0x16c>
  {
    alt_release_fd (index);  
    c6a4:	e13ff817 	ldw	r4,-32(fp)
    c6a8:	000ad640 	call	ad64 <alt_release_fd>
    ALT_ERRNO = -status;
    c6ac:	000c6e80 	call	c6e8 <alt_get_errno>
    c6b0:	e0fff717 	ldw	r3,-36(fp)
    c6b4:	00c7c83a 	sub	r3,zero,r3
    c6b8:	10c00015 	stw	r3,0(r2)
    return -1;
    c6bc:	00bfffc4 	movi	r2,-1
    c6c0:	e0bffe15 	stw	r2,-8(fp)
    c6c4:	00000206 	br	c6d0 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    c6c8:	e0bff817 	ldw	r2,-32(fp)
    c6cc:	e0bffe15 	stw	r2,-8(fp)
    c6d0:	e0bffe17 	ldw	r2,-8(fp)
}
    c6d4:	e037883a 	mov	sp,fp
    c6d8:	dfc00117 	ldw	ra,4(sp)
    c6dc:	df000017 	ldw	fp,0(sp)
    c6e0:	dec00204 	addi	sp,sp,8
    c6e4:	f800283a 	ret

0000c6e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c6e8:	defffd04 	addi	sp,sp,-12
    c6ec:	dfc00215 	stw	ra,8(sp)
    c6f0:	df000115 	stw	fp,4(sp)
    c6f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c6f8:	00800074 	movhi	r2,1
    c6fc:	10bbc104 	addi	r2,r2,-4348
    c700:	10800017 	ldw	r2,0(r2)
    c704:	1005003a 	cmpeq	r2,r2,zero
    c708:	1000061e 	bne	r2,zero,c724 <alt_get_errno+0x3c>
    c70c:	00800074 	movhi	r2,1
    c710:	10bbc104 	addi	r2,r2,-4348
    c714:	10800017 	ldw	r2,0(r2)
    c718:	103ee83a 	callr	r2
    c71c:	e0bfff15 	stw	r2,-4(fp)
    c720:	00000306 	br	c730 <alt_get_errno+0x48>
    c724:	00800074 	movhi	r2,1
    c728:	10826304 	addi	r2,r2,2444
    c72c:	e0bfff15 	stw	r2,-4(fp)
    c730:	e0bfff17 	ldw	r2,-4(fp)
}
    c734:	e037883a 	mov	sp,fp
    c738:	dfc00117 	ldw	ra,4(sp)
    c73c:	df000017 	ldw	fp,0(sp)
    c740:	dec00204 	addi	sp,sp,8
    c744:	f800283a 	ret

0000c748 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    c748:	deffff04 	addi	sp,sp,-4
    c74c:	df000015 	stw	fp,0(sp)
    c750:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c754:	000170fa 	wrctl	ienable,zero
}
    c758:	e037883a 	mov	sp,fp
    c75c:	df000017 	ldw	fp,0(sp)
    c760:	dec00104 	addi	sp,sp,4
    c764:	f800283a 	ret

0000c768 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c768:	defff904 	addi	sp,sp,-28
    c76c:	dfc00615 	stw	ra,24(sp)
    c770:	df000515 	stw	fp,20(sp)
    c774:	df000504 	addi	fp,sp,20
    c778:	e13ffd15 	stw	r4,-12(fp)
    c77c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c780:	e0bffe17 	ldw	r2,-8(fp)
    c784:	10800017 	ldw	r2,0(r2)
    c788:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c78c:	e13ffd17 	ldw	r4,-12(fp)
    c790:	00011140 	call	1114 <strlen>
    c794:	10800044 	addi	r2,r2,1
    c798:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c79c:	00000d06 	br	c7d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c7a0:	e0bffc17 	ldw	r2,-16(fp)
    c7a4:	11000217 	ldw	r4,8(r2)
    c7a8:	e1bffb17 	ldw	r6,-20(fp)
    c7ac:	e17ffd17 	ldw	r5,-12(fp)
    c7b0:	000ca380 	call	ca38 <memcmp>
    c7b4:	1004c03a 	cmpne	r2,r2,zero
    c7b8:	1000031e 	bne	r2,zero,c7c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c7bc:	e0bffc17 	ldw	r2,-16(fp)
    c7c0:	e0bfff15 	stw	r2,-4(fp)
    c7c4:	00000706 	br	c7e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c7c8:	e0bffc17 	ldw	r2,-16(fp)
    c7cc:	10800017 	ldw	r2,0(r2)
    c7d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c7d4:	e0fffe17 	ldw	r3,-8(fp)
    c7d8:	e0bffc17 	ldw	r2,-16(fp)
    c7dc:	10fff01e 	bne	r2,r3,c7a0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c7e0:	e03fff15 	stw	zero,-4(fp)
    c7e4:	e0bfff17 	ldw	r2,-4(fp)
}
    c7e8:	e037883a 	mov	sp,fp
    c7ec:	dfc00117 	ldw	ra,4(sp)
    c7f0:	df000017 	ldw	fp,0(sp)
    c7f4:	dec00204 	addi	sp,sp,8
    c7f8:	f800283a 	ret

0000c7fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c7fc:	defffa04 	addi	sp,sp,-24
    c800:	dfc00515 	stw	ra,20(sp)
    c804:	df000415 	stw	fp,16(sp)
    c808:	df000404 	addi	fp,sp,16
    c80c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c810:	00800074 	movhi	r2,1
    c814:	10bbbc04 	addi	r2,r2,-4368
    c818:	10800017 	ldw	r2,0(r2)
    c81c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c820:	00003306 	br	c8f0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    c824:	e0bffd17 	ldw	r2,-12(fp)
    c828:	11000217 	ldw	r4,8(r2)
    c82c:	00011140 	call	1114 <strlen>
    c830:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    c834:	e0bffd17 	ldw	r2,-12(fp)
    c838:	10c00217 	ldw	r3,8(r2)
    c83c:	e0bffc17 	ldw	r2,-16(fp)
    c840:	1885883a 	add	r2,r3,r2
    c844:	10bfffc4 	addi	r2,r2,-1
    c848:	10800003 	ldbu	r2,0(r2)
    c84c:	10803fcc 	andi	r2,r2,255
    c850:	1080201c 	xori	r2,r2,128
    c854:	10bfe004 	addi	r2,r2,-128
    c858:	10800bd8 	cmpnei	r2,r2,47
    c85c:	1000031e 	bne	r2,zero,c86c <alt_find_file+0x70>
    {
      len -= 1;
    c860:	e0bffc17 	ldw	r2,-16(fp)
    c864:	10bfffc4 	addi	r2,r2,-1
    c868:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c86c:	e0bffc17 	ldw	r2,-16(fp)
    c870:	1007883a 	mov	r3,r2
    c874:	e0bffe17 	ldw	r2,-8(fp)
    c878:	1885883a 	add	r2,r3,r2
    c87c:	10800003 	ldbu	r2,0(r2)
    c880:	10803fcc 	andi	r2,r2,255
    c884:	1080201c 	xori	r2,r2,128
    c888:	10bfe004 	addi	r2,r2,-128
    c88c:	10800be0 	cmpeqi	r2,r2,47
    c890:	10000a1e 	bne	r2,zero,c8bc <alt_find_file+0xc0>
    c894:	e0bffc17 	ldw	r2,-16(fp)
    c898:	1007883a 	mov	r3,r2
    c89c:	e0bffe17 	ldw	r2,-8(fp)
    c8a0:	1885883a 	add	r2,r3,r2
    c8a4:	10800003 	ldbu	r2,0(r2)
    c8a8:	10803fcc 	andi	r2,r2,255
    c8ac:	1080201c 	xori	r2,r2,128
    c8b0:	10bfe004 	addi	r2,r2,-128
    c8b4:	1004c03a 	cmpne	r2,r2,zero
    c8b8:	10000a1e 	bne	r2,zero,c8e4 <alt_find_file+0xe8>
    c8bc:	e0bffd17 	ldw	r2,-12(fp)
    c8c0:	11000217 	ldw	r4,8(r2)
    c8c4:	e1bffc17 	ldw	r6,-16(fp)
    c8c8:	e17ffe17 	ldw	r5,-8(fp)
    c8cc:	000ca380 	call	ca38 <memcmp>
    c8d0:	1004c03a 	cmpne	r2,r2,zero
    c8d4:	1000031e 	bne	r2,zero,c8e4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c8d8:	e0bffd17 	ldw	r2,-12(fp)
    c8dc:	e0bfff15 	stw	r2,-4(fp)
    c8e0:	00000806 	br	c904 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    c8e4:	e0bffd17 	ldw	r2,-12(fp)
    c8e8:	10800017 	ldw	r2,0(r2)
    c8ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c8f0:	00c00074 	movhi	r3,1
    c8f4:	18fbbc04 	addi	r3,r3,-4368
    c8f8:	e0bffd17 	ldw	r2,-12(fp)
    c8fc:	10ffc91e 	bne	r2,r3,c824 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c900:	e03fff15 	stw	zero,-4(fp)
    c904:	e0bfff17 	ldw	r2,-4(fp)
}
    c908:	e037883a 	mov	sp,fp
    c90c:	dfc00117 	ldw	ra,4(sp)
    c910:	df000017 	ldw	fp,0(sp)
    c914:	dec00204 	addi	sp,sp,8
    c918:	f800283a 	ret

0000c91c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c91c:	defffa04 	addi	sp,sp,-24
    c920:	dfc00515 	stw	ra,20(sp)
    c924:	df000415 	stw	fp,16(sp)
    c928:	dc000315 	stw	r16,12(sp)
    c92c:	df000304 	addi	fp,sp,12
    c930:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c934:	00bffa04 	movi	r2,-24
    c938:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c93c:	e03ffe15 	stw	zero,-8(fp)
    c940:	00002006 	br	c9c4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    c944:	e13ffe17 	ldw	r4,-8(fp)
    c948:	04000074 	movhi	r16,1
    c94c:	84373e04 	addi	r16,r16,-8968
    c950:	01400304 	movi	r5,12
    c954:	00007d80 	call	7d8 <__mulsi3>
    c958:	1405883a 	add	r2,r2,r16
    c95c:	10800017 	ldw	r2,0(r2)
    c960:	1004c03a 	cmpne	r2,r2,zero
    c964:	1000141e 	bne	r2,zero,c9b8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    c968:	e13ffe17 	ldw	r4,-8(fp)
    c96c:	04000074 	movhi	r16,1
    c970:	84373e04 	addi	r16,r16,-8968
    c974:	01400304 	movi	r5,12
    c978:	00007d80 	call	7d8 <__mulsi3>
    c97c:	1407883a 	add	r3,r2,r16
    c980:	e0bfff17 	ldw	r2,-4(fp)
    c984:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    c988:	00800074 	movhi	r2,1
    c98c:	10bbc004 	addi	r2,r2,-4352
    c990:	10c00017 	ldw	r3,0(r2)
    c994:	e0bffe17 	ldw	r2,-8(fp)
    c998:	1880040e 	bge	r3,r2,c9ac <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    c99c:	00c00074 	movhi	r3,1
    c9a0:	18fbc004 	addi	r3,r3,-4352
    c9a4:	e0bffe17 	ldw	r2,-8(fp)
    c9a8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    c9ac:	e0bffe17 	ldw	r2,-8(fp)
    c9b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c9b4:	00000606 	br	c9d0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c9b8:	e0bffe17 	ldw	r2,-8(fp)
    c9bc:	10800044 	addi	r2,r2,1
    c9c0:	e0bffe15 	stw	r2,-8(fp)
    c9c4:	e0bffe17 	ldw	r2,-8(fp)
    c9c8:	10800810 	cmplti	r2,r2,32
    c9cc:	103fdd1e 	bne	r2,zero,c944 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c9d0:	e0bffd17 	ldw	r2,-12(fp)
}
    c9d4:	e037883a 	mov	sp,fp
    c9d8:	dfc00217 	ldw	ra,8(sp)
    c9dc:	df000117 	ldw	fp,4(sp)
    c9e0:	dc000017 	ldw	r16,0(sp)
    c9e4:	dec00304 	addi	sp,sp,12
    c9e8:	f800283a 	ret

0000c9ec <atexit>:
    c9ec:	200b883a 	mov	r5,r4
    c9f0:	000d883a 	mov	r6,zero
    c9f4:	0009883a 	mov	r4,zero
    c9f8:	000f883a 	mov	r7,zero
    c9fc:	000cde41 	jmpi	cde4 <__register_exitproc>

0000ca00 <exit>:
    ca00:	defffe04 	addi	sp,sp,-8
    ca04:	000b883a 	mov	r5,zero
    ca08:	dc000015 	stw	r16,0(sp)
    ca0c:	dfc00115 	stw	ra,4(sp)
    ca10:	2021883a 	mov	r16,r4
    ca14:	000cf1c0 	call	cf1c <__call_exitprocs>
    ca18:	00800074 	movhi	r2,1
    ca1c:	10bbb904 	addi	r2,r2,-4380
    ca20:	11000017 	ldw	r4,0(r2)
    ca24:	20800f17 	ldw	r2,60(r4)
    ca28:	10000126 	beq	r2,zero,ca30 <exit+0x30>
    ca2c:	103ee83a 	callr	r2
    ca30:	8009883a 	mov	r4,r16
    ca34:	000d10c0 	call	d10c <_exit>

0000ca38 <memcmp>:
    ca38:	00c000c4 	movi	r3,3
    ca3c:	1980032e 	bgeu	r3,r6,ca4c <memcmp+0x14>
    ca40:	2144b03a 	or	r2,r4,r5
    ca44:	10c4703a 	and	r2,r2,r3
    ca48:	10000f26 	beq	r2,zero,ca88 <memcmp+0x50>
    ca4c:	31ffffc4 	addi	r7,r6,-1
    ca50:	3000061e 	bne	r6,zero,ca6c <memcmp+0x34>
    ca54:	00000a06 	br	ca80 <memcmp+0x48>
    ca58:	39ffffc4 	addi	r7,r7,-1
    ca5c:	00bfffc4 	movi	r2,-1
    ca60:	21000044 	addi	r4,r4,1
    ca64:	29400044 	addi	r5,r5,1
    ca68:	38800526 	beq	r7,r2,ca80 <memcmp+0x48>
    ca6c:	20c00003 	ldbu	r3,0(r4)
    ca70:	28800003 	ldbu	r2,0(r5)
    ca74:	18bff826 	beq	r3,r2,ca58 <memcmp+0x20>
    ca78:	1885c83a 	sub	r2,r3,r2
    ca7c:	f800283a 	ret
    ca80:	0005883a 	mov	r2,zero
    ca84:	f800283a 	ret
    ca88:	180f883a 	mov	r7,r3
    ca8c:	20c00017 	ldw	r3,0(r4)
    ca90:	28800017 	ldw	r2,0(r5)
    ca94:	18bfed1e 	bne	r3,r2,ca4c <memcmp+0x14>
    ca98:	31bfff04 	addi	r6,r6,-4
    ca9c:	21000104 	addi	r4,r4,4
    caa0:	29400104 	addi	r5,r5,4
    caa4:	39bff936 	bltu	r7,r6,ca8c <memcmp+0x54>
    caa8:	003fe806 	br	ca4c <memcmp+0x14>

0000caac <putc>:
    caac:	defffc04 	addi	sp,sp,-16
    cab0:	dc800215 	stw	r18,8(sp)
    cab4:	04800074 	movhi	r18,1
    cab8:	94bbb804 	addi	r18,r18,-4384
    cabc:	90c00017 	ldw	r3,0(r18)
    cac0:	dc400115 	stw	r17,4(sp)
    cac4:	dc000015 	stw	r16,0(sp)
    cac8:	dfc00315 	stw	ra,12(sp)
    cacc:	2023883a 	mov	r17,r4
    cad0:	2821883a 	mov	r16,r5
    cad4:	18000226 	beq	r3,zero,cae0 <putc+0x34>
    cad8:	18800e17 	ldw	r2,56(r3)
    cadc:	10001126 	beq	r2,zero,cb24 <putc+0x78>
    cae0:	80800217 	ldw	r2,8(r16)
    cae4:	10ffffc4 	addi	r3,r2,-1
    cae8:	80c00215 	stw	r3,8(r16)
    caec:	18001316 	blt	r3,zero,cb3c <putc+0x90>
    caf0:	80800017 	ldw	r2,0(r16)
    caf4:	14400005 	stb	r17,0(r2)
    caf8:	80c00017 	ldw	r3,0(r16)
    cafc:	18800044 	addi	r2,r3,1
    cb00:	18c00003 	ldbu	r3,0(r3)
    cb04:	80800015 	stw	r2,0(r16)
    cb08:	1805883a 	mov	r2,r3
    cb0c:	dfc00317 	ldw	ra,12(sp)
    cb10:	dc800217 	ldw	r18,8(sp)
    cb14:	dc400117 	ldw	r17,4(sp)
    cb18:	dc000017 	ldw	r16,0(sp)
    cb1c:	dec00404 	addi	sp,sp,16
    cb20:	f800283a 	ret
    cb24:	1809883a 	mov	r4,r3
    cb28:	0004c940 	call	4c94 <__sinit>
    cb2c:	80800217 	ldw	r2,8(r16)
    cb30:	10ffffc4 	addi	r3,r2,-1
    cb34:	80c00215 	stw	r3,8(r16)
    cb38:	183fed0e 	bge	r3,zero,caf0 <putc+0x44>
    cb3c:	80800617 	ldw	r2,24(r16)
    cb40:	18800f16 	blt	r3,r2,cb80 <putc+0xd4>
    cb44:	80800017 	ldw	r2,0(r16)
    cb48:	14400005 	stb	r17,0(r2)
    cb4c:	81000017 	ldw	r4,0(r16)
    cb50:	00800284 	movi	r2,10
    cb54:	20c00003 	ldbu	r3,0(r4)
    cb58:	18801226 	beq	r3,r2,cba4 <putc+0xf8>
    cb5c:	20800044 	addi	r2,r4,1
    cb60:	80800015 	stw	r2,0(r16)
    cb64:	1805883a 	mov	r2,r3
    cb68:	dfc00317 	ldw	ra,12(sp)
    cb6c:	dc800217 	ldw	r18,8(sp)
    cb70:	dc400117 	ldw	r17,4(sp)
    cb74:	dc000017 	ldw	r16,0(sp)
    cb78:	dec00404 	addi	sp,sp,16
    cb7c:	f800283a 	ret
    cb80:	91000017 	ldw	r4,0(r18)
    cb84:	880b883a 	mov	r5,r17
    cb88:	800d883a 	mov	r6,r16
    cb8c:	dfc00317 	ldw	ra,12(sp)
    cb90:	dc800217 	ldw	r18,8(sp)
    cb94:	dc400117 	ldw	r17,4(sp)
    cb98:	dc000017 	ldw	r16,0(sp)
    cb9c:	dec00404 	addi	sp,sp,16
    cba0:	000cc981 	jmpi	cc98 <__swbuf_r>
    cba4:	91000017 	ldw	r4,0(r18)
    cba8:	180b883a 	mov	r5,r3
    cbac:	003ff606 	br	cb88 <putc+0xdc>

0000cbb0 <_putc_r>:
    cbb0:	defffc04 	addi	sp,sp,-16
    cbb4:	dc400215 	stw	r17,8(sp)
    cbb8:	dc000115 	stw	r16,4(sp)
    cbbc:	dfc00315 	stw	ra,12(sp)
    cbc0:	2021883a 	mov	r16,r4
    cbc4:	2823883a 	mov	r17,r5
    cbc8:	20000226 	beq	r4,zero,cbd4 <_putc_r+0x24>
    cbcc:	20800e17 	ldw	r2,56(r4)
    cbd0:	10001026 	beq	r2,zero,cc14 <_putc_r+0x64>
    cbd4:	30800217 	ldw	r2,8(r6)
    cbd8:	10ffffc4 	addi	r3,r2,-1
    cbdc:	30c00215 	stw	r3,8(r6)
    cbe0:	18001316 	blt	r3,zero,cc30 <_putc_r+0x80>
    cbe4:	30800017 	ldw	r2,0(r6)
    cbe8:	14400005 	stb	r17,0(r2)
    cbec:	30c00017 	ldw	r3,0(r6)
    cbf0:	18800044 	addi	r2,r3,1
    cbf4:	18c00003 	ldbu	r3,0(r3)
    cbf8:	30800015 	stw	r2,0(r6)
    cbfc:	1805883a 	mov	r2,r3
    cc00:	dfc00317 	ldw	ra,12(sp)
    cc04:	dc400217 	ldw	r17,8(sp)
    cc08:	dc000117 	ldw	r16,4(sp)
    cc0c:	dec00404 	addi	sp,sp,16
    cc10:	f800283a 	ret
    cc14:	d9800015 	stw	r6,0(sp)
    cc18:	0004c940 	call	4c94 <__sinit>
    cc1c:	d9800017 	ldw	r6,0(sp)
    cc20:	30800217 	ldw	r2,8(r6)
    cc24:	10ffffc4 	addi	r3,r2,-1
    cc28:	30c00215 	stw	r3,8(r6)
    cc2c:	183fed0e 	bge	r3,zero,cbe4 <_putc_r+0x34>
    cc30:	30800617 	ldw	r2,24(r6)
    cc34:	18800e16 	blt	r3,r2,cc70 <_putc_r+0xc0>
    cc38:	30800017 	ldw	r2,0(r6)
    cc3c:	14400005 	stb	r17,0(r2)
    cc40:	31000017 	ldw	r4,0(r6)
    cc44:	00800284 	movi	r2,10
    cc48:	20c00003 	ldbu	r3,0(r4)
    cc4c:	18800f26 	beq	r3,r2,cc8c <_putc_r+0xdc>
    cc50:	20800044 	addi	r2,r4,1
    cc54:	30800015 	stw	r2,0(r6)
    cc58:	1805883a 	mov	r2,r3
    cc5c:	dfc00317 	ldw	ra,12(sp)
    cc60:	dc400217 	ldw	r17,8(sp)
    cc64:	dc000117 	ldw	r16,4(sp)
    cc68:	dec00404 	addi	sp,sp,16
    cc6c:	f800283a 	ret
    cc70:	8009883a 	mov	r4,r16
    cc74:	880b883a 	mov	r5,r17
    cc78:	dfc00317 	ldw	ra,12(sp)
    cc7c:	dc400217 	ldw	r17,8(sp)
    cc80:	dc000117 	ldw	r16,4(sp)
    cc84:	dec00404 	addi	sp,sp,16
    cc88:	000cc981 	jmpi	cc98 <__swbuf_r>
    cc8c:	8009883a 	mov	r4,r16
    cc90:	180b883a 	mov	r5,r3
    cc94:	003ff806 	br	cc78 <_putc_r+0xc8>

0000cc98 <__swbuf_r>:
    cc98:	defffc04 	addi	sp,sp,-16
    cc9c:	dc400215 	stw	r17,8(sp)
    cca0:	dc000115 	stw	r16,4(sp)
    cca4:	dfc00315 	stw	ra,12(sp)
    cca8:	2023883a 	mov	r17,r4
    ccac:	2821883a 	mov	r16,r5
    ccb0:	20000226 	beq	r4,zero,ccbc <__swbuf_r+0x24>
    ccb4:	20800e17 	ldw	r2,56(r4)
    ccb8:	10002f26 	beq	r2,zero,cd78 <__swbuf_r+0xe0>
    ccbc:	3080030b 	ldhu	r2,12(r6)
    ccc0:	30c00617 	ldw	r3,24(r6)
    ccc4:	1080020c 	andi	r2,r2,8
    ccc8:	30c00215 	stw	r3,8(r6)
    cccc:	10002226 	beq	r2,zero,cd58 <__swbuf_r+0xc0>
    ccd0:	30c00417 	ldw	r3,16(r6)
    ccd4:	18002026 	beq	r3,zero,cd58 <__swbuf_r+0xc0>
    ccd8:	31000017 	ldw	r4,0(r6)
    ccdc:	30800517 	ldw	r2,20(r6)
    cce0:	20c7c83a 	sub	r3,r4,r3
    cce4:	18802f0e 	bge	r3,r2,cda4 <__swbuf_r+0x10c>
    cce8:	19400044 	addi	r5,r3,1
    ccec:	30800217 	ldw	r2,8(r6)
    ccf0:	84003fcc 	andi	r16,r16,255
    ccf4:	20c00044 	addi	r3,r4,1
    ccf8:	10bfffc4 	addi	r2,r2,-1
    ccfc:	30800215 	stw	r2,8(r6)
    cd00:	24000005 	stb	r16,0(r4)
    cd04:	30800517 	ldw	r2,20(r6)
    cd08:	30c00015 	stw	r3,0(r6)
    cd0c:	11400c26 	beq	r2,r5,cd40 <__swbuf_r+0xa8>
    cd10:	3080030b 	ldhu	r2,12(r6)
    cd14:	1080004c 	andi	r2,r2,1
    cd18:	1005003a 	cmpeq	r2,r2,zero
    cd1c:	10000626 	beq	r2,zero,cd38 <__swbuf_r+0xa0>
    cd20:	8005883a 	mov	r2,r16
    cd24:	dfc00317 	ldw	ra,12(sp)
    cd28:	dc400217 	ldw	r17,8(sp)
    cd2c:	dc000117 	ldw	r16,4(sp)
    cd30:	dec00404 	addi	sp,sp,16
    cd34:	f800283a 	ret
    cd38:	00800284 	movi	r2,10
    cd3c:	80bff81e 	bne	r16,r2,cd20 <__swbuf_r+0x88>
    cd40:	8809883a 	mov	r4,r17
    cd44:	300b883a 	mov	r5,r6
    cd48:	00049fc0 	call	49fc <_fflush_r>
    cd4c:	103ff426 	beq	r2,zero,cd20 <__swbuf_r+0x88>
    cd50:	043fffc4 	movi	r16,-1
    cd54:	003ff206 	br	cd20 <__swbuf_r+0x88>
    cd58:	300b883a 	mov	r5,r6
    cd5c:	8809883a 	mov	r4,r17
    cd60:	d9800015 	stw	r6,0(sp)
    cd64:	00030c80 	call	30c8 <__swsetup_r>
    cd68:	d9800017 	ldw	r6,0(sp)
    cd6c:	1000061e 	bne	r2,zero,cd88 <__swbuf_r+0xf0>
    cd70:	30c00417 	ldw	r3,16(r6)
    cd74:	003fd806 	br	ccd8 <__swbuf_r+0x40>
    cd78:	d9800015 	stw	r6,0(sp)
    cd7c:	0004c940 	call	4c94 <__sinit>
    cd80:	d9800017 	ldw	r6,0(sp)
    cd84:	003fcd06 	br	ccbc <__swbuf_r+0x24>
    cd88:	3080030b 	ldhu	r2,12(r6)
    cd8c:	00c00244 	movi	r3,9
    cd90:	043fffc4 	movi	r16,-1
    cd94:	10801014 	ori	r2,r2,64
    cd98:	3080030d 	sth	r2,12(r6)
    cd9c:	88c00015 	stw	r3,0(r17)
    cda0:	003fdf06 	br	cd20 <__swbuf_r+0x88>
    cda4:	300b883a 	mov	r5,r6
    cda8:	8809883a 	mov	r4,r17
    cdac:	d9800015 	stw	r6,0(sp)
    cdb0:	00049fc0 	call	49fc <_fflush_r>
    cdb4:	d9800017 	ldw	r6,0(sp)
    cdb8:	103fe51e 	bne	r2,zero,cd50 <__swbuf_r+0xb8>
    cdbc:	31000017 	ldw	r4,0(r6)
    cdc0:	01400044 	movi	r5,1
    cdc4:	003fc906 	br	ccec <__swbuf_r+0x54>

0000cdc8 <__swbuf>:
    cdc8:	01800074 	movhi	r6,1
    cdcc:	31bbb804 	addi	r6,r6,-4384
    cdd0:	2007883a 	mov	r3,r4
    cdd4:	31000017 	ldw	r4,0(r6)
    cdd8:	280d883a 	mov	r6,r5
    cddc:	180b883a 	mov	r5,r3
    cde0:	000cc981 	jmpi	cc98 <__swbuf_r>

0000cde4 <__register_exitproc>:
    cde4:	defffa04 	addi	sp,sp,-24
    cde8:	00800074 	movhi	r2,1
    cdec:	10bbb904 	addi	r2,r2,-4380
    cdf0:	dc000015 	stw	r16,0(sp)
    cdf4:	14000017 	ldw	r16,0(r2)
    cdf8:	dd000415 	stw	r20,16(sp)
    cdfc:	2829883a 	mov	r20,r5
    ce00:	81405217 	ldw	r5,328(r16)
    ce04:	dcc00315 	stw	r19,12(sp)
    ce08:	dc800215 	stw	r18,8(sp)
    ce0c:	dc400115 	stw	r17,4(sp)
    ce10:	dfc00515 	stw	ra,20(sp)
    ce14:	2023883a 	mov	r17,r4
    ce18:	3027883a 	mov	r19,r6
    ce1c:	3825883a 	mov	r18,r7
    ce20:	28002526 	beq	r5,zero,ceb8 <__register_exitproc+0xd4>
    ce24:	29000117 	ldw	r4,4(r5)
    ce28:	008007c4 	movi	r2,31
    ce2c:	11002716 	blt	r2,r4,cecc <__register_exitproc+0xe8>
    ce30:	8800101e 	bne	r17,zero,ce74 <__register_exitproc+0x90>
    ce34:	2105883a 	add	r2,r4,r4
    ce38:	1085883a 	add	r2,r2,r2
    ce3c:	20c00044 	addi	r3,r4,1
    ce40:	1145883a 	add	r2,r2,r5
    ce44:	0009883a 	mov	r4,zero
    ce48:	15000215 	stw	r20,8(r2)
    ce4c:	28c00115 	stw	r3,4(r5)
    ce50:	2005883a 	mov	r2,r4
    ce54:	dfc00517 	ldw	ra,20(sp)
    ce58:	dd000417 	ldw	r20,16(sp)
    ce5c:	dcc00317 	ldw	r19,12(sp)
    ce60:	dc800217 	ldw	r18,8(sp)
    ce64:	dc400117 	ldw	r17,4(sp)
    ce68:	dc000017 	ldw	r16,0(sp)
    ce6c:	dec00604 	addi	sp,sp,24
    ce70:	f800283a 	ret
    ce74:	29802204 	addi	r6,r5,136
    ce78:	00800044 	movi	r2,1
    ce7c:	110e983a 	sll	r7,r2,r4
    ce80:	30c04017 	ldw	r3,256(r6)
    ce84:	2105883a 	add	r2,r4,r4
    ce88:	1085883a 	add	r2,r2,r2
    ce8c:	1185883a 	add	r2,r2,r6
    ce90:	19c6b03a 	or	r3,r3,r7
    ce94:	14802015 	stw	r18,128(r2)
    ce98:	14c00015 	stw	r19,0(r2)
    ce9c:	00800084 	movi	r2,2
    cea0:	30c04015 	stw	r3,256(r6)
    cea4:	88bfe31e 	bne	r17,r2,ce34 <__register_exitproc+0x50>
    cea8:	30804117 	ldw	r2,260(r6)
    ceac:	11c4b03a 	or	r2,r2,r7
    ceb0:	30804115 	stw	r2,260(r6)
    ceb4:	003fdf06 	br	ce34 <__register_exitproc+0x50>
    ceb8:	00800074 	movhi	r2,1
    cebc:	10830504 	addi	r2,r2,3092
    cec0:	100b883a 	mov	r5,r2
    cec4:	80805215 	stw	r2,328(r16)
    cec8:	003fd606 	br	ce24 <__register_exitproc+0x40>
    cecc:	00800034 	movhi	r2,0
    ced0:	10820904 	addi	r2,r2,2084
    ced4:	1000021e 	bne	r2,zero,cee0 <__register_exitproc+0xfc>
    ced8:	013fffc4 	movi	r4,-1
    cedc:	003fdc06 	br	ce50 <__register_exitproc+0x6c>
    cee0:	01006404 	movi	r4,400
    cee4:	103ee83a 	callr	r2
    cee8:	1007883a 	mov	r3,r2
    ceec:	103ffa26 	beq	r2,zero,ced8 <__register_exitproc+0xf4>
    cef0:	80805217 	ldw	r2,328(r16)
    cef4:	180b883a 	mov	r5,r3
    cef8:	18000115 	stw	zero,4(r3)
    cefc:	18800015 	stw	r2,0(r3)
    cf00:	80c05215 	stw	r3,328(r16)
    cf04:	18006215 	stw	zero,392(r3)
    cf08:	18006315 	stw	zero,396(r3)
    cf0c:	0009883a 	mov	r4,zero
    cf10:	883fc826 	beq	r17,zero,ce34 <__register_exitproc+0x50>
    cf14:	003fd706 	br	ce74 <__register_exitproc+0x90>

0000cf18 <register_fini>:
    cf18:	f800283a 	ret

0000cf1c <__call_exitprocs>:
    cf1c:	00800074 	movhi	r2,1
    cf20:	10bbb904 	addi	r2,r2,-4380
    cf24:	10800017 	ldw	r2,0(r2)
    cf28:	defff304 	addi	sp,sp,-52
    cf2c:	df000b15 	stw	fp,44(sp)
    cf30:	d8800115 	stw	r2,4(sp)
    cf34:	00800034 	movhi	r2,0
    cf38:	10820404 	addi	r2,r2,2064
    cf3c:	1005003a 	cmpeq	r2,r2,zero
    cf40:	d8800215 	stw	r2,8(sp)
    cf44:	d8800117 	ldw	r2,4(sp)
    cf48:	dd400815 	stw	r21,32(sp)
    cf4c:	dd000715 	stw	r20,28(sp)
    cf50:	10805204 	addi	r2,r2,328
    cf54:	dfc00c15 	stw	ra,48(sp)
    cf58:	ddc00a15 	stw	r23,40(sp)
    cf5c:	dd800915 	stw	r22,36(sp)
    cf60:	dcc00615 	stw	r19,24(sp)
    cf64:	dc800515 	stw	r18,20(sp)
    cf68:	dc400415 	stw	r17,16(sp)
    cf6c:	dc000315 	stw	r16,12(sp)
    cf70:	282b883a 	mov	r21,r5
    cf74:	2039883a 	mov	fp,r4
    cf78:	d8800015 	stw	r2,0(sp)
    cf7c:	2829003a 	cmpeq	r20,r5,zero
    cf80:	d8800117 	ldw	r2,4(sp)
    cf84:	14405217 	ldw	r17,328(r2)
    cf88:	88001026 	beq	r17,zero,cfcc <__call_exitprocs+0xb0>
    cf8c:	ddc00017 	ldw	r23,0(sp)
    cf90:	88800117 	ldw	r2,4(r17)
    cf94:	8c802204 	addi	r18,r17,136
    cf98:	143fffc4 	addi	r16,r2,-1
    cf9c:	80000916 	blt	r16,zero,cfc4 <__call_exitprocs+0xa8>
    cfa0:	05bfffc4 	movi	r22,-1
    cfa4:	a000151e 	bne	r20,zero,cffc <__call_exitprocs+0xe0>
    cfa8:	8409883a 	add	r4,r16,r16
    cfac:	2105883a 	add	r2,r4,r4
    cfb0:	1485883a 	add	r2,r2,r18
    cfb4:	10c02017 	ldw	r3,128(r2)
    cfb8:	a8c01126 	beq	r21,r3,d000 <__call_exitprocs+0xe4>
    cfbc:	843fffc4 	addi	r16,r16,-1
    cfc0:	85bff81e 	bne	r16,r22,cfa4 <__call_exitprocs+0x88>
    cfc4:	d8800217 	ldw	r2,8(sp)
    cfc8:	10003126 	beq	r2,zero,d090 <__call_exitprocs+0x174>
    cfcc:	dfc00c17 	ldw	ra,48(sp)
    cfd0:	df000b17 	ldw	fp,44(sp)
    cfd4:	ddc00a17 	ldw	r23,40(sp)
    cfd8:	dd800917 	ldw	r22,36(sp)
    cfdc:	dd400817 	ldw	r21,32(sp)
    cfe0:	dd000717 	ldw	r20,28(sp)
    cfe4:	dcc00617 	ldw	r19,24(sp)
    cfe8:	dc800517 	ldw	r18,20(sp)
    cfec:	dc400417 	ldw	r17,16(sp)
    cff0:	dc000317 	ldw	r16,12(sp)
    cff4:	dec00d04 	addi	sp,sp,52
    cff8:	f800283a 	ret
    cffc:	8409883a 	add	r4,r16,r16
    d000:	88c00117 	ldw	r3,4(r17)
    d004:	2105883a 	add	r2,r4,r4
    d008:	1445883a 	add	r2,r2,r17
    d00c:	18ffffc4 	addi	r3,r3,-1
    d010:	11800217 	ldw	r6,8(r2)
    d014:	1c001526 	beq	r3,r16,d06c <__call_exitprocs+0x150>
    d018:	10000215 	stw	zero,8(r2)
    d01c:	303fe726 	beq	r6,zero,cfbc <__call_exitprocs+0xa0>
    d020:	00c00044 	movi	r3,1
    d024:	1c06983a 	sll	r3,r3,r16
    d028:	90804017 	ldw	r2,256(r18)
    d02c:	8cc00117 	ldw	r19,4(r17)
    d030:	1884703a 	and	r2,r3,r2
    d034:	10001426 	beq	r2,zero,d088 <__call_exitprocs+0x16c>
    d038:	90804117 	ldw	r2,260(r18)
    d03c:	1884703a 	and	r2,r3,r2
    d040:	10000c1e 	bne	r2,zero,d074 <__call_exitprocs+0x158>
    d044:	2105883a 	add	r2,r4,r4
    d048:	1485883a 	add	r2,r2,r18
    d04c:	11400017 	ldw	r5,0(r2)
    d050:	e009883a 	mov	r4,fp
    d054:	303ee83a 	callr	r6
    d058:	88800117 	ldw	r2,4(r17)
    d05c:	98bfc81e 	bne	r19,r2,cf80 <__call_exitprocs+0x64>
    d060:	b8800017 	ldw	r2,0(r23)
    d064:	147fd526 	beq	r2,r17,cfbc <__call_exitprocs+0xa0>
    d068:	003fc506 	br	cf80 <__call_exitprocs+0x64>
    d06c:	8c000115 	stw	r16,4(r17)
    d070:	003fea06 	br	d01c <__call_exitprocs+0x100>
    d074:	2105883a 	add	r2,r4,r4
    d078:	1485883a 	add	r2,r2,r18
    d07c:	11000017 	ldw	r4,0(r2)
    d080:	303ee83a 	callr	r6
    d084:	003ff406 	br	d058 <__call_exitprocs+0x13c>
    d088:	303ee83a 	callr	r6
    d08c:	003ff206 	br	d058 <__call_exitprocs+0x13c>
    d090:	88800117 	ldw	r2,4(r17)
    d094:	1000081e 	bne	r2,zero,d0b8 <__call_exitprocs+0x19c>
    d098:	89000017 	ldw	r4,0(r17)
    d09c:	20000726 	beq	r4,zero,d0bc <__call_exitprocs+0x1a0>
    d0a0:	b9000015 	stw	r4,0(r23)
    d0a4:	8809883a 	mov	r4,r17
    d0a8:	00008100 	call	810 <free>
    d0ac:	bc400017 	ldw	r17,0(r23)
    d0b0:	883fb71e 	bne	r17,zero,cf90 <__call_exitprocs+0x74>
    d0b4:	003fc506 	br	cfcc <__call_exitprocs+0xb0>
    d0b8:	89000017 	ldw	r4,0(r17)
    d0bc:	882f883a 	mov	r23,r17
    d0c0:	2023883a 	mov	r17,r4
    d0c4:	883fb21e 	bne	r17,zero,cf90 <__call_exitprocs+0x74>
    d0c8:	003fc006 	br	cfcc <__call_exitprocs+0xb0>

0000d0cc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    d0cc:	defffd04 	addi	sp,sp,-12
    d0d0:	df000215 	stw	fp,8(sp)
    d0d4:	df000204 	addi	fp,sp,8
    d0d8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    d0dc:	e0bfff17 	ldw	r2,-4(fp)
    d0e0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d0e4:	e0bffe17 	ldw	r2,-8(fp)
    d0e8:	1005003a 	cmpeq	r2,r2,zero
    d0ec:	1000021e 	bne	r2,zero,d0f8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    d0f0:	002af070 	cmpltui	zero,zero,43969
    d0f4:	00000106 	br	d0fc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    d0f8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    d0fc:	e037883a 	mov	sp,fp
    d100:	df000017 	ldw	fp,0(sp)
    d104:	dec00104 	addi	sp,sp,4
    d108:	f800283a 	ret

0000d10c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d10c:	defffd04 	addi	sp,sp,-12
    d110:	dfc00215 	stw	ra,8(sp)
    d114:	df000115 	stw	fp,4(sp)
    d118:	df000104 	addi	fp,sp,4
    d11c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    d120:	e13fff17 	ldw	r4,-4(fp)
    d124:	000d0cc0 	call	d0cc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d128:	003fff06 	br	d128 <_exit+0x1c>
    d12c:	0000cf18 	cmpnei	zero,zero,828
