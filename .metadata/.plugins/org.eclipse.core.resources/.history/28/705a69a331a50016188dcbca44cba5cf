
struct thread{
	int id;
	int stack_address;
	int stack_size;
	int stack_pointer;
	int state;
	int priority;
};

int numthreads =0;
struct thread threads[50];
void initialize_thread(){

	threads[numthreads].stack_size = 700;
	threads[numthreads].stack_address = malloc(newT.stack_size);
	threads[numthreads].stack_pointer = threads[numthreads].stack_address-threads[numthreads].stack_size/2;
	threads[numthreads].state = 0;
	threads[numthreads].priority=0;
	numthreads++;
}
int current_thread = 0;
int my_scheduler(int ra){
	threads[current_thread]->stack_pointer= ra;
	current_thread = (current_thread+1)%50;
	return threads[current_thread];

}
